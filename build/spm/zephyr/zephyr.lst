
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010200 <_vector_table>:
   10200:	f8 24 00 20 15 21 01 00 41 81 01 00 e9 20 01 00     .$. .!..A.... ..
   10210:	e9 20 01 00 e9 20 01 00 e9 20 01 00 e9 20 01 00     . ... ... ... ..
	...
   1022c:	d5 1a 01 00 e9 20 01 00 00 00 00 00 7d 1a 01 00     ..... ......}...
   1023c:	51 2d 01 00                                         Q-..

00010240 <_irq_vector_table>:
   10240:	55 1b 01 00 55 1b 01 00 55 1b 01 00 55 1b 01 00     U...U...U...U...
   10250:	55 1b 01 00 55 1b 01 00 55 1b 01 00 55 1b 01 00     U...U...U...U...
   10260:	55 1b 01 00 55 1b 01 00 55 1b 01 00 55 1b 01 00     U...U...U...U...
   10270:	55 1b 01 00 55 1b 01 00 55 1b 01 00 55 1b 01 00     U...U...U...U...
   10280:	55 1b 01 00 55 1b 01 00 55 1b 01 00 55 1b 01 00     U...U...U...U...
   10290:	55 1b 01 00 55 1b 01 00 55 1b 01 00 55 1b 01 00     U...U...U...U...
   102a0:	55 1b 01 00 55 1b 01 00 55 1b 01 00 55 1b 01 00     U...U...U...U...
   102b0:	55 1b 01 00 55 1b 01 00 55 1b 01 00 55 1b 01 00     U...U...U...U...
   102c0:	55 1b 01 00 55 1b 01 00 55 1b 01 00 55 1b 01 00     U...U...U...U...
   102d0:	55 1b 01 00 55 1b 01 00 55 1b 01 00 55 1b 01 00     U...U...U...U...
   102e0:	55 1b 01 00 55 1b 01 00 55 1b 01 00 55 1b 01 00     U...U...U...U...
   102f0:	55 1b 01 00 55 1b 01 00 55 1b 01 00 55 1b 01 00     U...U...U...U...
   10300:	55 1b 01 00 55 1b 01 00 55 1b 01 00 55 1b 01 00     U...U...U...U...
   10310:	55 1b 01 00 55 1b 01 00 55 1b 01 00 55 1b 01 00     U...U...U...U...
   10320:	55 1b 01 00 55 1b 01 00 55 1b 01 00 55 1b 01 00     U...U...U...U...
   10330:	55 1b 01 00 55 1b 01 00 55 1b 01 00 55 1b 01 00     U...U...U...U...
   10340:	55 1b 01 00                                         U...

00010344 <_vector_end>:
	...

00010400 <m_firmware_info>:
   10400:	de e6 1e 28 4c bb ce 8f 02 5b 00 00 3c 00 00 00     ...(L....[..<...
   10410:	00 fe 00 00 01 00 00 00 00 02 01 00 00 02 01 00     ................
   10420:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

0001043c <__aeabi_uldivmod>:
   1043c:	b953      	cbnz	r3, 10454 <__aeabi_uldivmod+0x18>
   1043e:	b94a      	cbnz	r2, 10454 <__aeabi_uldivmod+0x18>
   10440:	2900      	cmp	r1, #0
   10442:	bf08      	it	eq
   10444:	2800      	cmpeq	r0, #0
   10446:	bf1c      	itt	ne
   10448:	f04f 31ff 	movne.w	r1, #4294967295
   1044c:	f04f 30ff 	movne.w	r0, #4294967295
   10450:	f000 b80c 	b.w	1046c <__aeabi_idiv0>
   10454:	f1ad 0c08 	sub.w	ip, sp, #8
   10458:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1045c:	f000 f824 	bl	104a8 <__udivmoddi4>
   10460:	f8dd e004 	ldr.w	lr, [sp, #4]
   10464:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10468:	b004      	add	sp, #16
   1046a:	4770      	bx	lr

0001046c <__aeabi_idiv0>:
   1046c:	4770      	bx	lr
   1046e:	bf00      	nop

00010470 <__gnu_cmse_nonsecure_call>:
   10470:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
   10474:	4627      	mov	r7, r4
   10476:	46a0      	mov	r8, r4
   10478:	46a1      	mov	r9, r4
   1047a:	46a2      	mov	sl, r4
   1047c:	46a3      	mov	fp, r4
   1047e:	46a4      	mov	ip, r4
   10480:	b0a2      	sub	sp, #136	; 0x88
   10482:	ec2d 0a00 	vlstm	sp
   10486:	f384 8800 	msr	CPSR_f, r4
   1048a:	4625      	mov	r5, r4
   1048c:	4626      	mov	r6, r4
   1048e:	47a4      	blxns	r4
   10490:	f3ef 8514 	mrs	r5, CONTROL
   10494:	f015 0f08 	tst.w	r5, #8
   10498:	bf18      	it	ne
   1049a:	eeb0 0a40 	vmovne.f32	s0, s0
   1049e:	ec3d 0a00 	vlldm	sp
   104a2:	b022      	add	sp, #136	; 0x88
   104a4:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

000104a8 <__udivmoddi4>:
   104a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   104ac:	4607      	mov	r7, r0
   104ae:	468c      	mov	ip, r1
   104b0:	4608      	mov	r0, r1
   104b2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   104b4:	4615      	mov	r5, r2
   104b6:	463c      	mov	r4, r7
   104b8:	4619      	mov	r1, r3
   104ba:	2b00      	cmp	r3, #0
   104bc:	f040 80c5 	bne.w	1064a <__udivmoddi4+0x1a2>
   104c0:	4282      	cmp	r2, r0
   104c2:	fab2 f782 	clz	r7, r2
   104c6:	d946      	bls.n	10556 <__udivmoddi4+0xae>
   104c8:	b14f      	cbz	r7, 104de <__udivmoddi4+0x36>
   104ca:	f1c7 0e20 	rsb	lr, r7, #32
   104ce:	fa00 f307 	lsl.w	r3, r0, r7
   104d2:	40bd      	lsls	r5, r7
   104d4:	fa24 fe0e 	lsr.w	lr, r4, lr
   104d8:	40bc      	lsls	r4, r7
   104da:	ea4e 0c03 	orr.w	ip, lr, r3
   104de:	ea4f 4815 	mov.w	r8, r5, lsr #16
   104e2:	fa1f fe85 	uxth.w	lr, r5
   104e6:	0c22      	lsrs	r2, r4, #16
   104e8:	fbbc f9f8 	udiv	r9, ip, r8
   104ec:	fb08 c319 	mls	r3, r8, r9, ip
   104f0:	fb09 fa0e 	mul.w	sl, r9, lr
   104f4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   104f8:	459a      	cmp	sl, r3
   104fa:	d928      	bls.n	1054e <__udivmoddi4+0xa6>
   104fc:	18eb      	adds	r3, r5, r3
   104fe:	f109 30ff 	add.w	r0, r9, #4294967295
   10502:	d204      	bcs.n	1050e <__udivmoddi4+0x66>
   10504:	459a      	cmp	sl, r3
   10506:	d902      	bls.n	1050e <__udivmoddi4+0x66>
   10508:	f1a9 0002 	sub.w	r0, r9, #2
   1050c:	442b      	add	r3, r5
   1050e:	eba3 030a 	sub.w	r3, r3, sl
   10512:	b2a4      	uxth	r4, r4
   10514:	fbb3 f2f8 	udiv	r2, r3, r8
   10518:	fb08 3312 	mls	r3, r8, r2, r3
   1051c:	fb02 fe0e 	mul.w	lr, r2, lr
   10520:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   10524:	45a6      	cmp	lr, r4
   10526:	d914      	bls.n	10552 <__udivmoddi4+0xaa>
   10528:	192c      	adds	r4, r5, r4
   1052a:	f102 33ff 	add.w	r3, r2, #4294967295
   1052e:	d203      	bcs.n	10538 <__udivmoddi4+0x90>
   10530:	45a6      	cmp	lr, r4
   10532:	d901      	bls.n	10538 <__udivmoddi4+0x90>
   10534:	1e93      	subs	r3, r2, #2
   10536:	442c      	add	r4, r5
   10538:	eba4 040e 	sub.w	r4, r4, lr
   1053c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   10540:	b11e      	cbz	r6, 1054a <__udivmoddi4+0xa2>
   10542:	40fc      	lsrs	r4, r7
   10544:	2300      	movs	r3, #0
   10546:	6034      	str	r4, [r6, #0]
   10548:	6073      	str	r3, [r6, #4]
   1054a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1054e:	4648      	mov	r0, r9
   10550:	e7dd      	b.n	1050e <__udivmoddi4+0x66>
   10552:	4613      	mov	r3, r2
   10554:	e7f0      	b.n	10538 <__udivmoddi4+0x90>
   10556:	b902      	cbnz	r2, 1055a <__udivmoddi4+0xb2>
   10558:	deff      	udf	#255	; 0xff
   1055a:	bb87      	cbnz	r7, 105be <__udivmoddi4+0x116>
   1055c:	1a83      	subs	r3, r0, r2
   1055e:	2101      	movs	r1, #1
   10560:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   10564:	b2aa      	uxth	r2, r5
   10566:	0c20      	lsrs	r0, r4, #16
   10568:	fbb3 fcfe 	udiv	ip, r3, lr
   1056c:	fb0e 331c 	mls	r3, lr, ip, r3
   10570:	fb0c f802 	mul.w	r8, ip, r2
   10574:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   10578:	4598      	cmp	r8, r3
   1057a:	d962      	bls.n	10642 <__udivmoddi4+0x19a>
   1057c:	18eb      	adds	r3, r5, r3
   1057e:	f10c 30ff 	add.w	r0, ip, #4294967295
   10582:	d204      	bcs.n	1058e <__udivmoddi4+0xe6>
   10584:	4598      	cmp	r8, r3
   10586:	d902      	bls.n	1058e <__udivmoddi4+0xe6>
   10588:	f1ac 0002 	sub.w	r0, ip, #2
   1058c:	442b      	add	r3, r5
   1058e:	eba3 0308 	sub.w	r3, r3, r8
   10592:	b2a4      	uxth	r4, r4
   10594:	fbb3 fcfe 	udiv	ip, r3, lr
   10598:	fb0e 331c 	mls	r3, lr, ip, r3
   1059c:	fb0c f202 	mul.w	r2, ip, r2
   105a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   105a4:	42a2      	cmp	r2, r4
   105a6:	d94e      	bls.n	10646 <__udivmoddi4+0x19e>
   105a8:	192c      	adds	r4, r5, r4
   105aa:	f10c 33ff 	add.w	r3, ip, #4294967295
   105ae:	d204      	bcs.n	105ba <__udivmoddi4+0x112>
   105b0:	42a2      	cmp	r2, r4
   105b2:	d902      	bls.n	105ba <__udivmoddi4+0x112>
   105b4:	f1ac 0302 	sub.w	r3, ip, #2
   105b8:	442c      	add	r4, r5
   105ba:	1aa4      	subs	r4, r4, r2
   105bc:	e7be      	b.n	1053c <__udivmoddi4+0x94>
   105be:	f1c7 0c20 	rsb	ip, r7, #32
   105c2:	40bd      	lsls	r5, r7
   105c4:	fa00 f307 	lsl.w	r3, r0, r7
   105c8:	fa20 f80c 	lsr.w	r8, r0, ip
   105cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   105d0:	fa24 fc0c 	lsr.w	ip, r4, ip
   105d4:	40bc      	lsls	r4, r7
   105d6:	ea4c 0203 	orr.w	r2, ip, r3
   105da:	b2ab      	uxth	r3, r5
   105dc:	fbb8 fcfe 	udiv	ip, r8, lr
   105e0:	0c11      	lsrs	r1, r2, #16
   105e2:	fb0e 801c 	mls	r0, lr, ip, r8
   105e6:	fb0c f903 	mul.w	r9, ip, r3
   105ea:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
   105ee:	4581      	cmp	r9, r0
   105f0:	d923      	bls.n	1063a <__udivmoddi4+0x192>
   105f2:	1828      	adds	r0, r5, r0
   105f4:	f10c 31ff 	add.w	r1, ip, #4294967295
   105f8:	d204      	bcs.n	10604 <__udivmoddi4+0x15c>
   105fa:	4581      	cmp	r9, r0
   105fc:	d902      	bls.n	10604 <__udivmoddi4+0x15c>
   105fe:	f1ac 0102 	sub.w	r1, ip, #2
   10602:	4428      	add	r0, r5
   10604:	eba0 0009 	sub.w	r0, r0, r9
   10608:	b292      	uxth	r2, r2
   1060a:	fbb0 fcfe 	udiv	ip, r0, lr
   1060e:	fb0e 001c 	mls	r0, lr, ip, r0
   10612:	fb0c f803 	mul.w	r8, ip, r3
   10616:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
   1061a:	4598      	cmp	r8, r3
   1061c:	d90f      	bls.n	1063e <__udivmoddi4+0x196>
   1061e:	18eb      	adds	r3, r5, r3
   10620:	f10c 32ff 	add.w	r2, ip, #4294967295
   10624:	d204      	bcs.n	10630 <__udivmoddi4+0x188>
   10626:	4598      	cmp	r8, r3
   10628:	d902      	bls.n	10630 <__udivmoddi4+0x188>
   1062a:	f1ac 0202 	sub.w	r2, ip, #2
   1062e:	442b      	add	r3, r5
   10630:	eba3 0308 	sub.w	r3, r3, r8
   10634:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   10638:	e792      	b.n	10560 <__udivmoddi4+0xb8>
   1063a:	4661      	mov	r1, ip
   1063c:	e7e2      	b.n	10604 <__udivmoddi4+0x15c>
   1063e:	4662      	mov	r2, ip
   10640:	e7f6      	b.n	10630 <__udivmoddi4+0x188>
   10642:	4660      	mov	r0, ip
   10644:	e7a3      	b.n	1058e <__udivmoddi4+0xe6>
   10646:	4663      	mov	r3, ip
   10648:	e7b7      	b.n	105ba <__udivmoddi4+0x112>
   1064a:	4283      	cmp	r3, r0
   1064c:	d905      	bls.n	1065a <__udivmoddi4+0x1b2>
   1064e:	b10e      	cbz	r6, 10654 <__udivmoddi4+0x1ac>
   10650:	e9c6 7000 	strd	r7, r0, [r6]
   10654:	2100      	movs	r1, #0
   10656:	4608      	mov	r0, r1
   10658:	e777      	b.n	1054a <__udivmoddi4+0xa2>
   1065a:	fab3 f183 	clz	r1, r3
   1065e:	b981      	cbnz	r1, 10682 <__udivmoddi4+0x1da>
   10660:	4283      	cmp	r3, r0
   10662:	d301      	bcc.n	10668 <__udivmoddi4+0x1c0>
   10664:	42ba      	cmp	r2, r7
   10666:	d80a      	bhi.n	1067e <__udivmoddi4+0x1d6>
   10668:	1abc      	subs	r4, r7, r2
   1066a:	eb60 0303 	sbc.w	r3, r0, r3
   1066e:	2001      	movs	r0, #1
   10670:	469c      	mov	ip, r3
   10672:	2e00      	cmp	r6, #0
   10674:	d067      	beq.n	10746 <__udivmoddi4+0x29e>
   10676:	e9c6 4c00 	strd	r4, ip, [r6]
   1067a:	2100      	movs	r1, #0
   1067c:	e765      	b.n	1054a <__udivmoddi4+0xa2>
   1067e:	4608      	mov	r0, r1
   10680:	e7f7      	b.n	10672 <__udivmoddi4+0x1ca>
   10682:	f1c1 0c20 	rsb	ip, r1, #32
   10686:	408b      	lsls	r3, r1
   10688:	fa02 f501 	lsl.w	r5, r2, r1
   1068c:	fa22 f40c 	lsr.w	r4, r2, ip
   10690:	fa20 fb0c 	lsr.w	fp, r0, ip
   10694:	fa27 f20c 	lsr.w	r2, r7, ip
   10698:	408f      	lsls	r7, r1
   1069a:	431c      	orrs	r4, r3
   1069c:	fa00 f301 	lsl.w	r3, r0, r1
   106a0:	ea4f 4914 	mov.w	r9, r4, lsr #16
   106a4:	4313      	orrs	r3, r2
   106a6:	fa1f fe84 	uxth.w	lr, r4
   106aa:	0c1a      	lsrs	r2, r3, #16
   106ac:	fbbb f8f9 	udiv	r8, fp, r9
   106b0:	fb09 bb18 	mls	fp, r9, r8, fp
   106b4:	fb08 fa0e 	mul.w	sl, r8, lr
   106b8:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
   106bc:	4592      	cmp	sl, r2
   106be:	d93e      	bls.n	1073e <__udivmoddi4+0x296>
   106c0:	18a2      	adds	r2, r4, r2
   106c2:	f108 30ff 	add.w	r0, r8, #4294967295
   106c6:	d204      	bcs.n	106d2 <__udivmoddi4+0x22a>
   106c8:	4592      	cmp	sl, r2
   106ca:	d902      	bls.n	106d2 <__udivmoddi4+0x22a>
   106cc:	f1a8 0002 	sub.w	r0, r8, #2
   106d0:	4422      	add	r2, r4
   106d2:	eba2 020a 	sub.w	r2, r2, sl
   106d6:	b29b      	uxth	r3, r3
   106d8:	fbb2 f8f9 	udiv	r8, r2, r9
   106dc:	fb09 2218 	mls	r2, r9, r8, r2
   106e0:	fb08 fe0e 	mul.w	lr, r8, lr
   106e4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   106e8:	4596      	cmp	lr, r2
   106ea:	d92a      	bls.n	10742 <__udivmoddi4+0x29a>
   106ec:	18a2      	adds	r2, r4, r2
   106ee:	f108 33ff 	add.w	r3, r8, #4294967295
   106f2:	d204      	bcs.n	106fe <__udivmoddi4+0x256>
   106f4:	4596      	cmp	lr, r2
   106f6:	d902      	bls.n	106fe <__udivmoddi4+0x256>
   106f8:	f1a8 0302 	sub.w	r3, r8, #2
   106fc:	4422      	add	r2, r4
   106fe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   10702:	eba2 020e 	sub.w	r2, r2, lr
   10706:	fba0 9305 	umull	r9, r3, r0, r5
   1070a:	429a      	cmp	r2, r3
   1070c:	46ce      	mov	lr, r9
   1070e:	4698      	mov	r8, r3
   10710:	d302      	bcc.n	10718 <__udivmoddi4+0x270>
   10712:	d106      	bne.n	10722 <__udivmoddi4+0x27a>
   10714:	454f      	cmp	r7, r9
   10716:	d204      	bcs.n	10722 <__udivmoddi4+0x27a>
   10718:	3801      	subs	r0, #1
   1071a:	ebb9 0e05 	subs.w	lr, r9, r5
   1071e:	eb63 0804 	sbc.w	r8, r3, r4
   10722:	b186      	cbz	r6, 10746 <__udivmoddi4+0x29e>
   10724:	ebb7 030e 	subs.w	r3, r7, lr
   10728:	eb62 0708 	sbc.w	r7, r2, r8
   1072c:	fa07 fc0c 	lsl.w	ip, r7, ip
   10730:	40cb      	lsrs	r3, r1
   10732:	40cf      	lsrs	r7, r1
   10734:	ea4c 0303 	orr.w	r3, ip, r3
   10738:	e9c6 3700 	strd	r3, r7, [r6]
   1073c:	e79d      	b.n	1067a <__udivmoddi4+0x1d2>
   1073e:	4640      	mov	r0, r8
   10740:	e7c7      	b.n	106d2 <__udivmoddi4+0x22a>
   10742:	4643      	mov	r3, r8
   10744:	e7db      	b.n	106fe <__udivmoddi4+0x256>
   10746:	4631      	mov	r1, r6
   10748:	e6ff      	b.n	1054a <__udivmoddi4+0xa2>
	...

0001074c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   1074c:	680b      	ldr	r3, [r1, #0]
   1074e:	3301      	adds	r3, #1
   10750:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   10752:	4b01      	ldr	r3, [pc, #4]	; (10758 <char_out+0xc>)
   10754:	681b      	ldr	r3, [r3, #0]
   10756:	4718      	bx	r3
   10758:	20000000 	.word	0x20000000

0001075c <__printk_hook_install>:
	_char_out = fn;
   1075c:	4b01      	ldr	r3, [pc, #4]	; (10764 <__printk_hook_install+0x8>)
   1075e:	6018      	str	r0, [r3, #0]
}
   10760:	4770      	bx	lr
   10762:	bf00      	nop
   10764:	20000000 	.word	0x20000000

00010768 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   10768:	b507      	push	{r0, r1, r2, lr}
   1076a:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
   1076c:	2100      	movs	r1, #0
{
   1076e:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
   10770:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
   10772:	4803      	ldr	r0, [pc, #12]	; (10780 <vprintk+0x18>)
   10774:	a901      	add	r1, sp, #4
   10776:	f000 f805 	bl	10784 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   1077a:	b003      	add	sp, #12
   1077c:	f85d fb04 	ldr.w	pc, [sp], #4
   10780:	0001074d 	.word	0x0001074d

00010784 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   10784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10788:	468b      	mov	fp, r1
   1078a:	4692      	mov	sl, r2
   1078c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1078e:	2500      	movs	r5, #0
{
   10790:	b091      	sub	sp, #68	; 0x44
   10792:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   10794:	f89a 0000 	ldrb.w	r0, [sl]
   10798:	b908      	cbnz	r0, 1079e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1079a:	4628      	mov	r0, r5
   1079c:	e35f      	b.n	10e5e <cbvprintf+0x6da>
		if (*fp != '%') {
   1079e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   107a0:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
   107a4:	d007      	beq.n	107b6 <cbvprintf+0x32>
			OUTC('%');
   107a6:	4659      	mov	r1, fp
   107a8:	9b02      	ldr	r3, [sp, #8]
   107aa:	4798      	blx	r3
   107ac:	2800      	cmp	r0, #0
   107ae:	f2c0 8356 	blt.w	10e5e <cbvprintf+0x6da>
   107b2:	3501      	adds	r5, #1
			break;
   107b4:	e212      	b.n	10bdc <cbvprintf+0x458>
		} state = {
   107b6:	2218      	movs	r2, #24
   107b8:	2100      	movs	r1, #0
   107ba:	a80a      	add	r0, sp, #40	; 0x28
   107bc:	f007 fd1d 	bl	181fa <memset>
	if (*sp == '%') {
   107c0:	f89a 3001 	ldrb.w	r3, [sl, #1]
   107c4:	2b25      	cmp	r3, #37	; 0x25
   107c6:	d078      	beq.n	108ba <cbvprintf+0x136>
   107c8:	2200      	movs	r2, #0
   107ca:	4610      	mov	r0, r2
   107cc:	4696      	mov	lr, r2
   107ce:	4694      	mov	ip, r2
   107d0:	4616      	mov	r6, r2
   107d2:	4639      	mov	r1, r7
		switch (*sp) {
   107d4:	f817 3b01 	ldrb.w	r3, [r7], #1
   107d8:	2b2b      	cmp	r3, #43	; 0x2b
   107da:	f000 809d 	beq.w	10918 <cbvprintf+0x194>
   107de:	f200 8094 	bhi.w	1090a <cbvprintf+0x186>
   107e2:	2b20      	cmp	r3, #32
   107e4:	f000 809b 	beq.w	1091e <cbvprintf+0x19a>
   107e8:	2b23      	cmp	r3, #35	; 0x23
   107ea:	f000 809b 	beq.w	10924 <cbvprintf+0x1a0>
   107ee:	b12e      	cbz	r6, 107fc <cbvprintf+0x78>
   107f0:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   107f4:	f046 0604 	orr.w	r6, r6, #4
   107f8:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   107fc:	f1bc 0f00 	cmp.w	ip, #0
   10800:	d005      	beq.n	1080e <cbvprintf+0x8a>
   10802:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   10806:	f046 0608 	orr.w	r6, r6, #8
   1080a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   1080e:	f1be 0f00 	cmp.w	lr, #0
   10812:	d005      	beq.n	10820 <cbvprintf+0x9c>
   10814:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   10818:	f046 0610 	orr.w	r6, r6, #16
   1081c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   10820:	b128      	cbz	r0, 1082e <cbvprintf+0xaa>
   10822:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   10826:	f040 0020 	orr.w	r0, r0, #32
   1082a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   1082e:	b12a      	cbz	r2, 1083c <cbvprintf+0xb8>
   10830:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   10834:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10838:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
   1083c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   10840:	f002 0044 	and.w	r0, r2, #68	; 0x44
   10844:	2844      	cmp	r0, #68	; 0x44
   10846:	d103      	bne.n	10850 <cbvprintf+0xcc>
		conv->flag_zero = false;
   10848:	f36f 1286 	bfc	r2, #6, #1
   1084c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
   10850:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   10854:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   10856:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1085a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   1085e:	d17b      	bne.n	10958 <cbvprintf+0x1d4>
		conv->width_star = true;
   10860:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
			++sp;
   10864:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   10866:	f042 0201 	orr.w	r2, r2, #1
   1086a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
   1086e:	781a      	ldrb	r2, [r3, #0]
   10870:	2a2e      	cmp	r2, #46	; 0x2e
   10872:	bf0c      	ite	eq
   10874:	2101      	moveq	r1, #1
   10876:	2100      	movne	r1, #0
   10878:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1087c:	f361 0241 	bfi	r2, r1, #1, #1
   10880:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   10884:	d174      	bne.n	10970 <cbvprintf+0x1ec>
	if (*sp == '*') {
   10886:	785a      	ldrb	r2, [r3, #1]
   10888:	2a2a      	cmp	r2, #42	; 0x2a
   1088a:	d06a      	beq.n	10962 <cbvprintf+0x1de>
	size_t val = 0;
   1088c:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   1088e:	260a      	movs	r6, #10
	++sp;
   10890:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   10892:	4618      	mov	r0, r3
   10894:	f810 2b01 	ldrb.w	r2, [r0], #1
   10898:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   1089c:	2f09      	cmp	r7, #9
   1089e:	f240 808e 	bls.w	109be <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
   108a2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
   108a6:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   108a8:	f3c2 0040 	ubfx	r0, r2, #1, #1
   108ac:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   108b0:	f361 0241 	bfi	r2, r1, #1, #1
   108b4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   108b8:	e05a      	b.n	10970 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
   108ba:	f10a 0702 	add.w	r7, sl, #2
   108be:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
   108c2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   108c6:	07d9      	lsls	r1, r3, #31
   108c8:	f140 8149 	bpl.w	10b5e <cbvprintf+0x3da>
			width = va_arg(ap, int);
   108cc:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   108d0:	f1b9 0f00 	cmp.w	r9, #0
   108d4:	da07      	bge.n	108e6 <cbvprintf+0x162>
				conv->flag_dash = true;
   108d6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
   108da:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
   108de:	f042 0204 	orr.w	r2, r2, #4
   108e2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
   108e6:	075a      	lsls	r2, r3, #29
   108e8:	f140 8142 	bpl.w	10b70 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
   108ec:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   108f0:	f1b8 0f00 	cmp.w	r8, #0
   108f4:	f280 8141 	bge.w	10b7a <cbvprintf+0x3f6>
				conv->prec_present = false;
   108f8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   108fc:	f36f 0341 	bfc	r3, #1, #1
   10900:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   10904:	f04f 38ff 	mov.w	r8, #4294967295
   10908:	e137      	b.n	10b7a <cbvprintf+0x3f6>
		switch (*sp) {
   1090a:	2b2d      	cmp	r3, #45	; 0x2d
   1090c:	d00c      	beq.n	10928 <cbvprintf+0x1a4>
   1090e:	2b30      	cmp	r3, #48	; 0x30
   10910:	f47f af6d 	bne.w	107ee <cbvprintf+0x6a>
			conv->flag_zero = true;
   10914:	2201      	movs	r2, #1
	} while (loop);
   10916:	e75c      	b.n	107d2 <cbvprintf+0x4e>
			conv->flag_plus = true;
   10918:	f04f 0c01 	mov.w	ip, #1
   1091c:	e759      	b.n	107d2 <cbvprintf+0x4e>
			conv->flag_space = true;
   1091e:	f04f 0e01 	mov.w	lr, #1
   10922:	e756      	b.n	107d2 <cbvprintf+0x4e>
			conv->flag_hash = true;
   10924:	2001      	movs	r0, #1
   10926:	e754      	b.n	107d2 <cbvprintf+0x4e>
		switch (*sp) {
   10928:	2601      	movs	r6, #1
   1092a:	e752      	b.n	107d2 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
   1092c:	4633      	mov	r3, r6
   1092e:	fb0c 0202 	mla	r2, ip, r2, r0
   10932:	3a30      	subs	r2, #48	; 0x30
   10934:	461e      	mov	r6, r3
   10936:	f816 0b01 	ldrb.w	r0, [r6], #1
   1093a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   1093e:	2f09      	cmp	r7, #9
   10940:	d9f4      	bls.n	1092c <cbvprintf+0x1a8>
	if (sp != wp) {
   10942:	4299      	cmp	r1, r3
   10944:	d093      	beq.n	1086e <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   10946:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
   1094a:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
   1094c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   1094e:	f362 0141 	bfi	r1, r2, #1, #1
   10952:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   10956:	e78a      	b.n	1086e <cbvprintf+0xea>
   10958:	460b      	mov	r3, r1
	size_t val = 0;
   1095a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   1095c:	f04f 0c0a 	mov.w	ip, #10
   10960:	e7e8      	b.n	10934 <cbvprintf+0x1b0>
		conv->prec_star = true;
   10962:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
   10966:	3302      	adds	r3, #2
		conv->prec_star = true;
   10968:	f042 0204 	orr.w	r2, r2, #4
   1096c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
   10970:	461f      	mov	r7, r3
   10972:	f817 2b01 	ldrb.w	r2, [r7], #1
   10976:	2a6c      	cmp	r2, #108	; 0x6c
   10978:	d041      	beq.n	109fe <cbvprintf+0x27a>
   1097a:	d825      	bhi.n	109c8 <cbvprintf+0x244>
   1097c:	2a68      	cmp	r2, #104	; 0x68
   1097e:	d02b      	beq.n	109d8 <cbvprintf+0x254>
   10980:	2a6a      	cmp	r2, #106	; 0x6a
   10982:	d046      	beq.n	10a12 <cbvprintf+0x28e>
   10984:	2a4c      	cmp	r2, #76	; 0x4c
   10986:	d04c      	beq.n	10a22 <cbvprintf+0x29e>
   10988:	461f      	mov	r7, r3
	conv->specifier = *sp++;
   1098a:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   1098e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
   10992:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   10994:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   10998:	f200 80d9 	bhi.w	10b4e <cbvprintf+0x3ca>
   1099c:	2a57      	cmp	r2, #87	; 0x57
   1099e:	d84d      	bhi.n	10a3c <cbvprintf+0x2b8>
   109a0:	2a41      	cmp	r2, #65	; 0x41
   109a2:	d003      	beq.n	109ac <cbvprintf+0x228>
   109a4:	3a45      	subs	r2, #69	; 0x45
   109a6:	2a02      	cmp	r2, #2
   109a8:	f200 80d1 	bhi.w	10b4e <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
   109ac:	2204      	movs	r2, #4
   109ae:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   109b2:	f362 0302 	bfi	r3, r2, #0, #3
   109b6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
   109ba:	2301      	movs	r3, #1
			break;
   109bc:	e09e      	b.n	10afc <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
   109be:	fb06 2101 	mla	r1, r6, r1, r2
   109c2:	4603      	mov	r3, r0
   109c4:	3930      	subs	r1, #48	; 0x30
   109c6:	e764      	b.n	10892 <cbvprintf+0x10e>
	switch (*sp) {
   109c8:	2a74      	cmp	r2, #116	; 0x74
   109ca:	d026      	beq.n	10a1a <cbvprintf+0x296>
   109cc:	2a7a      	cmp	r2, #122	; 0x7a
   109ce:	d1db      	bne.n	10988 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
   109d0:	2206      	movs	r2, #6
   109d2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   109d6:	e00d      	b.n	109f4 <cbvprintf+0x270>
		if (*++sp == 'h') {
   109d8:	785a      	ldrb	r2, [r3, #1]
   109da:	2a68      	cmp	r2, #104	; 0x68
   109dc:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   109e0:	d106      	bne.n	109f0 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
   109e2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   109e4:	f361 02c6 	bfi	r2, r1, #3, #4
   109e8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
   109ec:	1c9f      	adds	r7, r3, #2
   109ee:	e7cc      	b.n	1098a <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
   109f0:	4613      	mov	r3, r2
   109f2:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   109f4:	f362 03c6 	bfi	r3, r2, #3, #4
   109f8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   109fc:	e7c5      	b.n	1098a <cbvprintf+0x206>
		if (*++sp == 'l') {
   109fe:	785a      	ldrb	r2, [r3, #1]
   10a00:	2a6c      	cmp	r2, #108	; 0x6c
   10a02:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   10a06:	d101      	bne.n	10a0c <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
   10a08:	2104      	movs	r1, #4
   10a0a:	e7eb      	b.n	109e4 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
   10a0c:	4613      	mov	r3, r2
   10a0e:	2203      	movs	r2, #3
   10a10:	e7f0      	b.n	109f4 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
   10a12:	2205      	movs	r2, #5
   10a14:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   10a18:	e7ec      	b.n	109f4 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
   10a1a:	2207      	movs	r2, #7
   10a1c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   10a20:	e7e8      	b.n	109f4 <cbvprintf+0x270>
		conv->unsupported = true;
   10a22:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   10a26:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   10a2a:	f023 0302 	bic.w	r3, r3, #2
   10a2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   10a32:	f043 0302 	orr.w	r3, r3, #2
   10a36:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
   10a3a:	e7a6      	b.n	1098a <cbvprintf+0x206>
	switch (conv->specifier) {
   10a3c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   10a40:	2920      	cmp	r1, #32
   10a42:	f200 8084 	bhi.w	10b4e <cbvprintf+0x3ca>
   10a46:	a001      	add	r0, pc, #4	; (adr r0, 10a4c <cbvprintf+0x2c8>)
   10a48:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   10a4c:	00010b11 	.word	0x00010b11
   10a50:	00010b4f 	.word	0x00010b4f
   10a54:	00010b4f 	.word	0x00010b4f
   10a58:	00010b4f 	.word	0x00010b4f
   10a5c:	00010b4f 	.word	0x00010b4f
   10a60:	00010b4f 	.word	0x00010b4f
   10a64:	00010b4f 	.word	0x00010b4f
   10a68:	00010b4f 	.word	0x00010b4f
   10a6c:	00010b4f 	.word	0x00010b4f
   10a70:	000109ad 	.word	0x000109ad
   10a74:	00010b4f 	.word	0x00010b4f
   10a78:	00010b11 	.word	0x00010b11
   10a7c:	00010ad1 	.word	0x00010ad1
   10a80:	000109ad 	.word	0x000109ad
   10a84:	000109ad 	.word	0x000109ad
   10a88:	000109ad 	.word	0x000109ad
   10a8c:	00010b4f 	.word	0x00010b4f
   10a90:	00010ad1 	.word	0x00010ad1
   10a94:	00010b4f 	.word	0x00010b4f
   10a98:	00010b4f 	.word	0x00010b4f
   10a9c:	00010b4f 	.word	0x00010b4f
   10aa0:	00010b4f 	.word	0x00010b4f
   10aa4:	00010b19 	.word	0x00010b19
   10aa8:	00010b11 	.word	0x00010b11
   10aac:	00010b35 	.word	0x00010b35
   10ab0:	00010b4f 	.word	0x00010b4f
   10ab4:	00010b4f 	.word	0x00010b4f
   10ab8:	00010b35 	.word	0x00010b35
   10abc:	00010b4f 	.word	0x00010b4f
   10ac0:	00010b11 	.word	0x00010b11
   10ac4:	00010b4f 	.word	0x00010b4f
   10ac8:	00010b4f 	.word	0x00010b4f
   10acc:	00010b11 	.word	0x00010b11
		conv->specifier_cat = SPECIFIER_SINT;
   10ad0:	2001      	movs	r0, #1
   10ad2:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   10ad6:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   10ada:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   10ade:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   10ae0:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   10ae4:	bf02      	ittt	eq
   10ae6:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   10aea:	f041 0101 	orreq.w	r1, r1, #1
   10aee:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   10af2:	2a63      	cmp	r2, #99	; 0x63
   10af4:	d131      	bne.n	10b5a <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   10af6:	3b00      	subs	r3, #0
   10af8:	bf18      	it	ne
   10afa:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   10afc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   10b00:	f3c2 0140 	ubfx	r1, r2, #1, #1
   10b04:	430b      	orrs	r3, r1
   10b06:	f363 0241 	bfi	r2, r3, #1, #1
   10b0a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   10b0e:	e6d8      	b.n	108c2 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
   10b10:	2002      	movs	r0, #2
   10b12:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   10b16:	e7de      	b.n	10ad6 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
   10b18:	2103      	movs	r1, #3
   10b1a:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   10b1e:	f003 0378 	and.w	r3, r3, #120	; 0x78
   10b22:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   10b26:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   10b2a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   10b2c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   10b30:	4143      	adcs	r3, r0
   10b32:	e7e3      	b.n	10afc <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   10b34:	2103      	movs	r1, #3
   10b36:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   10b3a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   10b3e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   10b42:	bf14      	ite	ne
   10b44:	2301      	movne	r3, #1
   10b46:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
   10b48:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   10b4c:	e7d6      	b.n	10afc <cbvprintf+0x378>
		conv->invalid = true;
   10b4e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   10b52:	f043 0301 	orr.w	r3, r3, #1
   10b56:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   10b5a:	2300      	movs	r3, #0
   10b5c:	e7ce      	b.n	10afc <cbvprintf+0x378>
		} else if (conv->width_present) {
   10b5e:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   10b62:	2a00      	cmp	r2, #0
		int width = -1;
   10b64:	bfac      	ite	ge
   10b66:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
   10b6a:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
   10b6e:	e6ba      	b.n	108e6 <cbvprintf+0x162>
		} else if (conv->prec_present) {
   10b70:	079b      	lsls	r3, r3, #30
   10b72:	f57f aec7 	bpl.w	10904 <cbvprintf+0x180>
			precision = conv->prec_value;
   10b76:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
   10b7a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   10b7c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   10b80:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
   10b84:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
   10b88:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   10b8c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   10b8e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   10b92:	d138      	bne.n	10c06 <cbvprintf+0x482>
			switch (length_mod) {
   10b94:	1ecb      	subs	r3, r1, #3
   10b96:	2b04      	cmp	r3, #4
   10b98:	d822      	bhi.n	10be0 <cbvprintf+0x45c>
   10b9a:	e8df f003 	tbb	[pc, r3]
   10b9e:	0903      	.short	0x0903
   10ba0:	2109      	.short	0x2109
   10ba2:	21          	.byte	0x21
   10ba3:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   10ba4:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
   10ba8:	17da      	asrs	r2, r3, #31
   10baa:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
   10bae:	e006      	b.n	10bbe <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
   10bb0:	3407      	adds	r4, #7
   10bb2:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   10bb6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   10bba:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   10bbe:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   10bc2:	f013 0603 	ands.w	r6, r3, #3
   10bc6:	d056      	beq.n	10c76 <cbvprintf+0x4f2>
			OUTS(sp, fp);
   10bc8:	463b      	mov	r3, r7
   10bca:	4652      	mov	r2, sl
   10bcc:	4659      	mov	r1, fp
   10bce:	9802      	ldr	r0, [sp, #8]
   10bd0:	f007 fa17 	bl	18002 <outs>
   10bd4:	2800      	cmp	r0, #0
   10bd6:	f2c0 8142 	blt.w	10e5e <cbvprintf+0x6da>
   10bda:	4405      	add	r5, r0
			continue;
   10bdc:	46ba      	mov	sl, r7
   10bde:	e5d9      	b.n	10794 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   10be0:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   10be4:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   10be6:	ea4f 72e3 	mov.w	r2, r3, asr #31
   10bea:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   10bee:	d105      	bne.n	10bfc <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
   10bf0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   10bf4:	930a      	str	r3, [sp, #40]	; 0x28
   10bf6:	2300      	movs	r3, #0
   10bf8:	930b      	str	r3, [sp, #44]	; 0x2c
   10bfa:	e7e0      	b.n	10bbe <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
   10bfc:	2902      	cmp	r1, #2
   10bfe:	d1de      	bne.n	10bbe <cbvprintf+0x43a>
				value->sint = (short)value->sint;
   10c00:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   10c04:	e7d0      	b.n	10ba8 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
   10c06:	2b02      	cmp	r3, #2
   10c08:	d123      	bne.n	10c52 <cbvprintf+0x4ce>
			switch (length_mod) {
   10c0a:	1ecb      	subs	r3, r1, #3
   10c0c:	2b04      	cmp	r3, #4
   10c0e:	d813      	bhi.n	10c38 <cbvprintf+0x4b4>
   10c10:	e8df f003 	tbb	[pc, r3]
   10c14:	120a0a03 	.word	0x120a0a03
   10c18:	12          	.byte	0x12
   10c19:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
   10c1a:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
   10c1c:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
   10c1e:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
   10c20:	920a      	str	r2, [sp, #40]	; 0x28
   10c22:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   10c24:	4604      	mov	r4, r0
   10c26:	e7ca      	b.n	10bbe <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
   10c28:	1de0      	adds	r0, r4, #7
   10c2a:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
   10c2e:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   10c32:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   10c36:	e7f5      	b.n	10c24 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
   10c38:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   10c3c:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   10c3e:	930a      	str	r3, [sp, #40]	; 0x28
   10c40:	f04f 0300 	mov.w	r3, #0
   10c44:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   10c46:	d0d3      	beq.n	10bf0 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
   10c48:	2902      	cmp	r1, #2
   10c4a:	d1b8      	bne.n	10bbe <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
   10c4c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   10c50:	e7d0      	b.n	10bf4 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
   10c52:	2b04      	cmp	r3, #4
   10c54:	d109      	bne.n	10c6a <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
   10c56:	1de3      	adds	r3, r4, #7
   10c58:	f023 0307 	bic.w	r3, r3, #7
   10c5c:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
   10c60:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c64:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   10c68:	e7a9      	b.n	10bbe <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
   10c6a:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   10c6c:	bf04      	itt	eq
   10c6e:	f854 3b04 	ldreq.w	r3, [r4], #4
   10c72:	930a      	streq	r3, [sp, #40]	; 0x28
   10c74:	e7a3      	b.n	10bbe <cbvprintf+0x43a>
		switch (conv->specifier) {
   10c76:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   10c7a:	2878      	cmp	r0, #120	; 0x78
   10c7c:	d8ae      	bhi.n	10bdc <cbvprintf+0x458>
   10c7e:	2862      	cmp	r0, #98	; 0x62
   10c80:	d822      	bhi.n	10cc8 <cbvprintf+0x544>
   10c82:	2825      	cmp	r0, #37	; 0x25
   10c84:	f43f ad8f 	beq.w	107a6 <cbvprintf+0x22>
   10c88:	2858      	cmp	r0, #88	; 0x58
   10c8a:	d1a7      	bne.n	10bdc <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
   10c8c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   10c90:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   10c94:	9300      	str	r3, [sp, #0]
   10c96:	aa0c      	add	r2, sp, #48	; 0x30
   10c98:	ab04      	add	r3, sp, #16
   10c9a:	f007 f96c 	bl	17f76 <encode_uint>
   10c9e:	4682      	mov	sl, r0
			if (precision >= 0) {
   10ca0:	f1b8 0f00 	cmp.w	r8, #0
   10ca4:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   10ca8:	db0c      	blt.n	10cc4 <cbvprintf+0x540>
				conv->flag_zero = false;
   10caa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   10cae:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   10cb2:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   10cb6:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   10cb8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   10cbc:	d902      	bls.n	10cc4 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
   10cbe:	eba8 0303 	sub.w	r3, r8, r3
   10cc2:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   10cc4:	4680      	mov	r8, r0
   10cc6:	e03d      	b.n	10d44 <cbvprintf+0x5c0>
		switch (conv->specifier) {
   10cc8:	3863      	subs	r0, #99	; 0x63
   10cca:	2815      	cmp	r0, #21
   10ccc:	d886      	bhi.n	10bdc <cbvprintf+0x458>
   10cce:	a201      	add	r2, pc, #4	; (adr r2, 10cd4 <cbvprintf+0x550>)
   10cd0:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   10cd4:	00010d55 	.word	0x00010d55
   10cd8:	00010db9 	.word	0x00010db9
   10cdc:	00010bdd 	.word	0x00010bdd
   10ce0:	00010bdd 	.word	0x00010bdd
   10ce4:	00010bdd 	.word	0x00010bdd
   10ce8:	00010bdd 	.word	0x00010bdd
   10cec:	00010db9 	.word	0x00010db9
   10cf0:	00010bdd 	.word	0x00010bdd
   10cf4:	00010bdd 	.word	0x00010bdd
   10cf8:	00010bdd 	.word	0x00010bdd
   10cfc:	00010bdd 	.word	0x00010bdd
   10d00:	00010e13 	.word	0x00010e13
   10d04:	00010de1 	.word	0x00010de1
   10d08:	00010de5 	.word	0x00010de5
   10d0c:	00010bdd 	.word	0x00010bdd
   10d10:	00010bdd 	.word	0x00010bdd
   10d14:	00010d2d 	.word	0x00010d2d
   10d18:	00010bdd 	.word	0x00010bdd
   10d1c:	00010de1 	.word	0x00010de1
   10d20:	00010bdd 	.word	0x00010bdd
   10d24:	00010bdd 	.word	0x00010bdd
   10d28:	00010de1 	.word	0x00010de1
			if (precision >= 0) {
   10d2c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   10d30:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   10d34:	db0a      	blt.n	10d4c <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
   10d36:	4641      	mov	r1, r8
   10d38:	4650      	mov	r0, sl
   10d3a:	f007 fa21 	bl	18180 <strnlen>
		char sign = 0;
   10d3e:	2600      	movs	r6, #0
			bpe = bps + len;
   10d40:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
   10d44:	f1ba 0f00 	cmp.w	sl, #0
   10d48:	d10c      	bne.n	10d64 <cbvprintf+0x5e0>
   10d4a:	e747      	b.n	10bdc <cbvprintf+0x458>
				len = strlen(bps);
   10d4c:	4650      	mov	r0, sl
   10d4e:	f007 fa10 	bl	18172 <strlen>
   10d52:	e7f4      	b.n	10d3e <cbvprintf+0x5ba>
			break;
   10d54:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   10d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bps = buf;
   10d58:	f10d 0a10 	add.w	sl, sp, #16
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   10d5c:	f88d 3010 	strb.w	r3, [sp, #16]
			bpe = buf + 1;
   10d60:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
   10d64:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   10d68:	b106      	cbz	r6, 10d6c <cbvprintf+0x5e8>
			nj_len += 1U;
   10d6a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   10d6c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   10d70:	06d0      	lsls	r0, r2, #27
   10d72:	d568      	bpl.n	10e46 <cbvprintf+0x6c2>
			nj_len += 2U;
   10d74:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   10d76:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   10d78:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   10d7a:	bf48      	it	mi
   10d7c:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   10d7e:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   10d80:	bf48      	it	mi
   10d82:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   10d84:	f1b9 0f00 	cmp.w	r9, #0
   10d88:	dd76      	ble.n	10e78 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
   10d8a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   10d8e:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   10d92:	f3c2 0380 	ubfx	r3, r2, #2, #1
   10d96:	9303      	str	r3, [sp, #12]
   10d98:	0753      	lsls	r3, r2, #29
   10d9a:	d46d      	bmi.n	10e78 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
   10d9c:	0650      	lsls	r0, r2, #25
   10d9e:	d561      	bpl.n	10e64 <cbvprintf+0x6e0>
					if (sign != 0) {
   10da0:	b146      	cbz	r6, 10db4 <cbvprintf+0x630>
						OUTC(sign);
   10da2:	4659      	mov	r1, fp
   10da4:	4630      	mov	r0, r6
   10da6:	9b02      	ldr	r3, [sp, #8]
   10da8:	4798      	blx	r3
   10daa:	2800      	cmp	r0, #0
   10dac:	db57      	blt.n	10e5e <cbvprintf+0x6da>
						sign = 0;
   10dae:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   10db0:	3501      	adds	r5, #1
						sign = 0;
   10db2:	461e      	mov	r6, r3
					pad = '0';
   10db4:	2330      	movs	r3, #48	; 0x30
   10db6:	e056      	b.n	10e66 <cbvprintf+0x6e2>
			if (conv->flag_plus) {
   10db8:	071e      	lsls	r6, r3, #28
   10dba:	d40f      	bmi.n	10ddc <cbvprintf+0x658>
				sign = ' ';
   10dbc:	f013 0610 	ands.w	r6, r3, #16
   10dc0:	bf18      	it	ne
   10dc2:	2620      	movne	r6, #32
			sint = value->sint;
   10dc4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   10dc8:	2b00      	cmp	r3, #0
   10dca:	f6bf af5f 	bge.w	10c8c <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
   10dce:	4252      	negs	r2, r2
   10dd0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
   10dd4:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
   10dd6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   10dda:	e757      	b.n	10c8c <cbvprintf+0x508>
				sign = '+';
   10ddc:	262b      	movs	r6, #43	; 0x2b
   10dde:	e7f1      	b.n	10dc4 <cbvprintf+0x640>
		switch (conv->specifier) {
   10de0:	2600      	movs	r6, #0
   10de2:	e753      	b.n	10c8c <cbvprintf+0x508>
			if (value->ptr != NULL) {
   10de4:	980a      	ldr	r0, [sp, #40]	; 0x28
   10de6:	b340      	cbz	r0, 10e3a <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   10de8:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   10dec:	9300      	str	r3, [sp, #0]
   10dee:	2100      	movs	r1, #0
   10df0:	ab04      	add	r3, sp, #16
   10df2:	aa0c      	add	r2, sp, #48	; 0x30
   10df4:	f007 f8bf 	bl	17f76 <encode_uint>
				conv->altform_0c = true;
   10df8:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
   10dfc:	4682      	mov	sl, r0
				conv->altform_0c = true;
   10dfe:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   10e02:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   10e06:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
   10e0a:	2600      	movs	r6, #0
				conv->altform_0c = true;
   10e0c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
   10e10:	e746      	b.n	10ca0 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
   10e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   10e14:	2907      	cmp	r1, #7
   10e16:	f63f aee1 	bhi.w	10bdc <cbvprintf+0x458>
   10e1a:	e8df f001 	tbb	[pc, r1]
   10e1e:	040c      	.short	0x040c
   10e20:	08080c06 	.word	0x08080c06
   10e24:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
   10e26:	701d      	strb	r5, [r3, #0]
		break;
   10e28:	e6d8      	b.n	10bdc <cbvprintf+0x458>
		*(short *)dp = (short)count;
   10e2a:	801d      	strh	r5, [r3, #0]
		break;
   10e2c:	e6d6      	b.n	10bdc <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
   10e2e:	17ea      	asrs	r2, r5, #31
   10e30:	e9c3 5200 	strd	r5, r2, [r3]
		break;
   10e34:	e6d2      	b.n	10bdc <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   10e36:	601d      	str	r5, [r3, #0]
		break;
   10e38:	e6d0      	b.n	10bdc <cbvprintf+0x458>
			bps = "(nil)";
   10e3a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 10f04 <cbvprintf+0x780>
   10e3e:	4606      	mov	r6, r0
			bpe = bps + 5;
   10e40:	f10a 0805 	add.w	r8, sl, #5
   10e44:	e78e      	b.n	10d64 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
   10e46:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   10e48:	bf48      	it	mi
   10e4a:	3301      	addmi	r3, #1
   10e4c:	e793      	b.n	10d76 <cbvprintf+0x5f2>
					OUTC(pad);
   10e4e:	4618      	mov	r0, r3
   10e50:	9303      	str	r3, [sp, #12]
   10e52:	4659      	mov	r1, fp
   10e54:	9b02      	ldr	r3, [sp, #8]
   10e56:	4798      	blx	r3
   10e58:	2800      	cmp	r0, #0
   10e5a:	9b03      	ldr	r3, [sp, #12]
   10e5c:	da04      	bge.n	10e68 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
   10e5e:	b011      	add	sp, #68	; 0x44
   10e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   10e64:	2320      	movs	r3, #32
   10e66:	444d      	add	r5, r9
   10e68:	464a      	mov	r2, r9
				while (width-- > 0) {
   10e6a:	2a00      	cmp	r2, #0
   10e6c:	eba5 0109 	sub.w	r1, r5, r9
   10e70:	f109 39ff 	add.w	r9, r9, #4294967295
   10e74:	dceb      	bgt.n	10e4e <cbvprintf+0x6ca>
   10e76:	460d      	mov	r5, r1
		if (sign != 0) {
   10e78:	b136      	cbz	r6, 10e88 <cbvprintf+0x704>
			OUTC(sign);
   10e7a:	4659      	mov	r1, fp
   10e7c:	4630      	mov	r0, r6
   10e7e:	9b02      	ldr	r3, [sp, #8]
   10e80:	4798      	blx	r3
   10e82:	2800      	cmp	r0, #0
   10e84:	dbeb      	blt.n	10e5e <cbvprintf+0x6da>
   10e86:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   10e88:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   10e8c:	06d9      	lsls	r1, r3, #27
   10e8e:	d401      	bmi.n	10e94 <cbvprintf+0x710>
   10e90:	071a      	lsls	r2, r3, #28
   10e92:	d506      	bpl.n	10ea2 <cbvprintf+0x71e>
				OUTC('0');
   10e94:	4659      	mov	r1, fp
   10e96:	2030      	movs	r0, #48	; 0x30
   10e98:	9b02      	ldr	r3, [sp, #8]
   10e9a:	4798      	blx	r3
   10e9c:	2800      	cmp	r0, #0
   10e9e:	dbde      	blt.n	10e5e <cbvprintf+0x6da>
   10ea0:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   10ea2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   10ea6:	06db      	lsls	r3, r3, #27
   10ea8:	d507      	bpl.n	10eba <cbvprintf+0x736>
				OUTC(conv->specifier);
   10eaa:	4659      	mov	r1, fp
   10eac:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   10eb0:	9b02      	ldr	r3, [sp, #8]
   10eb2:	4798      	blx	r3
   10eb4:	2800      	cmp	r0, #0
   10eb6:	dbd2      	blt.n	10e5e <cbvprintf+0x6da>
   10eb8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   10eba:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   10ebc:	442e      	add	r6, r5
   10ebe:	1b73      	subs	r3, r6, r5
   10ec0:	2b00      	cmp	r3, #0
   10ec2:	dc16      	bgt.n	10ef2 <cbvprintf+0x76e>
			OUTS(bps, bpe);
   10ec4:	4643      	mov	r3, r8
   10ec6:	4652      	mov	r2, sl
   10ec8:	4659      	mov	r1, fp
   10eca:	9802      	ldr	r0, [sp, #8]
   10ecc:	f007 f899 	bl	18002 <outs>
   10ed0:	2800      	cmp	r0, #0
   10ed2:	dbc4      	blt.n	10e5e <cbvprintf+0x6da>
   10ed4:	4405      	add	r5, r0
		while (width > 0) {
   10ed6:	44a9      	add	r9, r5
   10ed8:	eba9 0305 	sub.w	r3, r9, r5
   10edc:	2b00      	cmp	r3, #0
   10ede:	f77f ae7d 	ble.w	10bdc <cbvprintf+0x458>
			OUTC(' ');
   10ee2:	4659      	mov	r1, fp
   10ee4:	2020      	movs	r0, #32
   10ee6:	9b02      	ldr	r3, [sp, #8]
   10ee8:	4798      	blx	r3
   10eea:	2800      	cmp	r0, #0
   10eec:	dbb7      	blt.n	10e5e <cbvprintf+0x6da>
   10eee:	3501      	adds	r5, #1
			--width;
   10ef0:	e7f2      	b.n	10ed8 <cbvprintf+0x754>
				OUTC('0');
   10ef2:	4659      	mov	r1, fp
   10ef4:	2030      	movs	r0, #48	; 0x30
   10ef6:	9b02      	ldr	r3, [sp, #8]
   10ef8:	4798      	blx	r3
   10efa:	2800      	cmp	r0, #0
   10efc:	dbaf      	blt.n	10e5e <cbvprintf+0x6da>
   10efe:	3501      	adds	r5, #1
   10f00:	e7dd      	b.n	10ebe <cbvprintf+0x73a>
   10f02:	bf00      	nop
   10f04:	00018e90 	.word	0x00018e90

00010f08 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   10f08:	4604      	mov	r4, r0
   10f0a:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   10f0c:	f04f 0220 	mov.w	r2, #32
   10f10:	f3ef 8311 	mrs	r3, BASEPRI
   10f14:	f382 8812 	msr	BASEPRI_MAX, r2
   10f18:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();
   10f1c:	f007 fab1 	bl	18482 <sys_clock_disable>

	sys_arch_reboot(type);
   10f20:	4620      	mov	r0, r4
   10f22:	f001 f927 	bl	12174 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   10f26:	4803      	ldr	r0, [pc, #12]	; (10f34 <sys_reboot+0x2c>)
   10f28:	f006 fffb 	bl	17f22 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   10f2c:	f000 fcec 	bl	11908 <arch_cpu_idle>
   10f30:	e7fc      	b.n	10f2c <sys_reboot+0x24>
   10f32:	bf00      	nop
   10f34:	00018e96 	.word	0x00018e96

00010f38 <nordicsemi_nrf91_init>:
   10f38:	f04f 0220 	mov.w	r2, #32
   10f3c:	f3ef 8311 	mrs	r3, BASEPRI
   10f40:	f382 8812 	msr	BASEPRI_MAX, r2
   10f44:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   10f48:	2101      	movs	r1, #1
   10f4a:	4a04      	ldr	r2, [pc, #16]	; (10f5c <nordicsemi_nrf91_init+0x24>)
   10f4c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   10f50:	f383 8811 	msr	BASEPRI, r3
   10f54:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   10f58:	2000      	movs	r0, #0
   10f5a:	4770      	bx	lr
   10f5c:	50039000 	.word	0x50039000

00010f60 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   10f60:	b120      	cbz	r0, 10f6c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   10f62:	4b03      	ldr	r3, [pc, #12]	; (10f70 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   10f64:	0180      	lsls	r0, r0, #6
   10f66:	f043 0301 	orr.w	r3, r3, #1
   10f6a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   10f6c:	4770      	bx	lr
   10f6e:	bf00      	nop
   10f70:	00018aa0 	.word	0x00018aa0

00010f74 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   10f74:	2806      	cmp	r0, #6
   10f76:	d107      	bne.n	10f88 <pm_state_set+0x14>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   10f78:	2201      	movs	r2, #1
   10f7a:	4b04      	ldr	r3, [pc, #16]	; (10f8c <pm_state_set+0x18>)
   10f7c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   10f80:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   10f84:	bf20      	wfe
    while (true)
   10f86:	e7fd      	b.n	10f84 <pm_state_set+0x10>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   10f88:	4770      	bx	lr
   10f8a:	bf00      	nop
   10f8c:	50004000 	.word	0x50004000

00010f90 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   10f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10f94:	4605      	mov	r5, r0
	__asm__ volatile(
   10f96:	f04f 0320 	mov.w	r3, #32
   10f9a:	f3ef 8611 	mrs	r6, BASEPRI
   10f9e:	f383 8812 	msr	BASEPRI_MAX, r3
   10fa2:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10fa6:	481d      	ldr	r0, [pc, #116]	; (1101c <pm_state_notify+0x8c>)
   10fa8:	f002 fd68 	bl	13a7c <z_spin_lock_valid>
   10fac:	b940      	cbnz	r0, 10fc0 <pm_state_notify+0x30>
   10fae:	491c      	ldr	r1, [pc, #112]	; (11020 <pm_state_notify+0x90>)
   10fb0:	481c      	ldr	r0, [pc, #112]	; (11024 <pm_state_notify+0x94>)
   10fb2:	228e      	movs	r2, #142	; 0x8e
   10fb4:	f007 f842 	bl	1803c <assert_print>
   10fb8:	218e      	movs	r1, #142	; 0x8e
   10fba:	4819      	ldr	r0, [pc, #100]	; (11020 <pm_state_notify+0x90>)
   10fbc:	f007 f837 	bl	1802e <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
   10fc0:	4816      	ldr	r0, [pc, #88]	; (1101c <pm_state_notify+0x8c>)
   10fc2:	f002 fd77 	bl	13ab4 <z_spin_lock_set_owner>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   10fc6:	4b18      	ldr	r3, [pc, #96]	; (11028 <pm_state_notify+0x98>)
   10fc8:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   10fca:	b19c      	cbz	r4, 10ff4 <pm_state_notify+0x64>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   10fcc:	f04f 090c 	mov.w	r9, #12
   10fd0:	4f16      	ldr	r7, [pc, #88]	; (1102c <pm_state_notify+0x9c>)
   10fd2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 11030 <pm_state_notify+0xa0>
			callback = notifier->state_exit;
   10fd6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   10fda:	2d00      	cmp	r5, #0
   10fdc:	bf08      	it	eq
   10fde:	4613      	moveq	r3, r2
		if (callback) {
   10fe0:	b12b      	cbz	r3, 10fee <pm_state_notify+0x5e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   10fe2:	f898 2014 	ldrb.w	r2, [r8, #20]
   10fe6:	fb09 f202 	mul.w	r2, r9, r2
   10fea:	5cb8      	ldrb	r0, [r7, r2]
   10fec:	4798      	blx	r3
	return node->next;
   10fee:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   10ff0:	2c00      	cmp	r4, #0
   10ff2:	d1f0      	bne.n	10fd6 <pm_state_notify+0x46>
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10ff4:	4809      	ldr	r0, [pc, #36]	; (1101c <pm_state_notify+0x8c>)
   10ff6:	f002 fd4f 	bl	13a98 <z_spin_unlock_valid>
   10ffa:	b940      	cbnz	r0, 1100e <pm_state_notify+0x7e>
   10ffc:	4908      	ldr	r1, [pc, #32]	; (11020 <pm_state_notify+0x90>)
   10ffe:	4809      	ldr	r0, [pc, #36]	; (11024 <pm_state_notify+0x94>)
   11000:	22b9      	movs	r2, #185	; 0xb9
   11002:	f007 f81b 	bl	1803c <assert_print>
   11006:	21b9      	movs	r1, #185	; 0xb9
   11008:	4805      	ldr	r0, [pc, #20]	; (11020 <pm_state_notify+0x90>)
   1100a:	f007 f810 	bl	1802e <assert_post_action>
	__asm__ volatile(
   1100e:	f386 8811 	msr	BASEPRI, r6
   11012:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   11016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1101a:	bf00      	nop
   1101c:	20000238 	.word	0x20000238
   11020:	00018ec3 	.word	0x00018ec3
   11024:	00018ef0 	.word	0x00018ef0
   11028:	2000023c 	.word	0x2000023c
   1102c:	20000244 	.word	0x20000244
   11030:	200009e4 	.word	0x200009e4

00011034 <atomic_clear_bit.constprop.0>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   11034:	2301      	movs	r3, #1

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11036:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   11038:	f000 001f 	and.w	r0, r0, #31
   1103c:	fa03 f000 	lsl.w	r0, r3, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11040:	43c0      	mvns	r0, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11042:	4b05      	ldr	r3, [pc, #20]	; (11058 <atomic_clear_bit.constprop.0+0x24>)
   11044:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   11048:	e8d3 2fef 	ldaex	r2, [r3]
   1104c:	4002      	ands	r2, r0
   1104e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   11052:	2900      	cmp	r1, #0
   11054:	d1f8      	bne.n	11048 <atomic_clear_bit.constprop.0+0x14>
}
   11056:	4770      	bx	lr
   11058:	20000250 	.word	0x20000250

0001105c <pm_system_resume>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1105c:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   1105e:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
   11060:	4b17      	ldr	r3, [pc, #92]	; (110c0 <pm_system_resume+0x64>)
   11062:	7d1c      	ldrb	r4, [r3, #20]
   11064:	f004 031f 	and.w	r3, r4, #31
   11068:	409a      	lsls	r2, r3
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1106a:	43d0      	mvns	r0, r2
   1106c:	4b15      	ldr	r3, [pc, #84]	; (110c4 <pm_system_resume+0x68>)
   1106e:	0961      	lsrs	r1, r4, #5
   11070:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   11074:	e8d3 1fef 	ldaex	r1, [r3]
   11078:	ea01 0500 	and.w	r5, r1, r0
   1107c:	e8c3 5fec 	stlex	ip, r5, [r3]
   11080:	f1bc 0f00 	cmp.w	ip, #0
   11084:	d1f6      	bne.n	11074 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   11086:	4211      	tst	r1, r2
   11088:	d013      	beq.n	110b2 <pm_system_resume+0x56>
	if (pm_state_exit_post_ops != NULL) {
   1108a:	4b0f      	ldr	r3, [pc, #60]	; (110c8 <pm_system_resume+0x6c>)
   1108c:	4d0f      	ldr	r5, [pc, #60]	; (110cc <pm_system_resume+0x70>)
   1108e:	b18b      	cbz	r3, 110b4 <pm_system_resume+0x58>
		pm_state_exit_post_ops(info->state, info->substate_id);
   11090:	230c      	movs	r3, #12
   11092:	4363      	muls	r3, r4
   11094:	18ea      	adds	r2, r5, r3
   11096:	7851      	ldrb	r1, [r2, #1]
   11098:	5ce8      	ldrb	r0, [r5, r3]
   1109a:	f006 ffdd 	bl	18058 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   1109e:	2000      	movs	r0, #0
   110a0:	f7ff ff76 	bl	10f90 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   110a4:	230c      	movs	r3, #12
   110a6:	435c      	muls	r4, r3
   110a8:	2300      	movs	r3, #0
   110aa:	192a      	adds	r2, r5, r4
   110ac:	512b      	str	r3, [r5, r4]
   110ae:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   110b2:	bd38      	pop	{r3, r4, r5, pc}
   110b4:	f383 8811 	msr	BASEPRI, r3
   110b8:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   110bc:	e7ef      	b.n	1109e <pm_system_resume+0x42>
   110be:	bf00      	nop
   110c0:	200009e4 	.word	0x200009e4
   110c4:	20000254 	.word	0x20000254
   110c8:	00018059 	.word	0x00018059
   110cc:	20000244 	.word	0x20000244

000110d0 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   110d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   110d4:	4b2f      	ldr	r3, [pc, #188]	; (11194 <pm_system_suspend+0xc4>)
{
   110d6:	4607      	mov	r7, r0
	uint8_t id = _current_cpu->id;
   110d8:	7d1c      	ldrb	r4, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   110da:	ea4f 1854 	mov.w	r8, r4, lsr #5
   110de:	ea4f 0888 	mov.w	r8, r8, lsl #2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   110e2:	4b2d      	ldr	r3, [pc, #180]	; (11198 <pm_system_suspend+0xc8>)
   110e4:	4443      	add	r3, r8
   110e6:	e8d3 3faf 	lda	r3, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   110ea:	f004 091f 	and.w	r9, r4, #31
   110ee:	fa43 f309 	asr.w	r3, r3, r9

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   110f2:	f013 0f01 	tst.w	r3, #1
   110f6:	4e29      	ldr	r6, [pc, #164]	; (1119c <pm_system_suspend+0xcc>)
   110f8:	d10a      	bne.n	11110 <pm_system_suspend+0x40>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   110fa:	4601      	mov	r1, r0
   110fc:	4620      	mov	r0, r4
   110fe:	f000 f863 	bl	111c8 <pm_policy_next_state>
		if (info != NULL) {
   11102:	b128      	cbz	r0, 11110 <pm_system_suspend+0x40>
			z_cpus_pm_state[id] = *info;
   11104:	c807      	ldmia	r0, {r0, r1, r2}
   11106:	230c      	movs	r3, #12
   11108:	fb03 6304 	mla	r3, r3, r4, r6
   1110c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   11110:	230c      	movs	r3, #12
   11112:	4363      	muls	r3, r4
   11114:	5cf5      	ldrb	r5, [r6, r3]
   11116:	18f2      	adds	r2, r6, r3
   11118:	b92d      	cbnz	r5, 11126 <pm_system_suspend+0x56>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
   1111a:	4620      	mov	r0, r4
   1111c:	f7ff ff8a 	bl	11034 <atomic_clear_bit.constprop.0>
		ret = false;
   11120:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
   11122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
   11126:	1c7b      	adds	r3, r7, #1
   11128:	d00f      	beq.n	1114a <pm_system_suspend+0x7a>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   1112a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1112e:	2100      	movs	r1, #0
   11130:	f8d2 c008 	ldr.w	ip, [r2, #8]
   11134:	481a      	ldr	r0, [pc, #104]	; (111a0 <pm_system_suspend+0xd0>)
   11136:	2300      	movs	r3, #0
   11138:	fbec 0105 	umlal	r0, r1, ip, r5
   1113c:	4a19      	ldr	r2, [pc, #100]	; (111a4 <pm_system_suspend+0xd4>)
   1113e:	f7ff f97d 	bl	1043c <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   11142:	2101      	movs	r1, #1
   11144:	1a38      	subs	r0, r7, r0
   11146:	f003 ffb9 	bl	150bc <z_set_timeout_expiry>
	k_sched_lock();
   1114a:	f002 ff91 	bl	14070 <k_sched_lock>
	pm_state_notify(true);
   1114e:	2001      	movs	r0, #1
   11150:	f7ff ff1e 	bl	10f90 <pm_state_notify>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   11154:	2301      	movs	r3, #1
   11156:	fa03 f909 	lsl.w	r9, r3, r9
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1115a:	4b13      	ldr	r3, [pc, #76]	; (111a8 <pm_system_suspend+0xd8>)
   1115c:	4498      	add	r8, r3
   1115e:	e8d8 3fef 	ldaex	r3, [r8]
   11162:	ea43 0309 	orr.w	r3, r3, r9
   11166:	e8c8 3fe2 	stlex	r2, r3, [r8]
   1116a:	2a00      	cmp	r2, #0
   1116c:	d1f7      	bne.n	1115e <pm_system_suspend+0x8e>
	if (pm_state_set != NULL) {
   1116e:	4b0f      	ldr	r3, [pc, #60]	; (111ac <pm_system_suspend+0xdc>)
   11170:	b133      	cbz	r3, 11180 <pm_system_suspend+0xb0>
		pm_state_set(info->state, info->substate_id);
   11172:	230c      	movs	r3, #12
   11174:	4363      	muls	r3, r4
   11176:	18f2      	adds	r2, r6, r3
   11178:	7851      	ldrb	r1, [r2, #1]
   1117a:	5cf0      	ldrb	r0, [r6, r3]
   1117c:	f7ff fefa 	bl	10f74 <pm_state_set>
	pm_system_resume();
   11180:	f7ff ff6c 	bl	1105c <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
   11184:	4620      	mov	r0, r4
   11186:	f7ff ff55 	bl	11034 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
   1118a:	f003 fb95 	bl	148b8 <k_sched_unlock>
	bool ret = true;
   1118e:	2001      	movs	r0, #1
   11190:	e7c7      	b.n	11122 <pm_system_suspend+0x52>
   11192:	bf00      	nop
   11194:	200009e4 	.word	0x200009e4
   11198:	20000250 	.word	0x20000250
   1119c:	20000244 	.word	0x20000244
   111a0:	000f423f 	.word	0x000f423f
   111a4:	000f4240 	.word	0x000f4240
   111a8:	20000254 	.word	0x20000254
   111ac:	00010f75 	.word	0x00010f75

000111b0 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   111b0:	4b04      	ldr	r3, [pc, #16]	; (111c4 <pm_policy_state_lock_is_active+0x14>)
   111b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   111b6:	e8d0 0faf 	lda	r0, [r0]
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
   111ba:	3800      	subs	r0, #0
   111bc:	bf18      	it	ne
   111be:	2001      	movne	r0, #1
   111c0:	4770      	bx	lr
   111c2:	bf00      	nop
   111c4:	20000258 	.word	0x20000258

000111c8 <pm_policy_next_state>:
{
   111c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111cc:	b085      	sub	sp, #20
   111ce:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   111d0:	a903      	add	r1, sp, #12
   111d2:	f000 f847 	bl	11264 <pm_state_cpu_get_all>
   111d6:	f04f 0b00 	mov.w	fp, #0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   111da:	1e44      	subs	r4, r0, #1
   111dc:	f8df 8078 	ldr.w	r8, [pc, #120]	; 11258 <pm_policy_next_state+0x90>
   111e0:	f8df a078 	ldr.w	sl, [pc, #120]	; 1125c <pm_policy_next_state+0x94>
   111e4:	b224      	sxth	r4, r4
   111e6:	1c63      	adds	r3, r4, #1
   111e8:	d104      	bne.n	111f4 <pm_policy_next_state+0x2c>
	return NULL;
   111ea:	2600      	movs	r6, #0
}
   111ec:	4630      	mov	r0, r6
   111ee:	b005      	add	sp, #20
   111f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   111f4:	9a03      	ldr	r2, [sp, #12]
   111f6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
		if (pm_policy_state_lock_is_active(state->state)) {
   111fa:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
		const struct pm_state_info *state = &cpu_states[i];
   111fe:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
   11202:	f7ff ffd5 	bl	111b0 <pm_policy_state_lock_is_active>
   11206:	4605      	mov	r5, r0
   11208:	bb10      	cbnz	r0, 11250 <pm_policy_next_state+0x88>
   1120a:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1120e:	46c4      	mov	ip, r8
   11210:	4629      	mov	r1, r5
   11212:	6870      	ldr	r0, [r6, #4]
   11214:	4652      	mov	r2, sl
   11216:	fbe0 c109 	umlal	ip, r1, r0, r9
   1121a:	465b      	mov	r3, fp
   1121c:	4660      	mov	r0, ip
   1121e:	f7ff f90d 	bl	1043c <__aeabi_uldivmod>
   11222:	46c4      	mov	ip, r8
   11224:	4629      	mov	r1, r5
   11226:	9001      	str	r0, [sp, #4]
   11228:	68b0      	ldr	r0, [r6, #8]
   1122a:	465b      	mov	r3, fp
   1122c:	fbe0 c109 	umlal	ip, r1, r0, r9
   11230:	4652      	mov	r2, sl
   11232:	4660      	mov	r0, ip
   11234:	f7ff f902 	bl	1043c <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   11238:	4b09      	ldr	r3, [pc, #36]	; (11260 <pm_policy_next_state+0x98>)
   1123a:	681b      	ldr	r3, [r3, #0]
   1123c:	1c59      	adds	r1, r3, #1
   1123e:	d001      	beq.n	11244 <pm_policy_next_state+0x7c>
   11240:	4283      	cmp	r3, r0
   11242:	d905      	bls.n	11250 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
   11244:	1c7a      	adds	r2, r7, #1
   11246:	d0d1      	beq.n	111ec <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
   11248:	9b01      	ldr	r3, [sp, #4]
   1124a:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   1124c:	42b8      	cmp	r0, r7
   1124e:	d9cd      	bls.n	111ec <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   11250:	3c01      	subs	r4, #1
   11252:	b224      	sxth	r4, r4
   11254:	e7c7      	b.n	111e6 <pm_policy_next_state+0x1e>
   11256:	bf00      	nop
   11258:	000f423f 	.word	0x000f423f
   1125c:	000f4240 	.word	0x000f4240
   11260:	20000004 	.word	0x20000004

00011264 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   11264:	b908      	cbnz	r0, 1126a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   11266:	4b02      	ldr	r3, [pc, #8]	; (11270 <pm_state_cpu_get_all+0xc>)
   11268:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   1126a:	2000      	movs	r0, #0
   1126c:	4770      	bx	lr
   1126e:	bf00      	nop
   11270:	00018aa8 	.word	0x00018aa8

00011274 <config_regions>:
}
#endif /* CONFIG_ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS */


static void config_regions(bool ram, size_t start, size_t end, uint32_t perm)
{
   11274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const size_t region_size = ram ? RAM_SECURE_ATTRIBUTION_REGION_SIZE
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
   11276:	2800      	cmp	r0, #0
{
   11278:	461d      	mov	r5, r3
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
   1127a:	bf14      	ite	ne
   1127c:	f44f 5300 	movne.w	r3, #8192	; 0x2000
   11280:	f44f 4300 	moveq.w	r3, #32768	; 0x8000

	__ASSERT_NO_MSG(end >= start);
	if (end <= start) {
   11284:	428a      	cmp	r2, r1
{
   11286:	4614      	mov	r4, r2
	if (end <= start) {
   11288:	d832      	bhi.n	112f0 <config_regions+0x7c>
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
	PRINT("\n");
}
   1128a:	b003      	add	sp, #12
   1128c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1128e:	463a      	mov	r2, r7
		if (ram) {
   11290:	b358      	cbz	r0, 112ea <config_regions+0x76>
			NRF_SPU->RAMREGION[i].PERM = perm;
   11292:	f502 77e0 	add.w	r7, r2, #448	; 0x1c0
			NRF_SPU->FLASHREGION[i].PERM = perm;
   11296:	f846 5027 	str.w	r5, [r6, r7, lsl #2]
	for (size_t i = start; i < end; i++) {
   1129a:	1c57      	adds	r7, r2, #1
   1129c:	42bc      	cmp	r4, r7
   1129e:	d1f6      	bne.n	1128e <config_regions+0x1a>
	PRINT("%02u %02u 0x%05x 0x%05x \t", start, end - 1,
   112a0:	435c      	muls	r4, r3
   112a2:	4815      	ldr	r0, [pc, #84]	; (112f8 <config_regions+0x84>)
   112a4:	434b      	muls	r3, r1
   112a6:	9400      	str	r4, [sp, #0]
   112a8:	f006 fe3b 	bl	17f22 <printk>
	PRINT("%s", perm & (ram ? SRAM_SECURE : FLASH_SECURE) ? "Secure\t\t" :
   112ac:	4b13      	ldr	r3, [pc, #76]	; (112fc <config_regions+0x88>)
   112ae:	f015 0f10 	tst.w	r5, #16
   112b2:	4913      	ldr	r1, [pc, #76]	; (11300 <config_regions+0x8c>)
   112b4:	4813      	ldr	r0, [pc, #76]	; (11304 <config_regions+0x90>)
   112b6:	bf08      	it	eq
   112b8:	4619      	moveq	r1, r3
   112ba:	f006 fe32 	bl	17f22 <printk>
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
   112be:	2172      	movs	r1, #114	; 0x72
   112c0:	4811      	ldr	r0, [pc, #68]	; (11308 <config_regions+0x94>)
   112c2:	f006 fe2e 	bl	17f22 <printk>
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
   112c6:	2177      	movs	r1, #119	; 0x77
   112c8:	480f      	ldr	r0, [pc, #60]	; (11308 <config_regions+0x94>)
   112ca:	f006 fe2a 	bl	17f22 <printk>
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
   112ce:	2178      	movs	r1, #120	; 0x78
   112d0:	480d      	ldr	r0, [pc, #52]	; (11308 <config_regions+0x94>)
   112d2:	f006 fe26 	bl	17f22 <printk>
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
   112d6:	216c      	movs	r1, #108	; 0x6c
   112d8:	480b      	ldr	r0, [pc, #44]	; (11308 <config_regions+0x94>)
   112da:	f006 fe22 	bl	17f22 <printk>
	PRINT("\n");
   112de:	480b      	ldr	r0, [pc, #44]	; (1130c <config_regions+0x98>)
}
   112e0:	b003      	add	sp, #12
   112e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	PRINT("\n");
   112e6:	f006 be1c 	b.w	17f22 <printk>
			NRF_SPU->FLASHREGION[i].PERM = perm;
   112ea:	f502 77c0 	add.w	r7, r2, #384	; 0x180
   112ee:	e7d2      	b.n	11296 <config_regions+0x22>
   112f0:	460a      	mov	r2, r1
   112f2:	4e07      	ldr	r6, [pc, #28]	; (11310 <config_regions+0x9c>)
   112f4:	e7cc      	b.n	11290 <config_regions+0x1c>
   112f6:	bf00      	nop
   112f8:	00018f20 	.word	0x00018f20
   112fc:	00018f14 	.word	0x00018f14
   11300:	00018f0b 	.word	0x00018f0b
   11304:	000190f2 	.word	0x000190f2
   11308:	00018f3a 	.word	0x00018f3a
   1130c:	00019b9a 	.word	0x00019b9a
   11310:	50003000 	.word	0x50003000

00011314 <config_peripheral.constprop.0>:
		     SPU_PERIPHID_PERM_SECUREMAPPING_Split;

	return present && (usel || split);
}

static int config_peripheral(uint8_t id, bool dma_present, bool lock)
   11314:	b508      	push	{r3, lr}
	 * Assign DMA capabilities and lock down the attribution.
	 *
	 * Note: the function assumes that the peripheral ID matches
	 * the IRQ line.
	 */
	NVIC_DisableIRQ(id);
   11316:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   11318:	2b00      	cmp	r3, #0
   1131a:	db0c      	blt.n	11336 <config_peripheral.constprop.0+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1131c:	2201      	movs	r2, #1
   1131e:	f000 011f 	and.w	r1, r0, #31
   11322:	408a      	lsls	r2, r1
   11324:	095b      	lsrs	r3, r3, #5
   11326:	4910      	ldr	r1, [pc, #64]	; (11368 <config_peripheral.constprop.0+0x54>)
   11328:	3320      	adds	r3, #32
   1132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1132e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11332:	f3bf 8f6f 	isb	sy
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
   11336:	0083      	lsls	r3, r0, #2
   11338:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
   1133c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
   11340:	2831      	cmp	r0, #49	; 0x31
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
   11342:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
   11346:	d006      	beq.n	11356 <config_peripheral.constprop.0+0x42>
	return present && (usel || split);
   11348:	2a00      	cmp	r2, #0
   1134a:	da07      	bge.n	1135c <config_peripheral.constprop.0+0x48>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
   1134c:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
   11350:	3a02      	subs	r2, #2
   11352:	2a01      	cmp	r2, #1
   11354:	d802      	bhi.n	1135c <config_peripheral.constprop.0+0x48>

	if (usel_or_split(id)) {
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
   11356:	4a05      	ldr	r2, [pc, #20]	; (1136c <config_peripheral.constprop.0+0x58>)
   11358:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	}

	/* Even for non-present peripherals we force IRQs to be routed
	 * to Non-Secure state.
	 */
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
   1135c:	2101      	movs	r1, #1
   1135e:	f006 fec0 	bl	180e2 <irq_target_state_set>
	return 0;
}
   11362:	2000      	movs	r0, #0
   11364:	bd08      	pop	{r3, pc}
   11366:	bf00      	nop
   11368:	e000e100 	.word	0xe000e100
   1136c:	80000100 	.word	0x80000100

00011370 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
   11370:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	uint32_t *vtor_ns = (uint32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
   11372:	f44f 3400 	mov.w	r4, #131072	; 0x20000
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
   11376:	4d20      	ldr	r5, [pc, #128]	; (113f8 <spm_jump+0x88>)
{
   11378:	b085      	sub	sp, #20
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
   1137a:	4629      	mov	r1, r5
   1137c:	481f      	ldr	r0, [pc, #124]	; (113fc <spm_jump+0x8c>)
   1137e:	f006 fdd0 	bl	17f22 <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
   11382:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
   11386:	481e      	ldr	r0, [pc, #120]	; (11400 <spm_jump+0x90>)
   11388:	f006 fdcb 	bl	17f22 <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
   1138c:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
   11390:	481c      	ldr	r0, [pc, #112]	; (11404 <spm_jump+0x94>)
   11392:	f006 fdc6 	bl	17f22 <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
   11396:	2210      	movs	r2, #16
   11398:	2100      	movs	r1, #0
   1139a:	4668      	mov	r0, sp
   1139c:	f006 ff2d 	bl	181fa <memset>
		.vtor_ns = (uint32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
   113a0:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	tz_nonsecure_state_setup(spm_ns_conf);
   113a4:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
   113a6:	9300      	str	r3, [sp, #0]
   113a8:	9502      	str	r5, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
   113aa:	f000 ff41 	bl	12230 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
   113ae:	2001      	movs	r0, #1
   113b0:	f000 ff70 	bl	12294 <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
   113b4:	2000      	movs	r0, #0
   113b6:	f000 ff59 	bl	1226c <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
   113ba:	2000      	movs	r0, #0
   113bc:	f000 ff7e 	bl	122bc <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
   113c0:	2101      	movs	r1, #1
   113c2:	2000      	movs	r0, #0
   113c4:	f000 ff98 	bl	122f8 <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
   113c8:	f000 ff8c 	bl	122e4 <tz_nonsecure_fpu_access_enable>

	spm_configure_ns(&spm_ns_conf);

	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
   113cc:	f8d4 4204 	ldr.w	r4, [r4, #516]	; 0x204

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
   113d0:	480d      	ldr	r0, [pc, #52]	; (11408 <spm_jump+0x98>)
   113d2:	f006 fda6 	bl	17f22 <printk>
	return config_peripheral(id, dma_present, true);
   113d6:	2008      	movs	r0, #8
   113d8:	f7ff ff9c 	bl	11314 <config_peripheral.constprop.0>
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
   113dc:	f024 0401 	bic.w	r4, r4, #1
  __ASM volatile ("dsb 0xF":::"memory");
   113e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   113e4:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
   113e8:	0864      	lsrs	r4, r4, #1
   113ea:	0064      	lsls	r4, r4, #1
   113ec:	4620      	mov	r0, r4
   113ee:	4621      	mov	r1, r4
   113f0:	4622      	mov	r2, r4
   113f2:	4623      	mov	r3, r4
   113f4:	f7ff f83c 	bl	10470 <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
   113f8:	00020200 	.word	0x00020200
   113fc:	00018f3d 	.word	0x00018f3d
   11400:	00018f54 	.word	0x00018f54
   11404:	00018f69 	.word	0x00018f69
   11408:	00018f87 	.word	0x00018f87

0001140c <spm_config>:
		      (uint32_t)reset_ns);
	}
}

void spm_config(void)
{
   1140c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash regions\t\tDomain\t\tPermissions\n");
   11410:	4862      	ldr	r0, [pc, #392]	; (1159c <spm_config+0x190>)
   11412:	f006 fd86 	bl	17f22 <printk>
	config_regions(false, 0, NON_SECURE_FLASH_REGION_INDEX,
   11416:	2100      	movs	r1, #0
   11418:	f240 1317 	movw	r3, #279	; 0x117
   1141c:	4608      	mov	r0, r1
   1141e:	2204      	movs	r2, #4
   11420:	f7ff ff28 	bl	11274 <config_regions>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
   11424:	4d5e      	ldr	r5, [pc, #376]	; (115a0 <spm_config+0x194>)
	config_regions(false, NON_SECURE_FLASH_REGION_INDEX,
   11426:	f240 1307 	movw	r3, #263	; 0x107
   1142a:	2220      	movs	r2, #32
   1142c:	2104      	movs	r1, #4
   1142e:	2000      	movs	r0, #0
   11430:	f7ff ff20 	bl	11274 <config_regions>
	PRINT("\n");
   11434:	485b      	ldr	r0, [pc, #364]	; (115a4 <spm_config+0x198>)
   11436:	f006 fd74 	bl	17f22 <printk>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
   1143a:	f3c5 040e 	ubfx	r4, r5, #0, #15
	__ASSERT((uint32_t)__sg_size <= nsc_size,
   1143e:	4b5a      	ldr	r3, [pc, #360]	; (115a8 <spm_config+0x19c>)
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
   11440:	f5c4 4400 	rsb	r4, r4, #32768	; 0x8000
	__ASSERT((uint32_t)__sg_size <= nsc_size,
   11444:	429c      	cmp	r4, r3
   11446:	d208      	bcs.n	1145a <spm_config+0x4e>
   11448:	4958      	ldr	r1, [pc, #352]	; (115ac <spm_config+0x1a0>)
   1144a:	4859      	ldr	r0, [pc, #356]	; (115b0 <spm_config+0x1a4>)
   1144c:	2282      	movs	r2, #130	; 0x82
   1144e:	f006 fdf5 	bl	1803c <assert_print>
   11452:	2182      	movs	r1, #130	; 0x82
   11454:	4855      	ldr	r0, [pc, #340]	; (115ac <spm_config+0x1a0>)
   11456:	f006 fdea 	bl	1802e <assert_post_action>
	nrf_spu_flashnsc_set(NRF_SPU, 0, FLASH_NSC_SIZE_REG(nsc_size),
   1145a:	fab4 f484 	clz	r4, r4
                                            uint8_t            flash_nsc_id,
                                            nrf_spu_nsc_size_t flash_nsc_size,
                                            uint8_t            region_number,
                                            bool               lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].REGION & SPU_FLASHNSC_REGION_LOCK_Msk));
   1145e:	4e55      	ldr	r6, [pc, #340]	; (115b4 <spm_config+0x1a8>)
   11460:	f1c4 041b 	rsb	r4, r4, #27
   11464:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
   11468:	b2e4      	uxtb	r4, r4
   1146a:	05d8      	lsls	r0, r3, #23
   1146c:	f3c5 35c4 	ubfx	r5, r5, #15, #5
   11470:	d50a      	bpl.n	11488 <spm_config+0x7c>
   11472:	4951      	ldr	r1, [pc, #324]	; (115b8 <spm_config+0x1ac>)
   11474:	484e      	ldr	r0, [pc, #312]	; (115b0 <spm_config+0x1a4>)
   11476:	f44f 72bd 	mov.w	r2, #378	; 0x17a
   1147a:	f006 fddf 	bl	1803c <assert_print>
   1147e:	f44f 71bd 	mov.w	r1, #378	; 0x17a
   11482:	484d      	ldr	r0, [pc, #308]	; (115b8 <spm_config+0x1ac>)
   11484:	f006 fdd3 	bl	1802e <assert_post_action>
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].SIZE & SPU_FLASHNSC_SIZE_LOCK_Msk));
   11488:	f8d6 3504 	ldr.w	r3, [r6, #1284]	; 0x504
   1148c:	05d9      	lsls	r1, r3, #23
   1148e:	d50a      	bpl.n	114a6 <spm_config+0x9a>
   11490:	4949      	ldr	r1, [pc, #292]	; (115b8 <spm_config+0x1ac>)
   11492:	4847      	ldr	r0, [pc, #284]	; (115b0 <spm_config+0x1a4>)
   11494:	f240 127b 	movw	r2, #379	; 0x17b
   11498:	f006 fdd0 	bl	1803c <assert_print>
   1149c:	f240 117b 	movw	r1, #379	; 0x17b
   114a0:	4845      	ldr	r0, [pc, #276]	; (115b8 <spm_config+0x1ac>)
   114a2:	f006 fdc4 	bl	1802e <assert_post_action>

    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
   114a6:	4b43      	ldr	r3, [pc, #268]	; (115b4 <spm_config+0x1a8>)
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
   114a8:	4844      	ldr	r0, [pc, #272]	; (115bc <spm_config+0x1b0>)
   114aa:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
        (lock_conf ? SPU_FLASHNSC_REGION_LOCK_Msk : 0);
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
   114ae:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   114b2:	f8d3 1500 	ldr.w	r1, [r3, #1280]	; 0x500
   114b6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   114ba:	0152      	lsls	r2, r2, #5
   114bc:	f006 fd31 	bl	17f22 <printk>
	PRINT("\n");
   114c0:	4838      	ldr	r0, [pc, #224]	; (115a4 <spm_config+0x198>)
   114c2:	f006 fd2e 	bl	17f22 <printk>
	int err = spm_secure_services_init();
   114c6:	f000 f8b3 	bl	11630 <spm_secure_services_init>
	if (err != 0) {
   114ca:	4601      	mov	r1, r0
   114cc:	b110      	cbz	r0, 114d4 <spm_config+0xc8>
		PRINT("Could not initialize secure services (err %d).\n", err);
   114ce:	483c      	ldr	r0, [pc, #240]	; (115c0 <spm_config+0x1b4>)
   114d0:	f006 fd27 	bl	17f22 <printk>
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
   114d4:	483b      	ldr	r0, [pc, #236]	; (115c4 <spm_config+0x1b8>)
   114d6:	f006 fd24 	bl	17f22 <printk>
	config_regions(true, 0, NON_SECURE_RAM_REGION_INDEX,
   114da:	f240 1317 	movw	r3, #279	; 0x117
   114de:	2204      	movs	r2, #4
   114e0:	2100      	movs	r1, #0
   114e2:	2001      	movs	r0, #1
   114e4:	f7ff fec6 	bl	11274 <config_regions>
    NRFX_ASSERT(!(p_reg->DPPI[dppi_id].LOCK & SPU_DPPI_LOCK_LOCK_Msk));
   114e8:	4c32      	ldr	r4, [pc, #200]	; (115b4 <spm_config+0x1a8>)
	config_regions(true, NON_SECURE_RAM_REGION_INDEX,
   114ea:	f240 1307 	movw	r3, #263	; 0x107
   114ee:	2220      	movs	r2, #32
   114f0:	2104      	movs	r1, #4
   114f2:	2001      	movs	r0, #1
   114f4:	f7ff febe 	bl	11274 <config_regions>
	PRINT("\n");
   114f8:	482a      	ldr	r0, [pc, #168]	; (115a4 <spm_config+0x198>)
   114fa:	f006 fd12 	bl	17f22 <printk>
   114fe:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
   11502:	07da      	lsls	r2, r3, #31
   11504:	d50a      	bpl.n	1151c <spm_config+0x110>
   11506:	492c      	ldr	r1, [pc, #176]	; (115b8 <spm_config+0x1ac>)
   11508:	4829      	ldr	r0, [pc, #164]	; (115b0 <spm_config+0x1a4>)
   1150a:	f240 125b 	movw	r2, #347	; 0x15b
   1150e:	f006 fd95 	bl	1803c <assert_print>
   11512:	f240 115b 	movw	r1, #347	; 0x15b
   11516:	4828      	ldr	r0, [pc, #160]	; (115b8 <spm_config+0x1ac>)
   11518:	f006 fd89 	bl	1802e <assert_post_action>
    p_reg->DPPI[dppi_id].PERM = channels_mask;
   1151c:	2300      	movs	r3, #0
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
   1151e:	482a      	ldr	r0, [pc, #168]	; (115c8 <spm_config+0x1bc>)
   11520:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
   11524:	f006 fcfd 	bl	17f22 <printk>
    NRFX_ASSERT(!(p_reg->GPIOPORT[gpio_port].LOCK & SPU_GPIOPORT_LOCK_LOCK_Msk));
   11528:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
   1152c:	07db      	lsls	r3, r3, #31
   1152e:	d50a      	bpl.n	11546 <spm_config+0x13a>
   11530:	4921      	ldr	r1, [pc, #132]	; (115b8 <spm_config+0x1ac>)
   11532:	481f      	ldr	r0, [pc, #124]	; (115b0 <spm_config+0x1a4>)
   11534:	f44f 72b5 	mov.w	r2, #362	; 0x16a
   11538:	f006 fd80 	bl	1803c <assert_print>
   1153c:	f44f 71b5 	mov.w	r1, #362	; 0x16a
   11540:	481d      	ldr	r0, [pc, #116]	; (115b8 <spm_config+0x1ac>)
   11542:	f006 fd74 	bl	1802e <assert_post_action>
    p_reg->GPIOPORT[gpio_port].PERM = gpio_mask;
   11546:	2400      	movs	r4, #0
   11548:	4b1a      	ldr	r3, [pc, #104]	; (115b4 <spm_config+0x1a8>)
   1154a:	4d20      	ldr	r5, [pc, #128]	; (115cc <spm_config+0x1c0>)
		PRINT("%02u %-21s%s", i, periph[i].name,
   1154c:	4f20      	ldr	r7, [pc, #128]	; (115d0 <spm_config+0x1c4>)
   1154e:	f8df 8084 	ldr.w	r8, [pc, #132]	; 115d4 <spm_config+0x1c8>
   11552:	f8df 9084 	ldr.w	r9, [pc, #132]	; 115d8 <spm_config+0x1cc>
   11556:	f8c3 44c0 	str.w	r4, [r3, #1216]	; 0x4c0
   1155a:	796e      	ldrb	r6, [r5, #5]
   1155c:	4621      	mov	r1, r4
   1155e:	2e00      	cmp	r6, #0
   11560:	bf14      	ite	ne
   11562:	463b      	movne	r3, r7
   11564:	4643      	moveq	r3, r8
   11566:	4648      	mov	r0, r9
   11568:	682a      	ldr	r2, [r5, #0]
   1156a:	f006 fcda 	bl	17f22 <printk>
		if (periph[i].secure) {
   1156e:	b166      	cbz	r6, 1158a <spm_config+0x17e>
			PRINT("\tSKIP\n");
   11570:	481a      	ldr	r0, [pc, #104]	; (115dc <spm_config+0x1d0>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
   11572:	3401      	adds	r4, #1
			PRINT("\tOK\n");
   11574:	f006 fcd5 	bl	17f22 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
   11578:	2c20      	cmp	r4, #32
   1157a:	f105 0508 	add.w	r5, r5, #8
   1157e:	d1ec      	bne.n	1155a <spm_config+0x14e>
	PRINT("\n");
   11580:	4808      	ldr	r0, [pc, #32]	; (115a4 <spm_config+0x198>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
   11582:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
   11586:	f006 bccc 	b.w	17f22 <printk>
	return config_peripheral(id, dma_present, true);
   1158a:	7928      	ldrb	r0, [r5, #4]
   1158c:	f7ff fec2 	bl	11314 <config_peripheral.constprop.0>
		if (err) {
   11590:	b108      	cbz	r0, 11596 <spm_config+0x18a>
			PRINT("\tERROR\n");
   11592:	4813      	ldr	r0, [pc, #76]	; (115e0 <spm_config+0x1d4>)
   11594:	e7ed      	b.n	11572 <spm_config+0x166>
			PRINT("\tOK\n");
   11596:	4813      	ldr	r0, [pc, #76]	; (115e4 <spm_config+0x1d8>)
   11598:	e7eb      	b.n	11572 <spm_config+0x166>
   1159a:	bf00      	nop
   1159c:	00018fbd 	.word	0x00018fbd
   115a0:	0001ffe0 	.word	0x0001ffe0
   115a4:	00019b9a 	.word	0x00019b9a
   115a8:	00000020 	.word	0x00000020
   115ac:	00018fe1 	.word	0x00018fe1
   115b0:	00018ef0 	.word	0x00018ef0
   115b4:	50003000 	.word	0x50003000
   115b8:	00019002 	.word	0x00019002
   115bc:	00019034 	.word	0x00019034
   115c0:	0001907a 	.word	0x0001907a
   115c4:	000190aa 	.word	0x000190aa
   115c8:	000190cc 	.word	0x000190cc
   115cc:	00018aa8 	.word	0x00018aa8
   115d0:	00018f18 	.word	0x00018f18
   115d4:	00018fb2 	.word	0x00018fb2
   115d8:	000190e8 	.word	0x000190e8
   115dc:	000190f5 	.word	0x000190f5
   115e0:	000190fc 	.word	0x000190fc
   115e4:	00019104 	.word	0x00019104

000115e8 <fw_info_find>:
 *                              at the allowed offsets from firmware_address.
 *
 * @return  A pointer to the fw_info struct if found. Otherwise NULL.
 */
static inline const struct fw_info *fw_info_find(uint32_t firmware_address)
{
   115e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   115ec:	4607      	mov	r7, r0
	const struct fw_info *finfo;

	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
   115ee:	2600      	movs	r6, #0
{
   115f0:	b085      	sub	sp, #20
   115f2:	f8df 9034 	ldr.w	r9, [pc, #52]	; 11628 <fw_info_find+0x40>
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
   115f6:	f8df 8034 	ldr.w	r8, [pc, #52]	; 1162c <fw_info_find+0x44>
   115fa:	ad01      	add	r5, sp, #4
		finfo = fw_info_check(firmware_address +
						fw_info_allowed_offsets[i]);
   115fc:	f859 4b04 	ldr.w	r4, [r9], #4
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
   11600:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
	finfo = (const struct fw_info *)(fw_info_addr);
   11604:	443c      	add	r4, r7
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
   11606:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
   1160a:	220c      	movs	r2, #12
   1160c:	4629      	mov	r1, r5
   1160e:	4620      	mov	r0, r4
   11610:	f006 fdbf 	bl	18192 <memcmp>
   11614:	b900      	cbnz	r0, 11618 <fw_info_find+0x30>
		if (finfo) {
   11616:	b91c      	cbnz	r4, 11620 <fw_info_find+0x38>
	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
   11618:	3601      	adds	r6, #1
   1161a:	2e05      	cmp	r6, #5
   1161c:	d1ee      	bne.n	115fc <fw_info_find+0x14>
			return finfo;
		}
	}
	return NULL;
   1161e:	2400      	movs	r4, #0
}
   11620:	4620      	mov	r0, r4
   11622:	b005      	add	sp, #20
   11624:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11628:	00018ba8 	.word	0x00018ba8
   1162c:	00018a70 	.word	0x00018a70

00011630 <spm_secure_services_init>:
int spm_secure_services_init(void)
{
	int err = 0;

#ifdef CONFIG_SPM_SERVICE_RNG
	err = nrf_cc3xx_platform_ctr_drbg_init(&ctr_drbg_ctx, NULL, 0);
   11630:	2200      	movs	r2, #0
   11632:	4802      	ldr	r0, [pc, #8]	; (1163c <spm_secure_services_init+0xc>)
   11634:	4611      	mov	r1, r2
   11636:	f003 bebd 	b.w	153b4 <nrf_cc3xx_platform_ctr_drbg_init>
   1163a:	bf00      	nop
   1163c:	20000274 	.word	0x20000274

00011640 <__acle_se_spm_request_read_nse>:
};


__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read_nse(void *destination, uint32_t addr, size_t len)
{
   11640:	b570      	push	{r4, r5, r6, lr}
   11642:	460c      	mov	r4, r1
   11644:	4615      	mov	r5, r2
#endif
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
   11646:	4606      	mov	r6, r0
   11648:	b950      	cbnz	r0, 11660 <__acle_se_spm_request_read_nse+0x20>
		return -EINVAL;
   1164a:	f06f 0015 	mvn.w	r0, #21
			return 0;
		}
	}

	return -EPERM;
}
   1164e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11652:	4671      	mov	r1, lr
   11654:	4672      	mov	r2, lr
   11656:	4673      	mov	r3, lr
   11658:	46f4      	mov	ip, lr
   1165a:	f38e 8c00 	msr	CPSR_fs, lr
   1165e:	4774      	bxns	lr
	if (destination == NULL || len <= 0) {
   11660:	2a00      	cmp	r2, #0
   11662:	d0f2      	beq.n	1164a <__acle_se_spm_request_read_nse+0xa>
	return arm_cmse_addr_is_secure(ptr) == 1;
   11664:	f006 fd80 	bl	18168 <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)destination)) {
   11668:	2801      	cmp	r0, #1
   1166a:	d0ee      	beq.n	1164a <__acle_se_spm_request_read_nse+0xa>
		if (addr >= start && addr + len <= start + size) {
   1166c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   11670:	d316      	bcc.n	116a0 <__acle_se_spm_request_read_nse+0x60>
   11672:	192b      	adds	r3, r5, r4
   11674:	f5b3 3f81 	cmp.w	r3, #66048	; 0x10200
   11678:	d905      	bls.n	11686 <__acle_se_spm_request_read_nse+0x46>
   1167a:	4a0b      	ldr	r2, [pc, #44]	; (116a8 <__acle_se_spm_request_read_nse+0x68>)
   1167c:	4294      	cmp	r4, r2
   1167e:	d909      	bls.n	11694 <__acle_se_spm_request_read_nse+0x54>
   11680:	322d      	adds	r2, #45	; 0x2d
   11682:	4293      	cmp	r3, r2
   11684:	d809      	bhi.n	1169a <__acle_se_spm_request_read_nse+0x5a>
			memcpy(destination, (const void *)addr, len);
   11686:	462a      	mov	r2, r5
   11688:	4621      	mov	r1, r4
   1168a:	4630      	mov	r0, r6
   1168c:	f006 fdaa 	bl	181e4 <memcpy>
			return 0;
   11690:	2000      	movs	r0, #0
   11692:	e7dc      	b.n	1164e <__acle_se_spm_request_read_nse+0xe>
		if (addr >= start && addr + len <= start + size) {
   11694:	4a05      	ldr	r2, [pc, #20]	; (116ac <__acle_se_spm_request_read_nse+0x6c>)
   11696:	4294      	cmp	r4, r2
   11698:	d902      	bls.n	116a0 <__acle_se_spm_request_read_nse+0x60>
   1169a:	4a05      	ldr	r2, [pc, #20]	; (116b0 <__acle_se_spm_request_read_nse+0x70>)
   1169c:	4293      	cmp	r3, r2
   1169e:	d9f2      	bls.n	11686 <__acle_se_spm_request_read_nse+0x46>
	return -EPERM;
   116a0:	f04f 30ff 	mov.w	r0, #4294967295
   116a4:	e7d3      	b.n	1164e <__acle_se_spm_request_read_nse+0xe>
   116a6:	bf00      	nop
   116a8:	00ff01ff 	.word	0x00ff01ff
   116ac:	00ff012f 	.word	0x00ff012f
   116b0:	00ff0138 	.word	0x00ff0138

000116b4 <__acle_se_spm_request_random_number_nse>:


#ifdef CONFIG_SPM_SERVICE_RNG
__TZ_NONSECURE_ENTRY_FUNC
int spm_request_random_number_nse(uint8_t *output, size_t len, size_t *olen)
{
   116b4:	b570      	push	{r4, r5, r6, lr}
   116b6:	4606      	mov	r6, r0
   116b8:	460d      	mov	r5, r1
   116ba:	4614      	mov	r4, r2
	return arm_cmse_addr_is_secure(ptr) == 1;
   116bc:	f006 fd54 	bl	18168 <arm_cmse_addr_is_secure>
	int err = -EINVAL;

	if (ptr_in_secure_area((intptr_t)output) ||
   116c0:	2801      	cmp	r0, #1
   116c2:	d00d      	beq.n	116e0 <__acle_se_spm_request_random_number_nse+0x2c>
	return arm_cmse_addr_is_secure(ptr) == 1;
   116c4:	4620      	mov	r0, r4
   116c6:	f006 fd4f 	bl	18168 <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)output) ||
   116ca:	2801      	cmp	r0, #1
   116cc:	d008      	beq.n	116e0 <__acle_se_spm_request_random_number_nse+0x2c>
	    ptr_in_secure_area((intptr_t)olen)) {
		return -EINVAL;
	}

	err = nrf_cc3xx_platform_ctr_drbg_get(&ctr_drbg_ctx, output, len, olen);
   116ce:	4623      	mov	r3, r4
   116d0:	462a      	mov	r2, r5
   116d2:	4631      	mov	r1, r6
   116d4:	4808      	ldr	r0, [pc, #32]	; (116f8 <__acle_se_spm_request_random_number_nse+0x44>)
   116d6:	f003 fe9f 	bl	15418 <nrf_cc3xx_platform_ctr_drbg_get>
	if (*olen != len) {
   116da:	6823      	ldr	r3, [r4, #0]
   116dc:	42ab      	cmp	r3, r5
   116de:	d001      	beq.n	116e4 <__acle_se_spm_request_random_number_nse+0x30>
		return -EINVAL;
   116e0:	f06f 0015 	mvn.w	r0, #21
	}

	return err;
}
   116e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   116e8:	4671      	mov	r1, lr
   116ea:	4672      	mov	r2, lr
   116ec:	4673      	mov	r3, lr
   116ee:	46f4      	mov	ip, lr
   116f0:	f38e 8c00 	msr	CPSR_fs, lr
   116f4:	4774      	bxns	lr
   116f6:	bf00      	nop
   116f8:	20000274 	.word	0x20000274

000116fc <__acle_se_spm_s0_active>:
#endif /* CONFIG_SPM_SERVICE_RNG */

#ifdef CONFIG_SPM_SERVICE_S0_ACTIVE
__TZ_NONSECURE_ENTRY_FUNC
int spm_s0_active(uint32_t s0_address, uint32_t s1_address, bool *s0_active)
{
   116fc:	b570      	push	{r4, r5, r6, lr}
   116fe:	4605      	mov	r5, r0
	return arm_cmse_addr_is_secure(ptr) == 1;
   11700:	4610      	mov	r0, r2
{
   11702:	460e      	mov	r6, r1
   11704:	4614      	mov	r4, r2
	return arm_cmse_addr_is_secure(ptr) == 1;
   11706:	f006 fd2f 	bl	18168 <arm_cmse_addr_is_secure>
	const struct fw_info *s0;
	const struct fw_info *s1;
	bool s0_valid;
	bool s1_valid;

	if (ptr_in_secure_area((intptr_t)s0_active)) {
   1170a:	2801      	cmp	r0, #1
   1170c:	d10a      	bne.n	11724 <__acle_se_spm_s0_active+0x28>
		return -EINVAL;
   1170e:	f06f 0015 	mvn.w	r0, #21
	} else {
		*s0_active = s0->version >= s1->version;
	}

	return 0;
}
   11712:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11716:	4671      	mov	r1, lr
   11718:	4672      	mov	r2, lr
   1171a:	4673      	mov	r3, lr
   1171c:	46f4      	mov	ip, lr
   1171e:	f38e 8c00 	msr	CPSR_fs, lr
   11722:	4774      	bxns	lr
	s0 = fw_info_find(s0_address);
   11724:	4628      	mov	r0, r5
   11726:	f7ff ff5f 	bl	115e8 <fw_info_find>
   1172a:	4605      	mov	r5, r0
	s1 = fw_info_find(s1_address);
   1172c:	4630      	mov	r0, r6
   1172e:	f7ff ff5b 	bl	115e8 <fw_info_find>
   11732:	4603      	mov	r3, r0
	s0_valid = (s0 != NULL) && (s0->valid == CONFIG_FW_INFO_VALID_VAL);
   11734:	b1cd      	cbz	r5, 1176a <__acle_se_spm_s0_active+0x6e>
   11736:	6a29      	ldr	r1, [r5, #32]
   11738:	4a0e      	ldr	r2, [pc, #56]	; (11774 <__acle_se_spm_s0_active+0x78>)
   1173a:	4291      	cmp	r1, r2
   1173c:	d115      	bne.n	1176a <__acle_se_spm_s0_active+0x6e>
	s1_valid = (s1 != NULL) && (s1->valid == CONFIG_FW_INFO_VALID_VAL);
   1173e:	b148      	cbz	r0, 11754 <__acle_se_spm_s0_active+0x58>
	s0_valid = (s0 != NULL) && (s0->valid == CONFIG_FW_INFO_VALID_VAL);
   11740:	2001      	movs	r0, #1
	s1_valid = (s1 != NULL) && (s1->valid == CONFIG_FW_INFO_VALID_VAL);
   11742:	6a19      	ldr	r1, [r3, #32]
   11744:	4a0b      	ldr	r2, [pc, #44]	; (11774 <__acle_se_spm_s0_active+0x78>)
   11746:	4291      	cmp	r1, r2
   11748:	d102      	bne.n	11750 <__acle_se_spm_s0_active+0x54>
	} else if (!s0_valid) {
   1174a:	b938      	cbnz	r0, 1175c <__acle_se_spm_s0_active+0x60>
		*s0_active = false;
   1174c:	7020      	strb	r0, [r4, #0]
   1174e:	e7e0      	b.n	11712 <__acle_se_spm_s0_active+0x16>
	if (!s1_valid && !s0_valid) {
   11750:	2800      	cmp	r0, #0
   11752:	d0dc      	beq.n	1170e <__acle_se_spm_s0_active+0x12>
		*s0_active = true;
   11754:	2301      	movs	r3, #1
	return 0;
   11756:	2000      	movs	r0, #0
		*s0_active = s0->version >= s1->version;
   11758:	7023      	strb	r3, [r4, #0]
   1175a:	e7da      	b.n	11712 <__acle_se_spm_s0_active+0x16>
   1175c:	695b      	ldr	r3, [r3, #20]
   1175e:	696a      	ldr	r2, [r5, #20]
   11760:	429a      	cmp	r2, r3
   11762:	bf34      	ite	cc
   11764:	2300      	movcc	r3, #0
   11766:	2301      	movcs	r3, #1
   11768:	e7f5      	b.n	11756 <__acle_se_spm_s0_active+0x5a>
	s1_valid = (s1 != NULL) && (s1->valid == CONFIG_FW_INFO_VALID_VAL);
   1176a:	2b00      	cmp	r3, #0
   1176c:	d0cf      	beq.n	1170e <__acle_se_spm_s0_active+0x12>
	s0_valid = (s0 != NULL) && (s0->valid == CONFIG_FW_INFO_VALID_VAL);
   1176e:	2000      	movs	r0, #0
   11770:	e7e7      	b.n	11742 <__acle_se_spm_s0_active+0x46>
   11772:	bf00      	nop
   11774:	9102ffff 	.word	0x9102ffff

00011778 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   11778:	4801      	ldr	r0, [pc, #4]	; (11780 <nrf_cc3xx_platform_abort_init+0x8>)
   1177a:	f003 be13 	b.w	153a4 <nrf_cc3xx_platform_set_abort>
   1177e:	bf00      	nop
   11780:	00018bbc 	.word	0x00018bbc

00011784 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   11784:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
   11786:	4604      	mov	r4, r0
   11788:	b918      	cbnz	r0, 11792 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   1178a:	4b0d      	ldr	r3, [pc, #52]	; (117c0 <mutex_free_platform+0x3c>)
   1178c:	480d      	ldr	r0, [pc, #52]	; (117c4 <mutex_free_platform+0x40>)
   1178e:	685b      	ldr	r3, [r3, #4]
   11790:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   11792:	6861      	ldr	r1, [r4, #4]
   11794:	2908      	cmp	r1, #8
   11796:	d00d      	beq.n	117b4 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   11798:	f031 0304 	bics.w	r3, r1, #4
   1179c:	d00a      	beq.n	117b4 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   1179e:	f011 0102 	ands.w	r1, r1, #2
   117a2:	d008      	beq.n	117b6 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   117a4:	4621      	mov	r1, r4
   117a6:	4808      	ldr	r0, [pc, #32]	; (117c8 <mutex_free_platform+0x44>)
   117a8:	f002 f846 	bl	13838 <k_mem_slab_free>
        mutex->mutex = NULL;
   117ac:	2300      	movs	r3, #0
   117ae:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   117b0:	2300      	movs	r3, #0
   117b2:	6063      	str	r3, [r4, #4]
}
   117b4:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   117b6:	2214      	movs	r2, #20
   117b8:	6820      	ldr	r0, [r4, #0]
   117ba:	f006 fd1e 	bl	181fa <memset>
   117be:	e7f7      	b.n	117b0 <mutex_free_platform+0x2c>
   117c0:	20000060 	.word	0x20000060
   117c4:	00019239 	.word	0x00019239
   117c8:	20000434 	.word	0x20000434

000117cc <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   117cc:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   117ce:	b1e8      	cbz	r0, 1180c <mutex_lock_platform+0x40>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
   117d0:	6843      	ldr	r3, [r0, #4]
   117d2:	2b04      	cmp	r3, #4
   117d4:	d10c      	bne.n	117f0 <mutex_lock_platform+0x24>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   117d6:	2201      	movs	r2, #1
   117d8:	6803      	ldr	r3, [r0, #0]
   117da:	e8d3 1fef 	ldaex	r1, [r3]
   117de:	2900      	cmp	r1, #0
   117e0:	d103      	bne.n	117ea <mutex_lock_platform+0x1e>
   117e2:	e8c3 2fe0 	stlex	r0, r2, [r3]
   117e6:	2800      	cmp	r0, #0
   117e8:	d1f7      	bne.n	117da <mutex_lock_platform+0xe>
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   117ea:	d10b      	bne.n	11804 <mutex_lock_platform+0x38>
   117ec:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
   117ee:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   117f0:	b153      	cbz	r3, 11808 <mutex_lock_platform+0x3c>
        p_mutex = (struct k_mutex *)mutex->mutex;
   117f2:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   117f4:	f04f 32ff 	mov.w	r2, #4294967295
   117f8:	f04f 33ff 	mov.w	r3, #4294967295
   117fc:	f002 f990 	bl	13b20 <z_impl_k_mutex_lock>
        if (ret == 0) {
   11800:	2800      	cmp	r0, #0
   11802:	d0f3      	beq.n	117ec <mutex_lock_platform+0x20>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   11804:	4803      	ldr	r0, [pc, #12]	; (11814 <mutex_lock_platform+0x48>)
   11806:	e7f2      	b.n	117ee <mutex_lock_platform+0x22>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   11808:	4803      	ldr	r0, [pc, #12]	; (11818 <mutex_lock_platform+0x4c>)
   1180a:	e7f0      	b.n	117ee <mutex_lock_platform+0x22>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   1180c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   11810:	e7ed      	b.n	117ee <mutex_lock_platform+0x22>
   11812:	bf00      	nop
   11814:	ffff8fe9 	.word	0xffff8fe9
   11818:	ffff8fea 	.word	0xffff8fea

0001181c <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   1181c:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   1181e:	b1b0      	cbz	r0, 1184e <mutex_unlock_platform+0x32>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   11820:	6843      	ldr	r3, [r0, #4]
   11822:	2b04      	cmp	r3, #4
   11824:	d10d      	bne.n	11842 <mutex_unlock_platform+0x26>
   11826:	2200      	movs	r2, #0
   11828:	6803      	ldr	r3, [r0, #0]
   1182a:	e8d3 1fef 	ldaex	r1, [r3]
   1182e:	2901      	cmp	r1, #1
   11830:	d103      	bne.n	1183a <mutex_unlock_platform+0x1e>
   11832:	e8c3 2fe0 	stlex	r0, r2, [r3]
   11836:	2800      	cmp	r0, #0
   11838:	d1f7      	bne.n	1182a <mutex_unlock_platform+0xe>
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1183a:	4807      	ldr	r0, [pc, #28]	; (11858 <mutex_unlock_platform+0x3c>)
   1183c:	bf08      	it	eq
   1183e:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
   11840:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   11842:	b13b      	cbz	r3, 11854 <mutex_unlock_platform+0x38>
        p_mutex = (struct k_mutex *)mutex->mutex;
   11844:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
   11846:	f002 fa3d 	bl	13cc4 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
   1184a:	2000      	movs	r0, #0
   1184c:	e7f8      	b.n	11840 <mutex_unlock_platform+0x24>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   1184e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   11852:	e7f5      	b.n	11840 <mutex_unlock_platform+0x24>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   11854:	4801      	ldr	r0, [pc, #4]	; (1185c <mutex_unlock_platform+0x40>)
   11856:	e7f3      	b.n	11840 <mutex_unlock_platform+0x24>
   11858:	ffff8fe9 	.word	0xffff8fe9
   1185c:	ffff8fea 	.word	0xffff8fea

00011860 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   11860:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   11862:	4604      	mov	r4, r0
   11864:	b918      	cbnz	r0, 1186e <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   11866:	4b16      	ldr	r3, [pc, #88]	; (118c0 <mutex_init_platform+0x60>)
   11868:	4816      	ldr	r0, [pc, #88]	; (118c4 <mutex_init_platform+0x64>)
   1186a:	685b      	ldr	r3, [r3, #4]
   1186c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   1186e:	6863      	ldr	r3, [r4, #4]
   11870:	2b04      	cmp	r3, #4
   11872:	d023      	beq.n	118bc <mutex_init_platform+0x5c>
   11874:	2b08      	cmp	r3, #8
   11876:	d021      	beq.n	118bc <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   11878:	b9cb      	cbnz	r3, 118ae <mutex_init_platform+0x4e>
   1187a:	6823      	ldr	r3, [r4, #0]
   1187c:	b9bb      	cbnz	r3, 118ae <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   1187e:	f04f 32ff 	mov.w	r2, #4294967295
   11882:	f04f 33ff 	mov.w	r3, #4294967295
   11886:	4621      	mov	r1, r4
   11888:	480f      	ldr	r0, [pc, #60]	; (118c8 <mutex_init_platform+0x68>)
   1188a:	f001 ff7b 	bl	13784 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   1188e:	b908      	cbnz	r0, 11894 <mutex_init_platform+0x34>
   11890:	6823      	ldr	r3, [r4, #0]
   11892:	b91b      	cbnz	r3, 1189c <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
   11894:	4b0a      	ldr	r3, [pc, #40]	; (118c0 <mutex_init_platform+0x60>)
   11896:	480d      	ldr	r0, [pc, #52]	; (118cc <mutex_init_platform+0x6c>)
   11898:	685b      	ldr	r3, [r3, #4]
   1189a:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   1189c:	2214      	movs	r2, #20
   1189e:	2100      	movs	r1, #0
   118a0:	6820      	ldr	r0, [r4, #0]
   118a2:	f006 fcaa 	bl	181fa <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   118a6:	6863      	ldr	r3, [r4, #4]
   118a8:	f043 0302 	orr.w	r3, r3, #2
   118ac:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   118ae:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   118b0:	f006 ff1d 	bl	186ee <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   118b4:	6863      	ldr	r3, [r4, #4]
   118b6:	f043 0301 	orr.w	r3, r3, #1
   118ba:	6063      	str	r3, [r4, #4]
}
   118bc:	bd10      	pop	{r4, pc}
   118be:	bf00      	nop
   118c0:	20000060 	.word	0x20000060
   118c4:	00019239 	.word	0x00019239
   118c8:	20000434 	.word	0x20000434
   118cc:	0001925f 	.word	0x0001925f

000118d0 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   118d0:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   118d2:	4906      	ldr	r1, [pc, #24]	; (118ec <nrf_cc3xx_platform_mutex_init+0x1c>)
   118d4:	2340      	movs	r3, #64	; 0x40
   118d6:	2214      	movs	r2, #20
   118d8:	4805      	ldr	r0, [pc, #20]	; (118f0 <nrf_cc3xx_platform_mutex_init+0x20>)
   118da:	f006 fed5 	bl	18688 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   118de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   118e2:	4904      	ldr	r1, [pc, #16]	; (118f4 <nrf_cc3xx_platform_mutex_init+0x24>)
   118e4:	4804      	ldr	r0, [pc, #16]	; (118f8 <nrf_cc3xx_platform_mutex_init+0x28>)
   118e6:	f003 be15 	b.w	15514 <nrf_cc3xx_platform_set_mutexes>
   118ea:	bf00      	nop
   118ec:	20000454 	.word	0x20000454
   118f0:	20000434 	.word	0x20000434
   118f4:	00018bd4 	.word	0x00018bd4
   118f8:	00018bc4 	.word	0x00018bc4

000118fc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   118fc:	4901      	ldr	r1, [pc, #4]	; (11904 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   118fe:	2210      	movs	r2, #16
	str	r2, [r1]
   11900:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   11902:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   11904:	e000ed10 	.word	0xe000ed10

00011908 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   11908:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1190a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1190c:	f380 8811 	msr	BASEPRI, r0
	isb
   11910:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   11914:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   11918:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1191a:	b662      	cpsie	i
	isb
   1191c:	f3bf 8f6f 	isb	sy

	bx	lr
   11920:	4770      	bx	lr
   11922:	bf00      	nop

00011924 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   11924:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11926:	4605      	mov	r5, r0

	if (esf != NULL) {
   11928:	460c      	mov	r4, r1
   1192a:	b1c9      	cbz	r1, 11960 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1192c:	688b      	ldr	r3, [r1, #8]
   1192e:	4810      	ldr	r0, [pc, #64]	; (11970 <z_arm_fatal_error+0x4c>)
   11930:	9300      	str	r3, [sp, #0]
   11932:	e9d1 2300 	ldrd	r2, r3, [r1]
   11936:	2145      	movs	r1, #69	; 0x45
   11938:	f006 fb94 	bl	18064 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1193c:	6963      	ldr	r3, [r4, #20]
   1193e:	2145      	movs	r1, #69	; 0x45
   11940:	9300      	str	r3, [sp, #0]
   11942:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   11946:	480b      	ldr	r0, [pc, #44]	; (11974 <z_arm_fatal_error+0x50>)
   11948:	f006 fb8c 	bl	18064 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1194c:	2145      	movs	r1, #69	; 0x45
   1194e:	69e2      	ldr	r2, [r4, #28]
   11950:	4809      	ldr	r0, [pc, #36]	; (11978 <z_arm_fatal_error+0x54>)
   11952:	f006 fb87 	bl	18064 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   11956:	2145      	movs	r1, #69	; 0x45
   11958:	69a2      	ldr	r2, [r4, #24]
   1195a:	4808      	ldr	r0, [pc, #32]	; (1197c <z_arm_fatal_error+0x58>)
   1195c:	f006 fb82 	bl	18064 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   11960:	4621      	mov	r1, r4
   11962:	4628      	mov	r0, r5
}
   11964:	b003      	add	sp, #12
   11966:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
   1196a:	f001 bdad 	b.w	134c8 <z_fatal_error>
   1196e:	bf00      	nop
   11970:	0001928c 	.word	0x0001928c
   11974:	000192c0 	.word	0x000192c0
   11978:	000192f4 	.word	0x000192f4
   1197c:	00019308 	.word	0x00019308

00011980 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   11980:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   11982:	2b00      	cmp	r3, #0
   11984:	db08      	blt.n	11998 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11986:	2201      	movs	r2, #1
   11988:	f000 001f 	and.w	r0, r0, #31
   1198c:	fa02 f000 	lsl.w	r0, r2, r0
   11990:	4a02      	ldr	r2, [pc, #8]	; (1199c <arch_irq_enable+0x1c>)
   11992:	095b      	lsrs	r3, r3, #5
   11994:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   11998:	4770      	bx	lr
   1199a:	bf00      	nop
   1199c:	e000e100 	.word	0xe000e100

000119a0 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   119a0:	4b05      	ldr	r3, [pc, #20]	; (119b8 <arch_irq_is_enabled+0x18>)
   119a2:	0942      	lsrs	r2, r0, #5
   119a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   119a8:	2301      	movs	r3, #1
   119aa:	f000 001f 	and.w	r0, r0, #31
   119ae:	fa03 f000 	lsl.w	r0, r3, r0
}
   119b2:	4010      	ands	r0, r2
   119b4:	4770      	bx	lr
   119b6:	bf00      	nop
   119b8:	e000e100 	.word	0xe000e100

000119bc <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   119bc:	b538      	push	{r3, r4, r5, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   119be:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   119c0:	2c07      	cmp	r4, #7
{
   119c2:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   119c4:	d908      	bls.n	119d8 <z_arm_irq_priority_set+0x1c>
   119c6:	490d      	ldr	r1, [pc, #52]	; (119fc <z_arm_irq_priority_set+0x40>)
   119c8:	480d      	ldr	r0, [pc, #52]	; (11a00 <z_arm_irq_priority_set+0x44>)
   119ca:	2257      	movs	r2, #87	; 0x57
   119cc:	f006 fb36 	bl	1803c <assert_print>
   119d0:	2157      	movs	r1, #87	; 0x57
   119d2:	480a      	ldr	r0, [pc, #40]	; (119fc <z_arm_irq_priority_set+0x40>)
   119d4:	f006 fb2b 	bl	1802e <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   119d8:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   119da:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   119dc:	bfac      	ite	ge
   119de:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   119e2:	4b08      	ldrlt	r3, [pc, #32]	; (11a04 <z_arm_irq_priority_set+0x48>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   119e4:	ea4f 1444 	mov.w	r4, r4, lsl #5
   119e8:	b2e4      	uxtb	r4, r4
   119ea:	bfab      	itete	ge
   119ec:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   119f0:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   119f4:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   119f8:	555c      	strblt	r4, [r3, r5]
}
   119fa:	bd38      	pop	{r3, r4, r5, pc}
   119fc:	0001933b 	.word	0x0001933b
   11a00:	00018ef0 	.word	0x00018ef0
   11a04:	e000ed14 	.word	0xe000ed14

00011a08 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   11a08:	bf30      	wfi
    b z_SysNmiOnReset
   11a0a:	f7ff bffd 	b.w	11a08 <z_SysNmiOnReset>
   11a0e:	bf00      	nop

00011a10 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   11a10:	4a0b      	ldr	r2, [pc, #44]	; (11a40 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   11a12:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   11a14:	4b0b      	ldr	r3, [pc, #44]	; (11a44 <z_arm_prep_c+0x34>)
   11a16:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   11a1a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   11a1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11a20:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   11a24:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   11a28:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   11a2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   11a30:	f001 fdc0 	bl	135b4 <z_bss_zero>
	z_data_copy();
   11a34:	f003 f9be 	bl	14db4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   11a38:	f000 fb60 	bl	120fc <z_arm_interrupt_init>
	z_cstart();
   11a3c:	f001 fdfa 	bl	13634 <z_cstart>
   11a40:	00010200 	.word	0x00010200
   11a44:	e000ed00 	.word	0xe000ed00

00011a48 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   11a48:	4a09      	ldr	r2, [pc, #36]	; (11a70 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   11a4a:	490a      	ldr	r1, [pc, #40]	; (11a74 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   11a4c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   11a4e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   11a50:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
   11a52:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11a54:	4908      	ldr	r1, [pc, #32]	; (11a78 <arch_swap+0x30>)
   11a56:	684b      	ldr	r3, [r1, #4]
   11a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   11a5c:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   11a5e:	2300      	movs	r3, #0
   11a60:	f383 8811 	msr	BASEPRI, r3
   11a64:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   11a68:	6893      	ldr	r3, [r2, #8]
}
   11a6a:	6f98      	ldr	r0, [r3, #120]	; 0x78
   11a6c:	4770      	bx	lr
   11a6e:	bf00      	nop
   11a70:	200009e4 	.word	0x200009e4
   11a74:	00018cf0 	.word	0x00018cf0
   11a78:	e000ed00 	.word	0xe000ed00

00011a7c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   11a7c:	4913      	ldr	r1, [pc, #76]	; (11acc <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   11a7e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   11a80:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   11a84:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   11a86:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   11a8a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   11a8e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   11a90:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   11a94:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   11a98:	4f0d      	ldr	r7, [pc, #52]	; (11ad0 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   11a9a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   11a9e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   11aa0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   11aa2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   11aa4:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
   11aa6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   11aa8:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   11aaa:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   11aae:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   11ab2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   11ab6:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   11aba:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   11abe:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   11ac0:	f006 fb45 	bl	1814e <configure_builtin_stack_guard>
    pop {r2, lr}
   11ac4:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   11ac8:	4770      	bx	lr
   11aca:	0000      	.short	0x0000
    ldr r1, =_kernel
   11acc:	200009e4 	.word	0x200009e4
    ldr v4, =_SCS_ICSR
   11ad0:	e000ed04 	.word	0xe000ed04

00011ad4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   11ad4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   11ad8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   11ada:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   11ade:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   11ae2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   11ae4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   11ae8:	2902      	cmp	r1, #2
    beq _oops
   11aea:	d0ff      	beq.n	11aec <_oops>

00011aec <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   11aec:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   11aee:	f006 faf0 	bl	180d2 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   11af2:	bd01      	pop	{r0, pc}

00011af4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   11af4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   11af8:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   11afa:	490b      	ldr	r1, [pc, #44]	; (11b28 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
   11afc:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   11b00:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   11b02:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   11b06:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   11b0a:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   11b0c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   11b10:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   11b14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   11b18:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   11b1c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   11b1e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   11b20:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   11b22:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   11b24:	4770      	bx	lr
   11b26:	bf00      	nop
   11b28:	00017f63 	.word	0x00017f63

00011b2c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   11b2c:	4b08      	ldr	r3, [pc, #32]	; (11b50 <arch_switch_to_main_thread+0x24>)
   11b2e:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   11b30:	6e43      	ldr	r3, [r0, #100]	; 0x64
   11b32:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   11b36:	4610      	mov	r0, r2
   11b38:	f381 8809 	msr	PSP, r1
   11b3c:	2100      	movs	r1, #0
   11b3e:	b663      	cpsie	if
   11b40:	f381 8811 	msr	BASEPRI, r1
   11b44:	f3bf 8f6f 	isb	sy
   11b48:	2200      	movs	r2, #0
   11b4a:	2300      	movs	r3, #0
   11b4c:	f006 fa09 	bl	17f62 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   11b50:	200009e4 	.word	0x200009e4

00011b54 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   11b54:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   11b56:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   11b58:	4a0b      	ldr	r2, [pc, #44]	; (11b88 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   11b5a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   11b5c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   11b5e:	bf1e      	ittt	ne
	movne	r1, #0
   11b60:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   11b62:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   11b64:	f006 fdb4 	blne	186d0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   11b68:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   11b6a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   11b6e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   11b72:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   11b76:	4905      	ldr	r1, [pc, #20]	; (11b8c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   11b78:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   11b7a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   11b7c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   11b7e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   11b82:	4903      	ldr	r1, [pc, #12]	; (11b90 <_isr_wrapper+0x3c>)
	bx r1
   11b84:	4708      	bx	r1
   11b86:	0000      	.short	0x0000
	ldr r2, =_kernel
   11b88:	200009e4 	.word	0x200009e4
	ldr r1, =_sw_isr_table
   11b8c:	0001880c 	.word	0x0001880c
	ldr r1, =z_arm_int_exit
   11b90:	00011b95 	.word	0x00011b95

00011b94 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   11b94:	4b04      	ldr	r3, [pc, #16]	; (11ba8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   11b96:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   11b98:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   11b9a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   11b9c:	d003      	beq.n	11ba6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   11b9e:	4903      	ldr	r1, [pc, #12]	; (11bac <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   11ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   11ba4:	600a      	str	r2, [r1, #0]

00011ba6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   11ba6:	4770      	bx	lr
	ldr r3, =_kernel
   11ba8:	200009e4 	.word	0x200009e4
	ldr r1, =_SCS_ICSR
   11bac:	e000ed04 	.word	0xe000ed04

00011bb0 <secure_fault.constprop.0>:
 * @brief Dump SecureFault information
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void secure_fault(const z_arch_esf_t *esf)
   11bb0:	b510      	push	{r4, lr}
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
   11bb2:	4c24      	ldr	r4, [pc, #144]	; (11c44 <secure_fault.constprop.0+0x94>)
	PR_FAULT_INFO("***** SECURE FAULT *****");
   11bb4:	4824      	ldr	r0, [pc, #144]	; (11c48 <secure_fault.constprop.0+0x98>)
   11bb6:	2145      	movs	r1, #69	; 0x45
   11bb8:	f006 fa54 	bl	18064 <z_log_minimal_printk>
	STORE_xFAR(sfar, SAU->SFAR);
   11bbc:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
   11bc0:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   11bc4:	0658      	lsls	r0, r3, #25
   11bc6:	d503      	bpl.n	11bd0 <secure_fault.constprop.0+0x20>
		PR_EXC("  Address: 0x%x", sfar);
   11bc8:	2145      	movs	r1, #69	; 0x45
   11bca:	4820      	ldr	r0, [pc, #128]	; (11c4c <secure_fault.constprop.0+0x9c>)
   11bcc:	f006 fa4a 	bl	18064 <z_log_minimal_printk>
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
   11bd0:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   11bd4:	07d9      	lsls	r1, r3, #31
   11bd6:	d50b      	bpl.n	11bf0 <secure_fault.constprop.0+0x40>
		PR_FAULT_INFO("  Invalid entry point");
   11bd8:	2145      	movs	r1, #69	; 0x45
   11bda:	481d      	ldr	r0, [pc, #116]	; (11c50 <secure_fault.constprop.0+0xa0>)
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state error");
   11bdc:	f006 fa42 	bl	18064 <z_log_minimal_printk>
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
   11be0:	4a18      	ldr	r2, [pc, #96]	; (11c44 <secure_fault.constprop.0+0x94>)
   11be2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
   11be6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   11bea:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
}
   11bee:	bd10      	pop	{r4, pc}
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
   11bf0:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   11bf4:	079a      	lsls	r2, r3, #30
   11bf6:	d502      	bpl.n	11bfe <secure_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Invalid integrity signature");
   11bf8:	2145      	movs	r1, #69	; 0x45
   11bfa:	4816      	ldr	r0, [pc, #88]	; (11c54 <secure_fault.constprop.0+0xa4>)
   11bfc:	e7ee      	b.n	11bdc <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
   11bfe:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   11c02:	075b      	lsls	r3, r3, #29
   11c04:	d502      	bpl.n	11c0c <secure_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Invalid exception return");
   11c06:	2145      	movs	r1, #69	; 0x45
   11c08:	4813      	ldr	r0, [pc, #76]	; (11c58 <secure_fault.constprop.0+0xa8>)
   11c0a:	e7e7      	b.n	11bdc <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
   11c0c:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   11c10:	0718      	lsls	r0, r3, #28
   11c12:	d502      	bpl.n	11c1a <secure_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  Attribution unit violation");
   11c14:	2145      	movs	r1, #69	; 0x45
   11c16:	4811      	ldr	r0, [pc, #68]	; (11c5c <secure_fault.constprop.0+0xac>)
   11c18:	e7e0      	b.n	11bdc <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
   11c1a:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   11c1e:	06d9      	lsls	r1, r3, #27
   11c20:	d502      	bpl.n	11c28 <secure_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Invalid transition");
   11c22:	2145      	movs	r1, #69	; 0x45
   11c24:	480e      	ldr	r0, [pc, #56]	; (11c60 <secure_fault.constprop.0+0xb0>)
   11c26:	e7d9      	b.n	11bdc <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
   11c28:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   11c2c:	069a      	lsls	r2, r3, #26
   11c2e:	d502      	bpl.n	11c36 <secure_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Lazy state preservation");
   11c30:	2145      	movs	r1, #69	; 0x45
   11c32:	480c      	ldr	r0, [pc, #48]	; (11c64 <secure_fault.constprop.0+0xb4>)
   11c34:	e7d2      	b.n	11bdc <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
   11c36:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   11c3a:	061b      	lsls	r3, r3, #24
   11c3c:	d5d0      	bpl.n	11be0 <secure_fault.constprop.0+0x30>
		PR_FAULT_INFO("  Lazy state error");
   11c3e:	2145      	movs	r1, #69	; 0x45
   11c40:	4809      	ldr	r0, [pc, #36]	; (11c68 <secure_fault.constprop.0+0xb8>)
   11c42:	e7cb      	b.n	11bdc <secure_fault.constprop.0+0x2c>
   11c44:	e000ed00 	.word	0xe000ed00
   11c48:	00019371 	.word	0x00019371
   11c4c:	0001938f 	.word	0x0001938f
   11c50:	000193a4 	.word	0x000193a4
   11c54:	000193bf 	.word	0x000193bf
   11c58:	000193e2 	.word	0x000193e2
   11c5c:	00019402 	.word	0x00019402
   11c60:	00019424 	.word	0x00019424
   11c64:	0001943e 	.word	0x0001943e
   11c68:	0001945d 	.word	0x0001945d

00011c6c <usage_fault.constprop.0>:
static uint32_t usage_fault(const z_arch_esf_t *esf)
   11c6c:	b538      	push	{r3, r4, r5, lr}
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   11c6e:	4c21      	ldr	r4, [pc, #132]	; (11cf4 <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   11c70:	2145      	movs	r1, #69	; 0x45
   11c72:	4821      	ldr	r0, [pc, #132]	; (11cf8 <usage_fault.constprop.0+0x8c>)
   11c74:	f006 f9f6 	bl	18064 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   11c78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11c7a:	019d      	lsls	r5, r3, #6
   11c7c:	d503      	bpl.n	11c86 <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
   11c7e:	2145      	movs	r1, #69	; 0x45
   11c80:	481e      	ldr	r0, [pc, #120]	; (11cfc <usage_fault.constprop.0+0x90>)
   11c82:	f006 f9ef 	bl	18064 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   11c86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11c88:	01dc      	lsls	r4, r3, #7
   11c8a:	d503      	bpl.n	11c94 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
   11c8c:	2145      	movs	r1, #69	; 0x45
   11c8e:	481c      	ldr	r0, [pc, #112]	; (11d00 <usage_fault.constprop.0+0x94>)
   11c90:	f006 f9e8 	bl	18064 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   11c94:	4d17      	ldr	r5, [pc, #92]	; (11cf4 <usage_fault.constprop.0+0x88>)
   11c96:	6aac      	ldr	r4, [r5, #40]	; 0x28
   11c98:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   11c9c:	d004      	beq.n	11ca8 <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   11c9e:	2145      	movs	r1, #69	; 0x45
   11ca0:	4818      	ldr	r0, [pc, #96]	; (11d04 <usage_fault.constprop.0+0x98>)
   11ca2:	f006 f9df 	bl	18064 <z_log_minimal_printk>
		reason = K_ERR_STACK_CHK_FAIL;
   11ca6:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   11ca8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11caa:	0318      	lsls	r0, r3, #12
   11cac:	d503      	bpl.n	11cb6 <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
   11cae:	2145      	movs	r1, #69	; 0x45
   11cb0:	4815      	ldr	r0, [pc, #84]	; (11d08 <usage_fault.constprop.0+0x9c>)
   11cb2:	f006 f9d7 	bl	18064 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   11cb6:	4d0f      	ldr	r5, [pc, #60]	; (11cf4 <usage_fault.constprop.0+0x88>)
   11cb8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11cba:	0359      	lsls	r1, r3, #13
   11cbc:	d503      	bpl.n	11cc6 <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   11cbe:	2145      	movs	r1, #69	; 0x45
   11cc0:	4812      	ldr	r0, [pc, #72]	; (11d0c <usage_fault.constprop.0+0xa0>)
   11cc2:	f006 f9cf 	bl	18064 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   11cc6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11cc8:	039a      	lsls	r2, r3, #14
   11cca:	d503      	bpl.n	11cd4 <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   11ccc:	2145      	movs	r1, #69	; 0x45
   11cce:	4810      	ldr	r0, [pc, #64]	; (11d10 <usage_fault.constprop.0+0xa4>)
   11cd0:	f006 f9c8 	bl	18064 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   11cd4:	4d07      	ldr	r5, [pc, #28]	; (11cf4 <usage_fault.constprop.0+0x88>)
   11cd6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11cd8:	03db      	lsls	r3, r3, #15
   11cda:	d503      	bpl.n	11ce4 <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   11cdc:	2145      	movs	r1, #69	; 0x45
   11cde:	480d      	ldr	r0, [pc, #52]	; (11d14 <usage_fault.constprop.0+0xa8>)
   11ce0:	f006 f9c0 	bl	18064 <z_log_minimal_printk>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   11ce4:	6aab      	ldr	r3, [r5, #40]	; 0x28
}
   11ce6:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   11ce8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   11cec:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   11cf0:	62ab      	str	r3, [r5, #40]	; 0x28
}
   11cf2:	bd38      	pop	{r3, r4, r5, pc}
   11cf4:	e000ed00 	.word	0xe000ed00
   11cf8:	00019475 	.word	0x00019475
   11cfc:	00019492 	.word	0x00019492
   11d00:	000194aa 	.word	0x000194aa
   11d04:	000194c9 	.word	0x000194c9
   11d08:	000194f8 	.word	0x000194f8
   11d0c:	0001951b 	.word	0x0001951b
   11d10:	00019545 	.word	0x00019545
   11d14:	00019564 	.word	0x00019564

00011d18 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   11d18:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   11d1a:	4c23      	ldr	r4, [pc, #140]	; (11da8 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   11d1c:	4606      	mov	r6, r0
   11d1e:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   11d20:	4822      	ldr	r0, [pc, #136]	; (11dac <bus_fault.constprop.0+0x94>)
   11d22:	2145      	movs	r1, #69	; 0x45
   11d24:	f006 f99e 	bl	18064 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   11d28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11d2a:	04d9      	lsls	r1, r3, #19
   11d2c:	d503      	bpl.n	11d36 <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
   11d2e:	2145      	movs	r1, #69	; 0x45
   11d30:	481f      	ldr	r0, [pc, #124]	; (11db0 <bus_fault.constprop.0+0x98>)
   11d32:	f006 f997 	bl	18064 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   11d36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11d38:	051a      	lsls	r2, r3, #20
   11d3a:	d503      	bpl.n	11d44 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   11d3c:	2145      	movs	r1, #69	; 0x45
   11d3e:	481d      	ldr	r0, [pc, #116]	; (11db4 <bus_fault.constprop.0+0x9c>)
   11d40:	f006 f990 	bl	18064 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   11d44:	4c18      	ldr	r4, [pc, #96]	; (11da8 <bus_fault.constprop.0+0x90>)
   11d46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11d48:	059b      	lsls	r3, r3, #22
   11d4a:	d510      	bpl.n	11d6e <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
   11d4c:	481a      	ldr	r0, [pc, #104]	; (11db8 <bus_fault.constprop.0+0xa0>)
   11d4e:	2145      	movs	r1, #69	; 0x45
   11d50:	f006 f988 	bl	18064 <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
   11d54:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   11d56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11d58:	0418      	lsls	r0, r3, #16
   11d5a:	d508      	bpl.n	11d6e <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   11d5c:	2145      	movs	r1, #69	; 0x45
   11d5e:	4817      	ldr	r0, [pc, #92]	; (11dbc <bus_fault.constprop.0+0xa4>)
   11d60:	f006 f980 	bl	18064 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   11d64:	b11e      	cbz	r6, 11d6e <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   11d66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11d68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   11d6c:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   11d6e:	4c0e      	ldr	r4, [pc, #56]	; (11da8 <bus_fault.constprop.0+0x90>)
   11d70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11d72:	0559      	lsls	r1, r3, #21
   11d74:	d503      	bpl.n	11d7e <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
   11d76:	2145      	movs	r1, #69	; 0x45
   11d78:	4811      	ldr	r0, [pc, #68]	; (11dc0 <bus_fault.constprop.0+0xa8>)
   11d7a:	f006 f973 	bl	18064 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   11d7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11d80:	05da      	lsls	r2, r3, #23
   11d82:	d50b      	bpl.n	11d9c <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
   11d84:	2145      	movs	r1, #69	; 0x45
   11d86:	480f      	ldr	r0, [pc, #60]	; (11dc4 <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   11d88:	f006 f96c 	bl	18064 <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
   11d8c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   11d8e:	4a06      	ldr	r2, [pc, #24]	; (11da8 <bus_fault.constprop.0+0x90>)
   11d90:	6a93      	ldr	r3, [r2, #40]	; 0x28
   11d92:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   11d96:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   11d98:	7028      	strb	r0, [r5, #0]
}
   11d9a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   11d9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11d9e:	049b      	lsls	r3, r3, #18
   11da0:	d5f4      	bpl.n	11d8c <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   11da2:	2145      	movs	r1, #69	; 0x45
   11da4:	4808      	ldr	r0, [pc, #32]	; (11dc8 <bus_fault.constprop.0+0xb0>)
   11da6:	e7ef      	b.n	11d88 <bus_fault.constprop.0+0x70>
   11da8:	e000ed00 	.word	0xe000ed00
   11dac:	00019594 	.word	0x00019594
   11db0:	000195af 	.word	0x000195af
   11db4:	000195c5 	.word	0x000195c5
   11db8:	000195dd 	.word	0x000195dd
   11dbc:	000195fb 	.word	0x000195fb
   11dc0:	00019615 	.word	0x00019615
   11dc4:	00019635 	.word	0x00019635
   11dc8:	00019652 	.word	0x00019652

00011dcc <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   11dcc:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   11dce:	4c2e      	ldr	r4, [pc, #184]	; (11e88 <mem_manage_fault.constprop.0+0xbc>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   11dd0:	4606      	mov	r6, r0
   11dd2:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   11dd4:	482d      	ldr	r0, [pc, #180]	; (11e8c <mem_manage_fault.constprop.0+0xc0>)
   11dd6:	2145      	movs	r1, #69	; 0x45
   11dd8:	f006 f944 	bl	18064 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   11ddc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11dde:	06db      	lsls	r3, r3, #27
   11de0:	d503      	bpl.n	11dea <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   11de2:	2145      	movs	r1, #69	; 0x45
   11de4:	482a      	ldr	r0, [pc, #168]	; (11e90 <mem_manage_fault.constprop.0+0xc4>)
   11de6:	f006 f93d 	bl	18064 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   11dea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11dec:	071c      	lsls	r4, r3, #28
   11dee:	d503      	bpl.n	11df8 <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   11df0:	2145      	movs	r1, #69	; 0x45
   11df2:	4828      	ldr	r0, [pc, #160]	; (11e94 <mem_manage_fault.constprop.0+0xc8>)
   11df4:	f006 f936 	bl	18064 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   11df8:	4c23      	ldr	r4, [pc, #140]	; (11e88 <mem_manage_fault.constprop.0+0xbc>)
   11dfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11dfc:	0798      	lsls	r0, r3, #30
   11dfe:	d510      	bpl.n	11e22 <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
   11e00:	2145      	movs	r1, #69	; 0x45
   11e02:	4825      	ldr	r0, [pc, #148]	; (11e98 <mem_manage_fault.constprop.0+0xcc>)
   11e04:	f006 f92e 	bl	18064 <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
   11e08:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   11e0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11e0c:	0619      	lsls	r1, r3, #24
   11e0e:	d508      	bpl.n	11e22 <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   11e10:	2145      	movs	r1, #69	; 0x45
   11e12:	4822      	ldr	r0, [pc, #136]	; (11e9c <mem_manage_fault.constprop.0+0xd0>)
   11e14:	f006 f926 	bl	18064 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   11e18:	b11e      	cbz	r6, 11e22 <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   11e1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11e1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   11e20:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   11e22:	4c19      	ldr	r4, [pc, #100]	; (11e88 <mem_manage_fault.constprop.0+0xbc>)
   11e24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11e26:	07db      	lsls	r3, r3, #31
   11e28:	d503      	bpl.n	11e32 <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
   11e2a:	2145      	movs	r1, #69	; 0x45
   11e2c:	481c      	ldr	r0, [pc, #112]	; (11ea0 <mem_manage_fault.constprop.0+0xd4>)
   11e2e:	f006 f919 	bl	18064 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   11e32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11e34:	069e      	lsls	r6, r3, #26
   11e36:	d503      	bpl.n	11e40 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
   11e38:	2145      	movs	r1, #69	; 0x45
   11e3a:	481a      	ldr	r0, [pc, #104]	; (11ea4 <mem_manage_fault.constprop.0+0xd8>)
   11e3c:	f006 f912 	bl	18064 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   11e40:	4b11      	ldr	r3, [pc, #68]	; (11e88 <mem_manage_fault.constprop.0+0xbc>)
   11e42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11e44:	06d4      	lsls	r4, r2, #27
   11e46:	d402      	bmi.n	11e4e <mem_manage_fault.constprop.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   11e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   11e4a:	0790      	lsls	r0, r2, #30
   11e4c:	d50d      	bpl.n	11e6a <mem_manage_fault.constprop.0+0x9e>
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   11e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11e50:	06d9      	lsls	r1, r3, #27
   11e52:	d50a      	bpl.n	11e6a <mem_manage_fault.constprop.0+0x9e>
   11e54:	4914      	ldr	r1, [pc, #80]	; (11ea8 <mem_manage_fault.constprop.0+0xdc>)
   11e56:	4815      	ldr	r0, [pc, #84]	; (11eac <mem_manage_fault.constprop.0+0xe0>)
   11e58:	f240 124f 	movw	r2, #335	; 0x14f
   11e5c:	f006 f8ee 	bl	1803c <assert_print>
   11e60:	f240 114f 	movw	r1, #335	; 0x14f
   11e64:	4810      	ldr	r0, [pc, #64]	; (11ea8 <mem_manage_fault.constprop.0+0xdc>)
   11e66:	f006 f8e2 	bl	1802e <assert_post_action>
	*recoverable = memory_fault_recoverable(esf, true);
   11e6a:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   11e6c:	4b06      	ldr	r3, [pc, #24]	; (11e88 <mem_manage_fault.constprop.0+0xbc>)
   11e6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11e70:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   11e72:	bf42      	ittt	mi
   11e74:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   11e76:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   11e7a:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   11e7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11e7e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   11e82:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   11e84:	7028      	strb	r0, [r5, #0]
}
   11e86:	bd70      	pop	{r4, r5, r6, pc}
   11e88:	e000ed00 	.word	0xe000ed00
   11e8c:	00019686 	.word	0x00019686
   11e90:	000196a1 	.word	0x000196a1
   11e94:	000195c5 	.word	0x000195c5
   11e98:	000196d9 	.word	0x000196d9
   11e9c:	000196f6 	.word	0x000196f6
   11ea0:	00019711 	.word	0x00019711
   11ea4:	00019652 	.word	0x00019652
   11ea8:	00019735 	.word	0x00019735
   11eac:	00018ef0 	.word	0x00018ef0

00011eb0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   11eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11eb4:	4b78      	ldr	r3, [pc, #480]	; (12098 <z_arm_fault+0x1e8>)
{
   11eb6:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11eb8:	685c      	ldr	r4, [r3, #4]
   11eba:	2600      	movs	r6, #0
{
   11ebc:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11ebe:	f3c4 0708 	ubfx	r7, r4, #0, #9
   11ec2:	f386 8811 	msr	BASEPRI, r6
   11ec6:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   11eca:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   11ece:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   11ed2:	d11e      	bne.n	11f12 <z_arm_fault+0x62>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
   11ed4:	f012 0301 	ands.w	r3, r2, #1
   11ed8:	d039      	beq.n	11f4e <z_arm_fault+0x9e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   11eda:	f012 0340 	ands.w	r3, r2, #64	; 0x40
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   11ede:	f002 0808 	and.w	r8, r2, #8
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   11ee2:	f040 80d1 	bne.w	12088 <z_arm_fault+0x1d8>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   11ee6:	0752      	lsls	r2, r2, #29
			secure_esf = (z_arch_esf_t *)msp;
   11ee8:	bf54      	ite	pl
   11eea:	4605      	movpl	r5, r0
	*nested_exc = false;
   11eec:	461e      	movmi	r6, r3
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
   11eee:	682a      	ldr	r2, [r5, #0]
   11ef0:	4b6a      	ldr	r3, [pc, #424]	; (1209c <z_arm_fault+0x1ec>)
			*nested_exc = true;
   11ef2:	bf58      	it	pl
   11ef4:	2601      	movpl	r6, #1
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
   11ef6:	4413      	add	r3, r2
   11ef8:	2b01      	cmp	r3, #1
		sec_ret_addr = secure_esf->basic.pc;
   11efa:	bf98      	it	ls
   11efc:	6c2a      	ldrls	r2, [r5, #64]	; 0x40
	PR_FAULT_INFO("  S instruction address:  0x%x", sec_ret_addr);
   11efe:	2145      	movs	r1, #69	; 0x45
   11f00:	4867      	ldr	r0, [pc, #412]	; (120a0 <z_arm_fault+0x1f0>)
   11f02:	f006 f8af 	bl	18064 <z_log_minimal_printk>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   11f06:	f1b8 0f00 	cmp.w	r8, #0
   11f0a:	d01d      	beq.n	11f48 <z_arm_fault+0x98>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
   11f0c:	f3ef 8589 	mrs	r5, PSP_NS

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   11f10:	b95d      	cbnz	r5, 11f2a <z_arm_fault+0x7a>
   11f12:	f240 32fb 	movw	r2, #1019	; 0x3fb
   11f16:	4963      	ldr	r1, [pc, #396]	; (120a4 <z_arm_fault+0x1f4>)
   11f18:	4863      	ldr	r0, [pc, #396]	; (120a8 <z_arm_fault+0x1f8>)
   11f1a:	f006 f88f 	bl	1803c <assert_print>
   11f1e:	f240 31fb 	movw	r1, #1019	; 0x3fb
   11f22:	4860      	ldr	r0, [pc, #384]	; (120a4 <z_arm_fault+0x1f4>)
   11f24:	f006 f883 	bl	1802e <assert_post_action>
   11f28:	2500      	movs	r5, #0
	*recoverable = false;
   11f2a:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
   11f2e:	1efb      	subs	r3, r7, #3
	*recoverable = false;
   11f30:	f88d 8007 	strb.w	r8, [sp, #7]
	switch (fault) {
   11f34:	2b09      	cmp	r3, #9
   11f36:	f200 8095 	bhi.w	12064 <z_arm_fault+0x1b4>
   11f3a:	e8df f003 	tbb	[pc, r3]
   11f3e:	840a      	.short	0x840a
   11f40:	938c6688 	.word	0x938c6688
   11f44:	90939393 	.word	0x90939393
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
   11f48:	f3ef 8588 	mrs	r5, MSP_NS
  return(result);
   11f4c:	e7e0      	b.n	11f10 <z_arm_fault+0x60>
	*nested_exc = false;
   11f4e:	461e      	mov	r6, r3
   11f50:	e7df      	b.n	11f12 <z_arm_fault+0x62>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   11f52:	4f51      	ldr	r7, [pc, #324]	; (12098 <z_arm_fault+0x1e8>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   11f54:	2145      	movs	r1, #69	; 0x45
   11f56:	4855      	ldr	r0, [pc, #340]	; (120ac <z_arm_fault+0x1fc>)
   11f58:	f006 f884 	bl	18064 <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   11f5c:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	*recoverable = false;
   11f5e:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   11f62:	f014 0402 	ands.w	r4, r4, #2
   11f66:	d004      	beq.n	11f72 <z_arm_fault+0xc2>
		PR_EXC("  Bus fault on vector table read");
   11f68:	2145      	movs	r1, #69	; 0x45
   11f6a:	4851      	ldr	r0, [pc, #324]	; (120b0 <z_arm_fault+0x200>)
	PR_FAULT_INFO(
   11f6c:	f006 f87a 	bl	18064 <z_log_minimal_printk>
   11f70:	e073      	b.n	1205a <z_arm_fault+0x1aa>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   11f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11f74:	2b00      	cmp	r3, #0
   11f76:	da1d      	bge.n	11fb4 <z_arm_fault+0x104>
		PR_EXC("  Debug event");
   11f78:	2145      	movs	r1, #69	; 0x45
   11f7a:	484e      	ldr	r0, [pc, #312]	; (120b4 <z_arm_fault+0x204>)
   11f7c:	f006 f872 	bl	18064 <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   11f80:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11f84:	b99b      	cbnz	r3, 11fae <z_arm_fault+0xfe>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   11f86:	2220      	movs	r2, #32
   11f88:	4629      	mov	r1, r5
   11f8a:	a802      	add	r0, sp, #8
   11f8c:	f006 f92a 	bl	181e4 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   11f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11f92:	2e00      	cmp	r6, #0
   11f94:	d073      	beq.n	1207e <z_arm_fault+0x1ce>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   11f96:	f3c3 0208 	ubfx	r2, r3, #0, #9
   11f9a:	b922      	cbnz	r2, 11fa6 <z_arm_fault+0xf6>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   11f9c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   11fa0:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11fa4:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   11fa6:	4620      	mov	r0, r4
   11fa8:	a902      	add	r1, sp, #8
   11faa:	f7ff fcbb 	bl	11924 <z_arm_fatal_error>
}
   11fae:	b00a      	add	sp, #40	; 0x28
   11fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   11fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11fb6:	005b      	lsls	r3, r3, #1
   11fb8:	d53c      	bpl.n	12034 <z_arm_fault+0x184>
		PR_EXC("  Fault escalation (see below)");
   11fba:	2145      	movs	r1, #69	; 0x45
   11fbc:	483e      	ldr	r0, [pc, #248]	; (120b8 <z_arm_fault+0x208>)
   11fbe:	f006 f851 	bl	18064 <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
   11fc2:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   11fc4:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   11fc8:	f64d 7302 	movw	r3, #57090	; 0xdf02
   11fcc:	429a      	cmp	r2, r3
   11fce:	d106      	bne.n	11fde <z_arm_fault+0x12e>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   11fd0:	2145      	movs	r1, #69	; 0x45
   11fd2:	682a      	ldr	r2, [r5, #0]
   11fd4:	4839      	ldr	r0, [pc, #228]	; (120bc <z_arm_fault+0x20c>)
   11fd6:	f006 f845 	bl	18064 <z_log_minimal_printk>
			reason = esf->basic.r0;
   11fda:	682c      	ldr	r4, [r5, #0]
   11fdc:	e7d0      	b.n	11f80 <z_arm_fault+0xd0>
		} else if (SCB_MMFSR != 0) {
   11fde:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   11fe2:	b133      	cbz	r3, 11ff2 <z_arm_fault+0x142>
			reason = mem_manage_fault(esf, 1, recoverable);
   11fe4:	2001      	movs	r0, #1
   11fe6:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   11fea:	f7ff feef 	bl	11dcc <mem_manage_fault.constprop.0>
		reason = bus_fault(esf, 0, recoverable);
   11fee:	4604      	mov	r4, r0
		break;
   11ff0:	e7c6      	b.n	11f80 <z_arm_fault+0xd0>
		} else if (SCB_BFSR != 0) {
   11ff2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
   11ff6:	b12b      	cbz	r3, 12004 <z_arm_fault+0x154>
			reason = bus_fault(esf, 1, recoverable);
   11ff8:	2001      	movs	r0, #1
   11ffa:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   11ffe:	f7ff fe8b 	bl	11d18 <bus_fault.constprop.0>
   12002:	e7f4      	b.n	11fee <z_arm_fault+0x13e>
		} else if (SCB_UFSR != 0) {
   12004:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   12006:	b29b      	uxth	r3, r3
   12008:	b113      	cbz	r3, 12010 <z_arm_fault+0x160>
		reason = usage_fault(esf);
   1200a:	f7ff fe2f 	bl	11c6c <usage_fault.constprop.0>
   1200e:	e7ee      	b.n	11fee <z_arm_fault+0x13e>
		} else if (SAU->SFSR != 0) {
   12010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
   12014:	b113      	cbz	r3, 1201c <z_arm_fault+0x16c>
			secure_fault(esf);
   12016:	f7ff fdcb 	bl	11bb0 <secure_fault.constprop.0>
   1201a:	e7b1      	b.n	11f80 <z_arm_fault+0xd0>
			__ASSERT(0,
   1201c:	4921      	ldr	r1, [pc, #132]	; (120a4 <z_arm_fault+0x1f4>)
   1201e:	f240 22cd 	movw	r2, #717	; 0x2cd
   12022:	4821      	ldr	r0, [pc, #132]	; (120a8 <z_arm_fault+0x1f8>)
   12024:	f006 f80a 	bl	1803c <assert_print>
   12028:	f240 21cd 	movw	r1, #717	; 0x2cd
		__ASSERT(0,
   1202c:	481d      	ldr	r0, [pc, #116]	; (120a4 <z_arm_fault+0x1f4>)
   1202e:	f005 fffe 	bl	1802e <assert_post_action>
   12032:	e7a5      	b.n	11f80 <z_arm_fault+0xd0>
   12034:	491b      	ldr	r1, [pc, #108]	; (120a4 <z_arm_fault+0x1f4>)
   12036:	f240 22d1 	movw	r2, #721	; 0x2d1
   1203a:	481b      	ldr	r0, [pc, #108]	; (120a8 <z_arm_fault+0x1f8>)
   1203c:	f005 fffe 	bl	1803c <assert_print>
   12040:	f240 21d1 	movw	r1, #721	; 0x2d1
   12044:	e7f2      	b.n	1202c <z_arm_fault+0x17c>
		reason = mem_manage_fault(esf, 0, recoverable);
   12046:	2000      	movs	r0, #0
   12048:	f10d 0107 	add.w	r1, sp, #7
   1204c:	e7cd      	b.n	11fea <z_arm_fault+0x13a>
		reason = bus_fault(esf, 0, recoverable);
   1204e:	2000      	movs	r0, #0
   12050:	f10d 0107 	add.w	r1, sp, #7
   12054:	e7d3      	b.n	11ffe <z_arm_fault+0x14e>
		secure_fault(esf);
   12056:	f7ff fdab 	bl	11bb0 <secure_fault.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1205a:	2400      	movs	r4, #0
}
   1205c:	e790      	b.n	11f80 <z_arm_fault+0xd0>
	PR_FAULT_INFO(
   1205e:	2145      	movs	r1, #69	; 0x45
   12060:	4817      	ldr	r0, [pc, #92]	; (120c0 <z_arm_fault+0x210>)
   12062:	e783      	b.n	11f6c <z_arm_fault+0xbc>
	PR_FAULT_INFO("***** %s %d) *****",
   12064:	4917      	ldr	r1, [pc, #92]	; (120c4 <z_arm_fault+0x214>)
   12066:	f414 7ff8 	tst.w	r4, #496	; 0x1f0
   1206a:	4a17      	ldr	r2, [pc, #92]	; (120c8 <z_arm_fault+0x218>)
   1206c:	4817      	ldr	r0, [pc, #92]	; (120cc <z_arm_fault+0x21c>)
   1206e:	bf08      	it	eq
   12070:	460a      	moveq	r2, r1
   12072:	f1a7 0310 	sub.w	r3, r7, #16
   12076:	2145      	movs	r1, #69	; 0x45
   12078:	f005 fff4 	bl	18064 <z_log_minimal_printk>
   1207c:	e7ed      	b.n	1205a <z_arm_fault+0x1aa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1207e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   12082:	f023 0301 	bic.w	r3, r3, #1
   12086:	e78d      	b.n	11fa4 <z_arm_fault+0xf4>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   12088:	f1b8 0f00 	cmp.w	r8, #0
   1208c:	f47f af40 	bne.w	11f10 <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)msp;
   12090:	4605      	mov	r5, r0
			*nested_exc = true;
   12092:	2601      	movs	r6, #1
   12094:	e73c      	b.n	11f10 <z_arm_fault+0x60>
   12096:	bf00      	nop
   12098:	e000ed00 	.word	0xe000ed00
   1209c:	0105eda6 	.word	0x0105eda6
   120a0:	0001979d 	.word	0x0001979d
   120a4:	00019735 	.word	0x00019735
   120a8:	00018ef0 	.word	0x00018ef0
   120ac:	000197c1 	.word	0x000197c1
   120b0:	000197dd 	.word	0x000197dd
   120b4:	00019803 	.word	0x00019803
   120b8:	00019816 	.word	0x00019816
   120bc:	0001983a 	.word	0x0001983a
   120c0:	0001985b 	.word	0x0001985b
   120c4:	0001976f 	.word	0x0001976f
   120c8:	00019784 	.word	0x00019784
   120cc:	00019884 	.word	0x00019884

000120d0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   120d0:	4b04      	ldr	r3, [pc, #16]	; (120e4 <z_arm_fault_init+0x14>)
   120d2:	695a      	ldr	r2, [r3, #20]
   120d4:	f042 0210 	orr.w	r2, r2, #16
   120d8:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   120da:	695a      	ldr	r2, [r3, #20]
   120dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   120e0:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   120e2:	4770      	bx	lr
   120e4:	e000ed00 	.word	0xe000ed00

000120e8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   120e8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   120ec:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   120f0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   120f2:	4672      	mov	r2, lr
	bl z_arm_fault
   120f4:	f7ff fedc 	bl	11eb0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   120f8:	bd01      	pop	{r0, pc}
   120fa:	bf00      	nop

000120fc <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   120fc:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   120fe:	2120      	movs	r1, #32
   12100:	4803      	ldr	r0, [pc, #12]	; (12110 <z_arm_interrupt_init+0x14>)
   12102:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   12104:	3301      	adds	r3, #1
   12106:	2b41      	cmp	r3, #65	; 0x41
   12108:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   1210c:	d1f9      	bne.n	12102 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1210e:	4770      	bx	lr
   12110:	e000e100 	.word	0xe000e100

00012114 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   12114:	2000      	movs	r0, #0
    msr CONTROL, r0
   12116:	f380 8814 	msr	CONTROL, r0
    isb
   1211a:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   1211e:	2000      	movs	r0, #0
    msr MSPLIM, r0
   12120:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   12124:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   12128:	f006 fb0e 	bl	18748 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   1212c:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   1212e:	490e      	ldr	r1, [pc, #56]	; (12168 <__start+0x54>)
    str r0, [r1]
   12130:	6008      	str	r0, [r1, #0]
    dsb
   12132:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   12136:	480d      	ldr	r0, [pc, #52]	; (1216c <__start+0x58>)
    msr msp, r0
   12138:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   1213c:	f000 f83e 	bl	121bc <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   12140:	2020      	movs	r0, #32
    msr BASEPRI, r0
   12142:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   12146:	480a      	ldr	r0, [pc, #40]	; (12170 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   12148:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   1214c:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1214e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   12152:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   12156:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   12158:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1215a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1215e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   12162:	f7ff fc55 	bl	11a10 <z_arm_prep_c>
   12166:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   12168:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1216c:	200024f8 	.word	0x200024f8
    ldr r0, =z_interrupt_stacks
   12170:	20002638 	.word	0x20002638

00012174 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   12174:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   12178:	4905      	ldr	r1, [pc, #20]	; (12190 <sys_arch_reboot+0x1c>)
   1217a:	4b06      	ldr	r3, [pc, #24]	; (12194 <sys_arch_reboot+0x20>)
   1217c:	68ca      	ldr	r2, [r1, #12]
   1217e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   12182:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   12184:	60cb      	str	r3, [r1, #12]
   12186:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1218a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1218c:	e7fd      	b.n	1218a <sys_arch_reboot+0x16>
   1218e:	bf00      	nop
   12190:	e000ed00 	.word	0xe000ed00
   12194:	05fa0004 	.word	0x05fa0004

00012198 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   12198:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   1219a:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   1219c:	4906      	ldr	r1, [pc, #24]	; (121b8 <z_arm_clear_arm_mpu_config+0x20>)
   1219e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   121a2:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   121a6:	4293      	cmp	r3, r2
   121a8:	d100      	bne.n	121ac <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   121aa:	4770      	bx	lr
  mpu->RNR = rnr;
   121ac:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   121b0:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   121b4:	3301      	adds	r3, #1
   121b6:	e7f6      	b.n	121a6 <z_arm_clear_arm_mpu_config+0xe>
   121b8:	e000ed00 	.word	0xe000ed00

000121bc <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   121bc:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   121be:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   121c0:	2400      	movs	r4, #0
   121c2:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   121c6:	f7ff ffe7 	bl	12198 <z_arm_clear_arm_mpu_config>
   121ca:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   121cc:	f04f 30ff 	mov.w	r0, #4294967295
   121d0:	4a0b      	ldr	r2, [pc, #44]	; (12200 <z_arm_init_arch_hw_at_boot+0x44>)
   121d2:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   121d6:	3301      	adds	r3, #1
   121d8:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   121da:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   121de:	d1f8      	bne.n	121d2 <z_arm_init_arch_hw_at_boot+0x16>
   121e0:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   121e2:	f04f 30ff 	mov.w	r0, #4294967295
   121e6:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   121ea:	3301      	adds	r3, #1
   121ec:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   121ee:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   121f2:	d1f8      	bne.n	121e6 <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
   121f4:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   121f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   121fa:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   121fe:	bd10      	pop	{r4, pc}
   12200:	e000e100 	.word	0xe000e100

00012204 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   12204:	4b08      	ldr	r3, [pc, #32]	; (12228 <z_impl_k_thread_abort+0x24>)
   12206:	689b      	ldr	r3, [r3, #8]
   12208:	4283      	cmp	r3, r0
   1220a:	d10b      	bne.n	12224 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1220c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   12210:	b143      	cbz	r3, 12224 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12212:	4b06      	ldr	r3, [pc, #24]	; (1222c <z_impl_k_thread_abort+0x28>)
   12214:	685a      	ldr	r2, [r3, #4]
   12216:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   1221a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   1221c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1221e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   12222:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   12224:	f002 bd32 	b.w	14c8c <z_thread_abort>
   12228:	200009e4 	.word	0x200009e4
   1222c:	e000ed00 	.word	0xe000ed00

00012230 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
   12230:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
   12232:	4b0d      	ldr	r3, [pc, #52]	; (12268 <tz_nonsecure_state_setup+0x38>)
   12234:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
   12236:	6803      	ldr	r3, [r0, #0]
   12238:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
   1223c:	6843      	ldr	r3, [r0, #4]
   1223e:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
   12242:	7b02      	ldrb	r2, [r0, #12]
   12244:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
   12248:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
   1224c:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
   12250:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
   12252:	bf48      	it	mi
   12254:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
   12258:	b109      	cbz	r1, 1225e <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
   1225a:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
   1225e:	f383 8894 	msr	CONTROL_NS, r3
  __ASM volatile ("isb 0xF":::"memory");
   12262:	f3bf 8f6f 	isb	sy
}
   12266:	4770      	bx	lr
   12268:	e002ed00 	.word	0xe002ed00

0001226c <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   1226c:	4a08      	ldr	r2, [pc, #32]	; (12290 <tz_nbanked_exception_target_state_set+0x24>)
   1226e:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
   12270:	b148      	cbz	r0, 12286 <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
   12272:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   12276:	041b      	lsls	r3, r3, #16
   12278:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
   1227a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   1227e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
   12282:	60d3      	str	r3, [r2, #12]
}
   12284:	4770      	bx	lr
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   12286:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
   12288:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1228c:	e7f5      	b.n	1227a <tz_nbanked_exception_target_state_set+0xe>
   1228e:	bf00      	nop
   12290:	e000ed00 	.word	0xe000ed00

00012294 <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   12294:	4a08      	ldr	r2, [pc, #32]	; (122b8 <tz_nonsecure_exception_prio_config+0x24>)
   12296:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
   12298:	b140      	cbz	r0, 122ac <tz_nonsecure_exception_prio_config+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   1229a:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
   1229c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
   122a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   122a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
   122a8:	60d3      	str	r3, [r2, #12]
}
   122aa:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
   122ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   122b0:	041b      	lsls	r3, r3, #16
   122b2:	0c1b      	lsrs	r3, r3, #16
   122b4:	e7f4      	b.n	122a0 <tz_nonsecure_exception_prio_config+0xc>
   122b6:	bf00      	nop
   122b8:	e000ed00 	.word	0xe000ed00

000122bc <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   122bc:	4a08      	ldr	r2, [pc, #32]	; (122e0 <tz_nonsecure_system_reset_req_block+0x24>)
   122be:	68d3      	ldr	r3, [r2, #12]
	if (block) {
   122c0:	b140      	cbz	r0, 122d4 <tz_nonsecure_system_reset_req_block+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   122c2:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
   122c4:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
   122c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   122cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
   122d0:	60d3      	str	r3, [r2, #12]
}
   122d2:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
   122d4:	f023 0308 	bic.w	r3, r3, #8
   122d8:	041b      	lsls	r3, r3, #16
   122da:	0c1b      	lsrs	r3, r3, #16
   122dc:	e7f4      	b.n	122c8 <tz_nonsecure_system_reset_req_block+0xc>
   122de:	bf00      	nop
   122e0:	e000ed00 	.word	0xe000ed00

000122e4 <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
   122e4:	4a03      	ldr	r2, [pc, #12]	; (122f4 <tz_nonsecure_fpu_access_enable+0x10>)
   122e6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   122ea:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
   122ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
   122f2:	4770      	bx	lr
   122f4:	e000ed00 	.word	0xe000ed00

000122f8 <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
   122f8:	4b0a      	ldr	r3, [pc, #40]	; (12324 <tz_sau_configure+0x2c>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
   122fa:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
   122fe:	b120      	cbz	r0, 1230a <tz_sau_configure+0x12>
   12300:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
   12304:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}
	}
}
   12308:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
   1230a:	f022 0201 	bic.w	r2, r2, #1
   1230e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
   12312:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		if (allns) {
   12316:	b111      	cbz	r1, 1231e <tz_sau_configure+0x26>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
   12318:	f042 0202 	orr.w	r2, r2, #2
   1231c:	e7f2      	b.n	12304 <tz_sau_configure+0xc>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
   1231e:	f022 0202 	bic.w	r2, r2, #2
   12322:	e7ef      	b.n	12304 <tz_sau_configure+0xc>
   12324:	e000ed00 	.word	0xe000ed00

00012328 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   12328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1232a:	4c09      	ldr	r4, [pc, #36]	; (12350 <z_arm_configure_static_mpu_regions+0x28>)
   1232c:	4a09      	ldr	r2, [pc, #36]	; (12354 <z_arm_configure_static_mpu_regions+0x2c>)
   1232e:	4623      	mov	r3, r4
   12330:	2101      	movs	r1, #1
   12332:	4809      	ldr	r0, [pc, #36]	; (12358 <z_arm_configure_static_mpu_regions+0x30>)
   12334:	f000 f92c 	bl	12590 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   12338:	2300      	movs	r3, #0
   1233a:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   1233c:	4b07      	ldr	r3, [pc, #28]	; (1235c <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1233e:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   12340:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   12342:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   12344:	9301      	str	r3, [sp, #4]
   12346:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   12348:	f000 f93e 	bl	125c8 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1234c:	b004      	add	sp, #16
   1234e:	bd10      	pop	{r4, pc}
   12350:	20008000 	.word	0x20008000
   12354:	20000000 	.word	0x20000000
   12358:	00018be8 	.word	0x00018be8
   1235c:	20000130 	.word	0x20000130

00012360 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   12360:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   12362:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   12364:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   12366:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   1236a:	f004 031f 	and.w	r3, r4, #31
   1236e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   12370:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   12372:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   12374:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   12378:	4905      	ldr	r1, [pc, #20]	; (12390 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1237a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   1237e:	f043 0301 	orr.w	r3, r3, #1
   12382:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
   12386:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
   1238a:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   1238e:	bd10      	pop	{r4, pc}
   12390:	e000ed00 	.word	0xe000ed00

00012394 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
   12394:	b530      	push	{r4, r5, lr}
	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	region_conf.size = size_to_mpu_rasr_size(new_region->size);
#endif
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   12396:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   12398:	680c      	ldr	r4, [r1, #0]
{
   1239a:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
   1239c:	890a      	ldrh	r2, [r1, #8]
   1239e:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   123a0:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   123a2:	3b01      	subs	r3, #1
   123a4:	f024 041f 	bic.w	r4, r4, #31
   123a8:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   123aa:	f002 021f 	and.w	r2, r2, #31
   123ae:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   123b2:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   123b6:	280f      	cmp	r0, #15
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   123b8:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
   123ba:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   123be:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
   123c0:	d909      	bls.n	123d6 <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   123c2:	4602      	mov	r2, r0
   123c4:	2145      	movs	r1, #69	; 0x45
   123c6:	4806      	ldr	r0, [pc, #24]	; (123e0 <mpu_configure_region+0x4c>)
   123c8:	f005 fe4c 	bl	18064 <z_log_minimal_printk>
   123cc:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
   123d0:	4620      	mov	r0, r4
   123d2:	b005      	add	sp, #20
   123d4:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   123d6:	4669      	mov	r1, sp
   123d8:	f7ff ffc2 	bl	12360 <region_init>
	return region_allocate_and_init(index,
   123dc:	e7f8      	b.n	123d0 <mpu_configure_region+0x3c>
   123de:	bf00      	nop
   123e0:	000198a0 	.word	0x000198a0

000123e4 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   123e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123e8:	4689      	mov	r9, r1
   123ea:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   123ec:	4606      	mov	r6, r0
   123ee:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
   123f2:	4d58      	ldr	r5, [pc, #352]	; (12554 <mpu_configure_regions_and_partition.constprop.0+0x170>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   123f4:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   123f6:	45c8      	cmp	r8, r9
   123f8:	da27      	bge.n	1244a <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
   123fa:	f8d6 a004 	ldr.w	sl, [r6, #4]
   123fe:	f1ba 0f00 	cmp.w	sl, #0
   12402:	d044      	beq.n	1248e <mpu_configure_regions_and_partition.constprop.0+0xaa>
		&&
   12404:	f1ba 0f1f 	cmp.w	sl, #31
   12408:	d918      	bls.n	1243c <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
   1240a:	f01a 0f1f 	tst.w	sl, #31
   1240e:	d115      	bne.n	1243c <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
   12410:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   12414:	f01b 0f1f 	tst.w	fp, #31
   12418:	d110      	bne.n	1243c <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1241a:	4658      	mov	r0, fp
   1241c:	f005 fe9b 	bl	18156 <arm_cmse_mpu_region_get>
   12420:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   12422:	eb0a 000b 	add.w	r0, sl, fp
   12426:	3801      	subs	r0, #1
   12428:	f005 fe95 	bl	18156 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1242c:	4287      	cmp	r7, r0
   1242e:	d010      	beq.n	12452 <mpu_configure_regions_and_partition.constprop.0+0x6e>
	return -EINVAL;
   12430:	f06f 0715 	mvn.w	r7, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   12434:	463a      	mov	r2, r7
   12436:	2145      	movs	r1, #69	; 0x45
   12438:	4847      	ldr	r0, [pc, #284]	; (12558 <mpu_configure_regions_and_partition.constprop.0+0x174>)
   1243a:	e002      	b.n	12442 <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
   1243c:	4642      	mov	r2, r8
   1243e:	2145      	movs	r1, #69	; 0x45
   12440:	4846      	ldr	r0, [pc, #280]	; (1255c <mpu_configure_regions_and_partition.constprop.0+0x178>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   12442:	f005 fe0f 	bl	18064 <z_log_minimal_printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   12446:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   1244a:	4620      	mov	r0, r4
   1244c:	b005      	add	sp, #20
   1244e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   12452:	f117 0f16 	cmn.w	r7, #22
   12456:	d0ed      	beq.n	12434 <mpu_configure_regions_and_partition.constprop.0+0x50>
   12458:	42bc      	cmp	r4, r7
   1245a:	ddeb      	ble.n	12434 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
   1245c:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   12460:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
   12464:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   12468:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   1246c:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   12470:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   12474:	e9d6 3200 	ldrd	r3, r2, [r6]
   12478:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   1247a:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   1247c:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   12480:	d11d      	bne.n	124be <mpu_configure_regions_and_partition.constprop.0+0xda>
   12482:	45d3      	cmp	fp, sl
   12484:	d107      	bne.n	12496 <mpu_configure_regions_and_partition.constprop.0+0xb2>
			mpu_configure_region(u_reg_index, &regions[i]);
   12486:	4631      	mov	r1, r6
   12488:	b2f8      	uxtb	r0, r7
   1248a:	f7ff ff83 	bl	12394 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   1248e:	f108 0801 	add.w	r8, r8, #1
   12492:	360c      	adds	r6, #12
   12494:	e7af      	b.n	123f6 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   12496:	4631      	mov	r1, r6
	MPU->RNR = index;
   12498:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1249c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
   124a0:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   124a4:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   124a8:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   124aa:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   124ae:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   124b0:	f7ff ff70 	bl	12394 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   124b4:	f110 0f16 	cmn.w	r0, #22
   124b8:	d0c5      	beq.n	12446 <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
   124ba:	1c44      	adds	r4, r0, #1
   124bc:	e7e7      	b.n	1248e <mpu_configure_regions_and_partition.constprop.0+0xaa>
				regions[i].start - 1);
   124be:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
   124c0:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
   124c2:	b2e0      	uxtb	r0, r4
		| (limit & MPU_RLAR_LIMIT_Msk);
   124c4:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
   124c8:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
   124cc:	d108      	bne.n	124e0 <mpu_configure_regions_and_partition.constprop.0+0xfc>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   124ce:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   124d2:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   124d4:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   124d8:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   124da:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
   124de:	e7e7      	b.n	124b0 <mpu_configure_regions_and_partition.constprop.0+0xcc>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   124e0:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
   124e4:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   124e8:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   124ea:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   124ee:	4631      	mov	r1, r6
   124f0:	f7ff ff50 	bl	12394 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   124f4:	f110 0f16 	cmn.w	r0, #22
   124f8:	d0a5      	beq.n	12446 <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = index;
   124fa:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
   124fe:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
   12502:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   12506:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
   1250a:	f362 0304 	bfi	r3, r2, #0, #5
   1250e:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   12512:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   12516:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1251a:	085b      	lsrs	r3, r3, #1
   1251c:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
   12520:	e9d6 3100 	ldrd	r3, r1, [r6]
   12524:	440b      	add	r3, r1
   12526:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
   12528:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   1252c:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   1252e:	445b      	add	r3, fp
   12530:	eba3 030a 	sub.w	r3, r3, sl
   12534:	b2c0      	uxtb	r0, r0
   12536:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   1253a:	280f      	cmp	r0, #15
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   1253c:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
   12540:	9303      	str	r3, [sp, #12]
   12542:	d903      	bls.n	1254c <mpu_configure_regions_and_partition.constprop.0+0x168>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   12544:	4602      	mov	r2, r0
   12546:	2145      	movs	r1, #69	; 0x45
   12548:	4805      	ldr	r0, [pc, #20]	; (12560 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
   1254a:	e77a      	b.n	12442 <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
   1254c:	4669      	mov	r1, sp
   1254e:	f7ff ff07 	bl	12360 <region_init>
   12552:	e7b2      	b.n	124ba <mpu_configure_regions_and_partition.constprop.0+0xd6>
   12554:	e000ed00 	.word	0xe000ed00
   12558:	000198f3 	.word	0x000198f3
   1255c:	000198cb 	.word	0x000198cb
   12560:	000198a0 	.word	0x000198a0

00012564 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   12564:	2205      	movs	r2, #5
   12566:	4b04      	ldr	r3, [pc, #16]	; (12578 <arm_core_mpu_enable+0x14>)
   12568:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   1256c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12570:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   12574:	4770      	bx	lr
   12576:	bf00      	nop
   12578:	e000ed00 	.word	0xe000ed00

0001257c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   1257c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   12580:	2200      	movs	r2, #0
   12582:	4b02      	ldr	r3, [pc, #8]	; (1258c <arm_core_mpu_disable+0x10>)
   12584:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   12588:	4770      	bx	lr
   1258a:	bf00      	nop
   1258c:	e000ed00 	.word	0xe000ed00

00012590 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   12590:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   12592:	4c0a      	ldr	r4, [pc, #40]	; (125bc <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   12594:	7822      	ldrb	r2, [r4, #0]
   12596:	f7ff ff25 	bl	123e4 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1259a:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   1259c:	3016      	adds	r0, #22
   1259e:	d10c      	bne.n	125ba <arm_core_mpu_configure_static_mpu_regions+0x2a>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   125a0:	4907      	ldr	r1, [pc, #28]	; (125c0 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   125a2:	4808      	ldr	r0, [pc, #32]	; (125c4 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   125a4:	f240 1211 	movw	r2, #273	; 0x111
   125a8:	f005 fd48 	bl	1803c <assert_print>
			regions_num);
	}
}
   125ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   125b0:	f240 1111 	movw	r1, #273	; 0x111
   125b4:	4802      	ldr	r0, [pc, #8]	; (125c0 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   125b6:	f005 bd3a 	b.w	1802e <assert_post_action>
}
   125ba:	bd10      	pop	{r4, pc}
   125bc:	200014f0 	.word	0x200014f0
   125c0:	0001991b 	.word	0x0001991b
   125c4:	00018ef0 	.word	0x00018ef0

000125c8 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   125c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125cc:	4d30      	ldr	r5, [pc, #192]	; (12690 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
   125ce:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   125d0:	4606      	mov	r6, r0
   125d2:	f04f 0800 	mov.w	r8, #0
   125d6:	46ab      	mov	fp, r5
	MPU->RNR = index;
   125d8:	4f2e      	ldr	r7, [pc, #184]	; (12694 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   125da:	45d0      	cmp	r8, sl
   125dc:	db02      	blt.n	125e4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   125de:	b003      	add	sp, #12
   125e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   125e4:	f8d6 9004 	ldr.w	r9, [r6, #4]
   125e8:	f1b9 0f00 	cmp.w	r9, #0
   125ec:	d04a      	beq.n	12684 <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   125ee:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   125f0:	4608      	mov	r0, r1
   125f2:	9101      	str	r1, [sp, #4]
   125f4:	f005 fdaf 	bl	18156 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   125f8:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   125fa:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   125fc:	eb09 0001 	add.w	r0, r9, r1
   12600:	3801      	subs	r0, #1
   12602:	f005 fda8 	bl	18156 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   12606:	4284      	cmp	r4, r0
   12608:	f04f 0214 	mov.w	r2, #20
   1260c:	4b22      	ldr	r3, [pc, #136]	; (12698 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   1260e:	d013      	beq.n	12638 <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
   12610:	f06f 0315 	mvn.w	r3, #21
   12614:	fb02 f808 	mul.w	r8, r2, r8
   12618:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   1261c:	f240 1221 	movw	r2, #289	; 0x121
   12620:	491e      	ldr	r1, [pc, #120]	; (1269c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   12622:	481f      	ldr	r0, [pc, #124]	; (126a0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   12624:	f005 fd0a 	bl	1803c <assert_print>
   12628:	f240 1121 	movw	r1, #289	; 0x121
   1262c:	481b      	ldr	r0, [pc, #108]	; (1269c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
}
   1262e:	b003      	add	sp, #12
   12630:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   12634:	f005 bcfb 	b.w	1802e <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   12638:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   1263c:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   1263e:	d0ed      	beq.n	1261c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   12640:	7819      	ldrb	r1, [r3, #0]
   12642:	42a1      	cmp	r1, r4
   12644:	ddea      	ble.n	1261c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   12646:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   1264a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
   1264e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
   12652:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
   12656:	f100 0108 	add.w	r1, r0, #8
   1265a:	7b00      	ldrb	r0, [r0, #12]
   1265c:	f364 0004 	bfi	r0, r4, #0, #5
   12660:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   12662:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   12666:	790c      	ldrb	r4, [r1, #4]
   12668:	0840      	lsrs	r0, r0, #1
   1266a:	f360 1447 	bfi	r4, r0, #5, #3
   1266e:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   12670:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
   12674:	f021 011f 	bic.w	r1, r1, #31
   12678:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   1267a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
   1267e:	f021 011f 	bic.w	r1, r1, #31
   12682:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   12684:	f108 0801 	add.w	r8, r8, #1
   12688:	3514      	adds	r5, #20
   1268a:	360c      	adds	r6, #12
   1268c:	e7a5      	b.n	125da <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   1268e:	bf00      	nop
   12690:	20000954 	.word	0x20000954
   12694:	e000ed00 	.word	0xe000ed00
   12698:	200014f0 	.word	0x200014f0
   1269c:	0001991b 	.word	0x0001991b
   126a0:	00018ef0 	.word	0x00018ef0

000126a4 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   126a4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   126a6:	4d1d      	ldr	r5, [pc, #116]	; (1271c <z_arm_mpu_init+0x78>)
   126a8:	682c      	ldr	r4, [r5, #0]
   126aa:	2c10      	cmp	r4, #16
   126ac:	d90d      	bls.n	126ca <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   126ae:	f44f 72a4 	mov.w	r2, #328	; 0x148
   126b2:	491b      	ldr	r1, [pc, #108]	; (12720 <z_arm_mpu_init+0x7c>)
   126b4:	481b      	ldr	r0, [pc, #108]	; (12724 <z_arm_mpu_init+0x80>)
   126b6:	f005 fcc1 	bl	1803c <assert_print>
   126ba:	4819      	ldr	r0, [pc, #100]	; (12720 <z_arm_mpu_init+0x7c>)
   126bc:	f44f 71a4 	mov.w	r1, #328	; 0x148
   126c0:	f005 fcb5 	bl	1802e <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   126c4:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   126c8:	bd38      	pop	{r3, r4, r5, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   126ca:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   126cc:	f7ff ff56 	bl	1257c <arm_core_mpu_disable>
	MPU->MAIR0 =
   126d0:	4b15      	ldr	r3, [pc, #84]	; (12728 <z_arm_mpu_init+0x84>)
   126d2:	4a16      	ldr	r2, [pc, #88]	; (1272c <z_arm_mpu_init+0x88>)
   126d4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   126d8:	4284      	cmp	r4, r0
   126da:	d117      	bne.n	1270c <z_arm_mpu_init+0x68>
	static_regions_num = mpu_config.num_regions;
   126dc:	4b14      	ldr	r3, [pc, #80]	; (12730 <z_arm_mpu_init+0x8c>)
   126de:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   126e0:	f7ff ff40 	bl	12564 <arm_core_mpu_enable>
	__ASSERT(
   126e4:	4b10      	ldr	r3, [pc, #64]	; (12728 <z_arm_mpu_init+0x84>)
   126e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   126ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
   126ee:	2b10      	cmp	r3, #16
   126f0:	d00a      	beq.n	12708 <z_arm_mpu_init+0x64>
   126f2:	490b      	ldr	r1, [pc, #44]	; (12720 <z_arm_mpu_init+0x7c>)
   126f4:	480b      	ldr	r0, [pc, #44]	; (12724 <z_arm_mpu_init+0x80>)
   126f6:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
   126fa:	f005 fc9f 	bl	1803c <assert_print>
   126fe:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   12702:	4807      	ldr	r0, [pc, #28]	; (12720 <z_arm_mpu_init+0x7c>)
   12704:	f005 fc93 	bl	1802e <assert_post_action>
	return 0;
   12708:	2000      	movs	r0, #0
   1270a:	e7dd      	b.n	126c8 <z_arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1270c:	6869      	ldr	r1, [r5, #4]
   1270e:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   12712:	f7ff fe25 	bl	12360 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   12716:	3001      	adds	r0, #1
   12718:	e7de      	b.n	126d8 <z_arm_mpu_init+0x34>
   1271a:	bf00      	nop
   1271c:	00018bf4 	.word	0x00018bf4
   12720:	0001991b 	.word	0x0001991b
   12724:	00018ef0 	.word	0x00018ef0
   12728:	e000ed00 	.word	0xe000ed00
   1272c:	0044ffaa 	.word	0x0044ffaa
   12730:	200014f0 	.word	0x200014f0

00012734 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   12734:	4b01      	ldr	r3, [pc, #4]	; (1273c <__stdout_hook_install+0x8>)
   12736:	6018      	str	r0, [r3, #0]
}
   12738:	4770      	bx	lr
   1273a:	bf00      	nop
   1273c:	20000028 	.word	0x20000028

00012740 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   12740:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   12742:	2340      	movs	r3, #64	; 0x40
{
   12744:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   12746:	490a      	ldr	r1, [pc, #40]	; (12770 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   12748:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   1274a:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1274c:	1149      	asrs	r1, r1, #5
{
   1274e:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   12750:	4623      	mov	r3, r4
   12752:	4a08      	ldr	r2, [pc, #32]	; (12774 <onoff_start+0x34>)
   12754:	4808      	ldr	r0, [pc, #32]	; (12778 <onoff_start+0x38>)
   12756:	f005 fd6f 	bl	18238 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1275a:	1e01      	subs	r1, r0, #0
   1275c:	da05      	bge.n	1276a <onoff_start+0x2a>
		notify(mgr, err);
   1275e:	4628      	mov	r0, r5
   12760:	4623      	mov	r3, r4
	}
}
   12762:	b003      	add	sp, #12
   12764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   12768:	4718      	bx	r3
}
   1276a:	b003      	add	sp, #12
   1276c:	bd30      	pop	{r4, r5, pc}
   1276e:	bf00      	nop
   12770:	20000968 	.word	0x20000968
   12774:	000182a7 	.word	0x000182a7
   12778:	000187ac 	.word	0x000187ac

0001277c <get_status>:
{
   1277c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1277e:	b2cc      	uxtb	r4, r1
   12780:	2c01      	cmp	r4, #1
{
   12782:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   12784:	d908      	bls.n	12798 <get_status+0x1c>
   12786:	4908      	ldr	r1, [pc, #32]	; (127a8 <get_status+0x2c>)
   12788:	4808      	ldr	r0, [pc, #32]	; (127ac <get_status+0x30>)
   1278a:	2279      	movs	r2, #121	; 0x79
   1278c:	f005 fc56 	bl	1803c <assert_print>
   12790:	2179      	movs	r1, #121	; 0x79
   12792:	4805      	ldr	r0, [pc, #20]	; (127a8 <get_status+0x2c>)
   12794:	f005 fc4b 	bl	1802e <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   12798:	230c      	movs	r3, #12
   1279a:	6929      	ldr	r1, [r5, #16]
   1279c:	fb04 1403 	mla	r4, r4, r3, r1
   127a0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   127a2:	f000 0007 	and.w	r0, r0, #7
   127a6:	bd38      	pop	{r3, r4, r5, pc}
   127a8:	00019961 	.word	0x00019961
   127ac:	00018ef0 	.word	0x00018ef0

000127b0 <stop>:
{
   127b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   127b2:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   127b4:	2c01      	cmp	r4, #1
{
   127b6:	4605      	mov	r5, r0
   127b8:	4617      	mov	r7, r2
	struct nrf_clock_control_data *data = dev->data;
   127ba:	6906      	ldr	r6, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   127bc:	d90a      	bls.n	127d4 <stop+0x24>
   127be:	4918      	ldr	r1, [pc, #96]	; (12820 <stop+0x70>)
   127c0:	4818      	ldr	r0, [pc, #96]	; (12824 <stop+0x74>)
   127c2:	f240 124d 	movw	r2, #333	; 0x14d
   127c6:	f005 fc39 	bl	1803c <assert_print>
   127ca:	f240 114d 	movw	r1, #333	; 0x14d
   127ce:	4814      	ldr	r0, [pc, #80]	; (12820 <stop+0x70>)
   127d0:	f005 fc2d 	bl	1802e <assert_post_action>
	__asm__ volatile(
   127d4:	f04f 0320 	mov.w	r3, #32
   127d8:	f3ef 8111 	mrs	r1, BASEPRI
   127dc:	f383 8812 	msr	BASEPRI_MAX, r3
   127e0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   127e4:	220c      	movs	r2, #12
   127e6:	fb02 6304 	mla	r3, r2, r4, r6
   127ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   127ec:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   127f0:	d001      	beq.n	127f6 <stop+0x46>
   127f2:	429f      	cmp	r7, r3
   127f4:	d111      	bne.n	1281a <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   127f6:	2301      	movs	r3, #1
	int err = 0;
   127f8:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
   127fa:	fb02 6604 	mla	r6, r2, r4, r6
   127fe:	64b3      	str	r3, [r6, #72]	; 0x48
	__asm__ volatile(
   12800:	f381 8811 	msr	BASEPRI, r1
   12804:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   12808:	b930      	cbnz	r0, 12818 <stop+0x68>
	get_sub_config(dev, type)->stop();
   1280a:	230c      	movs	r3, #12
   1280c:	6869      	ldr	r1, [r5, #4]
   1280e:	fb03 1404 	mla	r4, r3, r4, r1
   12812:	6863      	ldr	r3, [r4, #4]
   12814:	4798      	blx	r3
	return 0;
   12816:	2000      	movs	r0, #0
}
   12818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   1281a:	f04f 30ff 	mov.w	r0, #4294967295
   1281e:	e7ef      	b.n	12800 <stop+0x50>
   12820:	00019961 	.word	0x00019961
   12824:	00018ef0 	.word	0x00018ef0

00012828 <onoff_stop>:
{
   12828:	b570      	push	{r4, r5, r6, lr}
   1282a:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1282c:	4906      	ldr	r1, [pc, #24]	; (12848 <onoff_stop+0x20>)
{
   1282e:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   12830:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   12832:	1149      	asrs	r1, r1, #5
   12834:	2240      	movs	r2, #64	; 0x40
   12836:	4805      	ldr	r0, [pc, #20]	; (1284c <onoff_stop+0x24>)
   12838:	f7ff ffba 	bl	127b0 <stop>
	notify(mgr, res);
   1283c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1283e:	4601      	mov	r1, r0
	notify(mgr, res);
   12840:	4620      	mov	r0, r4
}
   12842:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   12846:	4718      	bx	r3
   12848:	20000968 	.word	0x20000968
   1284c:	000187ac 	.word	0x000187ac

00012850 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   12850:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   12852:	2200      	movs	r2, #0
   12854:	2101      	movs	r1, #1
{
   12856:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   12858:	2005      	movs	r0, #5
   1285a:	f7ff f8af 	bl	119bc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1285e:	480f      	ldr	r0, [pc, #60]	; (1289c <clk_init+0x4c>)
   12860:	f000 fd1c 	bl	1329c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   12864:	4b0e      	ldr	r3, [pc, #56]	; (128a0 <clk_init+0x50>)
   12866:	4298      	cmp	r0, r3
   12868:	d115      	bne.n	12896 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1286a:	f000 fd39 	bl	132e0 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1286e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   12870:	490c      	ldr	r1, [pc, #48]	; (128a4 <clk_init+0x54>)
   12872:	4630      	mov	r0, r6
   12874:	f005 fb62 	bl	17f3c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   12878:	2800      	cmp	r0, #0
   1287a:	db0b      	blt.n	12894 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1287c:	2501      	movs	r5, #1
	struct nrf_clock_control_data *data = dev->data;
   1287e:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   12880:	4908      	ldr	r1, [pc, #32]	; (128a4 <clk_init+0x54>)
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   12882:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
   12884:	f104 0020 	add.w	r0, r4, #32
   12888:	f005 fb58 	bl	17f3c <onoff_manager_init>
		if (err < 0) {
   1288c:	2800      	cmp	r0, #0
   1288e:	db01      	blt.n	12894 <clk_init+0x44>
	}

	return 0;
   12890:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   12892:	6565      	str	r5, [r4, #84]	; 0x54
}
   12894:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   12896:	f06f 0004 	mvn.w	r0, #4
   1289a:	e7fb      	b.n	12894 <clk_init+0x44>
   1289c:	000128dd 	.word	0x000128dd
   128a0:	0bad0000 	.word	0x0bad0000
   128a4:	00018c4c 	.word	0x00018c4c

000128a8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   128a8:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   128aa:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   128ac:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
   128ae:	434b      	muls	r3, r1
   128b0:	4808      	ldr	r0, [pc, #32]	; (128d4 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
   128b2:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   128b4:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   128b6:	3348      	adds	r3, #72	; 0x48
	void *user_data = sub_data->user_data;
   128b8:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   128bc:	4418      	add	r0, r3
	sub_data->cb = NULL;
   128be:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   128c0:	f005 fca7 	bl	18212 <set_on_state>
	if (callback) {
   128c4:	b12d      	cbz	r5, 128d2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   128c6:	4632      	mov	r2, r6
   128c8:	462b      	mov	r3, r5
}
   128ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   128ce:	4802      	ldr	r0, [pc, #8]	; (128d8 <clkstarted_handle.constprop.0+0x30>)
   128d0:	4718      	bx	r3
}
   128d2:	bd70      	pop	{r4, r5, r6, pc}
   128d4:	20000968 	.word	0x20000968
   128d8:	000187ac 	.word	0x000187ac

000128dc <clock_event_handler>:
	switch (event) {
   128dc:	2801      	cmp	r0, #1
{
   128de:	b508      	push	{r3, lr}
	switch (event) {
   128e0:	d006      	beq.n	128f0 <clock_event_handler+0x14>
   128e2:	2803      	cmp	r0, #3
   128e4:	d008      	beq.n	128f8 <clock_event_handler+0x1c>
   128e6:	b9a0      	cbnz	r0, 12912 <clock_event_handler+0x36>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   128e8:	4b0f      	ldr	r3, [pc, #60]	; (12928 <clock_event_handler+0x4c>)
   128ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   128ec:	075b      	lsls	r3, r3, #29
   128ee:	d119      	bne.n	12924 <clock_event_handler+0x48>
}
   128f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   128f4:	f7ff bfd8 	b.w	128a8 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   128f8:	490c      	ldr	r1, [pc, #48]	; (1292c <clock_event_handler+0x50>)
   128fa:	f240 225e 	movw	r2, #606	; 0x25e
   128fe:	480c      	ldr	r0, [pc, #48]	; (12930 <clock_event_handler+0x54>)
   12900:	f005 fb9c 	bl	1803c <assert_print>
   12904:	f240 215e 	movw	r1, #606	; 0x25e
}
   12908:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   1290c:	4807      	ldr	r0, [pc, #28]	; (1292c <clock_event_handler+0x50>)
   1290e:	f005 bb8e 	b.w	1802e <assert_post_action>
   12912:	4906      	ldr	r1, [pc, #24]	; (1292c <clock_event_handler+0x50>)
   12914:	f240 2262 	movw	r2, #610	; 0x262
   12918:	4805      	ldr	r0, [pc, #20]	; (12930 <clock_event_handler+0x54>)
   1291a:	f005 fb8f 	bl	1803c <assert_print>
   1291e:	f240 2162 	movw	r1, #610	; 0x262
   12922:	e7f1      	b.n	12908 <clock_event_handler+0x2c>
}
   12924:	bd08      	pop	{r3, pc}
   12926:	bf00      	nop
   12928:	20000968 	.word	0x20000968
   1292c:	00019961 	.word	0x00019961
   12930:	00018ef0 	.word	0x00018ef0

00012934 <generic_hfclk_start>:
{
   12934:	b508      	push	{r3, lr}
	__asm__ volatile(
   12936:	f04f 0320 	mov.w	r3, #32
   1293a:	f3ef 8111 	mrs	r1, BASEPRI
   1293e:	f383 8812 	msr	BASEPRI_MAX, r3
   12942:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   12946:	4a12      	ldr	r2, [pc, #72]	; (12990 <generic_hfclk_start+0x5c>)
   12948:	6813      	ldr	r3, [r2, #0]
   1294a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1294e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   12952:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   12954:	d00c      	beq.n	12970 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   12956:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   1295a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1295e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   12962:	f013 0301 	ands.w	r3, r3, #1
   12966:	d003      	beq.n	12970 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   12968:	480a      	ldr	r0, [pc, #40]	; (12994 <generic_hfclk_start+0x60>)
   1296a:	f005 fc52 	bl	18212 <set_on_state>
			already_started = true;
   1296e:	2301      	movs	r3, #1
	__asm__ volatile(
   12970:	f381 8811 	msr	BASEPRI, r1
   12974:	f3bf 8f6f 	isb	sy
	if (already_started) {
   12978:	b123      	cbz	r3, 12984 <generic_hfclk_start+0x50>
}
   1297a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1297e:	2000      	movs	r0, #0
   12980:	f7ff bf92 	b.w	128a8 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   12984:	2001      	movs	r0, #1
}
   12986:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1298a:	f000 bccb 	b.w	13324 <nrfx_clock_start>
   1298e:	bf00      	nop
   12990:	200009c0 	.word	0x200009c0
   12994:	200009b0 	.word	0x200009b0

00012998 <api_blocking_start>:
{
   12998:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1299a:	2200      	movs	r2, #0
   1299c:	2301      	movs	r3, #1
   1299e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   129a2:	466b      	mov	r3, sp
   129a4:	4a08      	ldr	r2, [pc, #32]	; (129c8 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   129a6:	f8cd d000 	str.w	sp, [sp]
   129aa:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   129ae:	f005 fc73 	bl	18298 <api_start>
	if (err < 0) {
   129b2:	2800      	cmp	r0, #0
   129b4:	db05      	blt.n	129c2 <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   129b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   129ba:	2300      	movs	r3, #0
   129bc:	4668      	mov	r0, sp
   129be:	f001 fa4f 	bl	13e60 <z_impl_k_sem_take>
}
   129c2:	b005      	add	sp, #20
   129c4:	f85d fb04 	ldr.w	pc, [sp], #4
   129c8:	000182c5 	.word	0x000182c5

000129cc <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   129cc:	4b07      	ldr	r3, [pc, #28]	; (129ec <generic_hfclk_stop+0x20>)
   129ce:	e8d3 2fef 	ldaex	r2, [r3]
   129d2:	f022 0102 	bic.w	r1, r2, #2
   129d6:	e8c3 1fe0 	stlex	r0, r1, [r3]
   129da:	2800      	cmp	r0, #0
   129dc:	d1f7      	bne.n	129ce <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   129de:	07d3      	lsls	r3, r2, #31
   129e0:	d402      	bmi.n	129e8 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   129e2:	2001      	movs	r0, #1
   129e4:	f000 bd00 	b.w	133e8 <nrfx_clock_stop>
}
   129e8:	4770      	bx	lr
   129ea:	bf00      	nop
   129ec:	200009c0 	.word	0x200009c0

000129f0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   129f0:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   129f2:	4808      	ldr	r0, [pc, #32]	; (12a14 <uart_console_init+0x24>)
   129f4:	4b08      	ldr	r3, [pc, #32]	; (12a18 <uart_console_init+0x28>)
   129f6:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   129f8:	f005 fe38 	bl	1866c <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   129fc:	b138      	cbz	r0, 12a0e <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   129fe:	4807      	ldr	r0, [pc, #28]	; (12a1c <uart_console_init+0x2c>)
   12a00:	f7ff fe98 	bl	12734 <__stdout_hook_install>
	__printk_hook_install(console_out);
   12a04:	4805      	ldr	r0, [pc, #20]	; (12a1c <uart_console_init+0x2c>)
   12a06:	f7fd fea9 	bl	1075c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   12a0a:	2000      	movs	r0, #0
}
   12a0c:	bd08      	pop	{r3, pc}
		return -ENODEV;
   12a0e:	f06f 0012 	mvn.w	r0, #18
   12a12:	e7fb      	b.n	12a0c <uart_console_init+0x1c>
   12a14:	000187f4 	.word	0x000187f4
   12a18:	200009c4 	.word	0x200009c4
   12a1c:	00012a21 	.word	0x00012a21

00012a20 <console_out>:
	if ('\n' == c) {
   12a20:	280a      	cmp	r0, #10
{
   12a22:	b538      	push	{r3, r4, r5, lr}
   12a24:	4604      	mov	r4, r0
   12a26:	4d07      	ldr	r5, [pc, #28]	; (12a44 <console_out+0x24>)
	if ('\n' == c) {
   12a28:	d104      	bne.n	12a34 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
   12a2a:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   12a2c:	6883      	ldr	r3, [r0, #8]
   12a2e:	210d      	movs	r1, #13
   12a30:	685b      	ldr	r3, [r3, #4]
   12a32:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   12a34:	6828      	ldr	r0, [r5, #0]
   12a36:	6883      	ldr	r3, [r0, #8]
   12a38:	b2e1      	uxtb	r1, r4
   12a3a:	685b      	ldr	r3, [r3, #4]
   12a3c:	4798      	blx	r3
}
   12a3e:	4620      	mov	r0, r4
   12a40:	bd38      	pop	{r3, r4, r5, pc}
   12a42:	bf00      	nop
   12a44:	200009c4 	.word	0x200009c4

00012a48 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   12a48:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   12a4a:	794b      	ldrb	r3, [r1, #5]
   12a4c:	2b01      	cmp	r3, #1
   12a4e:	d026      	beq.n	12a9e <uarte_nrfx_configure+0x56>
   12a50:	2b03      	cmp	r3, #3
   12a52:	d121      	bne.n	12a98 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   12a54:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   12a56:	798b      	ldrb	r3, [r1, #6]
   12a58:	2b03      	cmp	r3, #3
   12a5a:	d11d      	bne.n	12a98 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   12a5c:	79cc      	ldrb	r4, [r1, #7]
   12a5e:	b10c      	cbz	r4, 12a64 <uarte_nrfx_configure+0x1c>
   12a60:	2c01      	cmp	r4, #1
   12a62:	d119      	bne.n	12a98 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   12a64:	790a      	ldrb	r2, [r1, #4]
   12a66:	b112      	cbz	r2, 12a6e <uarte_nrfx_configure+0x26>
   12a68:	2a02      	cmp	r2, #2
   12a6a:	d115      	bne.n	12a98 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   12a6c:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   12a6e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   12a70:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   12a72:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   12a76:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   12a78:	d065      	beq.n	12b46 <uarte_nrfx_configure+0xfe>
   12a7a:	d82d      	bhi.n	12ad8 <uarte_nrfx_configure+0x90>
   12a7c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   12a80:	d064      	beq.n	12b4c <uarte_nrfx_configure+0x104>
   12a82:	d816      	bhi.n	12ab2 <uarte_nrfx_configure+0x6a>
   12a84:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   12a88:	d062      	beq.n	12b50 <uarte_nrfx_configure+0x108>
   12a8a:	d80a      	bhi.n	12aa2 <uarte_nrfx_configure+0x5a>
   12a8c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   12a90:	d061      	beq.n	12b56 <uarte_nrfx_configure+0x10e>
   12a92:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   12a96:	d061      	beq.n	12b5c <uarte_nrfx_configure+0x114>
   12a98:	f06f 0085 	mvn.w	r0, #133	; 0x85
   12a9c:	e052      	b.n	12b44 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   12a9e:	2600      	movs	r6, #0
   12aa0:	e7d9      	b.n	12a56 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   12aa2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   12aa6:	d05c      	beq.n	12b62 <uarte_nrfx_configure+0x11a>
   12aa8:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   12aac:	d1f4      	bne.n	12a98 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   12aae:	4b37      	ldr	r3, [pc, #220]	; (12b8c <uarte_nrfx_configure+0x144>)
   12ab0:	e03c      	b.n	12b2c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   12ab2:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   12ab6:	d057      	beq.n	12b68 <uarte_nrfx_configure+0x120>
   12ab8:	d807      	bhi.n	12aca <uarte_nrfx_configure+0x82>
   12aba:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   12abe:	d055      	beq.n	12b6c <uarte_nrfx_configure+0x124>
   12ac0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   12ac4:	d1e8      	bne.n	12a98 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   12ac6:	4b32      	ldr	r3, [pc, #200]	; (12b90 <uarte_nrfx_configure+0x148>)
   12ac8:	e030      	b.n	12b2c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   12aca:	f647 2712 	movw	r7, #31250	; 0x7a12
   12ace:	42bb      	cmp	r3, r7
   12ad0:	d1e2      	bne.n	12a98 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   12ad2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   12ad6:	e029      	b.n	12b2c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   12ad8:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   12adc:	d048      	beq.n	12b70 <uarte_nrfx_configure+0x128>
   12ade:	d813      	bhi.n	12b08 <uarte_nrfx_configure+0xc0>
   12ae0:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   12ae4:	d047      	beq.n	12b76 <uarte_nrfx_configure+0x12e>
   12ae6:	d809      	bhi.n	12afc <uarte_nrfx_configure+0xb4>
   12ae8:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   12aec:	42bb      	cmp	r3, r7
   12aee:	d044      	beq.n	12b7a <uarte_nrfx_configure+0x132>
   12af0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   12af4:	d1d0      	bne.n	12a98 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   12af6:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   12afa:	e017      	b.n	12b2c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   12afc:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   12b00:	d1ca      	bne.n	12a98 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   12b02:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   12b06:	e011      	b.n	12b2c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   12b08:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   12b0c:	d038      	beq.n	12b80 <uarte_nrfx_configure+0x138>
   12b0e:	d808      	bhi.n	12b22 <uarte_nrfx_configure+0xda>
   12b10:	4f20      	ldr	r7, [pc, #128]	; (12b94 <uarte_nrfx_configure+0x14c>)
   12b12:	42bb      	cmp	r3, r7
   12b14:	d037      	beq.n	12b86 <uarte_nrfx_configure+0x13e>
   12b16:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   12b1a:	d1bd      	bne.n	12a98 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   12b1c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   12b20:	e004      	b.n	12b2c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   12b22:	4f1d      	ldr	r7, [pc, #116]	; (12b98 <uarte_nrfx_configure+0x150>)
   12b24:	42bb      	cmp	r3, r7
   12b26:	d1b7      	bne.n	12a98 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   12b28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   12b2c:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->stop
#endif
#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
                    | (uint32_t)p_cfg->paritytype
#endif
                    | (uint32_t)p_cfg->hwfc;
   12b2e:	4334      	orrs	r4, r6
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   12b30:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   12b34:	4322      	orrs	r2, r4
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   12b36:	1d03      	adds	r3, r0, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   12b38:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   12b3c:	c903      	ldmia	r1, {r0, r1}
   12b3e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   12b42:	2000      	movs	r0, #0
}
   12b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   12b46:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   12b4a:	e7ef      	b.n	12b2c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   12b4c:	4b13      	ldr	r3, [pc, #76]	; (12b9c <uarte_nrfx_configure+0x154>)
   12b4e:	e7ed      	b.n	12b2c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   12b50:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   12b54:	e7ea      	b.n	12b2c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   12b56:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   12b5a:	e7e7      	b.n	12b2c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   12b5c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   12b60:	e7e4      	b.n	12b2c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   12b62:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   12b66:	e7e1      	b.n	12b2c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   12b68:	4b0d      	ldr	r3, [pc, #52]	; (12ba0 <uarte_nrfx_configure+0x158>)
   12b6a:	e7df      	b.n	12b2c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   12b6c:	4b0d      	ldr	r3, [pc, #52]	; (12ba4 <uarte_nrfx_configure+0x15c>)
   12b6e:	e7dd      	b.n	12b2c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   12b70:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   12b74:	e7da      	b.n	12b2c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   12b76:	4b0c      	ldr	r3, [pc, #48]	; (12ba8 <uarte_nrfx_configure+0x160>)
   12b78:	e7d8      	b.n	12b2c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   12b7a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   12b7e:	e7d5      	b.n	12b2c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   12b80:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   12b84:	e7d2      	b.n	12b2c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   12b86:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   12b8a:	e7cf      	b.n	12b2c <uarte_nrfx_configure+0xe4>
   12b8c:	0013b000 	.word	0x0013b000
   12b90:	004ea000 	.word	0x004ea000
   12b94:	0003d090 	.word	0x0003d090
   12b98:	000f4240 	.word	0x000f4240
   12b9c:	00275000 	.word	0x00275000
   12ba0:	0075c000 	.word	0x0075c000
   12ba4:	003af000 	.word	0x003af000
   12ba8:	013a9000 	.word	0x013a9000

00012bac <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   12bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12bae:	4605      	mov	r5, r0
   12bb0:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
   12bb2:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   12bb4:	f005 fd84 	bl	186c0 <k_is_in_isr>
   12bb8:	b910      	cbnz	r0, 12bc0 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   12bba:	4b2c      	ldr	r3, [pc, #176]	; (12c6c <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
   12bbc:	781b      	ldrb	r3, [r3, #0]
   12bbe:	b983      	cbnz	r3, 12be2 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   12bc0:	f04f 0320 	mov.w	r3, #32
   12bc4:	f3ef 8411 	mrs	r4, BASEPRI
   12bc8:	f383 8812 	msr	BASEPRI_MAX, r3
   12bcc:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   12bd0:	6868      	ldr	r0, [r5, #4]
   12bd2:	f005 fb9c 	bl	1830e <is_tx_ready.isra.0>
   12bd6:	bb28      	cbnz	r0, 12c24 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   12bd8:	f384 8811 	msr	BASEPRI, r4
   12bdc:	f3bf 8f6f 	isb	sy
}
   12be0:	e7ee      	b.n	12bc0 <uarte_nrfx_poll_out+0x14>
{
   12be2:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   12be4:	6868      	ldr	r0, [r5, #4]
   12be6:	f005 fb92 	bl	1830e <is_tx_ready.isra.0>
   12bea:	b970      	cbnz	r0, 12c0a <uarte_nrfx_poll_out+0x5e>
   12bec:	2001      	movs	r0, #1
   12bee:	f005 fd3a 	bl	18666 <nrfx_busy_wait>
   12bf2:	3c01      	subs	r4, #1
   12bf4:	d1f6      	bne.n	12be4 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   12bf6:	2100      	movs	r1, #0
   12bf8:	2021      	movs	r0, #33	; 0x21
   12bfa:	f002 f811 	bl	14c20 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   12bfe:	e7f0      	b.n	12be2 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   12c00:	f384 8811 	msr	BASEPRI, r4
   12c04:	f3bf 8f6f 	isb	sy
}
   12c08:	e7f5      	b.n	12bf6 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   12c0a:	f04f 0320 	mov.w	r3, #32
   12c0e:	f3ef 8411 	mrs	r4, BASEPRI
   12c12:	f383 8812 	msr	BASEPRI_MAX, r3
   12c16:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   12c1a:	6868      	ldr	r0, [r5, #4]
   12c1c:	f005 fb77 	bl	1830e <is_tx_ready.isra.0>
   12c20:	2800      	cmp	r0, #0
   12c22:	d0ed      	beq.n	12c00 <uarte_nrfx_poll_out+0x54>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   12c24:	2201      	movs	r2, #1
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   12c26:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
   12c2a:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
   12c2c:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   12c2e:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   12c32:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12c36:	2200      	movs	r2, #0
   12c38:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   12c3c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   12c40:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   12c44:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   12c48:	684a      	ldr	r2, [r1, #4]
   12c4a:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   12c4c:	bf41      	itttt	mi
   12c4e:	2208      	movmi	r2, #8
   12c50:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   12c54:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   12c58:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12c5c:	2201      	movs	r2, #1
   12c5e:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   12c60:	f384 8811 	msr	BASEPRI, r4
   12c64:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   12c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12c6a:	bf00      	nop
   12c6c:	200014f1 	.word	0x200014f1

00012c70 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   12c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12c72:	460f      	mov	r7, r1
   12c74:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(dev != NULL);
   12c76:	b940      	cbnz	r0, 12c8a <entropy_cc3xx_rng_get_entropy+0x1a>
   12c78:	4918      	ldr	r1, [pc, #96]	; (12cdc <entropy_cc3xx_rng_get_entropy+0x6c>)
   12c7a:	4819      	ldr	r0, [pc, #100]	; (12ce0 <entropy_cc3xx_rng_get_entropy+0x70>)
   12c7c:	2220      	movs	r2, #32
   12c7e:	f005 f9dd 	bl	1803c <assert_print>
   12c82:	2120      	movs	r1, #32
   12c84:	4815      	ldr	r0, [pc, #84]	; (12cdc <entropy_cc3xx_rng_get_entropy+0x6c>)
   12c86:	f005 f9d2 	bl	1802e <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   12c8a:	b947      	cbnz	r7, 12c9e <entropy_cc3xx_rng_get_entropy+0x2e>
   12c8c:	4913      	ldr	r1, [pc, #76]	; (12cdc <entropy_cc3xx_rng_get_entropy+0x6c>)
   12c8e:	4814      	ldr	r0, [pc, #80]	; (12ce0 <entropy_cc3xx_rng_get_entropy+0x70>)
   12c90:	2221      	movs	r2, #33	; 0x21
   12c92:	f005 f9d3 	bl	1803c <assert_print>
   12c96:	2121      	movs	r1, #33	; 0x21
   12c98:	4810      	ldr	r0, [pc, #64]	; (12cdc <entropy_cc3xx_rng_get_entropy+0x6c>)
   12c9a:	f005 f9c8 	bl	1802e <assert_post_action>
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   12c9e:	f44f 6580 	mov.w	r5, #1024	; 0x400
   12ca2:	2400      	movs	r4, #0
	while (offset < length) {
   12ca4:	42a6      	cmp	r6, r4
   12ca6:	d803      	bhi.n	12cb0 <entropy_cc3xx_rng_get_entropy+0x40>
		}

		offset += chunk_size;
	}

	if (offset == length) {
   12ca8:	d116      	bne.n	12cd8 <entropy_cc3xx_rng_get_entropy+0x68>
		err = 0;
   12caa:	2000      	movs	r0, #0
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   12cac:	b003      	add	sp, #12
   12cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   12cb0:	1b33      	subs	r3, r6, r4
   12cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   12cb6:	bf38      	it	cc
   12cb8:	461d      	movcc	r5, r3
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   12cba:	2000      	movs	r0, #0
   12cbc:	462a      	mov	r2, r5
   12cbe:	ab01      	add	r3, sp, #4
   12cc0:	1939      	adds	r1, r7, r4
   12cc2:	f002 fba9 	bl	15418 <nrf_cc3xx_platform_ctr_drbg_get>
		if (ret != 0) {
   12cc6:	b920      	cbnz	r0, 12cd2 <entropy_cc3xx_rng_get_entropy+0x62>
		if (olen != chunk_size) {
   12cc8:	9b01      	ldr	r3, [sp, #4]
   12cca:	42ab      	cmp	r3, r5
   12ccc:	d101      	bne.n	12cd2 <entropy_cc3xx_rng_get_entropy+0x62>
		offset += chunk_size;
   12cce:	442c      	add	r4, r5
   12cd0:	e7e8      	b.n	12ca4 <entropy_cc3xx_rng_get_entropy+0x34>
			return -EINVAL;
   12cd2:	f06f 0015 	mvn.w	r0, #21
   12cd6:	e7e9      	b.n	12cac <entropy_cc3xx_rng_get_entropy+0x3c>
	int err = EINVAL;
   12cd8:	2016      	movs	r0, #22
   12cda:	e7e7      	b.n	12cac <entropy_cc3xx_rng_get_entropy+0x3c>
   12cdc:	000199d6 	.word	0x000199d6
   12ce0:	00018ef0 	.word	0x00018ef0

00012ce4 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
   12ce4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   12ce8:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
   12cea:	6919      	ldr	r1, [r3, #16]
{
   12cec:	b510      	push	{r4, lr}
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
   12cee:	f411 3f80 	tst.w	r1, #65536	; 0x10000
	uint32_t val2 = SysTick->VAL;	/* C */
   12cf2:	6998      	ldr	r0, [r3, #24]
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
   12cf4:	4908      	ldr	r1, [pc, #32]	; (12d18 <elapsed+0x34>)
   12cf6:	4b09      	ldr	r3, [pc, #36]	; (12d1c <elapsed+0x38>)
   12cf8:	d101      	bne.n	12cfe <elapsed+0x1a>
	    || (val1 < val2)) {
   12cfa:	4282      	cmp	r2, r0
   12cfc:	d206      	bcs.n	12d0c <elapsed+0x28>
		overflow_cyc += last_load;
   12cfe:	681a      	ldr	r2, [r3, #0]
   12d00:	680c      	ldr	r4, [r1, #0]
   12d02:	4422      	add	r2, r4
   12d04:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
   12d06:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   12d0a:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
   12d0c:	681b      	ldr	r3, [r3, #0]
   12d0e:	680a      	ldr	r2, [r1, #0]
   12d10:	4413      	add	r3, r2
}
   12d12:	1a18      	subs	r0, r3, r0
   12d14:	bd10      	pop	{r4, pc}
   12d16:	bf00      	nop
   12d18:	200009d0 	.word	0x200009d0
   12d1c:	200009d8 	.word	0x200009d8

00012d20 <sys_clock_driver_init>:
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12d20:	2220      	movs	r2, #32
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
   12d22:	2000      	movs	r0, #0
   12d24:	4b07      	ldr	r3, [pc, #28]	; (12d44 <sys_clock_driver_init+0x24>)
   12d26:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
   12d2a:	4b07      	ldr	r3, [pc, #28]	; (12d48 <sys_clock_driver_init+0x28>)
   12d2c:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
   12d2e:	4b07      	ldr	r3, [pc, #28]	; (12d4c <sys_clock_driver_init+0x2c>)
   12d30:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
   12d32:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   12d36:	6158      	str	r0, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
   12d38:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
   12d3a:	691a      	ldr	r2, [r3, #16]
   12d3c:	f042 0207 	orr.w	r2, r2, #7
   12d40:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
   12d42:	4770      	bx	lr
   12d44:	e000ed00 	.word	0xe000ed00
   12d48:	200009d0 	.word	0x200009d0
   12d4c:	200009d8 	.word	0x200009d8

00012d50 <sys_clock_isr>:
{
   12d50:	b508      	push	{r3, lr}
	elapsed();
   12d52:	f7ff ffc7 	bl	12ce4 <elapsed>
	cycle_count += overflow_cyc;
   12d56:	4a09      	ldr	r2, [pc, #36]	; (12d7c <sys_clock_isr+0x2c>)
   12d58:	4909      	ldr	r1, [pc, #36]	; (12d80 <sys_clock_isr+0x30>)
   12d5a:	6813      	ldr	r3, [r2, #0]
   12d5c:	6808      	ldr	r0, [r1, #0]
   12d5e:	4403      	add	r3, r0
   12d60:	600b      	str	r3, [r1, #0]
	overflow_cyc = 0;
   12d62:	2100      	movs	r1, #0
   12d64:	6011      	str	r1, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
   12d66:	4a07      	ldr	r2, [pc, #28]	; (12d84 <sys_clock_isr+0x34>)
   12d68:	6810      	ldr	r0, [r2, #0]
		announced_cycles += dticks * CYC_PER_TICK;
   12d6a:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
   12d6c:	1a18      	subs	r0, r3, r0
   12d6e:	f002 f9e3 	bl	15138 <sys_clock_announce>
}
   12d72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   12d76:	f7fe bf0d 	b.w	11b94 <z_arm_exc_exit>
   12d7a:	bf00      	nop
   12d7c:	200009d8 	.word	0x200009d8
   12d80:	200009cc 	.word	0x200009cc
   12d84:	200009c8 	.word	0x200009c8

00012d88 <sys_clock_set_timeout>:
{
   12d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12d8a:	4f3a      	ldr	r7, [pc, #232]	; (12e74 <sys_clock_set_timeout+0xec>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
   12d8c:	b159      	cbz	r1, 12da6 <sys_clock_set_timeout+0x1e>
   12d8e:	1c42      	adds	r2, r0, #1
   12d90:	d109      	bne.n	12da6 <sys_clock_set_timeout+0x1e>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
   12d92:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   12d96:	6913      	ldr	r3, [r2, #16]
   12d98:	f023 0301 	bic.w	r3, r3, #1
   12d9c:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
   12d9e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
   12da2:	603b      	str	r3, [r7, #0]
}
   12da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   12da6:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
   12da8:	683e      	ldr	r6, [r7, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   12daa:	d056      	beq.n	12e5a <sys_clock_set_timeout+0xd2>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   12dac:	2801      	cmp	r0, #1
   12dae:	dd56      	ble.n	12e5e <sys_clock_set_timeout+0xd6>
   12db0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   12db4:	4298      	cmp	r0, r3
   12db6:	da54      	bge.n	12e62 <sys_clock_set_timeout+0xda>
   12db8:	1e44      	subs	r4, r0, #1
	__asm__ volatile(
   12dba:	f04f 0320 	mov.w	r3, #32
   12dbe:	f3ef 8511 	mrs	r5, BASEPRI
   12dc2:	f383 8812 	msr	BASEPRI_MAX, r3
   12dc6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12dca:	482b      	ldr	r0, [pc, #172]	; (12e78 <sys_clock_set_timeout+0xf0>)
   12dcc:	f000 fe56 	bl	13a7c <z_spin_lock_valid>
   12dd0:	b940      	cbnz	r0, 12de4 <sys_clock_set_timeout+0x5c>
   12dd2:	492a      	ldr	r1, [pc, #168]	; (12e7c <sys_clock_set_timeout+0xf4>)
   12dd4:	482a      	ldr	r0, [pc, #168]	; (12e80 <sys_clock_set_timeout+0xf8>)
   12dd6:	228e      	movs	r2, #142	; 0x8e
   12dd8:	f005 f930 	bl	1803c <assert_print>
   12ddc:	218e      	movs	r1, #142	; 0x8e
   12dde:	4827      	ldr	r0, [pc, #156]	; (12e7c <sys_clock_set_timeout+0xf4>)
   12de0:	f005 f925 	bl	1802e <assert_post_action>
	z_spin_lock_set_owner(l);
   12de4:	4824      	ldr	r0, [pc, #144]	; (12e78 <sys_clock_set_timeout+0xf0>)
   12de6:	f000 fe65 	bl	13ab4 <z_spin_lock_set_owner>
	uint32_t pending = elapsed();
   12dea:	f7ff ff7b 	bl	12ce4 <elapsed>
	overflow_cyc = 0U;
   12dee:	f04f 0e00 	mov.w	lr, #0
	val1 = SysTick->VAL;
   12df2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	cycle_count += pending;
   12df6:	f8df c08c 	ldr.w	ip, [pc, #140]	; 12e84 <sys_clock_set_timeout+0xfc>
	val1 = SysTick->VAL;
   12dfa:	698b      	ldr	r3, [r1, #24]
	cycle_count += pending;
   12dfc:	f8dc 2000 	ldr.w	r2, [ip]
   12e00:	4402      	add	r2, r0
	overflow_cyc = 0U;
   12e02:	4821      	ldr	r0, [pc, #132]	; (12e88 <sys_clock_set_timeout+0x100>)
	cycle_count += pending;
   12e04:	f8cc 2000 	str.w	r2, [ip]
	overflow_cyc = 0U;
   12e08:	f8c0 e000 	str.w	lr, [r0]
	uint32_t unannounced = cycle_count - announced_cycles;
   12e0c:	481f      	ldr	r0, [pc, #124]	; (12e8c <sys_clock_set_timeout+0x104>)
   12e0e:	6800      	ldr	r0, [r0, #0]
   12e10:	1a10      	subs	r0, r2, r0
	if ((int32_t)unannounced < 0) {
   12e12:	4570      	cmp	r0, lr
   12e14:	da27      	bge.n	12e66 <sys_clock_set_timeout+0xde>
		last_load = MIN_DELAY;
   12e16:	f44f 6080 	mov.w	r0, #1024	; 0x400
   12e1a:	6038      	str	r0, [r7, #0]
	SysTick->LOAD = last_load - 1;
   12e1c:	683c      	ldr	r4, [r7, #0]
	val2 = SysTick->VAL;
   12e1e:	6988      	ldr	r0, [r1, #24]
	SysTick->LOAD = last_load - 1;
   12e20:	3c01      	subs	r4, #1
   12e22:	614c      	str	r4, [r1, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
   12e24:	2400      	movs	r4, #0
	if (val1 < val2) {
   12e26:	4283      	cmp	r3, r0
		cycle_count += (val1 + (last_load_ - val2));
   12e28:	bf38      	it	cc
   12e2a:	199b      	addcc	r3, r3, r6
		cycle_count += (val1 - val2);
   12e2c:	1a1b      	subs	r3, r3, r0
	SysTick->VAL = 0; /* resets timer to last_load */
   12e2e:	618c      	str	r4, [r1, #24]
		cycle_count += (val1 - val2);
   12e30:	4413      	add	r3, r2
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12e32:	4811      	ldr	r0, [pc, #68]	; (12e78 <sys_clock_set_timeout+0xf0>)
   12e34:	f8cc 3000 	str.w	r3, [ip]
   12e38:	f000 fe2e 	bl	13a98 <z_spin_unlock_valid>
   12e3c:	b940      	cbnz	r0, 12e50 <sys_clock_set_timeout+0xc8>
   12e3e:	490f      	ldr	r1, [pc, #60]	; (12e7c <sys_clock_set_timeout+0xf4>)
   12e40:	480f      	ldr	r0, [pc, #60]	; (12e80 <sys_clock_set_timeout+0xf8>)
   12e42:	22b9      	movs	r2, #185	; 0xb9
   12e44:	f005 f8fa 	bl	1803c <assert_print>
   12e48:	21b9      	movs	r1, #185	; 0xb9
   12e4a:	480c      	ldr	r0, [pc, #48]	; (12e7c <sys_clock_set_timeout+0xf4>)
   12e4c:	f005 f8ef 	bl	1802e <assert_post_action>
	__asm__ volatile(
   12e50:	f385 8811 	msr	BASEPRI, r5
   12e54:	f3bf 8f6f 	isb	sy
   12e58:	e7a4      	b.n	12da4 <sys_clock_set_timeout+0x1c>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   12e5a:	480d      	ldr	r0, [pc, #52]	; (12e90 <sys_clock_set_timeout+0x108>)
   12e5c:	e7ac      	b.n	12db8 <sys_clock_set_timeout+0x30>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   12e5e:	2400      	movs	r4, #0
   12e60:	e7ab      	b.n	12dba <sys_clock_set_timeout+0x32>
   12e62:	4c0b      	ldr	r4, [pc, #44]	; (12e90 <sys_clock_set_timeout+0x108>)
   12e64:	e7a9      	b.n	12dba <sys_clock_set_timeout+0x32>
			last_load = delay;
   12e66:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   12e6a:	bfb8      	it	lt
   12e6c:	f44f 6480 	movlt.w	r4, #1024	; 0x400
   12e70:	603c      	str	r4, [r7, #0]
   12e72:	e7d3      	b.n	12e1c <sys_clock_set_timeout+0x94>
   12e74:	200009d0 	.word	0x200009d0
   12e78:	200009d4 	.word	0x200009d4
   12e7c:	00018ec3 	.word	0x00018ec3
   12e80:	00018ef0 	.word	0x00018ef0
   12e84:	200009cc 	.word	0x200009cc
   12e88:	200009d8 	.word	0x200009d8
   12e8c:	200009c8 	.word	0x200009c8
   12e90:	00fffffe 	.word	0x00fffffe

00012e94 <sys_clock_elapsed>:
{
   12e94:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   12e96:	f04f 0320 	mov.w	r3, #32
   12e9a:	f3ef 8511 	mrs	r5, BASEPRI
   12e9e:	f383 8812 	msr	BASEPRI_MAX, r3
   12ea2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12ea6:	4815      	ldr	r0, [pc, #84]	; (12efc <sys_clock_elapsed+0x68>)
   12ea8:	f000 fde8 	bl	13a7c <z_spin_lock_valid>
   12eac:	b940      	cbnz	r0, 12ec0 <sys_clock_elapsed+0x2c>
   12eae:	4914      	ldr	r1, [pc, #80]	; (12f00 <sys_clock_elapsed+0x6c>)
   12eb0:	4814      	ldr	r0, [pc, #80]	; (12f04 <sys_clock_elapsed+0x70>)
   12eb2:	228e      	movs	r2, #142	; 0x8e
   12eb4:	f005 f8c2 	bl	1803c <assert_print>
   12eb8:	218e      	movs	r1, #142	; 0x8e
   12eba:	4811      	ldr	r0, [pc, #68]	; (12f00 <sys_clock_elapsed+0x6c>)
   12ebc:	f005 f8b7 	bl	1802e <assert_post_action>
	z_spin_lock_set_owner(l);
   12ec0:	480e      	ldr	r0, [pc, #56]	; (12efc <sys_clock_elapsed+0x68>)
   12ec2:	f000 fdf7 	bl	13ab4 <z_spin_lock_set_owner>
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
   12ec6:	f7ff ff0d 	bl	12ce4 <elapsed>
   12eca:	4b0f      	ldr	r3, [pc, #60]	; (12f08 <sys_clock_elapsed+0x74>)
   12ecc:	681c      	ldr	r4, [r3, #0]
   12ece:	4b0f      	ldr	r3, [pc, #60]	; (12f0c <sys_clock_elapsed+0x78>)
   12ed0:	681b      	ldr	r3, [r3, #0]
   12ed2:	1ae4      	subs	r4, r4, r3
   12ed4:	4404      	add	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12ed6:	4809      	ldr	r0, [pc, #36]	; (12efc <sys_clock_elapsed+0x68>)
   12ed8:	f000 fdde 	bl	13a98 <z_spin_unlock_valid>
   12edc:	b940      	cbnz	r0, 12ef0 <sys_clock_elapsed+0x5c>
   12ede:	4908      	ldr	r1, [pc, #32]	; (12f00 <sys_clock_elapsed+0x6c>)
   12ee0:	4808      	ldr	r0, [pc, #32]	; (12f04 <sys_clock_elapsed+0x70>)
   12ee2:	22b9      	movs	r2, #185	; 0xb9
   12ee4:	f005 f8aa 	bl	1803c <assert_print>
   12ee8:	21b9      	movs	r1, #185	; 0xb9
   12eea:	4805      	ldr	r0, [pc, #20]	; (12f00 <sys_clock_elapsed+0x6c>)
   12eec:	f005 f89f 	bl	1802e <assert_post_action>
	__asm__ volatile(
   12ef0:	f385 8811 	msr	BASEPRI, r5
   12ef4:	f3bf 8f6f 	isb	sy
}
   12ef8:	4620      	mov	r0, r4
   12efa:	bd38      	pop	{r3, r4, r5, pc}
   12efc:	200009d4 	.word	0x200009d4
   12f00:	00018ec3 	.word	0x00018ec3
   12f04:	00018ef0 	.word	0x00018ef0
   12f08:	200009cc 	.word	0x200009cc
   12f0c:	200009c8 	.word	0x200009c8

00012f10 <sys_clock_idle_exit>:
	if (last_load == TIMER_STOPPED) {
   12f10:	4b05      	ldr	r3, [pc, #20]	; (12f28 <sys_clock_idle_exit+0x18>)
   12f12:	681b      	ldr	r3, [r3, #0]
   12f14:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
		SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
   12f18:	bf01      	itttt	eq
   12f1a:	f04f 22e0 	moveq.w	r2, #3758153728	; 0xe000e000
   12f1e:	6913      	ldreq	r3, [r2, #16]
   12f20:	f043 0301 	orreq.w	r3, r3, #1
   12f24:	6113      	streq	r3, [r2, #16]
}
   12f26:	4770      	bx	lr
   12f28:	200009d0 	.word	0x200009d0

00012f2c <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   12f2c:	6803      	ldr	r3, [r0, #0]
{
   12f2e:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   12f30:	095a      	lsrs	r2, r3, #5
   12f32:	bf0c      	ite	eq
   12f34:	f04f 32ff 	moveq.w	r2, #4294967295
   12f38:	2200      	movne	r2, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   12f3a:	f003 031f 	and.w	r3, r3, #31

    return (mask & (1UL << pin_number)) ? true : false;
   12f3e:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   12f42:	07db      	lsls	r3, r3, #31
{
   12f44:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   12f46:	d40a      	bmi.n	12f5e <nrf_gpio_pin_port_decode+0x32>
   12f48:	490e      	ldr	r1, [pc, #56]	; (12f84 <nrf_gpio_pin_port_decode+0x58>)
   12f4a:	480f      	ldr	r0, [pc, #60]	; (12f88 <nrf_gpio_pin_port_decode+0x5c>)
   12f4c:	f240 2229 	movw	r2, #553	; 0x229
   12f50:	f005 f874 	bl	1803c <assert_print>
   12f54:	f240 2129 	movw	r1, #553	; 0x229
   12f58:	480a      	ldr	r0, [pc, #40]	; (12f84 <nrf_gpio_pin_port_decode+0x58>)
   12f5a:	f005 f868 	bl	1802e <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   12f5e:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   12f60:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12f64:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   12f66:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12f68:	d00a      	beq.n	12f80 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
   12f6a:	4906      	ldr	r1, [pc, #24]	; (12f84 <nrf_gpio_pin_port_decode+0x58>)
   12f6c:	4806      	ldr	r0, [pc, #24]	; (12f88 <nrf_gpio_pin_port_decode+0x5c>)
   12f6e:	f240 222e 	movw	r2, #558	; 0x22e
   12f72:	f005 f863 	bl	1803c <assert_print>
   12f76:	f240 212e 	movw	r1, #558	; 0x22e
   12f7a:	4802      	ldr	r0, [pc, #8]	; (12f84 <nrf_gpio_pin_port_decode+0x58>)
   12f7c:	f005 f857 	bl	1802e <assert_post_action>
}
   12f80:	4802      	ldr	r0, [pc, #8]	; (12f8c <nrf_gpio_pin_port_decode+0x60>)
   12f82:	bd10      	pop	{r4, pc}
   12f84:	00019a11 	.word	0x00019a11
   12f88:	00018ef0 	.word	0x00018ef0
   12f8c:	50842500 	.word	0x50842500

00012f90 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   12f90:	4803      	ldr	r0, [pc, #12]	; (12fa0 <k_sys_fatal_error_handler+0x10>)
   12f92:	2145      	movs	r1, #69	; 0x45
{
   12f94:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
   12f96:	f005 f865 	bl	18064 <z_log_minimal_printk>
		sys_arch_reboot(0);
   12f9a:	2000      	movs	r0, #0
   12f9c:	f7ff f8ea 	bl	12174 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   12fa0:	00019a44 	.word	0x00019a44

00012fa4 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   12fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   12fa8:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   12faa:	4c21      	ldr	r4, [pc, #132]	; (13030 <check_ext_api_requests+0x8c>)
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   12fac:	4e21      	ldr	r6, [pc, #132]	; (13034 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   12fae:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   12fb2:	f8df 9084 	ldr.w	r9, [pc, #132]	; 13038 <check_ext_api_requests+0x94>
{
   12fb6:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   12fb8:	45a8      	cmp	r8, r5
   12fba:	d803      	bhi.n	12fc4 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   12fbc:	2000      	movs	r0, #0
   12fbe:	b005      	add	sp, #20
   12fc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   12fc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12fc6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   12fca:	681f      	ldr	r7, [r3, #0]
   12fcc:	ab01      	add	r3, sp, #4
   12fce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   12fd2:	220c      	movs	r2, #12
   12fd4:	4619      	mov	r1, r3
   12fd6:	4638      	mov	r0, r7
   12fd8:	f005 f8db 	bl	18192 <memcmp>
   12fdc:	b990      	cbnz	r0, 13004 <check_ext_api_requests+0x60>
   12fde:	b18f      	cbz	r7, 13004 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   12fe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   12fe2:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   12fe4:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   12fe6:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   12fe8:	4291      	cmp	r1, r2
   12fea:	d10b      	bne.n	13004 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   12fec:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   12fee:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   12ff0:	4291      	cmp	r1, r2
   12ff2:	d807      	bhi.n	13004 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   12ff4:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   12ff6:	4291      	cmp	r1, r2
   12ff8:	d904      	bls.n	13004 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   12ffa:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   12ffc:	695b      	ldr	r3, [r3, #20]
   12ffe:	ea32 0303 	bics.w	r3, r2, r3
   13002:	d00a      	beq.n	1301a <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   13004:	6a27      	ldr	r7, [r4, #32]
   13006:	b167      	cbz	r7, 13022 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   13008:	480c      	ldr	r0, [pc, #48]	; (1303c <check_ext_api_requests+0x98>)
   1300a:	f004 ff8a 	bl	17f22 <printk>
			k_panic();
   1300e:	4040      	eors	r0, r0
   13010:	f380 8811 	msr	BASEPRI, r0
   13014:	f04f 0004 	mov.w	r0, #4
   13018:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   1301a:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1301c:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   1301e:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   13020:	e7ca      	b.n	12fb8 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   13022:	4648      	mov	r0, r9
   13024:	f004 ff7d 	bl	17f22 <printk>
			*ext_api_req->ext_api = NULL;
   13028:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1302a:	601f      	str	r7, [r3, #0]
   1302c:	e7f5      	b.n	1301a <check_ext_api_requests+0x76>
   1302e:	bf00      	nop
   13030:	0001043c 	.word	0x0001043c
   13034:	00018a7c 	.word	0x00018a7c
   13038:	00019a8f 	.word	0x00019a8f
   1303c:	00019a66 	.word	0x00019a66

00013040 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
   13040:	4a5b      	ldr	r2, [pc, #364]	; (131b0 <SystemInit+0x170>)
{
   13042:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
   13044:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
   13048:	f043 0302 	orr.w	r3, r3, #2
   1304c:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   13050:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13054:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   13058:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
  __ASM volatile ("dsb 0xF":::"memory");
   1305c:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
   13060:	2a09      	cmp	r2, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
   13062:	bf01      	itttt	eq
   13064:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
   13068:	2200      	moveq	r2, #0
   1306a:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
   1306e:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
   13072:	f005 fae7 	bl	18644 <nrf91_errata_14>
   13076:	b128      	cbz	r0, 13084 <SystemInit+0x44>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
   13078:	2201      	movs	r2, #1
   1307a:	4b4e      	ldr	r3, [pc, #312]	; (131b4 <SystemInit+0x174>)
   1307c:	f8c3 2a38 	str.w	r2, [r3, #2616]	; 0xa38
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
   13080:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   13084:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13088:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   1308c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   13090:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
   13094:	2a09      	cmp	r2, #9
   13096:	d105      	bne.n	130a4 <SystemInit+0x64>
            {
                switch(var2)
   13098:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
   1309a:	bf1e      	ittt	ne
   1309c:	2201      	movne	r2, #1
   1309e:	4b45      	ldrne	r3, [pc, #276]	; (131b4 <SystemInit+0x174>)
   130a0:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
   130a4:	f005 face 	bl	18644 <nrf91_errata_14>
   130a8:	b118      	cbz	r0, 130b2 <SystemInit+0x72>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
   130aa:	220e      	movs	r2, #14
   130ac:	4b42      	ldr	r3, [pc, #264]	; (131b8 <SystemInit+0x178>)
   130ae:	f8c3 2ee4 	str.w	r2, [r3, #3812]	; 0xee4
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   130b2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   130b6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   130ba:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   130be:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
   130c2:	2a09      	cmp	r2, #9
   130c4:	d106      	bne.n	130d4 <SystemInit+0x94>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
   130c6:	2200      	movs	r2, #0
   130c8:	4b3a      	ldr	r3, [pc, #232]	; (131b4 <SystemInit+0x174>)
   130ca:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x50004710ul) = 0x1;
   130ce:	2201      	movs	r2, #1
   130d0:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
{
   130d4:	2200      	movs	r2, #0
   130d6:	00d3      	lsls	r3, r2, #3
   130d8:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        return false;
    }
    
    bool is_empty_word(uint32_t const volatile * word)
    {
        uint32_t val = *word;
   130dc:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
   130e0:	f3bf 8f4f 	dsb	sy
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
   130e4:	3101      	adds	r1, #1
   130e6:	d008      	beq.n	130fa <SystemInit+0xba>
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
   130e8:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
   130ec:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
   130ee:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
   130f2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
   130f6:	600b      	str	r3, [r1, #0]
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
   130f8:	d1ed      	bne.n	130d6 <SystemInit+0x96>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
   130fa:	4b30      	ldr	r3, [pc, #192]	; (131bc <SystemInit+0x17c>)
   130fc:	69da      	ldr	r2, [r3, #28]
   130fe:	f3bf 8f4f 	dsb	sy
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
   13102:	07d1      	lsls	r1, r2, #31
   13104:	d543      	bpl.n	1318e <SystemInit+0x14e>
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   13106:	4b2e      	ldr	r3, [pc, #184]	; (131c0 <SystemInit+0x180>)
   13108:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1310c:	2a01      	cmp	r2, #1
   1310e:	d1fb      	bne.n	13108 <SystemInit+0xc8>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
   13110:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   13114:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   13118:	2a01      	cmp	r2, #1
   1311a:	d1fb      	bne.n	13114 <SystemInit+0xd4>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
   1311c:	4b27      	ldr	r3, [pc, #156]	; (131bc <SystemInit+0x17c>)
   1311e:	69da      	ldr	r2, [r3, #28]
   13120:	f3bf 8f4f 	dsb	sy
              if (uicr_HFXOSRC_erased()){
   13124:	07d2      	lsls	r2, r2, #31
   13126:	d50a      	bpl.n	1313e <SystemInit+0xfe>
                    uicr_erased_value = NRF_UICR_S->HFXOSRC;
   13128:	69da      	ldr	r2, [r3, #28]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
   1312a:	f022 0201 	bic.w	r2, r2, #1
                    NRF_UICR_S->HFXOSRC = uicr_new_value;
   1312e:	61da      	str	r2, [r3, #28]
   13130:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   13134:	4a22      	ldr	r2, [pc, #136]	; (131c0 <SystemInit+0x180>)
   13136:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1313a:	2b01      	cmp	r3, #1
   1313c:	d1fb      	bne.n	13136 <SystemInit+0xf6>
        uint32_t val = *word;
   1313e:	4a1f      	ldr	r2, [pc, #124]	; (131bc <SystemInit+0x17c>)
   13140:	6a13      	ldr	r3, [r2, #32]
   13142:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
   13146:	3301      	adds	r3, #1
   13148:	d10c      	bne.n	13164 <SystemInit+0x124>
                    uicr_erased_value = NRF_UICR_S->HFXOCNT;
   1314a:	6a13      	ldr	r3, [r2, #32]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
   1314c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   13150:	f043 0320 	orr.w	r3, r3, #32
                    NRF_UICR_S->HFXOCNT = uicr_new_value;
   13154:	6213      	str	r3, [r2, #32]
   13156:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   1315a:	4a19      	ldr	r2, [pc, #100]	; (131c0 <SystemInit+0x180>)
   1315c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   13160:	2b01      	cmp	r3, #1
   13162:	d1fb      	bne.n	1315c <SystemInit+0x11c>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
   13164:	2200      	movs	r2, #0
   13166:	4b16      	ldr	r3, [pc, #88]	; (131c0 <SystemInit+0x180>)
   13168:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   1316c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   13170:	2a01      	cmp	r2, #1
   13172:	d1fb      	bne.n	1316c <SystemInit+0x12c>
   13174:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   13178:	490d      	ldr	r1, [pc, #52]	; (131b0 <SystemInit+0x170>)
   1317a:	4b12      	ldr	r3, [pc, #72]	; (131c4 <SystemInit+0x184>)
   1317c:	68ca      	ldr	r2, [r1, #12]
   1317e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13182:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   13184:	60cb      	str	r3, [r1, #12]
   13186:	f3bf 8f4f 	dsb	sy
    __NOP();
   1318a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1318c:	e7fd      	b.n	1318a <SystemInit+0x14a>
        uint32_t val = *word;
   1318e:	6a1b      	ldr	r3, [r3, #32]
   13190:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
   13194:	3301      	adds	r3, #1
   13196:	d0b6      	beq.n	13106 <SystemInit+0xc6>
        SCB->NSACR |= (3UL << 10);
   13198:	4a05      	ldr	r2, [pc, #20]	; (131b0 <SystemInit+0x170>)
   1319a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   1319e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
   131a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    SystemCoreClock = __SYSTEM_CLOCK;
   131a6:	4b08      	ldr	r3, [pc, #32]	; (131c8 <SystemInit+0x188>)
   131a8:	4a08      	ldr	r2, [pc, #32]	; (131cc <SystemInit+0x18c>)
   131aa:	601a      	str	r2, [r3, #0]
}
   131ac:	bd08      	pop	{r3, pc}
   131ae:	bf00      	nop
   131b0:	e000ed00 	.word	0xe000ed00
   131b4:	50004000 	.word	0x50004000
   131b8:	5003a000 	.word	0x5003a000
   131bc:	00ff8000 	.word	0x00ff8000
   131c0:	50039000 	.word	0x50039000
   131c4:	05fa0004 	.word	0x05fa0004
   131c8:	20000054 	.word	0x20000054
   131cc:	03d09000 	.word	0x03d09000

000131d0 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   131d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
   131d2:	4604      	mov	r4, r0
   131d4:	b168      	cbz	r0, 131f2 <clock_stop+0x22>
   131d6:	2801      	cmp	r0, #1
   131d8:	d030      	beq.n	1323c <clock_stop+0x6c>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   131da:	492d      	ldr	r1, [pc, #180]	; (13290 <clock_stop+0xc0>)
   131dc:	482d      	ldr	r0, [pc, #180]	; (13294 <clock_stop+0xc4>)
   131de:	22d8      	movs	r2, #216	; 0xd8
   131e0:	f004 ff2c 	bl	1803c <assert_print>
   131e4:	21d8      	movs	r1, #216	; 0xd8
   131e6:	482a      	ldr	r0, [pc, #168]	; (13290 <clock_stop+0xc0>)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   131e8:	b003      	add	sp, #12
   131ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        case NRF_CLOCK_DOMAIN_HFCLKAUDIO:
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
                   CLOCK_HFCLKAUDIOSTAT_STATE_Msk;
#endif
        default:
            NRFX_ASSERT(0);
   131ee:	f004 bf1e 	b.w	1802e <assert_post_action>
    p_reg->INTENCLR = mask;
   131f2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   131f6:	2202      	movs	r2, #2
   131f8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   131fc:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   13200:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13204:	2201      	movs	r2, #1
   13206:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   13208:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1320a:	429c      	cmp	r4, r3
   1320c:	bf18      	it	ne
   1320e:	2500      	movne	r5, #0
   13210:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   13214:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   13218:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1321c:	bf08      	it	eq
   1321e:	f10d 0507 	addeq.w	r5, sp, #7
    switch (domain)
   13222:	b1b4      	cbz	r4, 13252 <clock_stop+0x82>
   13224:	2c01      	cmp	r4, #1
   13226:	d02a      	beq.n	1327e <clock_stop+0xae>
            NRFX_ASSERT(0);
   13228:	491b      	ldr	r1, [pc, #108]	; (13298 <clock_stop+0xc8>)
   1322a:	481a      	ldr	r0, [pc, #104]	; (13294 <clock_stop+0xc4>)
   1322c:	f44f 724f 	mov.w	r2, #828	; 0x33c
   13230:	f004 ff04 	bl	1803c <assert_print>
   13234:	f44f 714f 	mov.w	r1, #828	; 0x33c
   13238:	4817      	ldr	r0, [pc, #92]	; (13298 <clock_stop+0xc8>)
   1323a:	e7d5      	b.n	131e8 <clock_stop+0x18>
    p_reg->INTENCLR = mask;
   1323c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13240:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   13242:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13246:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1324a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1324e:	6058      	str	r0, [r3, #4]
}
   13250:	e7da      	b.n	13208 <clock_stop+0x38>
            if (p_clk_src != NULL)
   13252:	b125      	cbz	r5, 1325e <clock_stop+0x8e>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   13254:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   13258:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1325c:	702b      	strb	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1325e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   13262:	03db      	lsls	r3, r3, #15
   13264:	d509      	bpl.n	1327a <clock_stop+0xaa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   13266:	b11d      	cbz	r5, 13270 <clock_stop+0xa0>
   13268:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1326c:	2b01      	cmp	r3, #1
   1326e:	d104      	bne.n	1327a <clock_stop+0xaa>
   13270:	2001      	movs	r0, #1
   13272:	f005 f9f8 	bl	18666 <nrfx_busy_wait>
   13276:	3f01      	subs	r7, #1
   13278:	d1d3      	bne.n	13222 <clock_stop+0x52>
}
   1327a:	b003      	add	sp, #12
   1327c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (p_clk_src != NULL)
   1327e:	b125      	cbz	r5, 1328a <clock_stop+0xba>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   13280:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   13284:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   13288:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1328a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1328e:	e7e8      	b.n	13262 <clock_stop+0x92>
   13290:	00019ac2 	.word	0x00019ac2
   13294:	00018ef0 	.word	0x00018ef0
   13298:	00019aff 	.word	0x00019aff

0001329c <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   1329c:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   1329e:	4604      	mov	r4, r0
   132a0:	b950      	cbnz	r0, 132b8 <nrfx_clock_init+0x1c>
   132a2:	490a      	ldr	r1, [pc, #40]	; (132cc <nrfx_clock_init+0x30>)
   132a4:	480a      	ldr	r0, [pc, #40]	; (132d0 <nrfx_clock_init+0x34>)
   132a6:	f240 1215 	movw	r2, #277	; 0x115
   132aa:	f004 fec7 	bl	1803c <assert_print>
   132ae:	f240 1115 	movw	r1, #277	; 0x115
   132b2:	4806      	ldr	r0, [pc, #24]	; (132cc <nrfx_clock_init+0x30>)
   132b4:	f004 febb 	bl	1802e <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   132b8:	4b06      	ldr	r3, [pc, #24]	; (132d4 <nrfx_clock_init+0x38>)
   132ba:	791a      	ldrb	r2, [r3, #4]
   132bc:	b922      	cbnz	r2, 132c8 <nrfx_clock_init+0x2c>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   132be:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   132c0:	4805      	ldr	r0, [pc, #20]	; (132d8 <nrfx_clock_init+0x3c>)
        m_clock_cb.event_handler = event_handler;
   132c2:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   132c4:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   132c6:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   132c8:	4804      	ldr	r0, [pc, #16]	; (132dc <nrfx_clock_init+0x40>)
    return err_code;
   132ca:	e7fc      	b.n	132c6 <nrfx_clock_init+0x2a>
   132cc:	00019ac2 	.word	0x00019ac2
   132d0:	00018ef0 	.word	0x00018ef0
   132d4:	200009dc 	.word	0x200009dc
   132d8:	0bad0000 	.word	0x0bad0000
   132dc:	0bad000c 	.word	0x0bad000c

000132e0 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   132e0:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   132e2:	4b0d      	ldr	r3, [pc, #52]	; (13318 <nrfx_clock_enable+0x38>)
   132e4:	791b      	ldrb	r3, [r3, #4]
   132e6:	b953      	cbnz	r3, 132fe <nrfx_clock_enable+0x1e>
   132e8:	490c      	ldr	r1, [pc, #48]	; (1331c <nrfx_clock_enable+0x3c>)
   132ea:	480d      	ldr	r0, [pc, #52]	; (13320 <nrfx_clock_enable+0x40>)
   132ec:	f44f 7297 	mov.w	r2, #302	; 0x12e
   132f0:	f004 fea4 	bl	1803c <assert_print>
   132f4:	f44f 7197 	mov.w	r1, #302	; 0x12e
   132f8:	4808      	ldr	r0, [pc, #32]	; (1331c <nrfx_clock_enable+0x3c>)
   132fa:	f004 fe98 	bl	1802e <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   132fe:	2005      	movs	r0, #5
   13300:	f7fe fb4e 	bl	119a0 <arch_irq_is_enabled>
   13304:	b910      	cbnz	r0, 1330c <nrfx_clock_enable+0x2c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   13306:	2005      	movs	r0, #5
   13308:	f7fe fb3a 	bl	11980 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   1330c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13310:	2201      	movs	r2, #1
   13312:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   13316:	bd08      	pop	{r3, pc}
   13318:	200009dc 	.word	0x200009dc
   1331c:	00019ac2 	.word	0x00019ac2
   13320:	00018ef0 	.word	0x00018ef0

00013324 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   13324:	4b2d      	ldr	r3, [pc, #180]	; (133dc <nrfx_clock_start+0xb8>)
{
   13326:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   13328:	791b      	ldrb	r3, [r3, #4]
{
   1332a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1332c:	b953      	cbnz	r3, 13344 <nrfx_clock_start+0x20>
   1332e:	492c      	ldr	r1, [pc, #176]	; (133e0 <nrfx_clock_start+0xbc>)
   13330:	482c      	ldr	r0, [pc, #176]	; (133e4 <nrfx_clock_start+0xc0>)
   13332:	f44f 72b4 	mov.w	r2, #360	; 0x168
   13336:	f004 fe81 	bl	1803c <assert_print>
   1333a:	f44f 71b4 	mov.w	r1, #360	; 0x168
   1333e:	4828      	ldr	r0, [pc, #160]	; (133e0 <nrfx_clock_start+0xbc>)
   13340:	f004 fe75 	bl	1802e <assert_post_action>
    switch (domain)
   13344:	b174      	cbz	r4, 13364 <nrfx_clock_start+0x40>
   13346:	2c01      	cmp	r4, #1
   13348:	d03d      	beq.n	133c6 <nrfx_clock_start+0xa2>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   1334a:	4925      	ldr	r1, [pc, #148]	; (133e0 <nrfx_clock_start+0xbc>)
   1334c:	4825      	ldr	r0, [pc, #148]	; (133e4 <nrfx_clock_start+0xc0>)
   1334e:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
   13352:	f004 fe73 	bl	1803c <assert_print>
            break;
    }
}
   13356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
   1335a:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   1335e:	4820      	ldr	r0, [pc, #128]	; (133e0 <nrfx_clock_start+0xbc>)
   13360:	f004 be65 	b.w	1802e <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   13364:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   13368:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1336c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   13370:	03c9      	lsls	r1, r1, #15
   13372:	d413      	bmi.n	1339c <nrfx_clock_start+0x78>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   13374:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   13378:	07db      	lsls	r3, r3, #31
   1337a:	d419      	bmi.n	133b0 <nrfx_clock_start+0x8c>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   1337c:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
   1337e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   13382:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13386:	2300      	movs	r3, #0
   13388:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   1338c:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   13390:	2302      	movs	r3, #2
   13392:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13396:	2301      	movs	r3, #1
   13398:	6093      	str	r3, [r2, #8]
}
   1339a:	bd10      	pop	{r4, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1339c:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   133a0:	2b02      	cmp	r3, #2
   133a2:	d0ec      	beq.n	1337e <nrfx_clock_start+0x5a>
    if (!is_correct_clk)
   133a4:	2b01      	cmp	r3, #1
   133a6:	d0ea      	beq.n	1337e <nrfx_clock_start+0x5a>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   133a8:	2000      	movs	r0, #0
   133aa:	f7ff ff11 	bl	131d0 <clock_stop>
   133ae:	e7e5      	b.n	1337c <nrfx_clock_start+0x58>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   133b0:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
   133b4:	f003 0303 	and.w	r3, r3, #3
    if (!is_correct_clk)
   133b8:	3b01      	subs	r3, #1
   133ba:	2b01      	cmp	r3, #1
   133bc:	d8f4      	bhi.n	133a8 <nrfx_clock_start+0x84>
    p_reg->INTENSET = mask;
   133be:	2302      	movs	r3, #2
   133c0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
   133c4:	e7e9      	b.n	1339a <nrfx_clock_start+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   133c6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   133ca:	2200      	movs	r2, #0
   133cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   133d0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   133d4:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   133d8:	601c      	str	r4, [r3, #0]
}
   133da:	e7de      	b.n	1339a <nrfx_clock_start+0x76>
   133dc:	200009dc 	.word	0x200009dc
   133e0:	00019ac2 	.word	0x00019ac2
   133e4:	00018ef0 	.word	0x00018ef0

000133e8 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   133e8:	4b0a      	ldr	r3, [pc, #40]	; (13414 <nrfx_clock_stop+0x2c>)
{
   133ea:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   133ec:	791b      	ldrb	r3, [r3, #4]
{
   133ee:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   133f0:	b953      	cbnz	r3, 13408 <nrfx_clock_stop+0x20>
   133f2:	4909      	ldr	r1, [pc, #36]	; (13418 <nrfx_clock_stop+0x30>)
   133f4:	4809      	ldr	r0, [pc, #36]	; (1341c <nrfx_clock_stop+0x34>)
   133f6:	f240 12ad 	movw	r2, #429	; 0x1ad
   133fa:	f004 fe1f 	bl	1803c <assert_print>
   133fe:	f240 11ad 	movw	r1, #429	; 0x1ad
   13402:	4805      	ldr	r0, [pc, #20]	; (13418 <nrfx_clock_stop+0x30>)
   13404:	f004 fe13 	bl	1802e <assert_post_action>
    clock_stop(domain);
   13408:	4620      	mov	r0, r4
}
   1340a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    clock_stop(domain);
   1340e:	f7ff bedf 	b.w	131d0 <clock_stop>
   13412:	bf00      	nop
   13414:	200009dc 	.word	0x200009dc
   13418:	00019ac2 	.word	0x00019ac2
   1341c:	00018ef0 	.word	0x00018ef0

00013420 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   13420:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13424:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   13428:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1342a:	b152      	cbz	r2, 13442 <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1342c:	2000      	movs	r0, #0
   1342e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   13432:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   13436:	2201      	movs	r2, #1
   13438:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1343c:	4b11      	ldr	r3, [pc, #68]	; (13484 <nrfx_power_clock_irq_handler+0x64>)
   1343e:	681b      	ldr	r3, [r3, #0]
   13440:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   13442:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13446:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1344a:	b18a      	cbz	r2, 13470 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1344c:	2200      	movs	r2, #0
   1344e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   13452:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   13456:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1345a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1345e:	f002 0203 	and.w	r2, r2, #3
   13462:	2a01      	cmp	r2, #1
   13464:	f04f 0102 	mov.w	r1, #2
   13468:	d103      	bne.n	13472 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1346a:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1346e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   13470:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   13472:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   13476:	4b03      	ldr	r3, [pc, #12]	; (13484 <nrfx_power_clock_irq_handler+0x64>)
   13478:	2001      	movs	r0, #1
}
   1347a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1347e:	681b      	ldr	r3, [r3, #0]
   13480:	4718      	bx	r3
   13482:	bf00      	nop
   13484:	200009dc 	.word	0x200009dc

00013488 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   13488:	4b0e      	ldr	r3, [pc, #56]	; (134c4 <z_sys_init_run_level+0x3c>)
{
   1348a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1348c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   13490:	3001      	adds	r0, #1
   13492:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   13496:	42a6      	cmp	r6, r4
   13498:	d800      	bhi.n	1349c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1349a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1349c:	e9d4 3500 	ldrd	r3, r5, [r4]
   134a0:	4628      	mov	r0, r5
   134a2:	4798      	blx	r3
		if (dev != NULL) {
   134a4:	b165      	cbz	r5, 134c0 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   134a6:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   134a8:	b130      	cbz	r0, 134b8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   134aa:	2800      	cmp	r0, #0
   134ac:	bfb8      	it	lt
   134ae:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   134b0:	28ff      	cmp	r0, #255	; 0xff
   134b2:	bfa8      	it	ge
   134b4:	20ff      	movge	r0, #255	; 0xff
   134b6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   134b8:	785a      	ldrb	r2, [r3, #1]
   134ba:	f042 0201 	orr.w	r2, r2, #1
   134be:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   134c0:	3408      	adds	r4, #8
   134c2:	e7e8      	b.n	13496 <z_sys_init_run_level+0xe>
   134c4:	00018cdc 	.word	0x00018cdc

000134c8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   134c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   134ca:	4604      	mov	r4, r0
   134cc:	460e      	mov	r6, r1
	__asm__ volatile(
   134ce:	f04f 0320 	mov.w	r3, #32
   134d2:	f3ef 8711 	mrs	r7, BASEPRI
   134d6:	f383 8812 	msr	BASEPRI_MAX, r3
   134da:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   134de:	f001 fbcf 	bl	14c80 <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   134e2:	2200      	movs	r2, #0
   134e4:	2c04      	cmp	r4, #4
   134e6:	bf98      	it	ls
   134e8:	4b1d      	ldrls	r3, [pc, #116]	; (13560 <z_fatal_error+0x98>)
   134ea:	4605      	mov	r5, r0
	switch (reason) {
   134ec:	bf94      	ite	ls
   134ee:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   134f2:	4b1c      	ldrhi	r3, [pc, #112]	; (13564 <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   134f4:	9200      	str	r2, [sp, #0]
   134f6:	2145      	movs	r1, #69	; 0x45
   134f8:	4622      	mov	r2, r4
   134fa:	481b      	ldr	r0, [pc, #108]	; (13568 <z_fatal_error+0xa0>)
   134fc:	f004 fdb2 	bl	18064 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   13500:	b13e      	cbz	r6, 13512 <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   13502:	69f3      	ldr	r3, [r6, #28]
   13504:	f3c3 0308 	ubfx	r3, r3, #0, #9
   13508:	b11b      	cbz	r3, 13512 <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
   1350a:	2145      	movs	r1, #69	; 0x45
   1350c:	4817      	ldr	r0, [pc, #92]	; (1356c <z_fatal_error+0xa4>)
   1350e:	f004 fda9 	bl	18064 <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   13512:	b135      	cbz	r5, 13522 <z_fatal_error+0x5a>
   13514:	4628      	mov	r0, r5
   13516:	f005 f8d9 	bl	186cc <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1351a:	4603      	mov	r3, r0
   1351c:	b108      	cbz	r0, 13522 <z_fatal_error+0x5a>
   1351e:	7802      	ldrb	r2, [r0, #0]
   13520:	b902      	cbnz	r2, 13524 <z_fatal_error+0x5c>
		thread_name = "unknown";
   13522:	4b13      	ldr	r3, [pc, #76]	; (13570 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   13524:	462a      	mov	r2, r5
   13526:	2145      	movs	r1, #69	; 0x45
   13528:	4812      	ldr	r0, [pc, #72]	; (13574 <z_fatal_error+0xac>)
   1352a:	f004 fd9b 	bl	18064 <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1352e:	4631      	mov	r1, r6
   13530:	4620      	mov	r0, r4
   13532:	f7ff fd2d 	bl	12f90 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   13536:	2c04      	cmp	r4, #4
   13538:	d108      	bne.n	1354c <z_fatal_error+0x84>
   1353a:	490f      	ldr	r1, [pc, #60]	; (13578 <z_fatal_error+0xb0>)
   1353c:	480f      	ldr	r0, [pc, #60]	; (1357c <z_fatal_error+0xb4>)
   1353e:	228f      	movs	r2, #143	; 0x8f
   13540:	f004 fd7c 	bl	1803c <assert_print>
   13544:	218f      	movs	r1, #143	; 0x8f
   13546:	480c      	ldr	r0, [pc, #48]	; (13578 <z_fatal_error+0xb0>)
   13548:	f004 fd71 	bl	1802e <assert_post_action>
	__asm__ volatile(
   1354c:	f387 8811 	msr	BASEPRI, r7
   13550:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   13554:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   13556:	b003      	add	sp, #12
   13558:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1355c:	f7fe be52 	b.w	12204 <z_impl_k_thread_abort>
   13560:	00018cf4 	.word	0x00018cf4
   13564:	00019b33 	.word	0x00019b33
   13568:	00019b49 	.word	0x00019b49
   1356c:	00019b76 	.word	0x00019b76
   13570:	00019b41 	.word	0x00019b41
   13574:	00019b9c 	.word	0x00019b9c
   13578:	00019bb9 	.word	0x00019bb9
   1357c:	00018ef0 	.word	0x00018ef0

00013580 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   13580:	2201      	movs	r2, #1
{
   13582:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   13584:	4b09      	ldr	r3, [pc, #36]	; (135ac <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   13586:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   13588:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1358a:	f7ff ff7d 	bl	13488 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1358e:	f001 feaf 	bl	152f0 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   13592:	2003      	movs	r0, #3
   13594:	f7ff ff78 	bl	13488 <z_sys_init_run_level>

	z_init_static_threads();
   13598:	f000 f9f4 	bl	13984 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   1359c:	f004 fcb8 	bl	17f10 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   135a0:	4a03      	ldr	r2, [pc, #12]	; (135b0 <bg_thread_main+0x30>)
   135a2:	7b13      	ldrb	r3, [r2, #12]
   135a4:	f023 0301 	bic.w	r3, r3, #1
   135a8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   135aa:	bd08      	pop	{r3, pc}
   135ac:	200014f1 	.word	0x200014f1
   135b0:	200001b0 	.word	0x200001b0

000135b4 <z_bss_zero>:
{
   135b4:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   135b6:	4803      	ldr	r0, [pc, #12]	; (135c4 <z_bss_zero+0x10>)
   135b8:	4a03      	ldr	r2, [pc, #12]	; (135c8 <z_bss_zero+0x14>)
   135ba:	2100      	movs	r1, #0
   135bc:	1a12      	subs	r2, r2, r0
   135be:	f005 f85f 	bl	18680 <z_early_memset>
}
   135c2:	bd08      	pop	{r3, pc}
   135c4:	20000130 	.word	0x20000130
   135c8:	200014f4 	.word	0x200014f4

000135cc <z_init_cpu>:

#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   135cc:	2300      	movs	r3, #0
   135ce:	2201      	movs	r2, #1
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   135d0:	b570      	push	{r4, r5, r6, lr}
   135d2:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   135d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   135d8:	220f      	movs	r2, #15
   135da:	9301      	str	r3, [sp, #4]
   135dc:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   135e0:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   135e2:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   135e6:	4d0e      	ldr	r5, [pc, #56]	; (13620 <z_init_cpu+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
   135e8:	4e0e      	ldr	r6, [pc, #56]	; (13624 <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   135ea:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
   135ee:	490e      	ldr	r1, [pc, #56]	; (13628 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
   135f0:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   135f4:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   135f6:	fb02 1100 	mla	r1, r2, r0, r1
   135fa:	4b0c      	ldr	r3, [pc, #48]	; (1362c <z_init_cpu+0x60>)
   135fc:	4630      	mov	r0, r6
   135fe:	9500      	str	r5, [sp, #0]
   13600:	f000 f96c 	bl	138dc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13604:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   13606:	480a      	ldr	r0, [pc, #40]	; (13630 <z_init_cpu+0x64>)
	_kernel.cpus[id].id = id;
   13608:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1360a:	3401      	adds	r4, #1
   1360c:	f023 0304 	bic.w	r3, r3, #4
   13610:	eb00 24c4 	add.w	r4, r0, r4, lsl #11
   13614:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   13616:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   13618:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1361a:	b006      	add	sp, #24
   1361c:	bd70      	pop	{r4, r5, r6, pc}
   1361e:	bf00      	nop
   13620:	200009e4 	.word	0x200009e4
   13624:	20000130 	.word	0x20000130
   13628:	200024f8 	.word	0x200024f8
   1362c:	00013ac5 	.word	0x00013ac5
   13630:	20002638 	.word	0x20002638

00013634 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   13634:	b580      	push	{r7, lr}
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   13636:	4b33      	ldr	r3, [pc, #204]	; (13704 <z_cstart+0xd0>)
   13638:	b0a6      	sub	sp, #152	; 0x98
	uint32_t msp =
   1363a:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1363e:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   13642:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13646:	2400      	movs	r4, #0
   13648:	23e0      	movs	r3, #224	; 0xe0
   1364a:	4d2f      	ldr	r5, [pc, #188]	; (13708 <z_cstart+0xd4>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   1364c:	4e2f      	ldr	r6, [pc, #188]	; (1370c <z_cstart+0xd8>)
   1364e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   13652:	77ec      	strb	r4, [r5, #31]
   13654:	762c      	strb	r4, [r5, #24]
   13656:	766c      	strb	r4, [r5, #25]
   13658:	76ac      	strb	r4, [r5, #26]
   1365a:	f885 4020 	strb.w	r4, [r5, #32]
   1365e:	76ec      	strb	r4, [r5, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   13660:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   13662:	4f2b      	ldr	r7, [pc, #172]	; (13710 <z_cstart+0xdc>)
   13664:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   13668:	626b      	str	r3, [r5, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
   1366a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1366c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   13670:	626b      	str	r3, [r5, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
   13672:	63ac      	str	r4, [r5, #56]	; 0x38
	/* Set NMI, Hard, and Bus Faults as Non-Secure.
	 * NMI and Bus Faults targeting the Secure state will
	 * escalate to a SecureFault or SecureHardFault.
	 */
	SCB->AIRCR =
		(SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk)))
   13674:	68eb      	ldr	r3, [r5, #12]
   13676:	b29b      	uxth	r3, r3
		| SCB_AIRCR_BFHFNMINS_Msk
		| ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos) &
   13678:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   1367c:	f443 3308 	orr.w	r3, r3, #139264	; 0x22000
	SCB->AIRCR =
   13680:	60eb      	str	r3, [r5, #12]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   13682:	f7fe fd25 	bl	120d0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   13686:	f7fe f939 	bl	118fc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1368a:	f04f 33ff 	mov.w	r3, #4294967295
   1368e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   13690:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   13692:	f7ff f807 	bl	126a4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   13696:	f7fe fe47 	bl	12328 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1369a:	f240 1301 	movw	r3, #257	; 0x101
   1369e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   136a2:	ab06      	add	r3, sp, #24
   136a4:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   136a6:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
   136aa:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   136ac:	f004 ffdd 	bl	1866a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   136b0:	4620      	mov	r0, r4
   136b2:	f7ff fee9 	bl	13488 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   136b6:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   136b8:	4d16      	ldr	r5, [pc, #88]	; (13714 <z_cstart+0xe0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   136ba:	f7ff fee5 	bl	13488 <z_sys_init_run_level>
	z_sched_init();
   136be:	f001 f995 	bl	149ec <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   136c2:	4b15      	ldr	r3, [pc, #84]	; (13718 <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
   136c4:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   136c6:	9305      	str	r3, [sp, #20]
   136c8:	2301      	movs	r3, #1
   136ca:	4914      	ldr	r1, [pc, #80]	; (1371c <z_cstart+0xe8>)
   136cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   136d0:	e9cd 4303 	strd	r4, r3, [sp, #12]
   136d4:	4628      	mov	r0, r5
   136d6:	463b      	mov	r3, r7
   136d8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   136dc:	9400      	str	r4, [sp, #0]
   136de:	f000 f8fd 	bl	138dc <z_setup_new_thread>
   136e2:	4606      	mov	r6, r0
   136e4:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   136e6:	4628      	mov	r0, r5
   136e8:	f022 0204 	bic.w	r2, r2, #4
   136ec:	736a      	strb	r2, [r5, #13]
   136ee:	f000 fe7f 	bl	143f0 <z_ready_thread>
	z_init_cpu(0);
   136f2:	4620      	mov	r0, r4
   136f4:	f7ff ff6a 	bl	135cc <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   136f8:	463a      	mov	r2, r7
   136fa:	4631      	mov	r1, r6
   136fc:	4628      	mov	r0, r5
   136fe:	f7fe fa15 	bl	11b2c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   13702:	bf00      	nop
   13704:	20002638 	.word	0x20002638
   13708:	e000ed00 	.word	0xe000ed00
   1370c:	200009e4 	.word	0x200009e4
   13710:	00013581 	.word	0x00013581
   13714:	200001b0 	.word	0x200001b0
   13718:	00019c25 	.word	0x00019c25
   1371c:	200014f8 	.word	0x200014f8

00013720 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   13720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   13722:	4c14      	ldr	r4, [pc, #80]	; (13774 <init_mem_slab_module+0x54>)
   13724:	4d14      	ldr	r5, [pc, #80]	; (13778 <init_mem_slab_module+0x58>)
   13726:	4e15      	ldr	r6, [pc, #84]	; (1377c <init_mem_slab_module+0x5c>)
   13728:	42ac      	cmp	r4, r5
   1372a:	d908      	bls.n	1373e <init_mem_slab_module+0x1e>
   1372c:	4631      	mov	r1, r6
   1372e:	4814      	ldr	r0, [pc, #80]	; (13780 <init_mem_slab_module+0x60>)
   13730:	223d      	movs	r2, #61	; 0x3d
   13732:	f004 fc83 	bl	1803c <assert_print>
   13736:	213d      	movs	r1, #61	; 0x3d
   13738:	4630      	mov	r0, r6
   1373a:	f004 fc78 	bl	1802e <assert_post_action>
   1373e:	42ac      	cmp	r4, r5
   13740:	d301      	bcc.n	13746 <init_mem_slab_module+0x26>
			goto out;
		}
		z_object_init(slab);
	}

out:
   13742:	2000      	movs	r0, #0
	return rc;
}
   13744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   13746:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1374a:	ea42 0301 	orr.w	r3, r2, r1
   1374e:	f013 0303 	ands.w	r3, r3, #3
   13752:	d10b      	bne.n	1376c <init_mem_slab_module+0x4c>
	for (j = 0U; j < slab->num_blocks; j++) {
   13754:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   13756:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   13758:	4283      	cmp	r3, r0
   1375a:	d101      	bne.n	13760 <init_mem_slab_module+0x40>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1375c:	3420      	adds	r4, #32
   1375e:	e7e3      	b.n	13728 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   13760:	69a7      	ldr	r7, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   13762:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   13764:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   13766:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
   13768:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   1376a:	e7f5      	b.n	13758 <init_mem_slab_module+0x38>
	return rc;
   1376c:	f06f 0015 	mvn.w	r0, #21
   13770:	e7e8      	b.n	13744 <init_mem_slab_module+0x24>
   13772:	bf00      	nop
   13774:	200000e0 	.word	0x200000e0
   13778:	200000e0 	.word	0x200000e0
   1377c:	00019c2d 	.word	0x00019c2d
   13780:	00018ef0 	.word	0x00018ef0

00013784 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   13784:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   13788:	4604      	mov	r4, r0
   1378a:	460d      	mov	r5, r1
   1378c:	4690      	mov	r8, r2
   1378e:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   13790:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   13794:	f04f 0320 	mov.w	r3, #32
   13798:	f3ef 8911 	mrs	r9, BASEPRI
   1379c:	f383 8812 	msr	BASEPRI_MAX, r3
   137a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   137a4:	4630      	mov	r0, r6
   137a6:	f000 f969 	bl	13a7c <z_spin_lock_valid>
   137aa:	b940      	cbnz	r0, 137be <k_mem_slab_alloc+0x3a>
   137ac:	491f      	ldr	r1, [pc, #124]	; (1382c <k_mem_slab_alloc+0xa8>)
   137ae:	4820      	ldr	r0, [pc, #128]	; (13830 <k_mem_slab_alloc+0xac>)
   137b0:	228e      	movs	r2, #142	; 0x8e
   137b2:	f004 fc43 	bl	1803c <assert_print>
   137b6:	218e      	movs	r1, #142	; 0x8e
   137b8:	481c      	ldr	r0, [pc, #112]	; (1382c <k_mem_slab_alloc+0xa8>)
   137ba:	f004 fc38 	bl	1802e <assert_post_action>
	z_spin_lock_set_owner(l);
   137be:	4630      	mov	r0, r6
   137c0:	f000 f978 	bl	13ab4 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   137c4:	69a3      	ldr	r3, [r4, #24]
   137c6:	b1c3      	cbz	r3, 137fa <k_mem_slab_alloc+0x76>
		/* take a free block */
		*mem = slab->free_list;
   137c8:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   137ca:	681b      	ldr	r3, [r3, #0]
   137cc:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   137ce:	69e3      	ldr	r3, [r4, #28]
   137d0:	3301      	adds	r3, #1
   137d2:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   137d4:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   137d6:	4630      	mov	r0, r6
   137d8:	f000 f95e 	bl	13a98 <z_spin_unlock_valid>
   137dc:	b940      	cbnz	r0, 137f0 <k_mem_slab_alloc+0x6c>
   137de:	4913      	ldr	r1, [pc, #76]	; (1382c <k_mem_slab_alloc+0xa8>)
   137e0:	4813      	ldr	r0, [pc, #76]	; (13830 <k_mem_slab_alloc+0xac>)
   137e2:	22b9      	movs	r2, #185	; 0xb9
   137e4:	f004 fc2a 	bl	1803c <assert_print>
   137e8:	21b9      	movs	r1, #185	; 0xb9
   137ea:	4810      	ldr	r0, [pc, #64]	; (1382c <k_mem_slab_alloc+0xa8>)
   137ec:	f004 fc1f 	bl	1802e <assert_post_action>
	__asm__ volatile(
   137f0:	f389 8811 	msr	BASEPRI, r9
   137f4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   137f8:	e013      	b.n	13822 <k_mem_slab_alloc+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   137fa:	ea58 0207 	orrs.w	r2, r8, r7
   137fe:	d103      	bne.n	13808 <k_mem_slab_alloc+0x84>
		result = -ENOMEM;
   13800:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   13804:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   13806:	e7e6      	b.n	137d6 <k_mem_slab_alloc+0x52>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   13808:	4622      	mov	r2, r4
   1380a:	4649      	mov	r1, r9
   1380c:	4630      	mov	r0, r6
   1380e:	e9cd 8700 	strd	r8, r7, [sp]
   13812:	f000 ff51 	bl	146b8 <z_pend_curr>
		if (result == 0) {
   13816:	4604      	mov	r4, r0
   13818:	b918      	cbnz	r0, 13822 <k_mem_slab_alloc+0x9e>
			*mem = _current->base.swap_data;
   1381a:	4b06      	ldr	r3, [pc, #24]	; (13834 <k_mem_slab_alloc+0xb0>)
   1381c:	689b      	ldr	r3, [r3, #8]
   1381e:	695b      	ldr	r3, [r3, #20]
   13820:	602b      	str	r3, [r5, #0]
}
   13822:	4620      	mov	r0, r4
   13824:	b003      	add	sp, #12
   13826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1382a:	bf00      	nop
   1382c:	00018ec3 	.word	0x00018ec3
   13830:	00018ef0 	.word	0x00018ef0
   13834:	200009e4 	.word	0x200009e4

00013838 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   13838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1383c:	4604      	mov	r4, r0
   1383e:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   13840:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   13844:	f04f 0320 	mov.w	r3, #32
   13848:	f3ef 8711 	mrs	r7, BASEPRI
   1384c:	f383 8812 	msr	BASEPRI_MAX, r3
   13850:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13854:	4630      	mov	r0, r6
   13856:	f000 f911 	bl	13a7c <z_spin_lock_valid>
   1385a:	b940      	cbnz	r0, 1386e <k_mem_slab_free+0x36>
   1385c:	491d      	ldr	r1, [pc, #116]	; (138d4 <k_mem_slab_free+0x9c>)
   1385e:	481e      	ldr	r0, [pc, #120]	; (138d8 <k_mem_slab_free+0xa0>)
   13860:	228e      	movs	r2, #142	; 0x8e
   13862:	f004 fbeb 	bl	1803c <assert_print>
   13866:	218e      	movs	r1, #142	; 0x8e
   13868:	481a      	ldr	r0, [pc, #104]	; (138d4 <k_mem_slab_free+0x9c>)
   1386a:	f004 fbe0 	bl	1802e <assert_post_action>
	z_spin_lock_set_owner(l);
   1386e:	4630      	mov	r0, r6
   13870:	f000 f920 	bl	13ab4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   13874:	f8d4 8018 	ldr.w	r8, [r4, #24]
   13878:	f1b8 0f00 	cmp.w	r8, #0
   1387c:	d10f      	bne.n	1389e <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1387e:	4620      	mov	r0, r4
   13880:	f001 f876 	bl	14970 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   13884:	b158      	cbz	r0, 1389e <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   13886:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   13888:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1388c:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   1388e:	f000 fdaf 	bl	143f0 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   13892:	4639      	mov	r1, r7
   13894:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   13896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   1389a:	f000 bbb3 	b.w	14004 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1389e:	682b      	ldr	r3, [r5, #0]
   138a0:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   138a2:	4630      	mov	r0, r6
   138a4:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   138a6:	682b      	ldr	r3, [r5, #0]
   138a8:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   138aa:	69e3      	ldr	r3, [r4, #28]
   138ac:	3b01      	subs	r3, #1
   138ae:	61e3      	str	r3, [r4, #28]
   138b0:	f000 f8f2 	bl	13a98 <z_spin_unlock_valid>
   138b4:	b940      	cbnz	r0, 138c8 <k_mem_slab_free+0x90>
   138b6:	4907      	ldr	r1, [pc, #28]	; (138d4 <k_mem_slab_free+0x9c>)
   138b8:	4807      	ldr	r0, [pc, #28]	; (138d8 <k_mem_slab_free+0xa0>)
   138ba:	22b9      	movs	r2, #185	; 0xb9
   138bc:	f004 fbbe 	bl	1803c <assert_print>
   138c0:	21b9      	movs	r1, #185	; 0xb9
   138c2:	4804      	ldr	r0, [pc, #16]	; (138d4 <k_mem_slab_free+0x9c>)
   138c4:	f004 fbb3 	bl	1802e <assert_post_action>
	__asm__ volatile(
   138c8:	f387 8811 	msr	BASEPRI, r7
   138cc:	f3bf 8f6f 	isb	sy
}
   138d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   138d4:	00018ec3 	.word	0x00018ec3
   138d8:	00018ef0 	.word	0x00018ef0

000138dc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   138dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   138e0:	b085      	sub	sp, #20
   138e2:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   138e6:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   138e8:	f1b9 0f0f 	cmp.w	r9, #15
{
   138ec:	460f      	mov	r7, r1
   138ee:	4615      	mov	r5, r2
   138f0:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   138f2:	d12e      	bne.n	13952 <z_setup_new_thread+0x76>
   138f4:	4b1f      	ldr	r3, [pc, #124]	; (13974 <z_setup_new_thread+0x98>)
   138f6:	4598      	cmp	r8, r3
   138f8:	d12f      	bne.n	1395a <z_setup_new_thread+0x7e>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   138fa:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   138fe:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   13902:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->pended_on = NULL;
   13904:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
   13906:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   13908:	2304      	movs	r3, #4
   1390a:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1390c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1390e:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   13910:	9302      	str	r3, [sp, #8]
   13912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   13914:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   13918:	9301      	str	r3, [sp, #4]
   1391a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	stack_ptr = (char *)stack + stack_obj_size;
   1391c:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   1391e:	e9c4 7019 	strd	r7, r0, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   13922:	9300      	str	r3, [sp, #0]
   13924:	462a      	mov	r2, r5
   13926:	4643      	mov	r3, r8
   13928:	4639      	mov	r1, r7
   1392a:	4620      	mov	r0, r4
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1392c:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   13930:	60a6      	str	r6, [r4, #8]

	thread_base->prio = priority;
   13932:	f884 900e 	strb.w	r9, [r4, #14]

	thread_base->sched_locked = 0U;
   13936:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   13938:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1393a:	f7fe f8db 	bl	11af4 <arch_new_thread>
	if (!_current) {
   1393e:	4b0e      	ldr	r3, [pc, #56]	; (13978 <z_setup_new_thread+0x9c>)
	new_thread->init_data = NULL;
   13940:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   13942:	689b      	ldr	r3, [r3, #8]
   13944:	b103      	cbz	r3, 13948 <z_setup_new_thread+0x6c>
	new_thread->resource_pool = _current->resource_pool;
   13946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
   13948:	4628      	mov	r0, r5
   1394a:	6723      	str	r3, [r4, #112]	; 0x70
   1394c:	b005      	add	sp, #20
   1394e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   13952:	f109 0310 	add.w	r3, r9, #16
   13956:	2b1e      	cmp	r3, #30
   13958:	d9cf      	bls.n	138fa <z_setup_new_thread+0x1e>
   1395a:	f240 12ff 	movw	r2, #511	; 0x1ff
   1395e:	4907      	ldr	r1, [pc, #28]	; (1397c <z_setup_new_thread+0xa0>)
   13960:	4807      	ldr	r0, [pc, #28]	; (13980 <z_setup_new_thread+0xa4>)
   13962:	f004 fb6b 	bl	1803c <assert_print>
   13966:	f240 11ff 	movw	r1, #511	; 0x1ff
   1396a:	4804      	ldr	r0, [pc, #16]	; (1397c <z_setup_new_thread+0xa0>)
   1396c:	f004 fb5f 	bl	1802e <assert_post_action>
   13970:	e7c3      	b.n	138fa <z_setup_new_thread+0x1e>
   13972:	bf00      	nop
   13974:	00013ac5 	.word	0x00013ac5
   13978:	200009e4 	.word	0x200009e4
   1397c:	00019c52 	.word	0x00019c52
   13980:	00018ef0 	.word	0x00018ef0

00013984 <z_init_static_threads>:
{
   13984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13988:	4c37      	ldr	r4, [pc, #220]	; (13a68 <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1398a:	4d38      	ldr	r5, [pc, #224]	; (13a6c <z_init_static_threads+0xe8>)
   1398c:	4f38      	ldr	r7, [pc, #224]	; (13a70 <z_init_static_threads+0xec>)
{
   1398e:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   13990:	42ac      	cmp	r4, r5
   13992:	4626      	mov	r6, r4
   13994:	d90a      	bls.n	139ac <z_init_static_threads+0x28>
   13996:	4639      	mov	r1, r7
   13998:	4836      	ldr	r0, [pc, #216]	; (13a74 <z_init_static_threads+0xf0>)
   1399a:	f240 22d5 	movw	r2, #725	; 0x2d5
   1399e:	f004 fb4d 	bl	1803c <assert_print>
   139a2:	f240 21d5 	movw	r1, #725	; 0x2d5
   139a6:	4638      	mov	r0, r7
   139a8:	f004 fb41 	bl	1802e <assert_post_action>
   139ac:	42ae      	cmp	r6, r5
   139ae:	f104 0430 	add.w	r4, r4, #48	; 0x30
   139b2:	d31b      	bcc.n	139ec <z_init_static_threads+0x68>
	k_sched_lock();
   139b4:	f000 fb5c 	bl	14070 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   139b8:	4c2b      	ldr	r4, [pc, #172]	; (13a68 <z_init_static_threads+0xe4>)
   139ba:	4e2d      	ldr	r6, [pc, #180]	; (13a70 <z_init_static_threads+0xec>)
   139bc:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 13a74 <z_init_static_threads+0xf0>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   139c0:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 13a78 <z_init_static_threads+0xf4>
   139c4:	42ac      	cmp	r4, r5
   139c6:	d90a      	bls.n	139de <z_init_static_threads+0x5a>
   139c8:	4631      	mov	r1, r6
   139ca:	4640      	mov	r0, r8
   139cc:	f44f 723d 	mov.w	r2, #756	; 0x2f4
   139d0:	f004 fb34 	bl	1803c <assert_print>
   139d4:	f44f 713d 	mov.w	r1, #756	; 0x2f4
   139d8:	4630      	mov	r0, r6
   139da:	f004 fb28 	bl	1802e <assert_post_action>
   139de:	42ac      	cmp	r4, r5
   139e0:	d320      	bcc.n	13a24 <z_init_static_threads+0xa0>
}
   139e2:	b007      	add	sp, #28
   139e4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   139e8:	f000 bf66 	b.w	148b8 <k_sched_unlock>
		z_setup_new_thread(
   139ec:	f854 3c04 	ldr.w	r3, [r4, #-4]
   139f0:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   139f4:	9305      	str	r3, [sp, #20]
   139f6:	f854 3c10 	ldr.w	r3, [r4, #-16]
   139fa:	9304      	str	r3, [sp, #16]
   139fc:	f854 3c14 	ldr.w	r3, [r4, #-20]
   13a00:	9303      	str	r3, [sp, #12]
   13a02:	f854 3c18 	ldr.w	r3, [r4, #-24]
   13a06:	9302      	str	r3, [sp, #8]
   13a08:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   13a0c:	9301      	str	r3, [sp, #4]
   13a0e:	f854 3c20 	ldr.w	r3, [r4, #-32]
   13a12:	9300      	str	r3, [sp, #0]
   13a14:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   13a18:	f7ff ff60 	bl	138dc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   13a1c:	f854 3c30 	ldr.w	r3, [r4, #-48]
   13a20:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   13a22:	e7b5      	b.n	13990 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   13a24:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13a26:	1c5a      	adds	r2, r3, #1
   13a28:	d00f      	beq.n	13a4a <z_init_static_threads+0xc6>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   13a2a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   13a2e:	f240 30e7 	movw	r0, #999	; 0x3e7
   13a32:	2100      	movs	r1, #0
					    K_MSEC(thread_data->init_delay));
   13a34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   13a38:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   13a3c:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   13a40:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   13a42:	d104      	bne.n	13a4e <z_init_static_threads+0xca>
	z_sched_start(thread);
   13a44:	4638      	mov	r0, r7
   13a46:	f000 fd09 	bl	1445c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   13a4a:	3430      	adds	r4, #48	; 0x30
   13a4c:	e7ba      	b.n	139c4 <z_init_static_threads+0x40>
   13a4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13a52:	2300      	movs	r3, #0
   13a54:	f7fc fcf2 	bl	1043c <__aeabi_uldivmod>
   13a58:	4602      	mov	r2, r0
   13a5a:	460b      	mov	r3, r1
   13a5c:	f107 0018 	add.w	r0, r7, #24
   13a60:	4649      	mov	r1, r9
   13a62:	f001 fa0b 	bl	14e7c <z_add_timeout>
   13a66:	e7f0      	b.n	13a4a <z_init_static_threads+0xc6>
   13a68:	200000e0 	.word	0x200000e0
   13a6c:	200000e0 	.word	0x200000e0
   13a70:	00019c52 	.word	0x00019c52
   13a74:	00018ef0 	.word	0x00018ef0
   13a78:	000144e1 	.word	0x000144e1

00013a7c <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   13a7c:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   13a7e:	b138      	cbz	r0, 13a90 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   13a80:	4b04      	ldr	r3, [pc, #16]	; (13a94 <z_spin_lock_valid+0x18>)
   13a82:	f000 0003 	and.w	r0, r0, #3
   13a86:	7d1b      	ldrb	r3, [r3, #20]
   13a88:	1ac0      	subs	r0, r0, r3
   13a8a:	bf18      	it	ne
   13a8c:	2001      	movne	r0, #1
   13a8e:	4770      	bx	lr
			return false;
		}
	}
	return true;
   13a90:	2001      	movs	r0, #1
}
   13a92:	4770      	bx	lr
   13a94:	200009e4 	.word	0x200009e4

00013a98 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   13a98:	4905      	ldr	r1, [pc, #20]	; (13ab0 <z_spin_unlock_valid+0x18>)
{
   13a9a:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   13a9c:	688a      	ldr	r2, [r1, #8]
   13a9e:	7d08      	ldrb	r0, [r1, #20]
   13aa0:	6819      	ldr	r1, [r3, #0]
   13aa2:	4302      	orrs	r2, r0
   13aa4:	2000      	movs	r0, #0
   13aa6:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   13aa8:	bf04      	itt	eq
   13aaa:	6018      	streq	r0, [r3, #0]
	return true;
   13aac:	2001      	moveq	r0, #1
}
   13aae:	4770      	bx	lr
   13ab0:	200009e4 	.word	0x200009e4

00013ab4 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   13ab4:	4a02      	ldr	r2, [pc, #8]	; (13ac0 <z_spin_lock_set_owner+0xc>)
   13ab6:	7d11      	ldrb	r1, [r2, #20]
   13ab8:	6893      	ldr	r3, [r2, #8]
   13aba:	430b      	orrs	r3, r1
   13abc:	6003      	str	r3, [r0, #0]
}
   13abe:	4770      	bx	lr
   13ac0:	200009e4 	.word	0x200009e4

00013ac4 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   13ac4:	4c12      	ldr	r4, [pc, #72]	; (13b10 <idle+0x4c>)
{
   13ac6:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   13ac8:	68a3      	ldr	r3, [r4, #8]
   13aca:	f993 300e 	ldrsb.w	r3, [r3, #14]
   13ace:	2b00      	cmp	r3, #0
   13ad0:	da08      	bge.n	13ae4 <idle+0x20>
   13ad2:	4910      	ldr	r1, [pc, #64]	; (13b14 <idle+0x50>)
   13ad4:	4810      	ldr	r0, [pc, #64]	; (13b18 <idle+0x54>)
   13ad6:	2227      	movs	r2, #39	; 0x27
   13ad8:	f004 fab0 	bl	1803c <assert_print>
   13adc:	2127      	movs	r1, #39	; 0x27
   13ade:	480d      	ldr	r0, [pc, #52]	; (13b14 <idle+0x50>)
   13ae0:	f004 faa5 	bl	1802e <assert_post_action>
	return !z_sys_post_kernel;
   13ae4:	4d0d      	ldr	r5, [pc, #52]	; (13b1c <idle+0x58>)
	__asm__ volatile(
   13ae6:	f04f 0220 	mov.w	r2, #32
   13aea:	f3ef 8311 	mrs	r3, BASEPRI
   13aee:	f382 8812 	msr	BASEPRI_MAX, r2
   13af2:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   13af6:	f001 faab 	bl	15050 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   13afa:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   13afc:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   13afe:	b913      	cbnz	r3, 13b06 <idle+0x42>
	arch_cpu_idle();
   13b00:	f7fd ff02 	bl	11908 <arch_cpu_idle>
}
   13b04:	e7ef      	b.n	13ae6 <idle+0x22>
   13b06:	f7fd fae3 	bl	110d0 <pm_system_suspend>
   13b0a:	2800      	cmp	r0, #0
   13b0c:	d1eb      	bne.n	13ae6 <idle+0x22>
   13b0e:	e7f7      	b.n	13b00 <idle+0x3c>
   13b10:	200009e4 	.word	0x200009e4
   13b14:	00019c75 	.word	0x00019c75
   13b18:	00018ef0 	.word	0x00018ef0
   13b1c:	200014f1 	.word	0x200014f1

00013b20 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   13b20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13b24:	4604      	mov	r4, r0
   13b26:	4617      	mov	r7, r2
   13b28:	461e      	mov	r6, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13b2a:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   13b2e:	b143      	cbz	r3, 13b42 <z_impl_k_mutex_lock+0x22>
   13b30:	495f      	ldr	r1, [pc, #380]	; (13cb0 <z_impl_k_mutex_lock+0x190>)
   13b32:	4860      	ldr	r0, [pc, #384]	; (13cb4 <z_impl_k_mutex_lock+0x194>)
   13b34:	2265      	movs	r2, #101	; 0x65
   13b36:	f004 fa81 	bl	1803c <assert_print>
   13b3a:	2165      	movs	r1, #101	; 0x65
   13b3c:	485c      	ldr	r0, [pc, #368]	; (13cb0 <z_impl_k_mutex_lock+0x190>)
   13b3e:	f004 fa76 	bl	1802e <assert_post_action>
   13b42:	f04f 0320 	mov.w	r3, #32
   13b46:	f3ef 8811 	mrs	r8, BASEPRI
   13b4a:	f383 8812 	msr	BASEPRI_MAX, r3
   13b4e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13b52:	4859      	ldr	r0, [pc, #356]	; (13cb8 <z_impl_k_mutex_lock+0x198>)
   13b54:	f7ff ff92 	bl	13a7c <z_spin_lock_valid>
   13b58:	b940      	cbnz	r0, 13b6c <z_impl_k_mutex_lock+0x4c>
   13b5a:	4958      	ldr	r1, [pc, #352]	; (13cbc <z_impl_k_mutex_lock+0x19c>)
   13b5c:	4855      	ldr	r0, [pc, #340]	; (13cb4 <z_impl_k_mutex_lock+0x194>)
   13b5e:	228e      	movs	r2, #142	; 0x8e
   13b60:	f004 fa6c 	bl	1803c <assert_print>
   13b64:	218e      	movs	r1, #142	; 0x8e
   13b66:	4855      	ldr	r0, [pc, #340]	; (13cbc <z_impl_k_mutex_lock+0x19c>)
   13b68:	f004 fa61 	bl	1802e <assert_post_action>
	z_spin_lock_set_owner(l);
   13b6c:	4852      	ldr	r0, [pc, #328]	; (13cb8 <z_impl_k_mutex_lock+0x198>)
   13b6e:	f7ff ffa1 	bl	13ab4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   13b72:	68e3      	ldr	r3, [r4, #12]
   13b74:	4a52      	ldr	r2, [pc, #328]	; (13cc0 <z_impl_k_mutex_lock+0x1a0>)
   13b76:	b1d3      	cbz	r3, 13bae <z_impl_k_mutex_lock+0x8e>
   13b78:	68a0      	ldr	r0, [r4, #8]
   13b7a:	6891      	ldr	r1, [r2, #8]
   13b7c:	4288      	cmp	r0, r1
   13b7e:	d033      	beq.n	13be8 <z_impl_k_mutex_lock+0xc8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   13b80:	ea57 0306 	orrs.w	r3, r7, r6
   13b84:	d132      	bne.n	13bec <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13b86:	484c      	ldr	r0, [pc, #304]	; (13cb8 <z_impl_k_mutex_lock+0x198>)
   13b88:	f7ff ff86 	bl	13a98 <z_spin_unlock_valid>
   13b8c:	b940      	cbnz	r0, 13ba0 <z_impl_k_mutex_lock+0x80>
   13b8e:	494b      	ldr	r1, [pc, #300]	; (13cbc <z_impl_k_mutex_lock+0x19c>)
   13b90:	4848      	ldr	r0, [pc, #288]	; (13cb4 <z_impl_k_mutex_lock+0x194>)
   13b92:	22b9      	movs	r2, #185	; 0xb9
   13b94:	f004 fa52 	bl	1803c <assert_print>
   13b98:	21b9      	movs	r1, #185	; 0xb9
   13b9a:	4848      	ldr	r0, [pc, #288]	; (13cbc <z_impl_k_mutex_lock+0x19c>)
   13b9c:	f004 fa47 	bl	1802e <assert_post_action>
	__asm__ volatile(
   13ba0:	f388 8811 	msr	BASEPRI, r8
   13ba4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   13ba8:	f06f 000f 	mvn.w	r0, #15
   13bac:	e019      	b.n	13be2 <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   13bae:	6891      	ldr	r1, [r2, #8]
   13bb0:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   13bb4:	3301      	adds	r3, #1
   13bb6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   13bb8:	6893      	ldr	r3, [r2, #8]
   13bba:	483f      	ldr	r0, [pc, #252]	; (13cb8 <z_impl_k_mutex_lock+0x198>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   13bbc:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   13bbe:	60a3      	str	r3, [r4, #8]
   13bc0:	f7ff ff6a 	bl	13a98 <z_spin_unlock_valid>
   13bc4:	b940      	cbnz	r0, 13bd8 <z_impl_k_mutex_lock+0xb8>
   13bc6:	493d      	ldr	r1, [pc, #244]	; (13cbc <z_impl_k_mutex_lock+0x19c>)
   13bc8:	483a      	ldr	r0, [pc, #232]	; (13cb4 <z_impl_k_mutex_lock+0x194>)
   13bca:	22b9      	movs	r2, #185	; 0xb9
   13bcc:	f004 fa36 	bl	1803c <assert_print>
   13bd0:	21b9      	movs	r1, #185	; 0xb9
   13bd2:	483a      	ldr	r0, [pc, #232]	; (13cbc <z_impl_k_mutex_lock+0x19c>)
   13bd4:	f004 fa2b 	bl	1802e <assert_post_action>
   13bd8:	f388 8811 	msr	BASEPRI, r8
   13bdc:	f3bf 8f6f 	isb	sy
		return 0;
   13be0:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   13be2:	b002      	add	sp, #8
   13be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   13be8:	6921      	ldr	r1, [r4, #16]
   13bea:	e7e3      	b.n	13bb4 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   13bec:	f991 100e 	ldrsb.w	r1, [r1, #14]
   13bf0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   13bf4:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   13bf8:	4299      	cmp	r1, r3
   13bfa:	bfa8      	it	ge
   13bfc:	4619      	movge	r1, r3
   13bfe:	4291      	cmp	r1, r2
   13c00:	bfb8      	it	lt
   13c02:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   13c04:	428b      	cmp	r3, r1
   13c06:	dd3e      	ble.n	13c86 <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
   13c08:	f004 fd69 	bl	186de <adjust_owner_prio.isra.0>
   13c0c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   13c0e:	4622      	mov	r2, r4
   13c10:	4641      	mov	r1, r8
   13c12:	e9cd 7600 	strd	r7, r6, [sp]
   13c16:	4828      	ldr	r0, [pc, #160]	; (13cb8 <z_impl_k_mutex_lock+0x198>)
   13c18:	f000 fd4e 	bl	146b8 <z_pend_curr>
	if (got_mutex == 0) {
   13c1c:	2800      	cmp	r0, #0
   13c1e:	d0e0      	beq.n	13be2 <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   13c20:	f04f 0320 	mov.w	r3, #32
   13c24:	f3ef 8611 	mrs	r6, BASEPRI
   13c28:	f383 8812 	msr	BASEPRI_MAX, r3
   13c2c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13c30:	4821      	ldr	r0, [pc, #132]	; (13cb8 <z_impl_k_mutex_lock+0x198>)
   13c32:	f7ff ff23 	bl	13a7c <z_spin_lock_valid>
   13c36:	b940      	cbnz	r0, 13c4a <z_impl_k_mutex_lock+0x12a>
   13c38:	4920      	ldr	r1, [pc, #128]	; (13cbc <z_impl_k_mutex_lock+0x19c>)
   13c3a:	481e      	ldr	r0, [pc, #120]	; (13cb4 <z_impl_k_mutex_lock+0x194>)
   13c3c:	228e      	movs	r2, #142	; 0x8e
   13c3e:	f004 f9fd 	bl	1803c <assert_print>
   13c42:	218e      	movs	r1, #142	; 0x8e
   13c44:	481d      	ldr	r0, [pc, #116]	; (13cbc <z_impl_k_mutex_lock+0x19c>)
   13c46:	f004 f9f2 	bl	1802e <assert_post_action>
	z_spin_lock_set_owner(l);
   13c4a:	481b      	ldr	r0, [pc, #108]	; (13cb8 <z_impl_k_mutex_lock+0x198>)
   13c4c:	f7ff ff32 	bl	13ab4 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   13c50:	6823      	ldr	r3, [r4, #0]
   13c52:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13c54:	429c      	cmp	r4, r3
   13c56:	d00a      	beq.n	13c6e <z_impl_k_mutex_lock+0x14e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   13c58:	b14b      	cbz	r3, 13c6e <z_impl_k_mutex_lock+0x14e>
   13c5a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   13c5e:	4299      	cmp	r1, r3
   13c60:	bfa8      	it	ge
   13c62:	4619      	movge	r1, r3
   13c64:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   13c68:	4299      	cmp	r1, r3
   13c6a:	bfb8      	it	lt
   13c6c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   13c6e:	68a0      	ldr	r0, [r4, #8]
   13c70:	f004 fd35 	bl	186de <adjust_owner_prio.isra.0>
   13c74:	b900      	cbnz	r0, 13c78 <z_impl_k_mutex_lock+0x158>
	if (resched) {
   13c76:	b145      	cbz	r5, 13c8a <z_impl_k_mutex_lock+0x16a>
		z_reschedule(&lock, key);
   13c78:	4631      	mov	r1, r6
   13c7a:	480f      	ldr	r0, [pc, #60]	; (13cb8 <z_impl_k_mutex_lock+0x198>)
   13c7c:	f000 f9c2 	bl	14004 <z_reschedule>
	return -EAGAIN;
   13c80:	f06f 000a 	mvn.w	r0, #10
   13c84:	e7ad      	b.n	13be2 <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   13c86:	2500      	movs	r5, #0
   13c88:	e7c1      	b.n	13c0e <z_impl_k_mutex_lock+0xee>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13c8a:	480b      	ldr	r0, [pc, #44]	; (13cb8 <z_impl_k_mutex_lock+0x198>)
   13c8c:	f7ff ff04 	bl	13a98 <z_spin_unlock_valid>
   13c90:	b940      	cbnz	r0, 13ca4 <z_impl_k_mutex_lock+0x184>
   13c92:	490a      	ldr	r1, [pc, #40]	; (13cbc <z_impl_k_mutex_lock+0x19c>)
   13c94:	4807      	ldr	r0, [pc, #28]	; (13cb4 <z_impl_k_mutex_lock+0x194>)
   13c96:	22b9      	movs	r2, #185	; 0xb9
   13c98:	f004 f9d0 	bl	1803c <assert_print>
   13c9c:	21b9      	movs	r1, #185	; 0xb9
   13c9e:	4807      	ldr	r0, [pc, #28]	; (13cbc <z_impl_k_mutex_lock+0x19c>)
   13ca0:	f004 f9c5 	bl	1802e <assert_post_action>
	__asm__ volatile(
   13ca4:	f386 8811 	msr	BASEPRI, r6
   13ca8:	f3bf 8f6f 	isb	sy
   13cac:	e7e8      	b.n	13c80 <z_impl_k_mutex_lock+0x160>
   13cae:	bf00      	nop
   13cb0:	00019c96 	.word	0x00019c96
   13cb4:	00018ef0 	.word	0x00018ef0
   13cb8:	20000a0c 	.word	0x20000a0c
   13cbc:	00018ec3 	.word	0x00018ec3
   13cc0:	200009e4 	.word	0x200009e4

00013cc4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   13cc4:	b538      	push	{r3, r4, r5, lr}
   13cc6:	4604      	mov	r4, r0
   13cc8:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   13ccc:	b143      	cbz	r3, 13ce0 <z_impl_k_mutex_unlock+0x1c>
   13cce:	4943      	ldr	r1, [pc, #268]	; (13ddc <z_impl_k_mutex_unlock+0x118>)
   13cd0:	4843      	ldr	r0, [pc, #268]	; (13de0 <z_impl_k_mutex_unlock+0x11c>)
   13cd2:	22c7      	movs	r2, #199	; 0xc7
   13cd4:	f004 f9b2 	bl	1803c <assert_print>
   13cd8:	21c7      	movs	r1, #199	; 0xc7
   13cda:	4840      	ldr	r0, [pc, #256]	; (13ddc <z_impl_k_mutex_unlock+0x118>)
   13cdc:	f004 f9a7 	bl	1802e <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   13ce0:	68a3      	ldr	r3, [r4, #8]
   13ce2:	2b00      	cmp	r3, #0
   13ce4:	d074      	beq.n	13dd0 <z_impl_k_mutex_unlock+0x10c>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   13ce6:	4d3f      	ldr	r5, [pc, #252]	; (13de4 <z_impl_k_mutex_unlock+0x120>)
   13ce8:	68aa      	ldr	r2, [r5, #8]
   13cea:	4293      	cmp	r3, r2
   13cec:	d173      	bne.n	13dd6 <z_impl_k_mutex_unlock+0x112>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   13cee:	68e3      	ldr	r3, [r4, #12]
   13cf0:	b943      	cbnz	r3, 13d04 <z_impl_k_mutex_unlock+0x40>
   13cf2:	493a      	ldr	r1, [pc, #232]	; (13ddc <z_impl_k_mutex_unlock+0x118>)
   13cf4:	483a      	ldr	r0, [pc, #232]	; (13de0 <z_impl_k_mutex_unlock+0x11c>)
   13cf6:	22df      	movs	r2, #223	; 0xdf
   13cf8:	f004 f9a0 	bl	1803c <assert_print>
   13cfc:	21df      	movs	r1, #223	; 0xdf
   13cfe:	4837      	ldr	r0, [pc, #220]	; (13ddc <z_impl_k_mutex_unlock+0x118>)
   13d00:	f004 f995 	bl	1802e <assert_post_action>
   13d04:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   13d08:	b143      	cbz	r3, 13d1c <z_impl_k_mutex_unlock+0x58>
   13d0a:	4937      	ldr	r1, [pc, #220]	; (13de8 <z_impl_k_mutex_unlock+0x124>)
   13d0c:	4834      	ldr	r0, [pc, #208]	; (13de0 <z_impl_k_mutex_unlock+0x11c>)
   13d0e:	22fd      	movs	r2, #253	; 0xfd
   13d10:	f004 f994 	bl	1803c <assert_print>
   13d14:	21fd      	movs	r1, #253	; 0xfd
   13d16:	4834      	ldr	r0, [pc, #208]	; (13de8 <z_impl_k_mutex_unlock+0x124>)
   13d18:	f004 f989 	bl	1802e <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   13d1c:	68ab      	ldr	r3, [r5, #8]
   13d1e:	7bdb      	ldrb	r3, [r3, #15]
   13d20:	2b01      	cmp	r3, #1
   13d22:	d108      	bne.n	13d36 <z_impl_k_mutex_unlock+0x72>
   13d24:	4930      	ldr	r1, [pc, #192]	; (13de8 <z_impl_k_mutex_unlock+0x124>)
   13d26:	482e      	ldr	r0, [pc, #184]	; (13de0 <z_impl_k_mutex_unlock+0x11c>)
   13d28:	22fe      	movs	r2, #254	; 0xfe
   13d2a:	f004 f987 	bl	1803c <assert_print>
   13d2e:	21fe      	movs	r1, #254	; 0xfe
   13d30:	482d      	ldr	r0, [pc, #180]	; (13de8 <z_impl_k_mutex_unlock+0x124>)
   13d32:	f004 f97c 	bl	1802e <assert_post_action>

	--_current->base.sched_locked;
   13d36:	68aa      	ldr	r2, [r5, #8]
   13d38:	7bd3      	ldrb	r3, [r2, #15]
   13d3a:	3b01      	subs	r3, #1
   13d3c:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   13d3e:	68e3      	ldr	r3, [r4, #12]
   13d40:	2b01      	cmp	r3, #1
   13d42:	d905      	bls.n	13d50 <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count--;
   13d44:	3b01      	subs	r3, #1
   13d46:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   13d48:	f000 fdb6 	bl	148b8 <k_sched_unlock>

	return 0;
   13d4c:	2000      	movs	r0, #0
}
   13d4e:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   13d50:	f04f 0320 	mov.w	r3, #32
   13d54:	f3ef 8511 	mrs	r5, BASEPRI
   13d58:	f383 8812 	msr	BASEPRI_MAX, r3
   13d5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13d60:	4822      	ldr	r0, [pc, #136]	; (13dec <z_impl_k_mutex_unlock+0x128>)
   13d62:	f7ff fe8b 	bl	13a7c <z_spin_lock_valid>
   13d66:	b940      	cbnz	r0, 13d7a <z_impl_k_mutex_unlock+0xb6>
   13d68:	4921      	ldr	r1, [pc, #132]	; (13df0 <z_impl_k_mutex_unlock+0x12c>)
   13d6a:	481d      	ldr	r0, [pc, #116]	; (13de0 <z_impl_k_mutex_unlock+0x11c>)
   13d6c:	228e      	movs	r2, #142	; 0x8e
   13d6e:	f004 f965 	bl	1803c <assert_print>
   13d72:	218e      	movs	r1, #142	; 0x8e
   13d74:	481e      	ldr	r0, [pc, #120]	; (13df0 <z_impl_k_mutex_unlock+0x12c>)
   13d76:	f004 f95a 	bl	1802e <assert_post_action>
	z_spin_lock_set_owner(l);
   13d7a:	481c      	ldr	r0, [pc, #112]	; (13dec <z_impl_k_mutex_unlock+0x128>)
   13d7c:	f7ff fe9a 	bl	13ab4 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   13d80:	6921      	ldr	r1, [r4, #16]
   13d82:	68a0      	ldr	r0, [r4, #8]
   13d84:	f004 fcab 	bl	186de <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   13d88:	4620      	mov	r0, r4
   13d8a:	f000 fdf1 	bl	14970 <z_unpend_first_thread>
	mutex->owner = new_owner;
   13d8e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   13d90:	b158      	cbz	r0, 13daa <z_impl_k_mutex_unlock+0xe6>
		mutex->owner_orig_prio = new_owner->base.prio;
   13d92:	f990 200e 	ldrsb.w	r2, [r0, #14]
   13d96:	6122      	str	r2, [r4, #16]
   13d98:	2200      	movs	r2, #0
   13d9a:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
   13d9c:	f000 fb28 	bl	143f0 <z_ready_thread>
		z_reschedule(&lock, key);
   13da0:	4629      	mov	r1, r5
   13da2:	4812      	ldr	r0, [pc, #72]	; (13dec <z_impl_k_mutex_unlock+0x128>)
   13da4:	f000 f92e 	bl	14004 <z_reschedule>
   13da8:	e7ce      	b.n	13d48 <z_impl_k_mutex_unlock+0x84>
		mutex->lock_count = 0U;
   13daa:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13dac:	480f      	ldr	r0, [pc, #60]	; (13dec <z_impl_k_mutex_unlock+0x128>)
   13dae:	f7ff fe73 	bl	13a98 <z_spin_unlock_valid>
   13db2:	b940      	cbnz	r0, 13dc6 <z_impl_k_mutex_unlock+0x102>
   13db4:	490e      	ldr	r1, [pc, #56]	; (13df0 <z_impl_k_mutex_unlock+0x12c>)
   13db6:	480a      	ldr	r0, [pc, #40]	; (13de0 <z_impl_k_mutex_unlock+0x11c>)
   13db8:	22b9      	movs	r2, #185	; 0xb9
   13dba:	f004 f93f 	bl	1803c <assert_print>
   13dbe:	21b9      	movs	r1, #185	; 0xb9
   13dc0:	480b      	ldr	r0, [pc, #44]	; (13df0 <z_impl_k_mutex_unlock+0x12c>)
   13dc2:	f004 f934 	bl	1802e <assert_post_action>
	__asm__ volatile(
   13dc6:	f385 8811 	msr	BASEPRI, r5
   13dca:	f3bf 8f6f 	isb	sy
   13dce:	e7bb      	b.n	13d48 <z_impl_k_mutex_unlock+0x84>
		return -EINVAL;
   13dd0:	f06f 0015 	mvn.w	r0, #21
   13dd4:	e7bb      	b.n	13d4e <z_impl_k_mutex_unlock+0x8a>
		return -EPERM;
   13dd6:	f04f 30ff 	mov.w	r0, #4294967295
   13dda:	e7b8      	b.n	13d4e <z_impl_k_mutex_unlock+0x8a>
   13ddc:	00019c96 	.word	0x00019c96
   13de0:	00018ef0 	.word	0x00018ef0
   13de4:	200009e4 	.word	0x200009e4
   13de8:	00019cb8 	.word	0x00019cb8
   13dec:	20000a0c 	.word	0x20000a0c
   13df0:	00018ec3 	.word	0x00018ec3

00013df4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   13df4:	b538      	push	{r3, r4, r5, lr}
   13df6:	4604      	mov	r4, r0
	__asm__ volatile(
   13df8:	f04f 0320 	mov.w	r3, #32
   13dfc:	f3ef 8511 	mrs	r5, BASEPRI
   13e00:	f383 8812 	msr	BASEPRI_MAX, r3
   13e04:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13e08:	4812      	ldr	r0, [pc, #72]	; (13e54 <z_impl_k_sem_give+0x60>)
   13e0a:	f7ff fe37 	bl	13a7c <z_spin_lock_valid>
   13e0e:	b940      	cbnz	r0, 13e22 <z_impl_k_sem_give+0x2e>
   13e10:	4911      	ldr	r1, [pc, #68]	; (13e58 <z_impl_k_sem_give+0x64>)
   13e12:	4812      	ldr	r0, [pc, #72]	; (13e5c <z_impl_k_sem_give+0x68>)
   13e14:	228e      	movs	r2, #142	; 0x8e
   13e16:	f004 f911 	bl	1803c <assert_print>
   13e1a:	218e      	movs	r1, #142	; 0x8e
   13e1c:	480e      	ldr	r0, [pc, #56]	; (13e58 <z_impl_k_sem_give+0x64>)
   13e1e:	f004 f906 	bl	1802e <assert_post_action>
	z_spin_lock_set_owner(l);
   13e22:	480c      	ldr	r0, [pc, #48]	; (13e54 <z_impl_k_sem_give+0x60>)
   13e24:	f7ff fe46 	bl	13ab4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   13e28:	4620      	mov	r0, r4
   13e2a:	f000 fda1 	bl	14970 <z_unpend_first_thread>

	if (thread != NULL) {
   13e2e:	b148      	cbz	r0, 13e44 <z_impl_k_sem_give+0x50>
   13e30:	2200      	movs	r2, #0
   13e32:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   13e34:	f000 fadc 	bl	143f0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   13e38:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   13e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   13e3e:	4805      	ldr	r0, [pc, #20]	; (13e54 <z_impl_k_sem_give+0x60>)
   13e40:	f000 b8e0 	b.w	14004 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   13e44:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   13e48:	429a      	cmp	r2, r3
   13e4a:	bf18      	it	ne
   13e4c:	3301      	addne	r3, #1
   13e4e:	60a3      	str	r3, [r4, #8]
}
   13e50:	e7f2      	b.n	13e38 <z_impl_k_sem_give+0x44>
   13e52:	bf00      	nop
   13e54:	20000a10 	.word	0x20000a10
   13e58:	00018ec3 	.word	0x00018ec3
   13e5c:	00018ef0 	.word	0x00018ef0

00013e60 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   13e60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13e62:	4604      	mov	r4, r0
   13e64:	4616      	mov	r6, r2
   13e66:	461d      	mov	r5, r3
   13e68:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   13e6c:	b15b      	cbz	r3, 13e86 <z_impl_k_sem_take+0x26>
   13e6e:	ea52 0305 	orrs.w	r3, r2, r5
   13e72:	d008      	beq.n	13e86 <z_impl_k_sem_take+0x26>
   13e74:	492b      	ldr	r1, [pc, #172]	; (13f24 <z_impl_k_sem_take+0xc4>)
   13e76:	482c      	ldr	r0, [pc, #176]	; (13f28 <z_impl_k_sem_take+0xc8>)
   13e78:	2279      	movs	r2, #121	; 0x79
   13e7a:	f004 f8df 	bl	1803c <assert_print>
   13e7e:	2179      	movs	r1, #121	; 0x79
   13e80:	4828      	ldr	r0, [pc, #160]	; (13f24 <z_impl_k_sem_take+0xc4>)
   13e82:	f004 f8d4 	bl	1802e <assert_post_action>
   13e86:	f04f 0320 	mov.w	r3, #32
   13e8a:	f3ef 8711 	mrs	r7, BASEPRI
   13e8e:	f383 8812 	msr	BASEPRI_MAX, r3
   13e92:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13e96:	4825      	ldr	r0, [pc, #148]	; (13f2c <z_impl_k_sem_take+0xcc>)
   13e98:	f7ff fdf0 	bl	13a7c <z_spin_lock_valid>
   13e9c:	b940      	cbnz	r0, 13eb0 <z_impl_k_sem_take+0x50>
   13e9e:	4924      	ldr	r1, [pc, #144]	; (13f30 <z_impl_k_sem_take+0xd0>)
   13ea0:	4821      	ldr	r0, [pc, #132]	; (13f28 <z_impl_k_sem_take+0xc8>)
   13ea2:	228e      	movs	r2, #142	; 0x8e
   13ea4:	f004 f8ca 	bl	1803c <assert_print>
   13ea8:	218e      	movs	r1, #142	; 0x8e
   13eaa:	4821      	ldr	r0, [pc, #132]	; (13f30 <z_impl_k_sem_take+0xd0>)
   13eac:	f004 f8bf 	bl	1802e <assert_post_action>
	z_spin_lock_set_owner(l);
   13eb0:	481e      	ldr	r0, [pc, #120]	; (13f2c <z_impl_k_sem_take+0xcc>)
   13eb2:	f7ff fdff 	bl	13ab4 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   13eb6:	68a3      	ldr	r3, [r4, #8]
   13eb8:	b1ab      	cbz	r3, 13ee6 <z_impl_k_sem_take+0x86>
		sem->count--;
   13eba:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13ebc:	481b      	ldr	r0, [pc, #108]	; (13f2c <z_impl_k_sem_take+0xcc>)
   13ebe:	60a3      	str	r3, [r4, #8]
   13ec0:	f7ff fdea 	bl	13a98 <z_spin_unlock_valid>
   13ec4:	b940      	cbnz	r0, 13ed8 <z_impl_k_sem_take+0x78>
   13ec6:	491a      	ldr	r1, [pc, #104]	; (13f30 <z_impl_k_sem_take+0xd0>)
   13ec8:	4817      	ldr	r0, [pc, #92]	; (13f28 <z_impl_k_sem_take+0xc8>)
   13eca:	22b9      	movs	r2, #185	; 0xb9
   13ecc:	f004 f8b6 	bl	1803c <assert_print>
   13ed0:	21b9      	movs	r1, #185	; 0xb9
   13ed2:	4817      	ldr	r0, [pc, #92]	; (13f30 <z_impl_k_sem_take+0xd0>)
   13ed4:	f004 f8ab 	bl	1802e <assert_post_action>
	__asm__ volatile(
   13ed8:	f387 8811 	msr	BASEPRI, r7
   13edc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   13ee0:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   13ee2:	b003      	add	sp, #12
   13ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   13ee6:	ea56 0305 	orrs.w	r3, r6, r5
   13eea:	d113      	bne.n	13f14 <z_impl_k_sem_take+0xb4>
   13eec:	480f      	ldr	r0, [pc, #60]	; (13f2c <z_impl_k_sem_take+0xcc>)
   13eee:	f7ff fdd3 	bl	13a98 <z_spin_unlock_valid>
   13ef2:	b940      	cbnz	r0, 13f06 <z_impl_k_sem_take+0xa6>
   13ef4:	490e      	ldr	r1, [pc, #56]	; (13f30 <z_impl_k_sem_take+0xd0>)
   13ef6:	480c      	ldr	r0, [pc, #48]	; (13f28 <z_impl_k_sem_take+0xc8>)
   13ef8:	22b9      	movs	r2, #185	; 0xb9
   13efa:	f004 f89f 	bl	1803c <assert_print>
   13efe:	21b9      	movs	r1, #185	; 0xb9
   13f00:	480b      	ldr	r0, [pc, #44]	; (13f30 <z_impl_k_sem_take+0xd0>)
   13f02:	f004 f894 	bl	1802e <assert_post_action>
   13f06:	f387 8811 	msr	BASEPRI, r7
   13f0a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   13f0e:	f06f 000f 	mvn.w	r0, #15
   13f12:	e7e6      	b.n	13ee2 <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   13f14:	4622      	mov	r2, r4
   13f16:	4639      	mov	r1, r7
   13f18:	e9cd 6500 	strd	r6, r5, [sp]
   13f1c:	4803      	ldr	r0, [pc, #12]	; (13f2c <z_impl_k_sem_take+0xcc>)
   13f1e:	f000 fbcb 	bl	146b8 <z_pend_curr>
	return ret;
   13f22:	e7de      	b.n	13ee2 <z_impl_k_sem_take+0x82>
   13f24:	00019ce3 	.word	0x00019ce3
   13f28:	00018ef0 	.word	0x00018ef0
   13f2c:	20000a10 	.word	0x20000a10
   13f30:	00018ec3 	.word	0x00018ec3

00013f34 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   13f34:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   13f36:	4d07      	ldr	r5, [pc, #28]	; (13f54 <z_reset_time_slice+0x20>)
   13f38:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   13f3a:	b154      	cbz	r4, 13f52 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   13f3c:	f7fe ffaa 	bl	12e94 <sys_clock_elapsed>
   13f40:	4b05      	ldr	r3, [pc, #20]	; (13f58 <z_reset_time_slice+0x24>)
   13f42:	4404      	add	r4, r0
   13f44:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   13f46:	6828      	ldr	r0, [r5, #0]
   13f48:	2100      	movs	r1, #0
	}
}
   13f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   13f4e:	f001 b8b5 	b.w	150bc <z_set_timeout_expiry>
}
   13f52:	bd38      	pop	{r3, r4, r5, pc}
   13f54:	20000a20 	.word	0x20000a20
   13f58:	200009e4 	.word	0x200009e4

00013f5c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   13f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13f5e:	4604      	mov	r4, r0
   13f60:	460d      	mov	r5, r1
	__asm__ volatile(
   13f62:	f04f 0320 	mov.w	r3, #32
   13f66:	f3ef 8711 	mrs	r7, BASEPRI
   13f6a:	f383 8812 	msr	BASEPRI_MAX, r3
   13f6e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13f72:	481e      	ldr	r0, [pc, #120]	; (13fec <k_sched_time_slice_set+0x90>)
   13f74:	f7ff fd82 	bl	13a7c <z_spin_lock_valid>
   13f78:	b940      	cbnz	r0, 13f8c <k_sched_time_slice_set+0x30>
   13f7a:	491d      	ldr	r1, [pc, #116]	; (13ff0 <k_sched_time_slice_set+0x94>)
   13f7c:	481d      	ldr	r0, [pc, #116]	; (13ff4 <k_sched_time_slice_set+0x98>)
   13f7e:	228e      	movs	r2, #142	; 0x8e
   13f80:	f004 f85c 	bl	1803c <assert_print>
   13f84:	218e      	movs	r1, #142	; 0x8e
   13f86:	481a      	ldr	r0, [pc, #104]	; (13ff0 <k_sched_time_slice_set+0x94>)
   13f88:	f004 f851 	bl	1802e <assert_post_action>
	z_spin_lock_set_owner(l);
   13f8c:	4817      	ldr	r0, [pc, #92]	; (13fec <k_sched_time_slice_set+0x90>)
   13f8e:	f7ff fd91 	bl	13ab4 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   13f92:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   13f94:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   13f98:	f240 30e7 	movw	r0, #999	; 0x3e7
   13f9c:	4e16      	ldr	r6, [pc, #88]	; (13ff8 <k_sched_time_slice_set+0x9c>)
   13f9e:	2300      	movs	r3, #0
   13fa0:	6131      	str	r1, [r6, #16]
   13fa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13fa6:	fbe4 010c 	umlal	r0, r1, r4, ip
   13faa:	f7fc fa47 	bl	1043c <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   13fae:	2c00      	cmp	r4, #0
   13fb0:	4b12      	ldr	r3, [pc, #72]	; (13ffc <k_sched_time_slice_set+0xa0>)
   13fb2:	dc17      	bgt.n	13fe4 <k_sched_time_slice_set+0x88>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
   13fb4:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   13fb6:	4b12      	ldr	r3, [pc, #72]	; (14000 <k_sched_time_slice_set+0xa4>)
		z_reset_time_slice(_current);
   13fb8:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
   13fba:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   13fbc:	f7ff ffba 	bl	13f34 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13fc0:	480a      	ldr	r0, [pc, #40]	; (13fec <k_sched_time_slice_set+0x90>)
   13fc2:	f7ff fd69 	bl	13a98 <z_spin_unlock_valid>
   13fc6:	b940      	cbnz	r0, 13fda <k_sched_time_slice_set+0x7e>
   13fc8:	4909      	ldr	r1, [pc, #36]	; (13ff0 <k_sched_time_slice_set+0x94>)
   13fca:	480a      	ldr	r0, [pc, #40]	; (13ff4 <k_sched_time_slice_set+0x98>)
   13fcc:	22b9      	movs	r2, #185	; 0xb9
   13fce:	f004 f835 	bl	1803c <assert_print>
   13fd2:	21b9      	movs	r1, #185	; 0xb9
   13fd4:	4806      	ldr	r0, [pc, #24]	; (13ff0 <k_sched_time_slice_set+0x94>)
   13fd6:	f004 f82a 	bl	1802e <assert_post_action>
	__asm__ volatile(
   13fda:	f387 8811 	msr	BASEPRI, r7
   13fde:	f3bf 8f6f 	isb	sy
	}
}
   13fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
   13fe4:	2802      	cmp	r0, #2
   13fe6:	bfb8      	it	lt
   13fe8:	2002      	movlt	r0, #2
   13fea:	e7e3      	b.n	13fb4 <k_sched_time_slice_set+0x58>
   13fec:	20000a18 	.word	0x20000a18
   13ff0:	00018ec3 	.word	0x00018ec3
   13ff4:	00018ef0 	.word	0x00018ef0
   13ff8:	200009e4 	.word	0x200009e4
   13ffc:	20000a20 	.word	0x20000a20
   14000:	20000a1c 	.word	0x20000a1c

00014004 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   14004:	b510      	push	{r4, lr}
   14006:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   14008:	460c      	mov	r4, r1
   1400a:	b9c1      	cbnz	r1, 1403e <z_reschedule+0x3a>
   1400c:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key.key) && need_swap()) {
   14010:	b9aa      	cbnz	r2, 1403e <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
   14012:	4a14      	ldr	r2, [pc, #80]	; (14064 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   14014:	69d1      	ldr	r1, [r2, #28]
   14016:	6892      	ldr	r2, [r2, #8]
   14018:	4291      	cmp	r1, r2
   1401a:	d010      	beq.n	1403e <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1401c:	f7ff fd3c 	bl	13a98 <z_spin_unlock_valid>
   14020:	b940      	cbnz	r0, 14034 <z_reschedule+0x30>
   14022:	4911      	ldr	r1, [pc, #68]	; (14068 <z_reschedule+0x64>)
   14024:	4811      	ldr	r0, [pc, #68]	; (1406c <z_reschedule+0x68>)
   14026:	22d0      	movs	r2, #208	; 0xd0
   14028:	f004 f808 	bl	1803c <assert_print>
   1402c:	21d0      	movs	r1, #208	; 0xd0
   1402e:	480e      	ldr	r0, [pc, #56]	; (14068 <z_reschedule+0x64>)
   14030:	f003 fffd 	bl	1802e <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   14034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   14038:	2000      	movs	r0, #0
   1403a:	f7fd bd05 	b.w	11a48 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1403e:	4618      	mov	r0, r3
   14040:	f7ff fd2a 	bl	13a98 <z_spin_unlock_valid>
   14044:	b940      	cbnz	r0, 14058 <z_reschedule+0x54>
   14046:	4908      	ldr	r1, [pc, #32]	; (14068 <z_reschedule+0x64>)
   14048:	4808      	ldr	r0, [pc, #32]	; (1406c <z_reschedule+0x68>)
   1404a:	22b9      	movs	r2, #185	; 0xb9
   1404c:	f003 fff6 	bl	1803c <assert_print>
   14050:	21b9      	movs	r1, #185	; 0xb9
   14052:	4805      	ldr	r0, [pc, #20]	; (14068 <z_reschedule+0x64>)
   14054:	f003 ffeb 	bl	1802e <assert_post_action>
   14058:	f384 8811 	msr	BASEPRI, r4
   1405c:	f3bf 8f6f 	isb	sy
   14060:	bd10      	pop	{r4, pc}
   14062:	bf00      	nop
   14064:	200009e4 	.word	0x200009e4
   14068:	00018ec3 	.word	0x00018ec3
   1406c:	00018ef0 	.word	0x00018ef0

00014070 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   14070:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   14072:	f04f 0320 	mov.w	r3, #32
   14076:	f3ef 8511 	mrs	r5, BASEPRI
   1407a:	f383 8812 	msr	BASEPRI_MAX, r3
   1407e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14082:	4820      	ldr	r0, [pc, #128]	; (14104 <k_sched_lock+0x94>)
   14084:	f7ff fcfa 	bl	13a7c <z_spin_lock_valid>
   14088:	b940      	cbnz	r0, 1409c <k_sched_lock+0x2c>
   1408a:	491f      	ldr	r1, [pc, #124]	; (14108 <k_sched_lock+0x98>)
   1408c:	481f      	ldr	r0, [pc, #124]	; (1410c <k_sched_lock+0x9c>)
   1408e:	228e      	movs	r2, #142	; 0x8e
   14090:	f003 ffd4 	bl	1803c <assert_print>
   14094:	218e      	movs	r1, #142	; 0x8e
   14096:	481c      	ldr	r0, [pc, #112]	; (14108 <k_sched_lock+0x98>)
   14098:	f003 ffc9 	bl	1802e <assert_post_action>
	z_spin_lock_set_owner(l);
   1409c:	4819      	ldr	r0, [pc, #100]	; (14104 <k_sched_lock+0x94>)
   1409e:	f7ff fd09 	bl	13ab4 <z_spin_lock_set_owner>
   140a2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   140a6:	b143      	cbz	r3, 140ba <k_sched_lock+0x4a>
   140a8:	4919      	ldr	r1, [pc, #100]	; (14110 <k_sched_lock+0xa0>)
   140aa:	4818      	ldr	r0, [pc, #96]	; (1410c <k_sched_lock+0x9c>)
   140ac:	22fd      	movs	r2, #253	; 0xfd
   140ae:	f003 ffc5 	bl	1803c <assert_print>
   140b2:	21fd      	movs	r1, #253	; 0xfd
   140b4:	4816      	ldr	r0, [pc, #88]	; (14110 <k_sched_lock+0xa0>)
   140b6:	f003 ffba 	bl	1802e <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   140ba:	4c16      	ldr	r4, [pc, #88]	; (14114 <k_sched_lock+0xa4>)
   140bc:	68a3      	ldr	r3, [r4, #8]
   140be:	7bdb      	ldrb	r3, [r3, #15]
   140c0:	2b01      	cmp	r3, #1
   140c2:	d108      	bne.n	140d6 <k_sched_lock+0x66>
   140c4:	4912      	ldr	r1, [pc, #72]	; (14110 <k_sched_lock+0xa0>)
   140c6:	4811      	ldr	r0, [pc, #68]	; (1410c <k_sched_lock+0x9c>)
   140c8:	22fe      	movs	r2, #254	; 0xfe
   140ca:	f003 ffb7 	bl	1803c <assert_print>
   140ce:	21fe      	movs	r1, #254	; 0xfe
   140d0:	480f      	ldr	r0, [pc, #60]	; (14110 <k_sched_lock+0xa0>)
   140d2:	f003 ffac 	bl	1802e <assert_post_action>
	--_current->base.sched_locked;
   140d6:	68a2      	ldr	r2, [r4, #8]
   140d8:	7bd3      	ldrb	r3, [r2, #15]
   140da:	3b01      	subs	r3, #1
   140dc:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   140de:	4809      	ldr	r0, [pc, #36]	; (14104 <k_sched_lock+0x94>)
   140e0:	f7ff fcda 	bl	13a98 <z_spin_unlock_valid>
   140e4:	b940      	cbnz	r0, 140f8 <k_sched_lock+0x88>
   140e6:	4908      	ldr	r1, [pc, #32]	; (14108 <k_sched_lock+0x98>)
   140e8:	4808      	ldr	r0, [pc, #32]	; (1410c <k_sched_lock+0x9c>)
   140ea:	22b9      	movs	r2, #185	; 0xb9
   140ec:	f003 ffa6 	bl	1803c <assert_print>
   140f0:	21b9      	movs	r1, #185	; 0xb9
   140f2:	4805      	ldr	r0, [pc, #20]	; (14108 <k_sched_lock+0x98>)
   140f4:	f003 ff9b 	bl	1802e <assert_post_action>
	__asm__ volatile(
   140f8:	f385 8811 	msr	BASEPRI, r5
   140fc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   14100:	bd38      	pop	{r3, r4, r5, pc}
   14102:	bf00      	nop
   14104:	20000a18 	.word	0x20000a18
   14108:	00018ec3 	.word	0x00018ec3
   1410c:	00018ef0 	.word	0x00018ef0
   14110:	00019cb8 	.word	0x00019cb8
   14114:	200009e4 	.word	0x200009e4

00014118 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   14118:	4b0b      	ldr	r3, [pc, #44]	; (14148 <z_priq_dumb_remove+0x30>)
{
   1411a:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1411c:	4299      	cmp	r1, r3
{
   1411e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   14120:	d10a      	bne.n	14138 <z_priq_dumb_remove+0x20>
   14122:	490a      	ldr	r1, [pc, #40]	; (1414c <z_priq_dumb_remove+0x34>)
   14124:	480a      	ldr	r0, [pc, #40]	; (14150 <z_priq_dumb_remove+0x38>)
   14126:	f240 423d 	movw	r2, #1085	; 0x43d
   1412a:	f003 ff87 	bl	1803c <assert_print>
   1412e:	f240 413d 	movw	r1, #1085	; 0x43d
   14132:	4806      	ldr	r0, [pc, #24]	; (1414c <z_priq_dumb_remove+0x34>)
   14134:	f003 ff7b 	bl	1802e <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   14138:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   1413c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1413e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   14140:	2300      	movs	r3, #0
	node->prev = NULL;
   14142:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   14146:	bd10      	pop	{r4, pc}
   14148:	20000130 	.word	0x20000130
   1414c:	00019d03 	.word	0x00019d03
   14150:	00018ef0 	.word	0x00018ef0

00014154 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   14154:	6883      	ldr	r3, [r0, #8]
{
   14156:	b510      	push	{r4, lr}
   14158:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   1415a:	b953      	cbnz	r3, 14172 <unpend_thread_no_timeout+0x1e>
   1415c:	490a      	ldr	r1, [pc, #40]	; (14188 <unpend_thread_no_timeout+0x34>)
   1415e:	480b      	ldr	r0, [pc, #44]	; (1418c <unpend_thread_no_timeout+0x38>)
   14160:	f240 22b9 	movw	r2, #697	; 0x2b9
   14164:	f003 ff6a 	bl	1803c <assert_print>
   14168:	f240 21b9 	movw	r1, #697	; 0x2b9
   1416c:	4806      	ldr	r0, [pc, #24]	; (14188 <unpend_thread_no_timeout+0x34>)
   1416e:	f003 ff5e 	bl	1802e <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   14172:	4621      	mov	r1, r4
   14174:	68a0      	ldr	r0, [r4, #8]
   14176:	f7ff ffcf 	bl	14118 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1417a:	7b63      	ldrb	r3, [r4, #13]
   1417c:	f023 0302 	bic.w	r3, r3, #2
   14180:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   14182:	2300      	movs	r3, #0
   14184:	60a3      	str	r3, [r4, #8]
}
   14186:	bd10      	pop	{r4, pc}
   14188:	00019d03 	.word	0x00019d03
   1418c:	00018ef0 	.word	0x00018ef0

00014190 <update_cache>:
{
   14190:	b538      	push	{r3, r4, r5, lr}
   14192:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   14194:	4812      	ldr	r0, [pc, #72]	; (141e0 <update_cache+0x50>)
   14196:	f004 fac7 	bl	18728 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1419a:	4d12      	ldr	r5, [pc, #72]	; (141e4 <update_cache+0x54>)
   1419c:	4604      	mov	r4, r0
   1419e:	b900      	cbnz	r0, 141a2 <update_cache+0x12>
   141a0:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   141a2:	b9aa      	cbnz	r2, 141d0 <update_cache+0x40>
	__ASSERT(_current != NULL, "");
   141a4:	68ab      	ldr	r3, [r5, #8]
   141a6:	b943      	cbnz	r3, 141ba <update_cache+0x2a>
   141a8:	490f      	ldr	r1, [pc, #60]	; (141e8 <update_cache+0x58>)
   141aa:	4810      	ldr	r0, [pc, #64]	; (141ec <update_cache+0x5c>)
   141ac:	2289      	movs	r2, #137	; 0x89
   141ae:	f003 ff45 	bl	1803c <assert_print>
   141b2:	2189      	movs	r1, #137	; 0x89
   141b4:	480c      	ldr	r0, [pc, #48]	; (141e8 <update_cache+0x58>)
   141b6:	f003 ff3a 	bl	1802e <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   141ba:	68ab      	ldr	r3, [r5, #8]
   141bc:	7b5a      	ldrb	r2, [r3, #13]
   141be:	06d2      	lsls	r2, r2, #27
   141c0:	d106      	bne.n	141d0 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   141c2:	69a2      	ldr	r2, [r4, #24]
   141c4:	b922      	cbnz	r2, 141d0 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   141c6:	89da      	ldrh	r2, [r3, #14]
   141c8:	2a7f      	cmp	r2, #127	; 0x7f
   141ca:	d901      	bls.n	141d0 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   141cc:	61eb      	str	r3, [r5, #28]
}
   141ce:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   141d0:	68ab      	ldr	r3, [r5, #8]
   141d2:	42a3      	cmp	r3, r4
   141d4:	d002      	beq.n	141dc <update_cache+0x4c>
			z_reset_time_slice(thread);
   141d6:	4620      	mov	r0, r4
   141d8:	f7ff feac 	bl	13f34 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   141dc:	61ec      	str	r4, [r5, #28]
}
   141de:	e7f6      	b.n	141ce <update_cache+0x3e>
   141e0:	20000a04 	.word	0x20000a04
   141e4:	200009e4 	.word	0x200009e4
   141e8:	00019d03 	.word	0x00019d03
   141ec:	00018ef0 	.word	0x00018ef0

000141f0 <move_thread_to_end_of_prio_q>:
{
   141f0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   141f2:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   141f6:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   141f8:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   141fa:	7b43      	ldrb	r3, [r0, #13]
   141fc:	da06      	bge.n	1420c <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   141fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   14202:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14204:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   14206:	481d      	ldr	r0, [pc, #116]	; (1427c <move_thread_to_end_of_prio_q+0x8c>)
   14208:	f7ff ff86 	bl	14118 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1420c:	7b63      	ldrb	r3, [r4, #13]
   1420e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14212:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   14214:	4b1a      	ldr	r3, [pc, #104]	; (14280 <move_thread_to_end_of_prio_q+0x90>)
   14216:	429c      	cmp	r4, r3
   14218:	d108      	bne.n	1422c <move_thread_to_end_of_prio_q+0x3c>
   1421a:	491a      	ldr	r1, [pc, #104]	; (14284 <move_thread_to_end_of_prio_q+0x94>)
   1421c:	481a      	ldr	r0, [pc, #104]	; (14288 <move_thread_to_end_of_prio_q+0x98>)
   1421e:	22ba      	movs	r2, #186	; 0xba
   14220:	f003 ff0c 	bl	1803c <assert_print>
   14224:	21ba      	movs	r1, #186	; 0xba
   14226:	4817      	ldr	r0, [pc, #92]	; (14284 <move_thread_to_end_of_prio_q+0x94>)
   14228:	f003 ff01 	bl	1802e <assert_post_action>
	return list->head == list;
   1422c:	4a17      	ldr	r2, [pc, #92]	; (1428c <move_thread_to_end_of_prio_q+0x9c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1422e:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
   14232:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14236:	42ab      	cmp	r3, r5
   14238:	d01b      	beq.n	14272 <move_thread_to_end_of_prio_q+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1423a:	b1d3      	cbz	r3, 14272 <move_thread_to_end_of_prio_q+0x82>
	int32_t b1 = thread_1->base.prio;
   1423c:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   14240:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   14244:	428e      	cmp	r6, r1
   14246:	d00f      	beq.n	14268 <move_thread_to_end_of_prio_q+0x78>
		return b2 - b1;
   14248:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1424a:	2900      	cmp	r1, #0
   1424c:	dd0c      	ble.n	14268 <move_thread_to_end_of_prio_q+0x78>
	sys_dnode_t *const prev = successor->prev;
   1424e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   14250:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   14254:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   14256:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   14258:	6890      	ldr	r0, [r2, #8]
   1425a:	1b03      	subs	r3, r0, r4
   1425c:	4258      	negs	r0, r3
   1425e:	4158      	adcs	r0, r3
}
   14260:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   14264:	f7ff bf94 	b.w	14190 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   14268:	4283      	cmp	r3, r0
   1426a:	d002      	beq.n	14272 <move_thread_to_end_of_prio_q+0x82>
   1426c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1426e:	2b00      	cmp	r3, #0
   14270:	d1e6      	bne.n	14240 <move_thread_to_end_of_prio_q+0x50>
	node->prev = tail;
   14272:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   14276:	6004      	str	r4, [r0, #0]
	list->tail = node;
   14278:	6254      	str	r4, [r2, #36]	; 0x24
}
   1427a:	e7ed      	b.n	14258 <move_thread_to_end_of_prio_q+0x68>
   1427c:	20000a04 	.word	0x20000a04
   14280:	20000130 	.word	0x20000130
   14284:	00019d03 	.word	0x00019d03
   14288:	00018ef0 	.word	0x00018ef0
   1428c:	200009e4 	.word	0x200009e4

00014290 <z_time_slice>:
{
   14290:	b570      	push	{r4, r5, r6, lr}
   14292:	4605      	mov	r5, r0
	__asm__ volatile(
   14294:	f04f 0320 	mov.w	r3, #32
   14298:	f3ef 8611 	mrs	r6, BASEPRI
   1429c:	f383 8812 	msr	BASEPRI_MAX, r3
   142a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   142a4:	4825      	ldr	r0, [pc, #148]	; (1433c <z_time_slice+0xac>)
   142a6:	f7ff fbe9 	bl	13a7c <z_spin_lock_valid>
   142aa:	b940      	cbnz	r0, 142be <z_time_slice+0x2e>
   142ac:	4924      	ldr	r1, [pc, #144]	; (14340 <z_time_slice+0xb0>)
   142ae:	4825      	ldr	r0, [pc, #148]	; (14344 <z_time_slice+0xb4>)
   142b0:	228e      	movs	r2, #142	; 0x8e
   142b2:	f003 fec3 	bl	1803c <assert_print>
   142b6:	218e      	movs	r1, #142	; 0x8e
   142b8:	4821      	ldr	r0, [pc, #132]	; (14340 <z_time_slice+0xb0>)
   142ba:	f003 feb8 	bl	1802e <assert_post_action>
	z_spin_lock_set_owner(l);
   142be:	481f      	ldr	r0, [pc, #124]	; (1433c <z_time_slice+0xac>)
   142c0:	f7ff fbf8 	bl	13ab4 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   142c4:	4b20      	ldr	r3, [pc, #128]	; (14348 <z_time_slice+0xb8>)
   142c6:	4a21      	ldr	r2, [pc, #132]	; (1434c <z_time_slice+0xbc>)
   142c8:	689c      	ldr	r4, [r3, #8]
   142ca:	6811      	ldr	r1, [r2, #0]
   142cc:	428c      	cmp	r4, r1
   142ce:	d114      	bne.n	142fa <z_time_slice+0x6a>
	z_reset_time_slice(curr);
   142d0:	4620      	mov	r0, r4
   142d2:	f7ff fe2f 	bl	13f34 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   142d6:	4819      	ldr	r0, [pc, #100]	; (1433c <z_time_slice+0xac>)
   142d8:	f7ff fbde 	bl	13a98 <z_spin_unlock_valid>
   142dc:	b940      	cbnz	r0, 142f0 <z_time_slice+0x60>
   142de:	4918      	ldr	r1, [pc, #96]	; (14340 <z_time_slice+0xb0>)
   142e0:	4818      	ldr	r0, [pc, #96]	; (14344 <z_time_slice+0xb4>)
   142e2:	22b9      	movs	r2, #185	; 0xb9
   142e4:	f003 feaa 	bl	1803c <assert_print>
   142e8:	21b9      	movs	r1, #185	; 0xb9
   142ea:	4815      	ldr	r0, [pc, #84]	; (14340 <z_time_slice+0xb0>)
   142ec:	f003 fe9f 	bl	1802e <assert_post_action>
	__asm__ volatile(
   142f0:	f386 8811 	msr	BASEPRI, r6
   142f4:	f3bf 8f6f 	isb	sy
}
   142f8:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   142fa:	2100      	movs	r1, #0
   142fc:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   142fe:	4a14      	ldr	r2, [pc, #80]	; (14350 <z_time_slice+0xc0>)
	if (slice_time(_current) && sliceable(_current)) {
   14300:	6812      	ldr	r2, [r2, #0]
   14302:	b1c2      	cbz	r2, 14336 <z_time_slice+0xa6>
		&& !z_is_idle_thread_object(thread);
   14304:	89e2      	ldrh	r2, [r4, #14]
   14306:	2a7f      	cmp	r2, #127	; 0x7f
   14308:	d815      	bhi.n	14336 <z_time_slice+0xa6>
		&& !z_is_thread_prevented_from_running(thread)
   1430a:	7b62      	ldrb	r2, [r4, #13]
   1430c:	06d2      	lsls	r2, r2, #27
   1430e:	d112      	bne.n	14336 <z_time_slice+0xa6>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   14310:	4a10      	ldr	r2, [pc, #64]	; (14354 <z_time_slice+0xc4>)
   14312:	f994 100e 	ldrsb.w	r1, [r4, #14]
   14316:	6812      	ldr	r2, [r2, #0]
   14318:	4291      	cmp	r1, r2
   1431a:	db0c      	blt.n	14336 <z_time_slice+0xa6>
	if (slice_time(_current) && sliceable(_current)) {
   1431c:	4a0e      	ldr	r2, [pc, #56]	; (14358 <z_time_slice+0xc8>)
   1431e:	4294      	cmp	r4, r2
   14320:	d009      	beq.n	14336 <z_time_slice+0xa6>
		if (ticks >= _current_cpu->slice_ticks) {
   14322:	691a      	ldr	r2, [r3, #16]
   14324:	42aa      	cmp	r2, r5
   14326:	dc03      	bgt.n	14330 <z_time_slice+0xa0>
		move_thread_to_end_of_prio_q(curr);
   14328:	4620      	mov	r0, r4
   1432a:	f7ff ff61 	bl	141f0 <move_thread_to_end_of_prio_q>
   1432e:	e7cf      	b.n	142d0 <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   14330:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   14332:	611a      	str	r2, [r3, #16]
   14334:	e7cf      	b.n	142d6 <z_time_slice+0x46>
   14336:	2200      	movs	r2, #0
   14338:	e7fb      	b.n	14332 <z_time_slice+0xa2>
   1433a:	bf00      	nop
   1433c:	20000a18 	.word	0x20000a18
   14340:	00018ec3 	.word	0x00018ec3
   14344:	00018ef0 	.word	0x00018ef0
   14348:	200009e4 	.word	0x200009e4
   1434c:	20000a14 	.word	0x20000a14
   14350:	20000a20 	.word	0x20000a20
   14354:	20000a1c 	.word	0x20000a1c
   14358:	20000130 	.word	0x20000130

0001435c <ready_thread>:
{
   1435c:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1435e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   14362:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   14364:	2a00      	cmp	r2, #0
   14366:	7b43      	ldrb	r3, [r0, #13]
   14368:	db38      	blt.n	143dc <ready_thread+0x80>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1436a:	06da      	lsls	r2, r3, #27
   1436c:	d136      	bne.n	143dc <ready_thread+0x80>
   1436e:	6982      	ldr	r2, [r0, #24]
   14370:	2a00      	cmp	r2, #0
   14372:	d133      	bne.n	143dc <ready_thread+0x80>
	thread->base.thread_state |= _THREAD_QUEUED;
   14374:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14378:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1437a:	4b19      	ldr	r3, [pc, #100]	; (143e0 <ready_thread+0x84>)
   1437c:	4298      	cmp	r0, r3
   1437e:	d108      	bne.n	14392 <ready_thread+0x36>
   14380:	4918      	ldr	r1, [pc, #96]	; (143e4 <ready_thread+0x88>)
   14382:	4819      	ldr	r0, [pc, #100]	; (143e8 <ready_thread+0x8c>)
   14384:	22ba      	movs	r2, #186	; 0xba
   14386:	f003 fe59 	bl	1803c <assert_print>
   1438a:	21ba      	movs	r1, #186	; 0xba
   1438c:	4815      	ldr	r0, [pc, #84]	; (143e4 <ready_thread+0x88>)
   1438e:	f003 fe4e 	bl	1802e <assert_post_action>
	return list->head == list;
   14392:	4a16      	ldr	r2, [pc, #88]	; (143ec <ready_thread+0x90>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14394:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
   14398:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1439c:	42ab      	cmp	r3, r5
   1439e:	d018      	beq.n	143d2 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   143a0:	b1bb      	cbz	r3, 143d2 <ready_thread+0x76>
	int32_t b1 = thread_1->base.prio;
   143a2:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   143a6:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   143aa:	428e      	cmp	r6, r1
   143ac:	d00c      	beq.n	143c8 <ready_thread+0x6c>
		return b2 - b1;
   143ae:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   143b0:	2900      	cmp	r1, #0
   143b2:	dd09      	ble.n	143c8 <ready_thread+0x6c>
	sys_dnode_t *const prev = successor->prev;
   143b4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   143b6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   143ba:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   143bc:	605c      	str	r4, [r3, #4]
		update_cache(0);
   143be:	2000      	movs	r0, #0
}
   143c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   143c4:	f7ff bee4 	b.w	14190 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   143c8:	4298      	cmp	r0, r3
   143ca:	d002      	beq.n	143d2 <ready_thread+0x76>
   143cc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   143ce:	2b00      	cmp	r3, #0
   143d0:	d1e9      	bne.n	143a6 <ready_thread+0x4a>
	node->prev = tail;
   143d2:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   143d6:	6004      	str	r4, [r0, #0]
	list->tail = node;
   143d8:	6254      	str	r4, [r2, #36]	; 0x24
}
   143da:	e7f0      	b.n	143be <ready_thread+0x62>
}
   143dc:	bd70      	pop	{r4, r5, r6, pc}
   143de:	bf00      	nop
   143e0:	20000130 	.word	0x20000130
   143e4:	00019d03 	.word	0x00019d03
   143e8:	00018ef0 	.word	0x00018ef0
   143ec:	200009e4 	.word	0x200009e4

000143f0 <z_ready_thread>:
{
   143f0:	b538      	push	{r3, r4, r5, lr}
   143f2:	4604      	mov	r4, r0
	__asm__ volatile(
   143f4:	f04f 0320 	mov.w	r3, #32
   143f8:	f3ef 8511 	mrs	r5, BASEPRI
   143fc:	f383 8812 	msr	BASEPRI_MAX, r3
   14400:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14404:	4812      	ldr	r0, [pc, #72]	; (14450 <z_ready_thread+0x60>)
   14406:	f7ff fb39 	bl	13a7c <z_spin_lock_valid>
   1440a:	b940      	cbnz	r0, 1441e <z_ready_thread+0x2e>
   1440c:	4911      	ldr	r1, [pc, #68]	; (14454 <z_ready_thread+0x64>)
   1440e:	4812      	ldr	r0, [pc, #72]	; (14458 <z_ready_thread+0x68>)
   14410:	228e      	movs	r2, #142	; 0x8e
   14412:	f003 fe13 	bl	1803c <assert_print>
   14416:	218e      	movs	r1, #142	; 0x8e
   14418:	480e      	ldr	r0, [pc, #56]	; (14454 <z_ready_thread+0x64>)
   1441a:	f003 fe08 	bl	1802e <assert_post_action>
	z_spin_lock_set_owner(l);
   1441e:	480c      	ldr	r0, [pc, #48]	; (14450 <z_ready_thread+0x60>)
   14420:	f7ff fb48 	bl	13ab4 <z_spin_lock_set_owner>
			ready_thread(thread);
   14424:	4620      	mov	r0, r4
   14426:	f7ff ff99 	bl	1435c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1442a:	4809      	ldr	r0, [pc, #36]	; (14450 <z_ready_thread+0x60>)
   1442c:	f7ff fb34 	bl	13a98 <z_spin_unlock_valid>
   14430:	b940      	cbnz	r0, 14444 <z_ready_thread+0x54>
   14432:	4908      	ldr	r1, [pc, #32]	; (14454 <z_ready_thread+0x64>)
   14434:	4808      	ldr	r0, [pc, #32]	; (14458 <z_ready_thread+0x68>)
   14436:	22b9      	movs	r2, #185	; 0xb9
   14438:	f003 fe00 	bl	1803c <assert_print>
   1443c:	21b9      	movs	r1, #185	; 0xb9
   1443e:	4805      	ldr	r0, [pc, #20]	; (14454 <z_ready_thread+0x64>)
   14440:	f003 fdf5 	bl	1802e <assert_post_action>
	__asm__ volatile(
   14444:	f385 8811 	msr	BASEPRI, r5
   14448:	f3bf 8f6f 	isb	sy
}
   1444c:	bd38      	pop	{r3, r4, r5, pc}
   1444e:	bf00      	nop
   14450:	20000a18 	.word	0x20000a18
   14454:	00018ec3 	.word	0x00018ec3
   14458:	00018ef0 	.word	0x00018ef0

0001445c <z_sched_start>:
{
   1445c:	b538      	push	{r3, r4, r5, lr}
   1445e:	4604      	mov	r4, r0
	__asm__ volatile(
   14460:	f04f 0320 	mov.w	r3, #32
   14464:	f3ef 8511 	mrs	r5, BASEPRI
   14468:	f383 8812 	msr	BASEPRI_MAX, r3
   1446c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14470:	4818      	ldr	r0, [pc, #96]	; (144d4 <z_sched_start+0x78>)
   14472:	f7ff fb03 	bl	13a7c <z_spin_lock_valid>
   14476:	b940      	cbnz	r0, 1448a <z_sched_start+0x2e>
   14478:	4917      	ldr	r1, [pc, #92]	; (144d8 <z_sched_start+0x7c>)
   1447a:	4818      	ldr	r0, [pc, #96]	; (144dc <z_sched_start+0x80>)
   1447c:	228e      	movs	r2, #142	; 0x8e
   1447e:	f003 fddd 	bl	1803c <assert_print>
   14482:	218e      	movs	r1, #142	; 0x8e
   14484:	4814      	ldr	r0, [pc, #80]	; (144d8 <z_sched_start+0x7c>)
   14486:	f003 fdd2 	bl	1802e <assert_post_action>
	z_spin_lock_set_owner(l);
   1448a:	4812      	ldr	r0, [pc, #72]	; (144d4 <z_sched_start+0x78>)
   1448c:	f7ff fb12 	bl	13ab4 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   14490:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   14492:	075a      	lsls	r2, r3, #29
   14494:	d411      	bmi.n	144ba <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14496:	480f      	ldr	r0, [pc, #60]	; (144d4 <z_sched_start+0x78>)
   14498:	f7ff fafe 	bl	13a98 <z_spin_unlock_valid>
   1449c:	b940      	cbnz	r0, 144b0 <z_sched_start+0x54>
   1449e:	490e      	ldr	r1, [pc, #56]	; (144d8 <z_sched_start+0x7c>)
   144a0:	480e      	ldr	r0, [pc, #56]	; (144dc <z_sched_start+0x80>)
   144a2:	22b9      	movs	r2, #185	; 0xb9
   144a4:	f003 fdca 	bl	1803c <assert_print>
   144a8:	21b9      	movs	r1, #185	; 0xb9
   144aa:	480b      	ldr	r0, [pc, #44]	; (144d8 <z_sched_start+0x7c>)
   144ac:	f003 fdbf 	bl	1802e <assert_post_action>
	__asm__ volatile(
   144b0:	f385 8811 	msr	BASEPRI, r5
   144b4:	f3bf 8f6f 	isb	sy
}
   144b8:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   144ba:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   144be:	4620      	mov	r0, r4
   144c0:	7363      	strb	r3, [r4, #13]
   144c2:	f7ff ff4b 	bl	1435c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   144c6:	4629      	mov	r1, r5
}
   144c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   144cc:	4801      	ldr	r0, [pc, #4]	; (144d4 <z_sched_start+0x78>)
   144ce:	f7ff bd99 	b.w	14004 <z_reschedule>
   144d2:	bf00      	nop
   144d4:	20000a18 	.word	0x20000a18
   144d8:	00018ec3 	.word	0x00018ec3
   144dc:	00018ef0 	.word	0x00018ef0

000144e0 <z_thread_timeout>:
{
   144e0:	b570      	push	{r4, r5, r6, lr}
   144e2:	4604      	mov	r4, r0
	__asm__ volatile(
   144e4:	f04f 0320 	mov.w	r3, #32
   144e8:	f3ef 8611 	mrs	r6, BASEPRI
   144ec:	f383 8812 	msr	BASEPRI_MAX, r3
   144f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   144f4:	481b      	ldr	r0, [pc, #108]	; (14564 <z_thread_timeout+0x84>)
   144f6:	f7ff fac1 	bl	13a7c <z_spin_lock_valid>
   144fa:	b940      	cbnz	r0, 1450e <z_thread_timeout+0x2e>
   144fc:	491a      	ldr	r1, [pc, #104]	; (14568 <z_thread_timeout+0x88>)
   144fe:	481b      	ldr	r0, [pc, #108]	; (1456c <z_thread_timeout+0x8c>)
   14500:	228e      	movs	r2, #142	; 0x8e
   14502:	f003 fd9b 	bl	1803c <assert_print>
   14506:	218e      	movs	r1, #142	; 0x8e
   14508:	4817      	ldr	r0, [pc, #92]	; (14568 <z_thread_timeout+0x88>)
   1450a:	f003 fd90 	bl	1802e <assert_post_action>
	z_spin_lock_set_owner(l);
   1450e:	4815      	ldr	r0, [pc, #84]	; (14564 <z_thread_timeout+0x84>)
   14510:	f7ff fad0 	bl	13ab4 <z_spin_lock_set_owner>
		if (!killed) {
   14514:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   14518:	f013 0f28 	tst.w	r3, #40	; 0x28
   1451c:	d110      	bne.n	14540 <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
   1451e:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   14522:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   14526:	b113      	cbz	r3, 1452e <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
   14528:	4628      	mov	r0, r5
   1452a:	f7ff fe13 	bl	14154 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1452e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   14532:	4628      	mov	r0, r5
   14534:	f023 0314 	bic.w	r3, r3, #20
   14538:	f804 3c0b 	strb.w	r3, [r4, #-11]
   1453c:	f7ff ff0e 	bl	1435c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14540:	4808      	ldr	r0, [pc, #32]	; (14564 <z_thread_timeout+0x84>)
   14542:	f7ff faa9 	bl	13a98 <z_spin_unlock_valid>
   14546:	b940      	cbnz	r0, 1455a <z_thread_timeout+0x7a>
   14548:	4907      	ldr	r1, [pc, #28]	; (14568 <z_thread_timeout+0x88>)
   1454a:	4808      	ldr	r0, [pc, #32]	; (1456c <z_thread_timeout+0x8c>)
   1454c:	22b9      	movs	r2, #185	; 0xb9
   1454e:	f003 fd75 	bl	1803c <assert_print>
   14552:	21b9      	movs	r1, #185	; 0xb9
   14554:	4804      	ldr	r0, [pc, #16]	; (14568 <z_thread_timeout+0x88>)
   14556:	f003 fd6a 	bl	1802e <assert_post_action>
	__asm__ volatile(
   1455a:	f386 8811 	msr	BASEPRI, r6
   1455e:	f3bf 8f6f 	isb	sy
}
   14562:	bd70      	pop	{r4, r5, r6, pc}
   14564:	20000a18 	.word	0x20000a18
   14568:	00018ec3 	.word	0x00018ec3
   1456c:	00018ef0 	.word	0x00018ef0

00014570 <unready_thread>:
{
   14570:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   14572:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   14576:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   14578:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   1457a:	7b43      	ldrb	r3, [r0, #13]
   1457c:	da06      	bge.n	1458c <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1457e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   14582:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14584:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   14586:	4806      	ldr	r0, [pc, #24]	; (145a0 <unready_thread+0x30>)
   14588:	f7ff fdc6 	bl	14118 <z_priq_dumb_remove>
	update_cache(thread == _current);
   1458c:	4b05      	ldr	r3, [pc, #20]	; (145a4 <unready_thread+0x34>)
   1458e:	6898      	ldr	r0, [r3, #8]
   14590:	1b03      	subs	r3, r0, r4
   14592:	4258      	negs	r0, r3
   14594:	4158      	adcs	r0, r3
}
   14596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   1459a:	f7ff bdf9 	b.w	14190 <update_cache>
   1459e:	bf00      	nop
   145a0:	20000a04 	.word	0x20000a04
   145a4:	200009e4 	.word	0x200009e4

000145a8 <add_to_waitq_locked>:
{
   145a8:	b538      	push	{r3, r4, r5, lr}
   145aa:	4604      	mov	r4, r0
   145ac:	460d      	mov	r5, r1
	unready_thread(thread);
   145ae:	f7ff ffdf 	bl	14570 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   145b2:	7b63      	ldrb	r3, [r4, #13]
   145b4:	f043 0302 	orr.w	r3, r3, #2
   145b8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   145ba:	b1f5      	cbz	r5, 145fa <add_to_waitq_locked+0x52>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   145bc:	4b15      	ldr	r3, [pc, #84]	; (14614 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   145be:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   145c0:	429c      	cmp	r4, r3
   145c2:	d108      	bne.n	145d6 <add_to_waitq_locked+0x2e>
   145c4:	4914      	ldr	r1, [pc, #80]	; (14618 <add_to_waitq_locked+0x70>)
   145c6:	4815      	ldr	r0, [pc, #84]	; (1461c <add_to_waitq_locked+0x74>)
   145c8:	22ba      	movs	r2, #186	; 0xba
   145ca:	f003 fd37 	bl	1803c <assert_print>
   145ce:	21ba      	movs	r1, #186	; 0xba
   145d0:	4811      	ldr	r0, [pc, #68]	; (14618 <add_to_waitq_locked+0x70>)
   145d2:	f003 fd2c 	bl	1802e <assert_post_action>
	return list->head == list;
   145d6:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   145d8:	429d      	cmp	r5, r3
   145da:	d015      	beq.n	14608 <add_to_waitq_locked+0x60>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   145dc:	b1a3      	cbz	r3, 14608 <add_to_waitq_locked+0x60>
	int32_t b1 = thread_1->base.prio;
   145de:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   145e2:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   145e6:	4291      	cmp	r1, r2
   145e8:	d008      	beq.n	145fc <add_to_waitq_locked+0x54>
		return b2 - b1;
   145ea:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   145ec:	2a00      	cmp	r2, #0
   145ee:	dd05      	ble.n	145fc <add_to_waitq_locked+0x54>
	sys_dnode_t *const prev = successor->prev;
   145f0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   145f2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   145f6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   145f8:	605c      	str	r4, [r3, #4]
}
   145fa:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   145fc:	686a      	ldr	r2, [r5, #4]
   145fe:	4293      	cmp	r3, r2
   14600:	d002      	beq.n	14608 <add_to_waitq_locked+0x60>
   14602:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14604:	2b00      	cmp	r3, #0
   14606:	d1ec      	bne.n	145e2 <add_to_waitq_locked+0x3a>
	sys_dnode_t *const tail = list->tail;
   14608:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1460a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1460e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   14610:	606c      	str	r4, [r5, #4]
}
   14612:	e7f2      	b.n	145fa <add_to_waitq_locked+0x52>
   14614:	20000130 	.word	0x20000130
   14618:	00019d03 	.word	0x00019d03
   1461c:	00018ef0 	.word	0x00018ef0

00014620 <pend>:
{
   14620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14624:	4604      	mov	r4, r0
   14626:	4688      	mov	r8, r1
   14628:	4616      	mov	r6, r2
   1462a:	461d      	mov	r5, r3
	__asm__ volatile(
   1462c:	f04f 0320 	mov.w	r3, #32
   14630:	f3ef 8711 	mrs	r7, BASEPRI
   14634:	f383 8812 	msr	BASEPRI_MAX, r3
   14638:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1463c:	481a      	ldr	r0, [pc, #104]	; (146a8 <pend+0x88>)
   1463e:	f7ff fa1d 	bl	13a7c <z_spin_lock_valid>
   14642:	b940      	cbnz	r0, 14656 <pend+0x36>
   14644:	4919      	ldr	r1, [pc, #100]	; (146ac <pend+0x8c>)
   14646:	481a      	ldr	r0, [pc, #104]	; (146b0 <pend+0x90>)
   14648:	228e      	movs	r2, #142	; 0x8e
   1464a:	f003 fcf7 	bl	1803c <assert_print>
   1464e:	218e      	movs	r1, #142	; 0x8e
   14650:	4816      	ldr	r0, [pc, #88]	; (146ac <pend+0x8c>)
   14652:	f003 fcec 	bl	1802e <assert_post_action>
	z_spin_lock_set_owner(l);
   14656:	4814      	ldr	r0, [pc, #80]	; (146a8 <pend+0x88>)
   14658:	f7ff fa2c 	bl	13ab4 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   1465c:	4620      	mov	r0, r4
   1465e:	4641      	mov	r1, r8
   14660:	f7ff ffa2 	bl	145a8 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14664:	4810      	ldr	r0, [pc, #64]	; (146a8 <pend+0x88>)
   14666:	f7ff fa17 	bl	13a98 <z_spin_unlock_valid>
   1466a:	b940      	cbnz	r0, 1467e <pend+0x5e>
   1466c:	490f      	ldr	r1, [pc, #60]	; (146ac <pend+0x8c>)
   1466e:	4810      	ldr	r0, [pc, #64]	; (146b0 <pend+0x90>)
   14670:	22b9      	movs	r2, #185	; 0xb9
   14672:	f003 fce3 	bl	1803c <assert_print>
   14676:	21b9      	movs	r1, #185	; 0xb9
   14678:	480c      	ldr	r0, [pc, #48]	; (146ac <pend+0x8c>)
   1467a:	f003 fcd8 	bl	1802e <assert_post_action>
	__asm__ volatile(
   1467e:	f387 8811 	msr	BASEPRI, r7
   14682:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   14686:	f1b5 3fff 	cmp.w	r5, #4294967295
   1468a:	bf08      	it	eq
   1468c:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   14690:	d008      	beq.n	146a4 <pend+0x84>
   14692:	4632      	mov	r2, r6
   14694:	462b      	mov	r3, r5
   14696:	f104 0018 	add.w	r0, r4, #24
   1469a:	4906      	ldr	r1, [pc, #24]	; (146b4 <pend+0x94>)
}
   1469c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   146a0:	f000 bbec 	b.w	14e7c <z_add_timeout>
   146a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   146a8:	20000a18 	.word	0x20000a18
   146ac:	00018ec3 	.word	0x00018ec3
   146b0:	00018ef0 	.word	0x00018ef0
   146b4:	000144e1 	.word	0x000144e1

000146b8 <z_pend_curr>:
{
   146b8:	b538      	push	{r3, r4, r5, lr}
   146ba:	4605      	mov	r5, r0
	pending_current = _current;
   146bc:	4b0d      	ldr	r3, [pc, #52]	; (146f4 <z_pend_curr+0x3c>)
{
   146be:	460c      	mov	r4, r1
	pending_current = _current;
   146c0:	6898      	ldr	r0, [r3, #8]
   146c2:	4b0d      	ldr	r3, [pc, #52]	; (146f8 <z_pend_curr+0x40>)
{
   146c4:	4611      	mov	r1, r2
	pending_current = _current;
   146c6:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   146c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   146cc:	f7ff ffa8 	bl	14620 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   146d0:	4628      	mov	r0, r5
   146d2:	f7ff f9e1 	bl	13a98 <z_spin_unlock_valid>
   146d6:	b940      	cbnz	r0, 146ea <z_pend_curr+0x32>
   146d8:	4908      	ldr	r1, [pc, #32]	; (146fc <z_pend_curr+0x44>)
   146da:	4809      	ldr	r0, [pc, #36]	; (14700 <z_pend_curr+0x48>)
   146dc:	22d0      	movs	r2, #208	; 0xd0
   146de:	f003 fcad 	bl	1803c <assert_print>
   146e2:	21d0      	movs	r1, #208	; 0xd0
   146e4:	4805      	ldr	r0, [pc, #20]	; (146fc <z_pend_curr+0x44>)
   146e6:	f003 fca2 	bl	1802e <assert_post_action>
   146ea:	4620      	mov	r0, r4
}
   146ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   146f0:	f7fd b9aa 	b.w	11a48 <arch_swap>
   146f4:	200009e4 	.word	0x200009e4
   146f8:	20000a14 	.word	0x20000a14
   146fc:	00018ec3 	.word	0x00018ec3
   14700:	00018ef0 	.word	0x00018ef0

00014704 <z_set_prio>:
{
   14704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14706:	4604      	mov	r4, r0
   14708:	460d      	mov	r5, r1
	__asm__ volatile(
   1470a:	f04f 0320 	mov.w	r3, #32
   1470e:	f3ef 8611 	mrs	r6, BASEPRI
   14712:	f383 8812 	msr	BASEPRI_MAX, r3
   14716:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1471a:	4834      	ldr	r0, [pc, #208]	; (147ec <z_set_prio+0xe8>)
   1471c:	f7ff f9ae 	bl	13a7c <z_spin_lock_valid>
   14720:	b940      	cbnz	r0, 14734 <z_set_prio+0x30>
   14722:	4933      	ldr	r1, [pc, #204]	; (147f0 <z_set_prio+0xec>)
   14724:	4833      	ldr	r0, [pc, #204]	; (147f4 <z_set_prio+0xf0>)
   14726:	228e      	movs	r2, #142	; 0x8e
   14728:	f003 fc88 	bl	1803c <assert_print>
   1472c:	218e      	movs	r1, #142	; 0x8e
   1472e:	4830      	ldr	r0, [pc, #192]	; (147f0 <z_set_prio+0xec>)
   14730:	f003 fc7d 	bl	1802e <assert_post_action>
	z_spin_lock_set_owner(l);
   14734:	482d      	ldr	r0, [pc, #180]	; (147ec <z_set_prio+0xe8>)
   14736:	f7ff f9bd 	bl	13ab4 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   1473a:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   1473c:	b26d      	sxtb	r5, r5
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1473e:	06da      	lsls	r2, r3, #27
   14740:	d151      	bne.n	147e6 <z_set_prio+0xe2>
		if (need_sched) {
   14742:	69a2      	ldr	r2, [r4, #24]
   14744:	2a00      	cmp	r2, #0
   14746:	d14e      	bne.n	147e6 <z_set_prio+0xe2>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1474c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1474e:	4621      	mov	r1, r4
   14750:	4829      	ldr	r0, [pc, #164]	; (147f8 <z_set_prio+0xf4>)
   14752:	f7ff fce1 	bl	14118 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   14756:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   14758:	73a5      	strb	r5, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1475a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1475e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   14760:	4b26      	ldr	r3, [pc, #152]	; (147fc <z_set_prio+0xf8>)
   14762:	429c      	cmp	r4, r3
   14764:	d108      	bne.n	14778 <z_set_prio+0x74>
   14766:	4926      	ldr	r1, [pc, #152]	; (14800 <z_set_prio+0xfc>)
   14768:	4822      	ldr	r0, [pc, #136]	; (147f4 <z_set_prio+0xf0>)
   1476a:	22ba      	movs	r2, #186	; 0xba
   1476c:	f003 fc66 	bl	1803c <assert_print>
   14770:	21ba      	movs	r1, #186	; 0xba
   14772:	4823      	ldr	r0, [pc, #140]	; (14800 <z_set_prio+0xfc>)
   14774:	f003 fc5b 	bl	1802e <assert_post_action>
	return list->head == list;
   14778:	4a22      	ldr	r2, [pc, #136]	; (14804 <z_set_prio+0x100>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1477a:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
   1477e:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14782:	42ab      	cmp	r3, r5
   14784:	d02a      	beq.n	147dc <z_set_prio+0xd8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14786:	b34b      	cbz	r3, 147dc <z_set_prio+0xd8>
	int32_t b1 = thread_1->base.prio;
   14788:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1478c:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   14790:	428f      	cmp	r7, r1
   14792:	d01e      	beq.n	147d2 <z_set_prio+0xce>
		return b2 - b1;
   14794:	1bc9      	subs	r1, r1, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   14796:	2900      	cmp	r1, #0
   14798:	dd1b      	ble.n	147d2 <z_set_prio+0xce>
	sys_dnode_t *const prev = successor->prev;
   1479a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1479c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   147a0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   147a2:	605c      	str	r4, [r3, #4]
			update_cache(1);
   147a4:	2001      	movs	r0, #1
   147a6:	f7ff fcf3 	bl	14190 <update_cache>
   147aa:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   147ac:	480f      	ldr	r0, [pc, #60]	; (147ec <z_set_prio+0xe8>)
   147ae:	f7ff f973 	bl	13a98 <z_spin_unlock_valid>
   147b2:	b940      	cbnz	r0, 147c6 <z_set_prio+0xc2>
   147b4:	490e      	ldr	r1, [pc, #56]	; (147f0 <z_set_prio+0xec>)
   147b6:	480f      	ldr	r0, [pc, #60]	; (147f4 <z_set_prio+0xf0>)
   147b8:	22b9      	movs	r2, #185	; 0xb9
   147ba:	f003 fc3f 	bl	1803c <assert_print>
   147be:	21b9      	movs	r1, #185	; 0xb9
   147c0:	480b      	ldr	r0, [pc, #44]	; (147f0 <z_set_prio+0xec>)
   147c2:	f003 fc34 	bl	1802e <assert_post_action>
	__asm__ volatile(
   147c6:	f386 8811 	msr	BASEPRI, r6
   147ca:	f3bf 8f6f 	isb	sy
}
   147ce:	4620      	mov	r0, r4
   147d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   147d2:	4283      	cmp	r3, r0
   147d4:	d002      	beq.n	147dc <z_set_prio+0xd8>
   147d6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   147d8:	2b00      	cmp	r3, #0
   147da:	d1d7      	bne.n	1478c <z_set_prio+0x88>
	node->prev = tail;
   147dc:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   147e0:	6004      	str	r4, [r0, #0]
	list->tail = node;
   147e2:	6254      	str	r4, [r2, #36]	; 0x24
}
   147e4:	e7de      	b.n	147a4 <z_set_prio+0xa0>
			thread->base.prio = prio;
   147e6:	73a5      	strb	r5, [r4, #14]
   147e8:	2400      	movs	r4, #0
   147ea:	e7df      	b.n	147ac <z_set_prio+0xa8>
   147ec:	20000a18 	.word	0x20000a18
   147f0:	00018ec3 	.word	0x00018ec3
   147f4:	00018ef0 	.word	0x00018ef0
   147f8:	20000a04 	.word	0x20000a04
   147fc:	20000130 	.word	0x20000130
   14800:	00019d03 	.word	0x00019d03
   14804:	200009e4 	.word	0x200009e4

00014808 <z_impl_k_thread_suspend>:
{
   14808:	b570      	push	{r4, r5, r6, lr}
   1480a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1480c:	3018      	adds	r0, #24
   1480e:	f000 fbe3 	bl	14fd8 <z_abort_timeout>
	__asm__ volatile(
   14812:	f04f 0320 	mov.w	r3, #32
   14816:	f3ef 8611 	mrs	r6, BASEPRI
   1481a:	f383 8812 	msr	BASEPRI_MAX, r3
   1481e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14822:	4820      	ldr	r0, [pc, #128]	; (148a4 <z_impl_k_thread_suspend+0x9c>)
   14824:	f7ff f92a 	bl	13a7c <z_spin_lock_valid>
   14828:	b940      	cbnz	r0, 1483c <z_impl_k_thread_suspend+0x34>
   1482a:	491f      	ldr	r1, [pc, #124]	; (148a8 <z_impl_k_thread_suspend+0xa0>)
   1482c:	481f      	ldr	r0, [pc, #124]	; (148ac <z_impl_k_thread_suspend+0xa4>)
   1482e:	228e      	movs	r2, #142	; 0x8e
   14830:	f003 fc04 	bl	1803c <assert_print>
   14834:	218e      	movs	r1, #142	; 0x8e
   14836:	481c      	ldr	r0, [pc, #112]	; (148a8 <z_impl_k_thread_suspend+0xa0>)
   14838:	f003 fbf9 	bl	1802e <assert_post_action>
	z_spin_lock_set_owner(l);
   1483c:	4819      	ldr	r0, [pc, #100]	; (148a4 <z_impl_k_thread_suspend+0x9c>)
   1483e:	f7ff f939 	bl	13ab4 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   14842:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   14846:	7b63      	ldrb	r3, [r4, #13]
   14848:	2a00      	cmp	r2, #0
   1484a:	da06      	bge.n	1485a <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1484c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   14850:	4621      	mov	r1, r4
   14852:	4817      	ldr	r0, [pc, #92]	; (148b0 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14854:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   14856:	f7ff fc5f 	bl	14118 <z_priq_dumb_remove>
		update_cache(thread == _current);
   1485a:	4d16      	ldr	r5, [pc, #88]	; (148b4 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1485c:	7b63      	ldrb	r3, [r4, #13]
   1485e:	68a8      	ldr	r0, [r5, #8]
   14860:	f043 0310 	orr.w	r3, r3, #16
   14864:	7363      	strb	r3, [r4, #13]
   14866:	1b03      	subs	r3, r0, r4
   14868:	4258      	negs	r0, r3
   1486a:	4158      	adcs	r0, r3
   1486c:	f7ff fc90 	bl	14190 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14870:	480c      	ldr	r0, [pc, #48]	; (148a4 <z_impl_k_thread_suspend+0x9c>)
   14872:	f7ff f911 	bl	13a98 <z_spin_unlock_valid>
   14876:	b940      	cbnz	r0, 1488a <z_impl_k_thread_suspend+0x82>
   14878:	490b      	ldr	r1, [pc, #44]	; (148a8 <z_impl_k_thread_suspend+0xa0>)
   1487a:	480c      	ldr	r0, [pc, #48]	; (148ac <z_impl_k_thread_suspend+0xa4>)
   1487c:	22b9      	movs	r2, #185	; 0xb9
   1487e:	f003 fbdd 	bl	1803c <assert_print>
   14882:	21b9      	movs	r1, #185	; 0xb9
   14884:	4808      	ldr	r0, [pc, #32]	; (148a8 <z_impl_k_thread_suspend+0xa0>)
   14886:	f003 fbd2 	bl	1802e <assert_post_action>
	__asm__ volatile(
   1488a:	f386 8811 	msr	BASEPRI, r6
   1488e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   14892:	68ab      	ldr	r3, [r5, #8]
   14894:	42a3      	cmp	r3, r4
   14896:	d103      	bne.n	148a0 <z_impl_k_thread_suspend+0x98>
}
   14898:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1489c:	f003 bf3a 	b.w	18714 <z_reschedule_unlocked>
}
   148a0:	bd70      	pop	{r4, r5, r6, pc}
   148a2:	bf00      	nop
   148a4:	20000a18 	.word	0x20000a18
   148a8:	00018ec3 	.word	0x00018ec3
   148ac:	00018ef0 	.word	0x00018ef0
   148b0:	20000a04 	.word	0x20000a04
   148b4:	200009e4 	.word	0x200009e4

000148b8 <k_sched_unlock>:
{
   148b8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   148ba:	f04f 0320 	mov.w	r3, #32
   148be:	f3ef 8511 	mrs	r5, BASEPRI
   148c2:	f383 8812 	msr	BASEPRI_MAX, r3
   148c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   148ca:	4824      	ldr	r0, [pc, #144]	; (1495c <k_sched_unlock+0xa4>)
   148cc:	f7ff f8d6 	bl	13a7c <z_spin_lock_valid>
   148d0:	b940      	cbnz	r0, 148e4 <k_sched_unlock+0x2c>
   148d2:	4923      	ldr	r1, [pc, #140]	; (14960 <k_sched_unlock+0xa8>)
   148d4:	4823      	ldr	r0, [pc, #140]	; (14964 <k_sched_unlock+0xac>)
   148d6:	228e      	movs	r2, #142	; 0x8e
   148d8:	f003 fbb0 	bl	1803c <assert_print>
   148dc:	218e      	movs	r1, #142	; 0x8e
   148de:	4820      	ldr	r0, [pc, #128]	; (14960 <k_sched_unlock+0xa8>)
   148e0:	f003 fba5 	bl	1802e <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   148e4:	4c20      	ldr	r4, [pc, #128]	; (14968 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   148e6:	481d      	ldr	r0, [pc, #116]	; (1495c <k_sched_unlock+0xa4>)
   148e8:	f7ff f8e4 	bl	13ab4 <z_spin_lock_set_owner>
   148ec:	68a3      	ldr	r3, [r4, #8]
   148ee:	7bdb      	ldrb	r3, [r3, #15]
   148f0:	b953      	cbnz	r3, 14908 <k_sched_unlock+0x50>
   148f2:	491e      	ldr	r1, [pc, #120]	; (1496c <k_sched_unlock+0xb4>)
   148f4:	481b      	ldr	r0, [pc, #108]	; (14964 <k_sched_unlock+0xac>)
   148f6:	f240 32bb 	movw	r2, #955	; 0x3bb
   148fa:	f003 fb9f 	bl	1803c <assert_print>
   148fe:	f240 31bb 	movw	r1, #955	; 0x3bb
   14902:	481a      	ldr	r0, [pc, #104]	; (1496c <k_sched_unlock+0xb4>)
   14904:	f003 fb93 	bl	1802e <assert_post_action>
   14908:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   1490c:	b153      	cbz	r3, 14924 <k_sched_unlock+0x6c>
   1490e:	4917      	ldr	r1, [pc, #92]	; (1496c <k_sched_unlock+0xb4>)
   14910:	4814      	ldr	r0, [pc, #80]	; (14964 <k_sched_unlock+0xac>)
   14912:	f44f 726f 	mov.w	r2, #956	; 0x3bc
   14916:	f003 fb91 	bl	1803c <assert_print>
   1491a:	f44f 716f 	mov.w	r1, #956	; 0x3bc
   1491e:	4813      	ldr	r0, [pc, #76]	; (1496c <k_sched_unlock+0xb4>)
   14920:	f003 fb85 	bl	1802e <assert_post_action>
		++_current->base.sched_locked;
   14924:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   14926:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   14928:	7bd3      	ldrb	r3, [r2, #15]
   1492a:	3301      	adds	r3, #1
   1492c:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1492e:	f7ff fc2f 	bl	14190 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14932:	480a      	ldr	r0, [pc, #40]	; (1495c <k_sched_unlock+0xa4>)
   14934:	f7ff f8b0 	bl	13a98 <z_spin_unlock_valid>
   14938:	b940      	cbnz	r0, 1494c <k_sched_unlock+0x94>
   1493a:	4909      	ldr	r1, [pc, #36]	; (14960 <k_sched_unlock+0xa8>)
   1493c:	4809      	ldr	r0, [pc, #36]	; (14964 <k_sched_unlock+0xac>)
   1493e:	22b9      	movs	r2, #185	; 0xb9
   14940:	f003 fb7c 	bl	1803c <assert_print>
   14944:	21b9      	movs	r1, #185	; 0xb9
   14946:	4806      	ldr	r0, [pc, #24]	; (14960 <k_sched_unlock+0xa8>)
   14948:	f003 fb71 	bl	1802e <assert_post_action>
	__asm__ volatile(
   1494c:	f385 8811 	msr	BASEPRI, r5
   14950:	f3bf 8f6f 	isb	sy
}
   14954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   14958:	f003 bedc 	b.w	18714 <z_reschedule_unlocked>
   1495c:	20000a18 	.word	0x20000a18
   14960:	00018ec3 	.word	0x00018ec3
   14964:	00018ef0 	.word	0x00018ef0
   14968:	200009e4 	.word	0x200009e4
   1496c:	00019d03 	.word	0x00019d03

00014970 <z_unpend_first_thread>:
{
   14970:	b538      	push	{r3, r4, r5, lr}
   14972:	4604      	mov	r4, r0
	__asm__ volatile(
   14974:	f04f 0320 	mov.w	r3, #32
   14978:	f3ef 8511 	mrs	r5, BASEPRI
   1497c:	f383 8812 	msr	BASEPRI_MAX, r3
   14980:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14984:	4816      	ldr	r0, [pc, #88]	; (149e0 <z_unpend_first_thread+0x70>)
   14986:	f7ff f879 	bl	13a7c <z_spin_lock_valid>
   1498a:	b940      	cbnz	r0, 1499e <z_unpend_first_thread+0x2e>
   1498c:	4915      	ldr	r1, [pc, #84]	; (149e4 <z_unpend_first_thread+0x74>)
   1498e:	4816      	ldr	r0, [pc, #88]	; (149e8 <z_unpend_first_thread+0x78>)
   14990:	228e      	movs	r2, #142	; 0x8e
   14992:	f003 fb53 	bl	1803c <assert_print>
   14996:	218e      	movs	r1, #142	; 0x8e
   14998:	4812      	ldr	r0, [pc, #72]	; (149e4 <z_unpend_first_thread+0x74>)
   1499a:	f003 fb48 	bl	1802e <assert_post_action>
	z_spin_lock_set_owner(l);
   1499e:	4810      	ldr	r0, [pc, #64]	; (149e0 <z_unpend_first_thread+0x70>)
   149a0:	f7ff f888 	bl	13ab4 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   149a4:	4620      	mov	r0, r4
   149a6:	f003 febf 	bl	18728 <z_priq_dumb_best>
		if (thread != NULL) {
   149aa:	4604      	mov	r4, r0
   149ac:	b128      	cbz	r0, 149ba <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
   149ae:	f7ff fbd1 	bl	14154 <unpend_thread_no_timeout>
   149b2:	f104 0018 	add.w	r0, r4, #24
   149b6:	f000 fb0f 	bl	14fd8 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   149ba:	4809      	ldr	r0, [pc, #36]	; (149e0 <z_unpend_first_thread+0x70>)
   149bc:	f7ff f86c 	bl	13a98 <z_spin_unlock_valid>
   149c0:	b940      	cbnz	r0, 149d4 <z_unpend_first_thread+0x64>
   149c2:	4908      	ldr	r1, [pc, #32]	; (149e4 <z_unpend_first_thread+0x74>)
   149c4:	4808      	ldr	r0, [pc, #32]	; (149e8 <z_unpend_first_thread+0x78>)
   149c6:	22b9      	movs	r2, #185	; 0xb9
   149c8:	f003 fb38 	bl	1803c <assert_print>
   149cc:	21b9      	movs	r1, #185	; 0xb9
   149ce:	4805      	ldr	r0, [pc, #20]	; (149e4 <z_unpend_first_thread+0x74>)
   149d0:	f003 fb2d 	bl	1802e <assert_post_action>
	__asm__ volatile(
   149d4:	f385 8811 	msr	BASEPRI, r5
   149d8:	f3bf 8f6f 	isb	sy
}
   149dc:	4620      	mov	r0, r4
   149de:	bd38      	pop	{r3, r4, r5, pc}
   149e0:	20000a18 	.word	0x20000a18
   149e4:	00018ec3 	.word	0x00018ec3
   149e8:	00018ef0 	.word	0x00018ef0

000149ec <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   149ec:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   149ee:	4b04      	ldr	r3, [pc, #16]	; (14a00 <z_sched_init+0x14>)
   149f0:	4608      	mov	r0, r1
   149f2:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   149f6:	e9c3 2208 	strd	r2, r2, [r3, #32]
   149fa:	f7ff baaf 	b.w	13f5c <k_sched_time_slice_set>
   149fe:	bf00      	nop
   14a00:	200009e4 	.word	0x200009e4

00014a04 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   14a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14a06:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   14a0a:	b153      	cbz	r3, 14a22 <z_impl_k_yield+0x1e>
   14a0c:	4938      	ldr	r1, [pc, #224]	; (14af0 <z_impl_k_yield+0xec>)
   14a0e:	4839      	ldr	r0, [pc, #228]	; (14af4 <z_impl_k_yield+0xf0>)
   14a10:	f240 5232 	movw	r2, #1330	; 0x532
   14a14:	f003 fb12 	bl	1803c <assert_print>
   14a18:	f240 5132 	movw	r1, #1330	; 0x532
   14a1c:	4834      	ldr	r0, [pc, #208]	; (14af0 <z_impl_k_yield+0xec>)
   14a1e:	f003 fb06 	bl	1802e <assert_post_action>
	__asm__ volatile(
   14a22:	f04f 0320 	mov.w	r3, #32
   14a26:	f3ef 8611 	mrs	r6, BASEPRI
   14a2a:	f383 8812 	msr	BASEPRI_MAX, r3
   14a2e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14a32:	4831      	ldr	r0, [pc, #196]	; (14af8 <z_impl_k_yield+0xf4>)
   14a34:	f7ff f822 	bl	13a7c <z_spin_lock_valid>
   14a38:	b940      	cbnz	r0, 14a4c <z_impl_k_yield+0x48>
   14a3a:	4930      	ldr	r1, [pc, #192]	; (14afc <z_impl_k_yield+0xf8>)
   14a3c:	482d      	ldr	r0, [pc, #180]	; (14af4 <z_impl_k_yield+0xf0>)
   14a3e:	228e      	movs	r2, #142	; 0x8e
   14a40:	f003 fafc 	bl	1803c <assert_print>
   14a44:	218e      	movs	r1, #142	; 0x8e
   14a46:	482d      	ldr	r0, [pc, #180]	; (14afc <z_impl_k_yield+0xf8>)
   14a48:	f003 faf1 	bl	1802e <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   14a4c:	4d2c      	ldr	r5, [pc, #176]	; (14b00 <z_impl_k_yield+0xfc>)
	z_spin_lock_set_owner(l);
   14a4e:	482a      	ldr	r0, [pc, #168]	; (14af8 <z_impl_k_yield+0xf4>)
   14a50:	f7ff f830 	bl	13ab4 <z_spin_lock_set_owner>
   14a54:	68a9      	ldr	r1, [r5, #8]
	_priq_run_remove(thread_runq(thread), thread);
   14a56:	f105 0020 	add.w	r0, r5, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14a5a:	7b4b      	ldrb	r3, [r1, #13]
   14a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   14a60:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   14a62:	f7ff fb59 	bl	14118 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   14a66:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   14a68:	7b63      	ldrb	r3, [r4, #13]
   14a6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14a6e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   14a70:	4b24      	ldr	r3, [pc, #144]	; (14b04 <z_impl_k_yield+0x100>)
   14a72:	429c      	cmp	r4, r3
   14a74:	d108      	bne.n	14a88 <z_impl_k_yield+0x84>
   14a76:	491e      	ldr	r1, [pc, #120]	; (14af0 <z_impl_k_yield+0xec>)
   14a78:	481e      	ldr	r0, [pc, #120]	; (14af4 <z_impl_k_yield+0xf0>)
   14a7a:	22ba      	movs	r2, #186	; 0xba
   14a7c:	f003 fade 	bl	1803c <assert_print>
   14a80:	21ba      	movs	r1, #186	; 0xba
   14a82:	481b      	ldr	r0, [pc, #108]	; (14af0 <z_impl_k_yield+0xec>)
   14a84:	f003 fad3 	bl	1802e <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
   14a88:	e9d5 3108 	ldrd	r3, r1, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14a8c:	481e      	ldr	r0, [pc, #120]	; (14b08 <z_impl_k_yield+0x104>)
   14a8e:	4283      	cmp	r3, r0
   14a90:	d028      	beq.n	14ae4 <z_impl_k_yield+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14a92:	b33b      	cbz	r3, 14ae4 <z_impl_k_yield+0xe0>
	int32_t b1 = thread_1->base.prio;
   14a94:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   14a98:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   14a9c:	4297      	cmp	r7, r2
   14a9e:	d01c      	beq.n	14ada <z_impl_k_yield+0xd6>
		return b2 - b1;
   14aa0:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   14aa2:	2a00      	cmp	r2, #0
   14aa4:	dd19      	ble.n	14ada <z_impl_k_yield+0xd6>
	sys_dnode_t *const prev = successor->prev;
   14aa6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   14aa8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   14aac:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   14aae:	605c      	str	r4, [r3, #4]
	update_cache(1);
   14ab0:	2001      	movs	r0, #1
   14ab2:	f7ff fb6d 	bl	14190 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14ab6:	4810      	ldr	r0, [pc, #64]	; (14af8 <z_impl_k_yield+0xf4>)
   14ab8:	f7fe ffee 	bl	13a98 <z_spin_unlock_valid>
   14abc:	b940      	cbnz	r0, 14ad0 <z_impl_k_yield+0xcc>
   14abe:	490f      	ldr	r1, [pc, #60]	; (14afc <z_impl_k_yield+0xf8>)
   14ac0:	480c      	ldr	r0, [pc, #48]	; (14af4 <z_impl_k_yield+0xf0>)
   14ac2:	22d0      	movs	r2, #208	; 0xd0
   14ac4:	f003 faba 	bl	1803c <assert_print>
   14ac8:	21d0      	movs	r1, #208	; 0xd0
   14aca:	480c      	ldr	r0, [pc, #48]	; (14afc <z_impl_k_yield+0xf8>)
   14acc:	f003 faaf 	bl	1802e <assert_post_action>
   14ad0:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   14ad2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   14ad6:	f7fc bfb7 	b.w	11a48 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   14ada:	428b      	cmp	r3, r1
   14adc:	d002      	beq.n	14ae4 <z_impl_k_yield+0xe0>
   14ade:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14ae0:	2b00      	cmp	r3, #0
   14ae2:	d1d9      	bne.n	14a98 <z_impl_k_yield+0x94>
	node->prev = tail;
   14ae4:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   14ae8:	600c      	str	r4, [r1, #0]
	list->tail = node;
   14aea:	626c      	str	r4, [r5, #36]	; 0x24
}
   14aec:	e7e0      	b.n	14ab0 <z_impl_k_yield+0xac>
   14aee:	bf00      	nop
   14af0:	00019d03 	.word	0x00019d03
   14af4:	00018ef0 	.word	0x00018ef0
   14af8:	20000a18 	.word	0x20000a18
   14afc:	00018ec3 	.word	0x00018ec3
   14b00:	200009e4 	.word	0x200009e4
   14b04:	20000130 	.word	0x20000130
   14b08:	20000a04 	.word	0x20000a04

00014b0c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   14b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b10:	4605      	mov	r5, r0
   14b12:	460e      	mov	r6, r1
   14b14:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   14b18:	b153      	cbz	r3, 14b30 <z_tick_sleep+0x24>
   14b1a:	493a      	ldr	r1, [pc, #232]	; (14c04 <z_tick_sleep+0xf8>)
   14b1c:	483a      	ldr	r0, [pc, #232]	; (14c08 <z_tick_sleep+0xfc>)
   14b1e:	f240 524e 	movw	r2, #1358	; 0x54e
   14b22:	f003 fa8b 	bl	1803c <assert_print>
   14b26:	f240 514e 	movw	r1, #1358	; 0x54e
   14b2a:	4836      	ldr	r0, [pc, #216]	; (14c04 <z_tick_sleep+0xf8>)
   14b2c:	f003 fa7f 	bl	1802e <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   14b30:	ea55 0306 	orrs.w	r3, r5, r6
   14b34:	d103      	bne.n	14b3e <z_tick_sleep+0x32>
	z_impl_k_yield();
   14b36:	f7ff ff65 	bl	14a04 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   14b3a:	2000      	movs	r0, #0
   14b3c:	e05f      	b.n	14bfe <z_tick_sleep+0xf2>
	if (Z_TICK_ABS(ticks) <= 0) {
   14b3e:	f06f 0401 	mvn.w	r4, #1
   14b42:	f04f 33ff 	mov.w	r3, #4294967295
   14b46:	1b64      	subs	r4, r4, r5
   14b48:	eb63 0306 	sbc.w	r3, r3, r6
   14b4c:	2c01      	cmp	r4, #1
   14b4e:	f173 0300 	sbcs.w	r3, r3, #0
   14b52:	da02      	bge.n	14b5a <z_tick_sleep+0x4e>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   14b54:	f003 fdee 	bl	18734 <sys_clock_tick_get_32>
   14b58:	1944      	adds	r4, r0, r5
   14b5a:	f04f 0320 	mov.w	r3, #32
   14b5e:	f3ef 8811 	mrs	r8, BASEPRI
   14b62:	f383 8812 	msr	BASEPRI_MAX, r3
   14b66:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14b6a:	4828      	ldr	r0, [pc, #160]	; (14c0c <z_tick_sleep+0x100>)
   14b6c:	f7fe ff86 	bl	13a7c <z_spin_lock_valid>
   14b70:	b940      	cbnz	r0, 14b84 <z_tick_sleep+0x78>
   14b72:	4927      	ldr	r1, [pc, #156]	; (14c10 <z_tick_sleep+0x104>)
   14b74:	4824      	ldr	r0, [pc, #144]	; (14c08 <z_tick_sleep+0xfc>)
   14b76:	228e      	movs	r2, #142	; 0x8e
   14b78:	f003 fa60 	bl	1803c <assert_print>
   14b7c:	218e      	movs	r1, #142	; 0x8e
   14b7e:	4824      	ldr	r0, [pc, #144]	; (14c10 <z_tick_sleep+0x104>)
   14b80:	f003 fa55 	bl	1802e <assert_post_action>
	pending_current = _current;
   14b84:	4f23      	ldr	r7, [pc, #140]	; (14c14 <z_tick_sleep+0x108>)
	z_spin_lock_set_owner(l);
   14b86:	4821      	ldr	r0, [pc, #132]	; (14c0c <z_tick_sleep+0x100>)
   14b88:	f7fe ff94 	bl	13ab4 <z_spin_lock_set_owner>
   14b8c:	68b8      	ldr	r0, [r7, #8]
   14b8e:	4b22      	ldr	r3, [pc, #136]	; (14c18 <z_tick_sleep+0x10c>)
   14b90:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   14b92:	f7ff fced 	bl	14570 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   14b96:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   14b98:	462a      	mov	r2, r5
   14b9a:	4633      	mov	r3, r6
   14b9c:	3018      	adds	r0, #24
   14b9e:	491f      	ldr	r1, [pc, #124]	; (14c1c <z_tick_sleep+0x110>)
   14ba0:	f000 f96c 	bl	14e7c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   14ba4:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14ba6:	4819      	ldr	r0, [pc, #100]	; (14c0c <z_tick_sleep+0x100>)
   14ba8:	7b53      	ldrb	r3, [r2, #13]
   14baa:	f043 0310 	orr.w	r3, r3, #16
   14bae:	7353      	strb	r3, [r2, #13]
   14bb0:	f7fe ff72 	bl	13a98 <z_spin_unlock_valid>
   14bb4:	b940      	cbnz	r0, 14bc8 <z_tick_sleep+0xbc>
   14bb6:	4916      	ldr	r1, [pc, #88]	; (14c10 <z_tick_sleep+0x104>)
   14bb8:	4813      	ldr	r0, [pc, #76]	; (14c08 <z_tick_sleep+0xfc>)
   14bba:	22d0      	movs	r2, #208	; 0xd0
   14bbc:	f003 fa3e 	bl	1803c <assert_print>
   14bc0:	21d0      	movs	r1, #208	; 0xd0
   14bc2:	4813      	ldr	r0, [pc, #76]	; (14c10 <z_tick_sleep+0x104>)
   14bc4:	f003 fa33 	bl	1802e <assert_post_action>
   14bc8:	4640      	mov	r0, r8
   14bca:	f7fc ff3d 	bl	11a48 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   14bce:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   14bd0:	7b5b      	ldrb	r3, [r3, #13]
   14bd2:	06db      	lsls	r3, r3, #27
   14bd4:	d50a      	bpl.n	14bec <z_tick_sleep+0xe0>
   14bd6:	490b      	ldr	r1, [pc, #44]	; (14c04 <z_tick_sleep+0xf8>)
   14bd8:	480b      	ldr	r0, [pc, #44]	; (14c08 <z_tick_sleep+0xfc>)
   14bda:	f240 526f 	movw	r2, #1391	; 0x56f
   14bde:	f003 fa2d 	bl	1803c <assert_print>
   14be2:	f240 516f 	movw	r1, #1391	; 0x56f
   14be6:	4807      	ldr	r0, [pc, #28]	; (14c04 <z_tick_sleep+0xf8>)
   14be8:	f003 fa21 	bl	1802e <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   14bec:	f003 fda2 	bl	18734 <sys_clock_tick_get_32>
   14bf0:	1a20      	subs	r0, r4, r0
   14bf2:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   14bf6:	2801      	cmp	r0, #1
   14bf8:	f173 0300 	sbcs.w	r3, r3, #0
   14bfc:	db9d      	blt.n	14b3a <z_tick_sleep+0x2e>
}
   14bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14c02:	bf00      	nop
   14c04:	00019d03 	.word	0x00019d03
   14c08:	00018ef0 	.word	0x00018ef0
   14c0c:	20000a18 	.word	0x20000a18
   14c10:	00018ec3 	.word	0x00018ec3
   14c14:	200009e4 	.word	0x200009e4
   14c18:	20000a14 	.word	0x20000a14
   14c1c:	000144e1 	.word	0x000144e1

00014c20 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   14c20:	b538      	push	{r3, r4, r5, lr}
   14c22:	4605      	mov	r5, r0
   14c24:	460c      	mov	r4, r1
   14c26:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   14c2a:	b153      	cbz	r3, 14c42 <z_impl_k_sleep+0x22>
   14c2c:	4911      	ldr	r1, [pc, #68]	; (14c74 <z_impl_k_sleep+0x54>)
   14c2e:	4812      	ldr	r0, [pc, #72]	; (14c78 <z_impl_k_sleep+0x58>)
   14c30:	f240 527e 	movw	r2, #1406	; 0x57e
   14c34:	f003 fa02 	bl	1803c <assert_print>
   14c38:	f240 517e 	movw	r1, #1406	; 0x57e
   14c3c:	480d      	ldr	r0, [pc, #52]	; (14c74 <z_impl_k_sleep+0x54>)
   14c3e:	f003 f9f6 	bl	1802e <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   14c42:	f1b4 3fff 	cmp.w	r4, #4294967295
   14c46:	bf08      	it	eq
   14c48:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   14c4c:	d106      	bne.n	14c5c <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
   14c4e:	4b0b      	ldr	r3, [pc, #44]	; (14c7c <z_impl_k_sleep+0x5c>)
   14c50:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   14c52:	f7ff fdd9 	bl	14808 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   14c56:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   14c5a:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   14c5c:	4628      	mov	r0, r5
   14c5e:	4621      	mov	r1, r4
   14c60:	f7ff ff54 	bl	14b0c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   14c64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   14c68:	fb80 0303 	smull	r0, r3, r0, r3
   14c6c:	0bc0      	lsrs	r0, r0, #15
   14c6e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   14c72:	e7f2      	b.n	14c5a <z_impl_k_sleep+0x3a>
   14c74:	00019d03 	.word	0x00019d03
   14c78:	00018ef0 	.word	0x00018ef0
   14c7c:	200009e4 	.word	0x200009e4

00014c80 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   14c80:	4b01      	ldr	r3, [pc, #4]	; (14c88 <z_impl_z_current_get+0x8>)
   14c82:	6898      	ldr	r0, [r3, #8]
   14c84:	4770      	bx	lr
   14c86:	bf00      	nop
   14c88:	200009e4 	.word	0x200009e4

00014c8c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   14c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14c90:	4604      	mov	r4, r0
   14c92:	f04f 0320 	mov.w	r3, #32
   14c96:	f3ef 8611 	mrs	r6, BASEPRI
   14c9a:	f383 8812 	msr	BASEPRI_MAX, r3
   14c9e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14ca2:	483e      	ldr	r0, [pc, #248]	; (14d9c <z_thread_abort+0x110>)
   14ca4:	f7fe feea 	bl	13a7c <z_spin_lock_valid>
   14ca8:	b940      	cbnz	r0, 14cbc <z_thread_abort+0x30>
   14caa:	493d      	ldr	r1, [pc, #244]	; (14da0 <z_thread_abort+0x114>)
   14cac:	483d      	ldr	r0, [pc, #244]	; (14da4 <z_thread_abort+0x118>)
   14cae:	228e      	movs	r2, #142	; 0x8e
   14cb0:	f003 f9c4 	bl	1803c <assert_print>
   14cb4:	218e      	movs	r1, #142	; 0x8e
   14cb6:	483a      	ldr	r0, [pc, #232]	; (14da0 <z_thread_abort+0x114>)
   14cb8:	f003 f9b9 	bl	1802e <assert_post_action>
	z_spin_lock_set_owner(l);
   14cbc:	4837      	ldr	r0, [pc, #220]	; (14d9c <z_thread_abort+0x110>)
   14cbe:	f7fe fef9 	bl	13ab4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   14cc2:	7b63      	ldrb	r3, [r4, #13]
   14cc4:	071a      	lsls	r2, r3, #28
   14cc6:	d512      	bpl.n	14cee <z_thread_abort+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14cc8:	4834      	ldr	r0, [pc, #208]	; (14d9c <z_thread_abort+0x110>)
   14cca:	f7fe fee5 	bl	13a98 <z_spin_unlock_valid>
   14cce:	b940      	cbnz	r0, 14ce2 <z_thread_abort+0x56>
   14cd0:	4933      	ldr	r1, [pc, #204]	; (14da0 <z_thread_abort+0x114>)
   14cd2:	4834      	ldr	r0, [pc, #208]	; (14da4 <z_thread_abort+0x118>)
   14cd4:	22b9      	movs	r2, #185	; 0xb9
   14cd6:	f003 f9b1 	bl	1803c <assert_print>
   14cda:	21b9      	movs	r1, #185	; 0xb9
   14cdc:	4830      	ldr	r0, [pc, #192]	; (14da0 <z_thread_abort+0x114>)
   14cde:	f003 f9a6 	bl	1802e <assert_post_action>
	__asm__ volatile(
   14ce2:	f386 8811 	msr	BASEPRI, r6
   14ce6:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   14cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   14cee:	f023 0220 	bic.w	r2, r3, #32
   14cf2:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   14cf6:	09d2      	lsrs	r2, r2, #7
   14cf8:	d138      	bne.n	14d6c <z_thread_abort+0xe0>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   14cfa:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   14cfc:	68a3      	ldr	r3, [r4, #8]
   14cfe:	b113      	cbz	r3, 14d06 <z_thread_abort+0x7a>
			unpend_thread_no_timeout(thread);
   14d00:	4620      	mov	r0, r4
   14d02:	f7ff fa27 	bl	14154 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   14d06:	f104 0018 	add.w	r0, r4, #24
   14d0a:	f000 f965 	bl	14fd8 <z_abort_timeout>
   14d0e:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   14d12:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   14d16:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14d18:	42bd      	cmp	r5, r7
   14d1a:	d000      	beq.n	14d1e <z_thread_abort+0x92>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   14d1c:	bb85      	cbnz	r5, 14d80 <z_thread_abort+0xf4>
		update_cache(1);
   14d1e:	2001      	movs	r0, #1
   14d20:	f7ff fa36 	bl	14190 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   14d24:	4b20      	ldr	r3, [pc, #128]	; (14da8 <z_thread_abort+0x11c>)
   14d26:	689b      	ldr	r3, [r3, #8]
   14d28:	42a3      	cmp	r3, r4
   14d2a:	d1cd      	bne.n	14cc8 <z_thread_abort+0x3c>
   14d2c:	f3ef 8305 	mrs	r3, IPSR
   14d30:	2b00      	cmp	r3, #0
   14d32:	d1c9      	bne.n	14cc8 <z_thread_abort+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14d34:	4819      	ldr	r0, [pc, #100]	; (14d9c <z_thread_abort+0x110>)
   14d36:	f7fe feaf 	bl	13a98 <z_spin_unlock_valid>
   14d3a:	b940      	cbnz	r0, 14d4e <z_thread_abort+0xc2>
   14d3c:	4918      	ldr	r1, [pc, #96]	; (14da0 <z_thread_abort+0x114>)
   14d3e:	4819      	ldr	r0, [pc, #100]	; (14da4 <z_thread_abort+0x118>)
   14d40:	22d0      	movs	r2, #208	; 0xd0
   14d42:	f003 f97b 	bl	1803c <assert_print>
   14d46:	21d0      	movs	r1, #208	; 0xd0
   14d48:	4815      	ldr	r0, [pc, #84]	; (14da0 <z_thread_abort+0x114>)
   14d4a:	f003 f970 	bl	1802e <assert_post_action>
   14d4e:	4630      	mov	r0, r6
   14d50:	f7fc fe7a 	bl	11a48 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   14d54:	f240 62ac 	movw	r2, #1708	; 0x6ac
   14d58:	4914      	ldr	r1, [pc, #80]	; (14dac <z_thread_abort+0x120>)
   14d5a:	4812      	ldr	r0, [pc, #72]	; (14da4 <z_thread_abort+0x118>)
   14d5c:	f003 f96e 	bl	1803c <assert_print>
   14d60:	f240 61ac 	movw	r1, #1708	; 0x6ac
   14d64:	4811      	ldr	r0, [pc, #68]	; (14dac <z_thread_abort+0x120>)
   14d66:	f003 f962 	bl	1802e <assert_post_action>
   14d6a:	e7ad      	b.n	14cc8 <z_thread_abort+0x3c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14d6c:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   14d70:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   14d74:	4621      	mov	r1, r4
   14d76:	480e      	ldr	r0, [pc, #56]	; (14db0 <z_thread_abort+0x124>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14d78:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   14d7a:	f7ff f9cd 	bl	14118 <z_priq_dumb_remove>
}
   14d7e:	e7bd      	b.n	14cfc <z_thread_abort+0x70>
		unpend_thread_no_timeout(thread);
   14d80:	4628      	mov	r0, r5
   14d82:	f7ff f9e7 	bl	14154 <unpend_thread_no_timeout>
   14d86:	f105 0018 	add.w	r0, r5, #24
   14d8a:	f000 f925 	bl	14fd8 <z_abort_timeout>
		ready_thread(thread);
   14d8e:	4628      	mov	r0, r5
   14d90:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
   14d94:	f7ff fae2 	bl	1435c <ready_thread>
   14d98:	e7bd      	b.n	14d16 <z_thread_abort+0x8a>
   14d9a:	bf00      	nop
   14d9c:	20000a18 	.word	0x20000a18
   14da0:	00018ec3 	.word	0x00018ec3
   14da4:	00018ef0 	.word	0x00018ef0
   14da8:	200009e4 	.word	0x200009e4
   14dac:	00019d03 	.word	0x00019d03
   14db0:	20000a04 	.word	0x20000a04

00014db4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   14db4:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   14db6:	4806      	ldr	r0, [pc, #24]	; (14dd0 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   14db8:	4a06      	ldr	r2, [pc, #24]	; (14dd4 <z_data_copy+0x20>)
   14dba:	4907      	ldr	r1, [pc, #28]	; (14dd8 <z_data_copy+0x24>)
   14dbc:	1a12      	subs	r2, r2, r0
   14dbe:	f003 fc61 	bl	18684 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   14dc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   14dc6:	4a05      	ldr	r2, [pc, #20]	; (14ddc <z_data_copy+0x28>)
   14dc8:	4905      	ldr	r1, [pc, #20]	; (14de0 <z_data_copy+0x2c>)
   14dca:	4806      	ldr	r0, [pc, #24]	; (14de4 <z_data_copy+0x30>)
   14dcc:	f003 bc5a 	b.w	18684 <z_early_memcpy>
   14dd0:	20000000 	.word	0x20000000
   14dd4:	20000130 	.word	0x20000130
   14dd8:	00019d84 	.word	0x00019d84
   14ddc:	00000000 	.word	0x00000000
   14de0:	00019d84 	.word	0x00019d84
   14de4:	20000000 	.word	0x20000000

00014de8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   14de8:	4b03      	ldr	r3, [pc, #12]	; (14df8 <elapsed+0x10>)
   14dea:	681b      	ldr	r3, [r3, #0]
   14dec:	b90b      	cbnz	r3, 14df2 <elapsed+0xa>
   14dee:	f7fe b851 	b.w	12e94 <sys_clock_elapsed>
}
   14df2:	2000      	movs	r0, #0
   14df4:	4770      	bx	lr
   14df6:	bf00      	nop
   14df8:	20000a24 	.word	0x20000a24

00014dfc <next_timeout>:
	return list->head == list;
   14dfc:	4b10      	ldr	r3, [pc, #64]	; (14e40 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   14dfe:	b510      	push	{r4, lr}
   14e00:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14e02:	429c      	cmp	r4, r3
   14e04:	bf08      	it	eq
   14e06:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   14e08:	f7ff ffee 	bl	14de8 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   14e0c:	b1a4      	cbz	r4, 14e38 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   14e0e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   14e12:	1a1b      	subs	r3, r3, r0
   14e14:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   14e18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   14e1c:	f170 0200 	sbcs.w	r2, r0, #0
   14e20:	da0a      	bge.n	14e38 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   14e22:	2800      	cmp	r0, #0
   14e24:	bfac      	ite	ge
   14e26:	4618      	movge	r0, r3
   14e28:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   14e2a:	4b06      	ldr	r3, [pc, #24]	; (14e44 <next_timeout+0x48>)
   14e2c:	691b      	ldr	r3, [r3, #16]
   14e2e:	b113      	cbz	r3, 14e36 <next_timeout+0x3a>
   14e30:	4298      	cmp	r0, r3
   14e32:	bfa8      	it	ge
   14e34:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   14e36:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   14e38:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   14e3c:	e7f5      	b.n	14e2a <next_timeout+0x2e>
   14e3e:	bf00      	nop
   14e40:	20000058 	.word	0x20000058
   14e44:	200009e4 	.word	0x200009e4

00014e48 <remove_timeout>:
{
   14e48:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   14e4a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   14e4c:	b168      	cbz	r0, 14e6a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   14e4e:	4a0a      	ldr	r2, [pc, #40]	; (14e78 <remove_timeout+0x30>)
   14e50:	6852      	ldr	r2, [r2, #4]
   14e52:	4290      	cmp	r0, r2
   14e54:	d009      	beq.n	14e6a <remove_timeout+0x22>
	if (next(t) != NULL) {
   14e56:	b143      	cbz	r3, 14e6a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   14e58:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   14e5c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   14e60:	1912      	adds	r2, r2, r4
   14e62:	eb41 0105 	adc.w	r1, r1, r5
   14e66:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   14e6a:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   14e6c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   14e6e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   14e70:	2300      	movs	r3, #0
	node->prev = NULL;
   14e72:	e9c0 3300 	strd	r3, r3, [r0]
}
   14e76:	bd30      	pop	{r4, r5, pc}
   14e78:	20000058 	.word	0x20000058

00014e7c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   14e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
   14e80:	bf08      	it	eq
   14e82:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   14e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14e8a:	4604      	mov	r4, r0
   14e8c:	460e      	mov	r6, r1
   14e8e:	4698      	mov	r8, r3
   14e90:	4615      	mov	r5, r2
   14e92:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   14e94:	f000 8090 	beq.w	14fb8 <z_add_timeout+0x13c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   14e98:	6803      	ldr	r3, [r0, #0]
   14e9a:	b143      	cbz	r3, 14eae <z_add_timeout+0x32>
   14e9c:	4947      	ldr	r1, [pc, #284]	; (14fbc <z_add_timeout+0x140>)
   14e9e:	4848      	ldr	r0, [pc, #288]	; (14fc0 <z_add_timeout+0x144>)
   14ea0:	2263      	movs	r2, #99	; 0x63
   14ea2:	f003 f8cb 	bl	1803c <assert_print>
   14ea6:	2163      	movs	r1, #99	; 0x63
   14ea8:	4844      	ldr	r0, [pc, #272]	; (14fbc <z_add_timeout+0x140>)
   14eaa:	f003 f8c0 	bl	1802e <assert_post_action>
	to->fn = fn;
   14eae:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
   14eb0:	f04f 0320 	mov.w	r3, #32
   14eb4:	f3ef 8611 	mrs	r6, BASEPRI
   14eb8:	f383 8812 	msr	BASEPRI_MAX, r3
   14ebc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14ec0:	4840      	ldr	r0, [pc, #256]	; (14fc4 <z_add_timeout+0x148>)
   14ec2:	f7fe fddb 	bl	13a7c <z_spin_lock_valid>
   14ec6:	b940      	cbnz	r0, 14eda <z_add_timeout+0x5e>
   14ec8:	493f      	ldr	r1, [pc, #252]	; (14fc8 <z_add_timeout+0x14c>)
   14eca:	483d      	ldr	r0, [pc, #244]	; (14fc0 <z_add_timeout+0x144>)
   14ecc:	228e      	movs	r2, #142	; 0x8e
   14ece:	f003 f8b5 	bl	1803c <assert_print>
   14ed2:	218e      	movs	r1, #142	; 0x8e
   14ed4:	483c      	ldr	r0, [pc, #240]	; (14fc8 <z_add_timeout+0x14c>)
   14ed6:	f003 f8aa 	bl	1802e <assert_post_action>
	z_spin_lock_set_owner(l);
   14eda:	483a      	ldr	r0, [pc, #232]	; (14fc4 <z_add_timeout+0x148>)
   14edc:	f7fe fdea 	bl	13ab4 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   14ee0:	f06f 0201 	mvn.w	r2, #1
   14ee4:	f04f 30ff 	mov.w	r0, #4294967295
   14ee8:	1b53      	subs	r3, r2, r5
   14eea:	eb60 0307 	sbc.w	r3, r0, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   14eee:	2b00      	cmp	r3, #0
   14ef0:	db1b      	blt.n	14f2a <z_add_timeout+0xae>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   14ef2:	4b36      	ldr	r3, [pc, #216]	; (14fcc <z_add_timeout+0x150>)
   14ef4:	e9d3 1300 	ldrd	r1, r3, [r3]
   14ef8:	1a52      	subs	r2, r2, r1
   14efa:	eb60 0303 	sbc.w	r3, r0, r3
   14efe:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   14f00:	eb63 0707 	sbc.w	r7, r3, r7
   14f04:	2d01      	cmp	r5, #1
   14f06:	f177 0300 	sbcs.w	r3, r7, #0
   14f0a:	bfbc      	itt	lt
   14f0c:	2501      	movlt	r5, #1
   14f0e:	2700      	movlt	r7, #0
   14f10:	e9c4 5704 	strd	r5, r7, [r4, #16]
	return list->head == list;
   14f14:	4a2e      	ldr	r2, [pc, #184]	; (14fd0 <z_add_timeout+0x154>)
	sys_dnode_t *const tail = list->tail;
   14f16:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14f1a:	4293      	cmp	r3, r2
   14f1c:	d118      	bne.n	14f50 <z_add_timeout+0xd4>
	node->prev = tail;
   14f1e:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   14f22:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   14f26:	6054      	str	r4, [r2, #4]
}
   14f28:	e026      	b.n	14f78 <z_add_timeout+0xfc>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   14f2a:	f7ff ff5d 	bl	14de8 <elapsed>
   14f2e:	3501      	adds	r5, #1
   14f30:	f148 0800 	adc.w	r8, r8, #0
   14f34:	182d      	adds	r5, r5, r0
   14f36:	eb48 70e0 	adc.w	r0, r8, r0, asr #31
   14f3a:	e9c4 5004 	strd	r5, r0, [r4, #16]
   14f3e:	e7e9      	b.n	14f14 <z_add_timeout+0x98>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   14f40:	1a09      	subs	r1, r1, r0
   14f42:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   14f46:	459c      	cmp	ip, r3
   14f48:	e9c4 1504 	strd	r1, r5, [r4, #16]
   14f4c:	d0e7      	beq.n	14f1e <z_add_timeout+0xa2>
   14f4e:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   14f50:	2b00      	cmp	r3, #0
   14f52:	d0e4      	beq.n	14f1e <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   14f54:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
   14f58:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   14f5c:	4281      	cmp	r1, r0
   14f5e:	eb75 0e07 	sbcs.w	lr, r5, r7
   14f62:	daed      	bge.n	14f40 <z_add_timeout+0xc4>
				t->dticks -= to->dticks;
   14f64:	1a41      	subs	r1, r0, r1
   14f66:	eb67 0505 	sbc.w	r5, r7, r5
   14f6a:	e9c3 1504 	strd	r1, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   14f6e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   14f70:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   14f74:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   14f76:	605c      	str	r4, [r3, #4]
	return list->head == list;
   14f78:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14f7a:	4293      	cmp	r3, r2
   14f7c:	d00b      	beq.n	14f96 <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   14f7e:	429c      	cmp	r4, r3
   14f80:	d109      	bne.n	14f96 <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   14f82:	f7ff ff3b 	bl	14dfc <next_timeout>

			if (next_time == 0 ||
   14f86:	b118      	cbz	r0, 14f90 <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
   14f88:	4b12      	ldr	r3, [pc, #72]	; (14fd4 <z_add_timeout+0x158>)
			if (next_time == 0 ||
   14f8a:	691b      	ldr	r3, [r3, #16]
   14f8c:	4283      	cmp	r3, r0
   14f8e:	d002      	beq.n	14f96 <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
   14f90:	2100      	movs	r1, #0
   14f92:	f7fd fef9 	bl	12d88 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14f96:	480b      	ldr	r0, [pc, #44]	; (14fc4 <z_add_timeout+0x148>)
   14f98:	f7fe fd7e 	bl	13a98 <z_spin_unlock_valid>
   14f9c:	b940      	cbnz	r0, 14fb0 <z_add_timeout+0x134>
   14f9e:	490a      	ldr	r1, [pc, #40]	; (14fc8 <z_add_timeout+0x14c>)
   14fa0:	4807      	ldr	r0, [pc, #28]	; (14fc0 <z_add_timeout+0x144>)
   14fa2:	22b9      	movs	r2, #185	; 0xb9
   14fa4:	f003 f84a 	bl	1803c <assert_print>
   14fa8:	21b9      	movs	r1, #185	; 0xb9
   14faa:	4807      	ldr	r0, [pc, #28]	; (14fc8 <z_add_timeout+0x14c>)
   14fac:	f003 f83f 	bl	1802e <assert_post_action>
	__asm__ volatile(
   14fb0:	f386 8811 	msr	BASEPRI, r6
   14fb4:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   14fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14fbc:	00019d25 	.word	0x00019d25
   14fc0:	00018ef0 	.word	0x00018ef0
   14fc4:	20000a28 	.word	0x20000a28
   14fc8:	00018ec3 	.word	0x00018ec3
   14fcc:	20000230 	.word	0x20000230
   14fd0:	20000058 	.word	0x20000058
   14fd4:	200009e4 	.word	0x200009e4

00014fd8 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   14fd8:	b538      	push	{r3, r4, r5, lr}
   14fda:	4604      	mov	r4, r0
	__asm__ volatile(
   14fdc:	f04f 0320 	mov.w	r3, #32
   14fe0:	f3ef 8511 	mrs	r5, BASEPRI
   14fe4:	f383 8812 	msr	BASEPRI_MAX, r3
   14fe8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14fec:	4815      	ldr	r0, [pc, #84]	; (15044 <z_abort_timeout+0x6c>)
   14fee:	f7fe fd45 	bl	13a7c <z_spin_lock_valid>
   14ff2:	b940      	cbnz	r0, 15006 <z_abort_timeout+0x2e>
   14ff4:	4914      	ldr	r1, [pc, #80]	; (15048 <z_abort_timeout+0x70>)
   14ff6:	4815      	ldr	r0, [pc, #84]	; (1504c <z_abort_timeout+0x74>)
   14ff8:	228e      	movs	r2, #142	; 0x8e
   14ffa:	f003 f81f 	bl	1803c <assert_print>
   14ffe:	218e      	movs	r1, #142	; 0x8e
   15000:	4811      	ldr	r0, [pc, #68]	; (15048 <z_abort_timeout+0x70>)
   15002:	f003 f814 	bl	1802e <assert_post_action>
	z_spin_lock_set_owner(l);
   15006:	480f      	ldr	r0, [pc, #60]	; (15044 <z_abort_timeout+0x6c>)
   15008:	f7fe fd54 	bl	13ab4 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   1500c:	6823      	ldr	r3, [r4, #0]
   1500e:	b1b3      	cbz	r3, 1503e <z_abort_timeout+0x66>
			remove_timeout(to);
   15010:	4620      	mov	r0, r4
   15012:	f7ff ff19 	bl	14e48 <remove_timeout>
			ret = 0;
   15016:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15018:	480a      	ldr	r0, [pc, #40]	; (15044 <z_abort_timeout+0x6c>)
   1501a:	f7fe fd3d 	bl	13a98 <z_spin_unlock_valid>
   1501e:	b940      	cbnz	r0, 15032 <z_abort_timeout+0x5a>
   15020:	4909      	ldr	r1, [pc, #36]	; (15048 <z_abort_timeout+0x70>)
   15022:	480a      	ldr	r0, [pc, #40]	; (1504c <z_abort_timeout+0x74>)
   15024:	22b9      	movs	r2, #185	; 0xb9
   15026:	f003 f809 	bl	1803c <assert_print>
   1502a:	21b9      	movs	r1, #185	; 0xb9
   1502c:	4806      	ldr	r0, [pc, #24]	; (15048 <z_abort_timeout+0x70>)
   1502e:	f002 fffe 	bl	1802e <assert_post_action>
	__asm__ volatile(
   15032:	f385 8811 	msr	BASEPRI, r5
   15036:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   1503a:	4620      	mov	r0, r4
   1503c:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   1503e:	f06f 0415 	mvn.w	r4, #21
   15042:	e7e9      	b.n	15018 <z_abort_timeout+0x40>
   15044:	20000a28 	.word	0x20000a28
   15048:	00018ec3 	.word	0x00018ec3
   1504c:	00018ef0 	.word	0x00018ef0

00015050 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   15050:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   15052:	f04f 0320 	mov.w	r3, #32
   15056:	f3ef 8511 	mrs	r5, BASEPRI
   1505a:	f383 8812 	msr	BASEPRI_MAX, r3
   1505e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15062:	4813      	ldr	r0, [pc, #76]	; (150b0 <z_get_next_timeout_expiry+0x60>)
   15064:	f7fe fd0a 	bl	13a7c <z_spin_lock_valid>
   15068:	b940      	cbnz	r0, 1507c <z_get_next_timeout_expiry+0x2c>
   1506a:	4912      	ldr	r1, [pc, #72]	; (150b4 <z_get_next_timeout_expiry+0x64>)
   1506c:	4812      	ldr	r0, [pc, #72]	; (150b8 <z_get_next_timeout_expiry+0x68>)
   1506e:	228e      	movs	r2, #142	; 0x8e
   15070:	f002 ffe4 	bl	1803c <assert_print>
   15074:	218e      	movs	r1, #142	; 0x8e
   15076:	480f      	ldr	r0, [pc, #60]	; (150b4 <z_get_next_timeout_expiry+0x64>)
   15078:	f002 ffd9 	bl	1802e <assert_post_action>
	z_spin_lock_set_owner(l);
   1507c:	480c      	ldr	r0, [pc, #48]	; (150b0 <z_get_next_timeout_expiry+0x60>)
   1507e:	f7fe fd19 	bl	13ab4 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   15082:	f7ff febb 	bl	14dfc <next_timeout>
   15086:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15088:	4809      	ldr	r0, [pc, #36]	; (150b0 <z_get_next_timeout_expiry+0x60>)
   1508a:	f7fe fd05 	bl	13a98 <z_spin_unlock_valid>
   1508e:	b940      	cbnz	r0, 150a2 <z_get_next_timeout_expiry+0x52>
   15090:	4908      	ldr	r1, [pc, #32]	; (150b4 <z_get_next_timeout_expiry+0x64>)
   15092:	4809      	ldr	r0, [pc, #36]	; (150b8 <z_get_next_timeout_expiry+0x68>)
   15094:	22b9      	movs	r2, #185	; 0xb9
   15096:	f002 ffd1 	bl	1803c <assert_print>
   1509a:	21b9      	movs	r1, #185	; 0xb9
   1509c:	4805      	ldr	r0, [pc, #20]	; (150b4 <z_get_next_timeout_expiry+0x64>)
   1509e:	f002 ffc6 	bl	1802e <assert_post_action>
	__asm__ volatile(
   150a2:	f385 8811 	msr	BASEPRI, r5
   150a6:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   150aa:	4620      	mov	r0, r4
   150ac:	bd38      	pop	{r3, r4, r5, pc}
   150ae:	bf00      	nop
   150b0:	20000a28 	.word	0x20000a28
   150b4:	00018ec3 	.word	0x00018ec3
   150b8:	00018ef0 	.word	0x00018ef0

000150bc <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   150bc:	b570      	push	{r4, r5, r6, lr}
   150be:	4604      	mov	r4, r0
   150c0:	460d      	mov	r5, r1
	__asm__ volatile(
   150c2:	f04f 0320 	mov.w	r3, #32
   150c6:	f3ef 8611 	mrs	r6, BASEPRI
   150ca:	f383 8812 	msr	BASEPRI_MAX, r3
   150ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   150d2:	4816      	ldr	r0, [pc, #88]	; (1512c <z_set_timeout_expiry+0x70>)
   150d4:	f7fe fcd2 	bl	13a7c <z_spin_lock_valid>
   150d8:	b940      	cbnz	r0, 150ec <z_set_timeout_expiry+0x30>
   150da:	4915      	ldr	r1, [pc, #84]	; (15130 <z_set_timeout_expiry+0x74>)
   150dc:	4815      	ldr	r0, [pc, #84]	; (15134 <z_set_timeout_expiry+0x78>)
   150de:	228e      	movs	r2, #142	; 0x8e
   150e0:	f002 ffac 	bl	1803c <assert_print>
   150e4:	218e      	movs	r1, #142	; 0x8e
   150e6:	4812      	ldr	r0, [pc, #72]	; (15130 <z_set_timeout_expiry+0x74>)
   150e8:	f002 ffa1 	bl	1802e <assert_post_action>
	z_spin_lock_set_owner(l);
   150ec:	480f      	ldr	r0, [pc, #60]	; (1512c <z_set_timeout_expiry+0x70>)
   150ee:	f7fe fce1 	bl	13ab4 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   150f2:	f7ff fe83 	bl	14dfc <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   150f6:	2801      	cmp	r0, #1
   150f8:	dd05      	ble.n	15106 <z_set_timeout_expiry+0x4a>
   150fa:	42a0      	cmp	r0, r4
   150fc:	db03      	blt.n	15106 <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   150fe:	4629      	mov	r1, r5
   15100:	4620      	mov	r0, r4
   15102:	f7fd fe41 	bl	12d88 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15106:	4809      	ldr	r0, [pc, #36]	; (1512c <z_set_timeout_expiry+0x70>)
   15108:	f7fe fcc6 	bl	13a98 <z_spin_unlock_valid>
   1510c:	b940      	cbnz	r0, 15120 <z_set_timeout_expiry+0x64>
   1510e:	4908      	ldr	r1, [pc, #32]	; (15130 <z_set_timeout_expiry+0x74>)
   15110:	4808      	ldr	r0, [pc, #32]	; (15134 <z_set_timeout_expiry+0x78>)
   15112:	22b9      	movs	r2, #185	; 0xb9
   15114:	f002 ff92 	bl	1803c <assert_print>
   15118:	21b9      	movs	r1, #185	; 0xb9
   1511a:	4805      	ldr	r0, [pc, #20]	; (15130 <z_set_timeout_expiry+0x74>)
   1511c:	f002 ff87 	bl	1802e <assert_post_action>
	__asm__ volatile(
   15120:	f386 8811 	msr	BASEPRI, r6
   15124:	f3bf 8f6f 	isb	sy
		}
	}
}
   15128:	bd70      	pop	{r4, r5, r6, pc}
   1512a:	bf00      	nop
   1512c:	20000a28 	.word	0x20000a28
   15130:	00018ec3 	.word	0x00018ec3
   15134:	00018ef0 	.word	0x00018ef0

00015138 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   15138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1513c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1513e:	f7ff f8a7 	bl	14290 <z_time_slice>
	__asm__ volatile(
   15142:	f04f 0320 	mov.w	r3, #32
   15146:	f3ef 8511 	mrs	r5, BASEPRI
   1514a:	f383 8812 	msr	BASEPRI_MAX, r3
   1514e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15152:	4842      	ldr	r0, [pc, #264]	; (1525c <sys_clock_announce+0x124>)
   15154:	f7fe fc92 	bl	13a7c <z_spin_lock_valid>
   15158:	b940      	cbnz	r0, 1516c <sys_clock_announce+0x34>
   1515a:	4941      	ldr	r1, [pc, #260]	; (15260 <sys_clock_announce+0x128>)
   1515c:	4841      	ldr	r0, [pc, #260]	; (15264 <sys_clock_announce+0x12c>)
   1515e:	228e      	movs	r2, #142	; 0x8e
   15160:	f002 ff6c 	bl	1803c <assert_print>
   15164:	218e      	movs	r1, #142	; 0x8e
   15166:	483e      	ldr	r0, [pc, #248]	; (15260 <sys_clock_announce+0x128>)
   15168:	f002 ff61 	bl	1802e <assert_post_action>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   1516c:	4f3e      	ldr	r7, [pc, #248]	; (15268 <sys_clock_announce+0x130>)
	z_spin_lock_set_owner(l);
   1516e:	483b      	ldr	r0, [pc, #236]	; (1525c <sys_clock_announce+0x124>)
	return list->head == list;
   15170:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 1526c <sys_clock_announce+0x134>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   15174:	4e3e      	ldr	r6, [pc, #248]	; (15270 <sys_clock_announce+0x138>)
   15176:	f7fe fc9d 	bl	13ab4 <z_spin_lock_set_owner>
	announce_remaining = ticks;
   1517a:	603c      	str	r4, [r7, #0]
   1517c:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   15180:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15182:	4544      	cmp	r4, r8
   15184:	ea4f 70e2 	mov.w	r0, r2, asr #31
		curr_tick += dt;
   15188:	e9d6 1e00 	ldrd	r1, lr, [r6]
   1518c:	d00b      	beq.n	151a6 <sys_clock_announce+0x6e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1518e:	b154      	cbz	r4, 151a6 <sys_clock_announce+0x6e>
   15190:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
   15194:	429a      	cmp	r2, r3
   15196:	eb70 090c 	sbcs.w	r9, r0, ip
   1519a:	da23      	bge.n	151e4 <sys_clock_announce+0xac>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1519c:	1a9b      	subs	r3, r3, r2
   1519e:	eb6c 0c00 	sbc.w	ip, ip, r0
   151a2:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   151a6:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   151a8:	1852      	adds	r2, r2, r1
   151aa:	eb4e 0000 	adc.w	r0, lr, r0
   151ae:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
   151b2:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   151b4:	f7ff fe22 	bl	14dfc <next_timeout>
   151b8:	4621      	mov	r1, r4
   151ba:	f7fd fde5 	bl	12d88 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   151be:	4827      	ldr	r0, [pc, #156]	; (1525c <sys_clock_announce+0x124>)
   151c0:	f7fe fc6a 	bl	13a98 <z_spin_unlock_valid>
   151c4:	b940      	cbnz	r0, 151d8 <sys_clock_announce+0xa0>
   151c6:	4926      	ldr	r1, [pc, #152]	; (15260 <sys_clock_announce+0x128>)
   151c8:	4826      	ldr	r0, [pc, #152]	; (15264 <sys_clock_announce+0x12c>)
   151ca:	22b9      	movs	r2, #185	; 0xb9
   151cc:	f002 ff36 	bl	1803c <assert_print>
   151d0:	21b9      	movs	r1, #185	; 0xb9
   151d2:	4823      	ldr	r0, [pc, #140]	; (15260 <sys_clock_announce+0x128>)
   151d4:	f002 ff2b 	bl	1802e <assert_post_action>
	__asm__ volatile(
   151d8:	f385 8811 	msr	BASEPRI, r5
   151dc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   151e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   151e4:	1859      	adds	r1, r3, r1
   151e6:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
   151ea:	1ad3      	subs	r3, r2, r3
   151ec:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
   151ee:	2200      	movs	r2, #0
   151f0:	2300      	movs	r3, #0
		curr_tick += dt;
   151f2:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
   151f6:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   151fa:	4620      	mov	r0, r4
   151fc:	f7ff fe24 	bl	14e48 <remove_timeout>
   15200:	4816      	ldr	r0, [pc, #88]	; (1525c <sys_clock_announce+0x124>)
   15202:	f7fe fc49 	bl	13a98 <z_spin_unlock_valid>
   15206:	b940      	cbnz	r0, 1521a <sys_clock_announce+0xe2>
   15208:	4915      	ldr	r1, [pc, #84]	; (15260 <sys_clock_announce+0x128>)
   1520a:	4816      	ldr	r0, [pc, #88]	; (15264 <sys_clock_announce+0x12c>)
   1520c:	22b9      	movs	r2, #185	; 0xb9
   1520e:	f002 ff15 	bl	1803c <assert_print>
   15212:	21b9      	movs	r1, #185	; 0xb9
   15214:	4812      	ldr	r0, [pc, #72]	; (15260 <sys_clock_announce+0x128>)
   15216:	f002 ff0a 	bl	1802e <assert_post_action>
   1521a:	f385 8811 	msr	BASEPRI, r5
   1521e:	f3bf 8f6f 	isb	sy
		t->fn(t);
   15222:	4620      	mov	r0, r4
   15224:	68a3      	ldr	r3, [r4, #8]
   15226:	4798      	blx	r3
	__asm__ volatile(
   15228:	f04f 0320 	mov.w	r3, #32
   1522c:	f3ef 8511 	mrs	r5, BASEPRI
   15230:	f383 8812 	msr	BASEPRI_MAX, r3
   15234:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15238:	4808      	ldr	r0, [pc, #32]	; (1525c <sys_clock_announce+0x124>)
   1523a:	f7fe fc1f 	bl	13a7c <z_spin_lock_valid>
   1523e:	b940      	cbnz	r0, 15252 <sys_clock_announce+0x11a>
   15240:	4907      	ldr	r1, [pc, #28]	; (15260 <sys_clock_announce+0x128>)
   15242:	4808      	ldr	r0, [pc, #32]	; (15264 <sys_clock_announce+0x12c>)
   15244:	228e      	movs	r2, #142	; 0x8e
   15246:	f002 fef9 	bl	1803c <assert_print>
   1524a:	218e      	movs	r1, #142	; 0x8e
   1524c:	4804      	ldr	r0, [pc, #16]	; (15260 <sys_clock_announce+0x128>)
   1524e:	f002 feee 	bl	1802e <assert_post_action>
	z_spin_lock_set_owner(l);
   15252:	4802      	ldr	r0, [pc, #8]	; (1525c <sys_clock_announce+0x124>)
   15254:	f7fe fc2e 	bl	13ab4 <z_spin_lock_set_owner>
	return k;
   15258:	e790      	b.n	1517c <sys_clock_announce+0x44>
   1525a:	bf00      	nop
   1525c:	20000a28 	.word	0x20000a28
   15260:	00018ec3 	.word	0x00018ec3
   15264:	00018ef0 	.word	0x00018ef0
   15268:	20000a24 	.word	0x20000a24
   1526c:	20000058 	.word	0x20000058
   15270:	20000230 	.word	0x20000230

00015274 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   15274:	b570      	push	{r4, r5, r6, lr}
   15276:	f04f 0320 	mov.w	r3, #32
   1527a:	f3ef 8611 	mrs	r6, BASEPRI
   1527e:	f383 8812 	msr	BASEPRI_MAX, r3
   15282:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15286:	4816      	ldr	r0, [pc, #88]	; (152e0 <sys_clock_tick_get+0x6c>)
   15288:	f7fe fbf8 	bl	13a7c <z_spin_lock_valid>
   1528c:	b940      	cbnz	r0, 152a0 <sys_clock_tick_get+0x2c>
   1528e:	4915      	ldr	r1, [pc, #84]	; (152e4 <sys_clock_tick_get+0x70>)
   15290:	4815      	ldr	r0, [pc, #84]	; (152e8 <sys_clock_tick_get+0x74>)
   15292:	228e      	movs	r2, #142	; 0x8e
   15294:	f002 fed2 	bl	1803c <assert_print>
   15298:	218e      	movs	r1, #142	; 0x8e
   1529a:	4812      	ldr	r0, [pc, #72]	; (152e4 <sys_clock_tick_get+0x70>)
   1529c:	f002 fec7 	bl	1802e <assert_post_action>
	z_spin_lock_set_owner(l);
   152a0:	480f      	ldr	r0, [pc, #60]	; (152e0 <sys_clock_tick_get+0x6c>)
   152a2:	f7fe fc07 	bl	13ab4 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   152a6:	f7fd fdf5 	bl	12e94 <sys_clock_elapsed>
   152aa:	4b10      	ldr	r3, [pc, #64]	; (152ec <sys_clock_tick_get+0x78>)
   152ac:	e9d3 4500 	ldrd	r4, r5, [r3]
   152b0:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   152b2:	480b      	ldr	r0, [pc, #44]	; (152e0 <sys_clock_tick_get+0x6c>)
   152b4:	f145 0500 	adc.w	r5, r5, #0
   152b8:	f7fe fbee 	bl	13a98 <z_spin_unlock_valid>
   152bc:	b940      	cbnz	r0, 152d0 <sys_clock_tick_get+0x5c>
   152be:	4909      	ldr	r1, [pc, #36]	; (152e4 <sys_clock_tick_get+0x70>)
   152c0:	4809      	ldr	r0, [pc, #36]	; (152e8 <sys_clock_tick_get+0x74>)
   152c2:	22b9      	movs	r2, #185	; 0xb9
   152c4:	f002 feba 	bl	1803c <assert_print>
   152c8:	21b9      	movs	r1, #185	; 0xb9
   152ca:	4806      	ldr	r0, [pc, #24]	; (152e4 <sys_clock_tick_get+0x70>)
   152cc:	f002 feaf 	bl	1802e <assert_post_action>
	__asm__ volatile(
   152d0:	f386 8811 	msr	BASEPRI, r6
   152d4:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   152d8:	4620      	mov	r0, r4
   152da:	4629      	mov	r1, r5
   152dc:	bd70      	pop	{r4, r5, r6, pc}
   152de:	bf00      	nop
   152e0:	20000a28 	.word	0x20000a28
   152e4:	00018ec3 	.word	0x00018ec3
   152e8:	00018ef0 	.word	0x00018ef0
   152ec:	20000230 	.word	0x20000230

000152f0 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   152f0:	4a02      	ldr	r2, [pc, #8]	; (152fc <boot_banner+0xc>)
   152f2:	4903      	ldr	r1, [pc, #12]	; (15300 <boot_banner+0x10>)
   152f4:	4803      	ldr	r0, [pc, #12]	; (15304 <boot_banner+0x14>)
   152f6:	f002 be14 	b.w	17f22 <printk>
   152fa:	bf00      	nop
   152fc:	00018f13 	.word	0x00018f13
   15300:	00019d49 	.word	0x00019d49
   15304:	00019d56 	.word	0x00019d56

00015308 <nrf_cc3xx_platform_init>:
   15308:	b510      	push	{r4, lr}
   1530a:	4c0c      	ldr	r4, [pc, #48]	; (1533c <nrf_cc3xx_platform_init+0x34>)
   1530c:	6823      	ldr	r3, [r4, #0]
   1530e:	b113      	cbz	r3, 15316 <nrf_cc3xx_platform_init+0xe>
   15310:	4b0b      	ldr	r3, [pc, #44]	; (15340 <nrf_cc3xx_platform_init+0x38>)
   15312:	681b      	ldr	r3, [r3, #0]
   15314:	b92b      	cbnz	r3, 15322 <nrf_cc3xx_platform_init+0x1a>
   15316:	f000 fe87 	bl	16028 <CC_LibInit>
   1531a:	b930      	cbnz	r0, 1532a <nrf_cc3xx_platform_init+0x22>
   1531c:	2201      	movs	r2, #1
   1531e:	4b08      	ldr	r3, [pc, #32]	; (15340 <nrf_cc3xx_platform_init+0x38>)
   15320:	601a      	str	r2, [r3, #0]
   15322:	2301      	movs	r3, #1
   15324:	2000      	movs	r0, #0
   15326:	6023      	str	r3, [r4, #0]
   15328:	bd10      	pop	{r4, pc}
   1532a:	3801      	subs	r0, #1
   1532c:	2806      	cmp	r0, #6
   1532e:	d901      	bls.n	15334 <nrf_cc3xx_platform_init+0x2c>
   15330:	4804      	ldr	r0, [pc, #16]	; (15344 <nrf_cc3xx_platform_init+0x3c>)
   15332:	bd10      	pop	{r4, pc}
   15334:	4b04      	ldr	r3, [pc, #16]	; (15348 <nrf_cc3xx_platform_init+0x40>)
   15336:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1533a:	bd10      	pop	{r4, pc}
   1533c:	20000a2c 	.word	0x20000a2c
   15340:	20000a30 	.word	0x20000a30
   15344:	ffff8ffe 	.word	0xffff8ffe
   15348:	00018d08 	.word	0x00018d08

0001534c <nrf_cc3xx_platform_abort>:
   1534c:	f3bf 8f4f 	dsb	sy
   15350:	4905      	ldr	r1, [pc, #20]	; (15368 <nrf_cc3xx_platform_abort+0x1c>)
   15352:	4b06      	ldr	r3, [pc, #24]	; (1536c <nrf_cc3xx_platform_abort+0x20>)
   15354:	68ca      	ldr	r2, [r1, #12]
   15356:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1535a:	4313      	orrs	r3, r2
   1535c:	60cb      	str	r3, [r1, #12]
   1535e:	f3bf 8f4f 	dsb	sy
   15362:	bf00      	nop
   15364:	e7fd      	b.n	15362 <nrf_cc3xx_platform_abort+0x16>
   15366:	bf00      	nop
   15368:	e000ed00 	.word	0xe000ed00
   1536c:	05fa0004 	.word	0x05fa0004

00015370 <CC_PalAbort>:
   15370:	b430      	push	{r4, r5}
   15372:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   15376:	2500      	movs	r5, #0
   15378:	4b07      	ldr	r3, [pc, #28]	; (15398 <CC_PalAbort+0x28>)
   1537a:	4c08      	ldr	r4, [pc, #32]	; (1539c <CC_PalAbort+0x2c>)
   1537c:	4908      	ldr	r1, [pc, #32]	; (153a0 <CC_PalAbort+0x30>)
   1537e:	6849      	ldr	r1, [r1, #4]
   15380:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   15384:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   15388:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1538c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   15390:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
   15394:	bc30      	pop	{r4, r5}
   15396:	4708      	bx	r1
   15398:	50841000 	.word	0x50841000
   1539c:	50840000 	.word	0x50840000
   153a0:	20000060 	.word	0x20000060

000153a4 <nrf_cc3xx_platform_set_abort>:
   153a4:	4b02      	ldr	r3, [pc, #8]	; (153b0 <nrf_cc3xx_platform_set_abort+0xc>)
   153a6:	e9d0 1200 	ldrd	r1, r2, [r0]
   153aa:	e9c3 1200 	strd	r1, r2, [r3]
   153ae:	4770      	bx	lr
   153b0:	20000060 	.word	0x20000060

000153b4 <nrf_cc3xx_platform_ctr_drbg_init>:
   153b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   153b8:	4c14      	ldr	r4, [pc, #80]	; (1540c <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   153ba:	4f15      	ldr	r7, [pc, #84]	; (15410 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   153bc:	2800      	cmp	r0, #0
   153be:	bf18      	it	ne
   153c0:	4604      	movne	r4, r0
   153c2:	6823      	ldr	r3, [r4, #0]
   153c4:	b083      	sub	sp, #12
   153c6:	42bb      	cmp	r3, r7
   153c8:	d01c      	beq.n	15404 <nrf_cc3xx_platform_ctr_drbg_init+0x50>
   153ca:	4616      	mov	r6, r2
   153cc:	460d      	mov	r5, r1
   153ce:	4620      	mov	r0, r4
   153d0:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   153d4:	f104 0904 	add.w	r9, r4, #4
   153d8:	f000 f8da 	bl	15590 <mbedtls_platform_zeroize>
   153dc:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   153e0:	4648      	mov	r0, r9
   153e2:	f000 fd0f 	bl	15e04 <cc_mbedtls_entropy_init>
   153e6:	4640      	mov	r0, r8
   153e8:	f000 fb34 	bl	15a54 <cc_mbedtls_ctr_drbg_init>
   153ec:	462b      	mov	r3, r5
   153ee:	464a      	mov	r2, r9
   153f0:	4640      	mov	r0, r8
   153f2:	4908      	ldr	r1, [pc, #32]	; (15414 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   153f4:	9600      	str	r6, [sp, #0]
   153f6:	f000 fb43 	bl	15a80 <cc_mbedtls_ctr_drbg_seed>
   153fa:	b900      	cbnz	r0, 153fe <nrf_cc3xx_platform_ctr_drbg_init+0x4a>
   153fc:	6027      	str	r7, [r4, #0]
   153fe:	b003      	add	sp, #12
   15400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15404:	2000      	movs	r0, #0
   15406:	b003      	add	sp, #12
   15408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1540c:	20000a34 	.word	0x20000a34
   15410:	5ac9bca5 	.word	0x5ac9bca5
   15414:	00015e81 	.word	0x00015e81

00015418 <nrf_cc3xx_platform_ctr_drbg_get>:
   15418:	b570      	push	{r4, r5, r6, lr}
   1541a:	4d0e      	ldr	r5, [pc, #56]	; (15454 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   1541c:	b082      	sub	sp, #8
   1541e:	2800      	cmp	r0, #0
   15420:	bf14      	ite	ne
   15422:	4684      	movne	ip, r0
   15424:	46ac      	moveq	ip, r5
   15426:	461d      	mov	r5, r3
   15428:	f8dc 0000 	ldr.w	r0, [ip]
   1542c:	4b0a      	ldr	r3, [pc, #40]	; (15458 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   1542e:	4298      	cmp	r0, r3
   15430:	d10d      	bne.n	1544e <nrf_cc3xx_platform_ctr_drbg_get+0x36>
   15432:	2600      	movs	r6, #0
   15434:	f50c 708e 	add.w	r0, ip, #284	; 0x11c
   15438:	4633      	mov	r3, r6
   1543a:	9600      	str	r6, [sp, #0]
   1543c:	4614      	mov	r4, r2
   1543e:	f000 fb6d 	bl	15b1c <cc_mbedtls_ctr_drbg_random_with_add>
   15442:	2800      	cmp	r0, #0
   15444:	bf18      	it	ne
   15446:	4634      	movne	r4, r6
   15448:	602c      	str	r4, [r5, #0]
   1544a:	b002      	add	sp, #8
   1544c:	bd70      	pop	{r4, r5, r6, pc}
   1544e:	4803      	ldr	r0, [pc, #12]	; (1545c <nrf_cc3xx_platform_ctr_drbg_get+0x44>)
   15450:	e7fb      	b.n	1544a <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   15452:	bf00      	nop
   15454:	20000a34 	.word	0x20000a34
   15458:	5ac9bca5 	.word	0x5ac9bca5
   1545c:	ffff8fe8 	.word	0xffff8fe8

00015460 <mutex_free>:
   15460:	b510      	push	{r4, lr}
   15462:	4604      	mov	r4, r0
   15464:	b130      	cbz	r0, 15474 <mutex_free+0x14>
   15466:	6863      	ldr	r3, [r4, #4]
   15468:	06db      	lsls	r3, r3, #27
   1546a:	d502      	bpl.n	15472 <mutex_free+0x12>
   1546c:	2300      	movs	r3, #0
   1546e:	6023      	str	r3, [r4, #0]
   15470:	6063      	str	r3, [r4, #4]
   15472:	bd10      	pop	{r4, pc}
   15474:	4b02      	ldr	r3, [pc, #8]	; (15480 <mutex_free+0x20>)
   15476:	4803      	ldr	r0, [pc, #12]	; (15484 <mutex_free+0x24>)
   15478:	685b      	ldr	r3, [r3, #4]
   1547a:	4798      	blx	r3
   1547c:	e7f3      	b.n	15466 <mutex_free+0x6>
   1547e:	bf00      	nop
   15480:	20000060 	.word	0x20000060
   15484:	00018d24 	.word	0x00018d24

00015488 <mutex_lock>:
   15488:	b1b0      	cbz	r0, 154b8 <mutex_lock+0x30>
   1548a:	6843      	ldr	r3, [r0, #4]
   1548c:	b193      	cbz	r3, 154b4 <mutex_lock+0x2c>
   1548e:	06db      	lsls	r3, r3, #27
   15490:	d50e      	bpl.n	154b0 <mutex_lock+0x28>
   15492:	2301      	movs	r3, #1
   15494:	e850 2f00 	ldrex	r2, [r0]
   15498:	4619      	mov	r1, r3
   1549a:	e840 1c00 	strex	ip, r1, [r0]
   1549e:	f09c 0f00 	teq	ip, #0
   154a2:	d1f7      	bne.n	15494 <mutex_lock+0xc>
   154a4:	2a01      	cmp	r2, #1
   154a6:	d0f5      	beq.n	15494 <mutex_lock+0xc>
   154a8:	f3bf 8f5f 	dmb	sy
   154ac:	2000      	movs	r0, #0
   154ae:	4770      	bx	lr
   154b0:	4803      	ldr	r0, [pc, #12]	; (154c0 <mutex_lock+0x38>)
   154b2:	4770      	bx	lr
   154b4:	4803      	ldr	r0, [pc, #12]	; (154c4 <mutex_lock+0x3c>)
   154b6:	4770      	bx	lr
   154b8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   154bc:	4770      	bx	lr
   154be:	bf00      	nop
   154c0:	ffff8fe9 	.word	0xffff8fe9
   154c4:	ffff8fea 	.word	0xffff8fea

000154c8 <mutex_unlock>:
   154c8:	4603      	mov	r3, r0
   154ca:	b168      	cbz	r0, 154e8 <mutex_unlock+0x20>
   154cc:	6842      	ldr	r2, [r0, #4]
   154ce:	b13a      	cbz	r2, 154e0 <mutex_unlock+0x18>
   154d0:	06d2      	lsls	r2, r2, #27
   154d2:	d507      	bpl.n	154e4 <mutex_unlock+0x1c>
   154d4:	f3bf 8f5f 	dmb	sy
   154d8:	2200      	movs	r2, #0
   154da:	4610      	mov	r0, r2
   154dc:	601a      	str	r2, [r3, #0]
   154de:	4770      	bx	lr
   154e0:	4803      	ldr	r0, [pc, #12]	; (154f0 <mutex_unlock+0x28>)
   154e2:	4770      	bx	lr
   154e4:	4803      	ldr	r0, [pc, #12]	; (154f4 <mutex_unlock+0x2c>)
   154e6:	4770      	bx	lr
   154e8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   154ec:	4770      	bx	lr
   154ee:	bf00      	nop
   154f0:	ffff8fea 	.word	0xffff8fea
   154f4:	ffff8fe9 	.word	0xffff8fe9

000154f8 <mutex_init>:
   154f8:	b510      	push	{r4, lr}
   154fa:	4604      	mov	r4, r0
   154fc:	b120      	cbz	r0, 15508 <mutex_init+0x10>
   154fe:	2200      	movs	r2, #0
   15500:	2311      	movs	r3, #17
   15502:	6022      	str	r2, [r4, #0]
   15504:	6063      	str	r3, [r4, #4]
   15506:	bd10      	pop	{r4, pc}
   15508:	4801      	ldr	r0, [pc, #4]	; (15510 <mutex_init+0x18>)
   1550a:	f7ff ff31 	bl	15370 <CC_PalAbort>
   1550e:	e7f6      	b.n	154fe <mutex_init+0x6>
   15510:	00018d4c 	.word	0x00018d4c

00015514 <nrf_cc3xx_platform_set_mutexes>:
   15514:	b570      	push	{r4, r5, r6, lr}
   15516:	4c16      	ldr	r4, [pc, #88]	; (15570 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   15518:	f8d0 c004 	ldr.w	ip, [r0, #4]
   1551c:	6806      	ldr	r6, [r0, #0]
   1551e:	f8c4 c004 	str.w	ip, [r4, #4]
   15522:	f8d0 c008 	ldr.w	ip, [r0, #8]
   15526:	68c0      	ldr	r0, [r0, #12]
   15528:	f8c4 c008 	str.w	ip, [r4, #8]
   1552c:	60e0      	str	r0, [r4, #12]
   1552e:	6026      	str	r6, [r4, #0]
   15530:	6808      	ldr	r0, [r1, #0]
   15532:	4b10      	ldr	r3, [pc, #64]	; (15574 <nrf_cc3xx_platform_set_mutexes+0x60>)
   15534:	4d10      	ldr	r5, [pc, #64]	; (15578 <nrf_cc3xx_platform_set_mutexes+0x64>)
   15536:	6018      	str	r0, [r3, #0]
   15538:	6848      	ldr	r0, [r1, #4]
   1553a:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
   1553e:	6058      	str	r0, [r3, #4]
   15540:	6888      	ldr	r0, [r1, #8]
   15542:	6098      	str	r0, [r3, #8]
   15544:	68c8      	ldr	r0, [r1, #12]
   15546:	6909      	ldr	r1, [r1, #16]
   15548:	60d8      	str	r0, [r3, #12]
   1554a:	6119      	str	r1, [r3, #16]
   1554c:	06d3      	lsls	r3, r2, #27
   1554e:	d50d      	bpl.n	1556c <nrf_cc3xx_platform_set_mutexes+0x58>
   15550:	2300      	movs	r3, #0
   15552:	f505 708a 	add.w	r0, r5, #276	; 0x114
   15556:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
   1555a:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
   1555e:	47b0      	blx	r6
   15560:	6823      	ldr	r3, [r4, #0]
   15562:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   15566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1556a:	4718      	bx	r3
   1556c:	bd70      	pop	{r4, r5, r6, pc}
   1556e:	bf00      	nop
   15570:	20000070 	.word	0x20000070
   15574:	20000080 	.word	0x20000080
   15578:	20000a34 	.word	0x20000a34

0001557c <mbedtls_zeroize_internal>:
   1557c:	b138      	cbz	r0, 1558e <mbedtls_zeroize_internal+0x12>
   1557e:	b131      	cbz	r1, 1558e <mbedtls_zeroize_internal+0x12>
   15580:	2200      	movs	r2, #0
   15582:	4401      	add	r1, r0
   15584:	4603      	mov	r3, r0
   15586:	3001      	adds	r0, #1
   15588:	4281      	cmp	r1, r0
   1558a:	701a      	strb	r2, [r3, #0]
   1558c:	d1fa      	bne.n	15584 <mbedtls_zeroize_internal+0x8>
   1558e:	4770      	bx	lr

00015590 <mbedtls_platform_zeroize>:
   15590:	b138      	cbz	r0, 155a2 <mbedtls_platform_zeroize+0x12>
   15592:	b131      	cbz	r1, 155a2 <mbedtls_platform_zeroize+0x12>
   15594:	2200      	movs	r2, #0
   15596:	4401      	add	r1, r0
   15598:	4603      	mov	r3, r0
   1559a:	3001      	adds	r0, #1
   1559c:	4288      	cmp	r0, r1
   1559e:	701a      	strb	r2, [r3, #0]
   155a0:	d1fa      	bne.n	15598 <mbedtls_platform_zeroize+0x8>
   155a2:	4770      	bx	lr

000155a4 <block_cipher_df>:
   155a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155a8:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   155ac:	b0b3      	sub	sp, #204	; 0xcc
   155ae:	9001      	str	r0, [sp, #4]
   155b0:	f200 8141 	bhi.w	15836 <block_cipher_df+0x292>
   155b4:	4614      	mov	r4, r2
   155b6:	460d      	mov	r5, r1
   155b8:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   155bc:	2100      	movs	r1, #0
   155be:	f10d 0a54 	add.w	sl, sp, #84	; 0x54
   155c2:	489e      	ldr	r0, [pc, #632]	; (1583c <block_cipher_df+0x298>)
   155c4:	f002 fe19 	bl	181fa <memset>
   155c8:	4650      	mov	r0, sl
   155ca:	f001 f9c7 	bl	1695c <cc_mbedtls_aes_init>
   155ce:	2300      	movs	r3, #0
   155d0:	489a      	ldr	r0, [pc, #616]	; (1583c <block_cipher_df+0x298>)
   155d2:	4629      	mov	r1, r5
   155d4:	8203      	strh	r3, [r0, #16]
   155d6:	2320      	movs	r3, #32
   155d8:	4605      	mov	r5, r0
   155da:	75c3      	strb	r3, [r0, #23]
   155dc:	ba63      	rev16	r3, r4
   155de:	8243      	strh	r3, [r0, #18]
   155e0:	4622      	mov	r2, r4
   155e2:	3018      	adds	r0, #24
   155e4:	f002 fdfe 	bl	181e4 <memcpy>
   155e8:	462b      	mov	r3, r5
   155ea:	2280      	movs	r2, #128	; 0x80
   155ec:	4423      	add	r3, r4
   155ee:	761a      	strb	r2, [r3, #24]
   155f0:	4b93      	ldr	r3, [pc, #588]	; (15840 <block_cipher_df+0x29c>)
   155f2:	4650      	mov	r0, sl
   155f4:	9309      	str	r3, [sp, #36]	; 0x24
   155f6:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   155fa:	930a      	str	r3, [sp, #40]	; 0x28
   155fc:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   15600:	930b      	str	r3, [sp, #44]	; 0x2c
   15602:	a909      	add	r1, sp, #36	; 0x24
   15604:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   15608:	930c      	str	r3, [sp, #48]	; 0x30
   1560a:	f001 f9bd 	bl	16988 <cc_mbedtls_aes_setkey_enc>
   1560e:	4605      	mov	r5, r0
   15610:	2800      	cmp	r0, #0
   15612:	f040 80ee 	bne.w	157f2 <block_cipher_df+0x24e>
   15616:	f104 0319 	add.w	r3, r4, #25
   1561a:	9302      	str	r3, [sp, #8]
   1561c:	ab0d      	add	r3, sp, #52	; 0x34
   1561e:	9300      	str	r3, [sp, #0]
   15620:	9303      	str	r3, [sp, #12]
   15622:	f10d 0910 	add.w	r9, sp, #16
   15626:	2210      	movs	r2, #16
   15628:	2100      	movs	r1, #0
   1562a:	4648      	mov	r0, r9
   1562c:	f002 fde5 	bl	181fa <memset>
   15630:	4c84      	ldr	r4, [pc, #528]	; (15844 <block_cipher_df+0x2a0>)
   15632:	f8dd 8008 	ldr.w	r8, [sp, #8]
   15636:	2500      	movs	r5, #0
   15638:	462e      	mov	r6, r5
   1563a:	f814 7c08 	ldrb.w	r7, [r4, #-8]
   1563e:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   15642:	f89d b018 	ldrb.w	fp, [sp, #24]
   15646:	f89d c019 	ldrb.w	ip, [sp, #25]
   1564a:	ea8b 0b07 	eor.w	fp, fp, r7
   1564e:	ea8c 0c03 	eor.w	ip, ip, r3
   15652:	f814 7c06 	ldrb.w	r7, [r4, #-6]
   15656:	f89d 301a 	ldrb.w	r3, [sp, #26]
   1565a:	f814 2c04 	ldrb.w	r2, [r4, #-4]
   1565e:	407b      	eors	r3, r7
   15660:	462f      	mov	r7, r5
   15662:	f36b 0507 	bfi	r5, fp, #0, #8
   15666:	f814 ec10 	ldrb.w	lr, [r4, #-16]
   1566a:	f814 1c0c 	ldrb.w	r1, [r4, #-12]
   1566e:	f36c 250f 	bfi	r5, ip, #8, #8
   15672:	f363 4517 	bfi	r5, r3, #16, #8
   15676:	f814 cc05 	ldrb.w	ip, [r4, #-5]
   1567a:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1567e:	f814 bc0f 	ldrb.w	fp, [r4, #-15]
   15682:	ea83 030c 	eor.w	r3, r3, ip
   15686:	46b4      	mov	ip, r6
   15688:	f363 651f 	bfi	r5, r3, #24, #8
   1568c:	f89d 3010 	ldrb.w	r3, [sp, #16]
   15690:	f89d 001c 	ldrb.w	r0, [sp, #28]
   15694:	ea83 0e0e 	eor.w	lr, r3, lr
   15698:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1569c:	f36e 0607 	bfi	r6, lr, #0, #8
   156a0:	ea83 030b 	eor.w	r3, r3, fp
   156a4:	f89d e012 	ldrb.w	lr, [sp, #18]
   156a8:	f363 260f 	bfi	r6, r3, #8, #8
   156ac:	f814 3c0e 	ldrb.w	r3, [r4, #-14]
   156b0:	f814 bc0d 	ldrb.w	fp, [r4, #-13]
   156b4:	ea8e 0e03 	eor.w	lr, lr, r3
   156b8:	f89d 3013 	ldrb.w	r3, [sp, #19]
   156bc:	f36e 4617 	bfi	r6, lr, #16, #8
   156c0:	ea83 030b 	eor.w	r3, r3, fp
   156c4:	f89d e014 	ldrb.w	lr, [sp, #20]
   156c8:	f89d b015 	ldrb.w	fp, [sp, #21]
   156cc:	f363 661f 	bfi	r6, r3, #24, #8
   156d0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   156d4:	ea8e 0101 	eor.w	r1, lr, r1
   156d8:	4050      	eors	r0, r2
   156da:	ea8b 0303 	eor.w	r3, fp, r3
   156de:	f814 ec03 	ldrb.w	lr, [r4, #-3]
   156e2:	f89d 201d 	ldrb.w	r2, [sp, #29]
   156e6:	f361 0c07 	bfi	ip, r1, #0, #8
   156ea:	f89d b01e 	ldrb.w	fp, [sp, #30]
   156ee:	f89d 1016 	ldrb.w	r1, [sp, #22]
   156f2:	f360 0707 	bfi	r7, r0, #0, #8
   156f6:	f363 2c0f 	bfi	ip, r3, #8, #8
   156fa:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   156fe:	f814 3c0a 	ldrb.w	r3, [r4, #-10]
   15702:	ea82 020e 	eor.w	r2, r2, lr
   15706:	ea8b 0000 	eor.w	r0, fp, r0
   1570a:	4059      	eors	r1, r3
   1570c:	f362 270f 	bfi	r7, r2, #8, #8
   15710:	f89d 3017 	ldrb.w	r3, [sp, #23]
   15714:	f89d 201f 	ldrb.w	r2, [sp, #31]
   15718:	f814 bc01 	ldrb.w	fp, [r4, #-1]
   1571c:	f814 ec09 	ldrb.w	lr, [r4, #-9]
   15720:	f360 4717 	bfi	r7, r0, #16, #8
   15724:	ea82 020b 	eor.w	r2, r2, fp
   15728:	f361 4c17 	bfi	ip, r1, #16, #8
   1572c:	ea83 030e 	eor.w	r3, r3, lr
   15730:	f1b8 0f10 	cmp.w	r8, #16
   15734:	f362 671f 	bfi	r7, r2, #24, #8
   15738:	f363 6c1f 	bfi	ip, r3, #24, #8
   1573c:	464a      	mov	r2, r9
   1573e:	464b      	mov	r3, r9
   15740:	f04f 0101 	mov.w	r1, #1
   15744:	4650      	mov	r0, sl
   15746:	f104 0410 	add.w	r4, r4, #16
   1574a:	e9cd 6c04 	strd	r6, ip, [sp, #16]
   1574e:	bf94      	ite	ls
   15750:	eba8 0808 	subls.w	r8, r8, r8
   15754:	f1a8 0810 	subhi.w	r8, r8, #16
   15758:	e9cd 5706 	strd	r5, r7, [sp, #24]
   1575c:	f001 f92e 	bl	169bc <cc_mbedtls_aes_crypt_ecb>
   15760:	2800      	cmp	r0, #0
   15762:	d166      	bne.n	15832 <block_cipher_df+0x28e>
   15764:	f1b8 0f00 	cmp.w	r8, #0
   15768:	f47f af65 	bne.w	15636 <block_cipher_df+0x92>
   1576c:	9c03      	ldr	r4, [sp, #12]
   1576e:	2210      	movs	r2, #16
   15770:	4620      	mov	r0, r4
   15772:	4649      	mov	r1, r9
   15774:	3410      	adds	r4, #16
   15776:	9403      	str	r4, [sp, #12]
   15778:	f002 fd34 	bl	181e4 <memcpy>
   1577c:	4a2f      	ldr	r2, [pc, #188]	; (1583c <block_cipher_df+0x298>)
   1577e:	4554      	cmp	r4, sl
   15780:	78d3      	ldrb	r3, [r2, #3]
   15782:	f103 0301 	add.w	r3, r3, #1
   15786:	70d3      	strb	r3, [r2, #3]
   15788:	f47f af4d 	bne.w	15626 <block_cipher_df+0x82>
   1578c:	2280      	movs	r2, #128	; 0x80
   1578e:	4650      	mov	r0, sl
   15790:	9900      	ldr	r1, [sp, #0]
   15792:	f001 f8f9 	bl	16988 <cc_mbedtls_aes_setkey_enc>
   15796:	4605      	mov	r5, r0
   15798:	bb78      	cbnz	r0, 157fa <block_cipher_df+0x256>
   1579a:	9b01      	ldr	r3, [sp, #4]
   1579c:	461c      	mov	r4, r3
   1579e:	f103 0620 	add.w	r6, r3, #32
   157a2:	ab11      	add	r3, sp, #68	; 0x44
   157a4:	461a      	mov	r2, r3
   157a6:	2101      	movs	r1, #1
   157a8:	4650      	mov	r0, sl
   157aa:	f001 f907 	bl	169bc <cc_mbedtls_aes_crypt_ecb>
   157ae:	4605      	mov	r5, r0
   157b0:	bb18      	cbnz	r0, 157fa <block_cipher_df+0x256>
   157b2:	4620      	mov	r0, r4
   157b4:	2210      	movs	r2, #16
   157b6:	a911      	add	r1, sp, #68	; 0x44
   157b8:	3410      	adds	r4, #16
   157ba:	f002 fd13 	bl	181e4 <memcpy>
   157be:	42b4      	cmp	r4, r6
   157c0:	d1ef      	bne.n	157a2 <block_cipher_df+0x1fe>
   157c2:	4650      	mov	r0, sl
   157c4:	f001 f8da 	bl	1697c <cc_mbedtls_aes_free>
   157c8:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   157cc:	481b      	ldr	r0, [pc, #108]	; (1583c <block_cipher_df+0x298>)
   157ce:	f7ff fedf 	bl	15590 <mbedtls_platform_zeroize>
   157d2:	9800      	ldr	r0, [sp, #0]
   157d4:	2120      	movs	r1, #32
   157d6:	f7ff fedb 	bl	15590 <mbedtls_platform_zeroize>
   157da:	a809      	add	r0, sp, #36	; 0x24
   157dc:	2110      	movs	r1, #16
   157de:	f7ff fed7 	bl	15590 <mbedtls_platform_zeroize>
   157e2:	4648      	mov	r0, r9
   157e4:	2110      	movs	r1, #16
   157e6:	f7ff fed3 	bl	15590 <mbedtls_platform_zeroize>
   157ea:	4628      	mov	r0, r5
   157ec:	b033      	add	sp, #204	; 0xcc
   157ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157f2:	ab0d      	add	r3, sp, #52	; 0x34
   157f4:	9300      	str	r3, [sp, #0]
   157f6:	f10d 0910 	add.w	r9, sp, #16
   157fa:	4650      	mov	r0, sl
   157fc:	f001 f8be 	bl	1697c <cc_mbedtls_aes_free>
   15800:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   15804:	480d      	ldr	r0, [pc, #52]	; (1583c <block_cipher_df+0x298>)
   15806:	f7ff fec3 	bl	15590 <mbedtls_platform_zeroize>
   1580a:	2120      	movs	r1, #32
   1580c:	9800      	ldr	r0, [sp, #0]
   1580e:	f7ff febf 	bl	15590 <mbedtls_platform_zeroize>
   15812:	2110      	movs	r1, #16
   15814:	a809      	add	r0, sp, #36	; 0x24
   15816:	f7ff febb 	bl	15590 <mbedtls_platform_zeroize>
   1581a:	4648      	mov	r0, r9
   1581c:	2110      	movs	r1, #16
   1581e:	f7ff feb7 	bl	15590 <mbedtls_platform_zeroize>
   15822:	2120      	movs	r1, #32
   15824:	9801      	ldr	r0, [sp, #4]
   15826:	f7ff feb3 	bl	15590 <mbedtls_platform_zeroize>
   1582a:	4628      	mov	r0, r5
   1582c:	b033      	add	sp, #204	; 0xcc
   1582e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15832:	4605      	mov	r5, r0
   15834:	e7e1      	b.n	157fa <block_cipher_df+0x256>
   15836:	f06f 0537 	mvn.w	r5, #55	; 0x37
   1583a:	e7f6      	b.n	1582a <block_cipher_df+0x286>
   1583c:	20000c04 	.word	0x20000c04
   15840:	03020100 	.word	0x03020100
   15844:	20000c14 	.word	0x20000c14

00015848 <ctr_drbg_update_internal>:
   15848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1584c:	b088      	sub	sp, #32
   1584e:	4604      	mov	r4, r0
   15850:	460d      	mov	r5, r1
   15852:	2220      	movs	r2, #32
   15854:	2100      	movs	r1, #0
   15856:	4668      	mov	r0, sp
   15858:	466f      	mov	r7, sp
   1585a:	f002 fcce 	bl	181fa <memset>
   1585e:	f104 0620 	add.w	r6, r4, #32
   15862:	7be2      	ldrb	r2, [r4, #15]
   15864:	3201      	adds	r2, #1
   15866:	b2d2      	uxtb	r2, r2
   15868:	73e2      	strb	r2, [r4, #15]
   1586a:	2a00      	cmp	r2, #0
   1586c:	d14d      	bne.n	1590a <ctr_drbg_update_internal+0xc2>
   1586e:	7ba2      	ldrb	r2, [r4, #14]
   15870:	3201      	adds	r2, #1
   15872:	b2d2      	uxtb	r2, r2
   15874:	73a2      	strb	r2, [r4, #14]
   15876:	2a00      	cmp	r2, #0
   15878:	d147      	bne.n	1590a <ctr_drbg_update_internal+0xc2>
   1587a:	7b63      	ldrb	r3, [r4, #13]
   1587c:	3301      	adds	r3, #1
   1587e:	b2db      	uxtb	r3, r3
   15880:	7363      	strb	r3, [r4, #13]
   15882:	2b00      	cmp	r3, #0
   15884:	d141      	bne.n	1590a <ctr_drbg_update_internal+0xc2>
   15886:	7b23      	ldrb	r3, [r4, #12]
   15888:	3301      	adds	r3, #1
   1588a:	b2db      	uxtb	r3, r3
   1588c:	7323      	strb	r3, [r4, #12]
   1588e:	2b00      	cmp	r3, #0
   15890:	d13b      	bne.n	1590a <ctr_drbg_update_internal+0xc2>
   15892:	7ae3      	ldrb	r3, [r4, #11]
   15894:	3301      	adds	r3, #1
   15896:	b2db      	uxtb	r3, r3
   15898:	72e3      	strb	r3, [r4, #11]
   1589a:	2b00      	cmp	r3, #0
   1589c:	d135      	bne.n	1590a <ctr_drbg_update_internal+0xc2>
   1589e:	7aa3      	ldrb	r3, [r4, #10]
   158a0:	3301      	adds	r3, #1
   158a2:	b2db      	uxtb	r3, r3
   158a4:	72a3      	strb	r3, [r4, #10]
   158a6:	2b00      	cmp	r3, #0
   158a8:	d12f      	bne.n	1590a <ctr_drbg_update_internal+0xc2>
   158aa:	7a63      	ldrb	r3, [r4, #9]
   158ac:	3301      	adds	r3, #1
   158ae:	b2db      	uxtb	r3, r3
   158b0:	7263      	strb	r3, [r4, #9]
   158b2:	bb53      	cbnz	r3, 1590a <ctr_drbg_update_internal+0xc2>
   158b4:	7a23      	ldrb	r3, [r4, #8]
   158b6:	3301      	adds	r3, #1
   158b8:	b2db      	uxtb	r3, r3
   158ba:	7223      	strb	r3, [r4, #8]
   158bc:	bb2b      	cbnz	r3, 1590a <ctr_drbg_update_internal+0xc2>
   158be:	79e3      	ldrb	r3, [r4, #7]
   158c0:	3301      	adds	r3, #1
   158c2:	b2db      	uxtb	r3, r3
   158c4:	71e3      	strb	r3, [r4, #7]
   158c6:	bb03      	cbnz	r3, 1590a <ctr_drbg_update_internal+0xc2>
   158c8:	79a3      	ldrb	r3, [r4, #6]
   158ca:	3301      	adds	r3, #1
   158cc:	b2db      	uxtb	r3, r3
   158ce:	71a3      	strb	r3, [r4, #6]
   158d0:	b9db      	cbnz	r3, 1590a <ctr_drbg_update_internal+0xc2>
   158d2:	7963      	ldrb	r3, [r4, #5]
   158d4:	3301      	adds	r3, #1
   158d6:	b2db      	uxtb	r3, r3
   158d8:	7163      	strb	r3, [r4, #5]
   158da:	b9b3      	cbnz	r3, 1590a <ctr_drbg_update_internal+0xc2>
   158dc:	7923      	ldrb	r3, [r4, #4]
   158de:	3301      	adds	r3, #1
   158e0:	b2db      	uxtb	r3, r3
   158e2:	7123      	strb	r3, [r4, #4]
   158e4:	b98b      	cbnz	r3, 1590a <ctr_drbg_update_internal+0xc2>
   158e6:	78e3      	ldrb	r3, [r4, #3]
   158e8:	3301      	adds	r3, #1
   158ea:	b2db      	uxtb	r3, r3
   158ec:	70e3      	strb	r3, [r4, #3]
   158ee:	b963      	cbnz	r3, 1590a <ctr_drbg_update_internal+0xc2>
   158f0:	78a3      	ldrb	r3, [r4, #2]
   158f2:	3301      	adds	r3, #1
   158f4:	b2db      	uxtb	r3, r3
   158f6:	70a3      	strb	r3, [r4, #2]
   158f8:	b93b      	cbnz	r3, 1590a <ctr_drbg_update_internal+0xc2>
   158fa:	7863      	ldrb	r3, [r4, #1]
   158fc:	3301      	adds	r3, #1
   158fe:	b2db      	uxtb	r3, r3
   15900:	7063      	strb	r3, [r4, #1]
   15902:	b913      	cbnz	r3, 1590a <ctr_drbg_update_internal+0xc2>
   15904:	7823      	ldrb	r3, [r4, #0]
   15906:	3301      	adds	r3, #1
   15908:	7023      	strb	r3, [r4, #0]
   1590a:	463b      	mov	r3, r7
   1590c:	4622      	mov	r2, r4
   1590e:	2101      	movs	r1, #1
   15910:	4630      	mov	r0, r6
   15912:	f001 f853 	bl	169bc <cc_mbedtls_aes_crypt_ecb>
   15916:	4680      	mov	r8, r0
   15918:	bb50      	cbnz	r0, 15970 <ctr_drbg_update_internal+0x128>
   1591a:	3710      	adds	r7, #16
   1591c:	ab08      	add	r3, sp, #32
   1591e:	429f      	cmp	r7, r3
   15920:	d19f      	bne.n	15862 <ctr_drbg_update_internal+0x1a>
   15922:	9a00      	ldr	r2, [sp, #0]
   15924:	682b      	ldr	r3, [r5, #0]
   15926:	9906      	ldr	r1, [sp, #24]
   15928:	4053      	eors	r3, r2
   1592a:	9300      	str	r3, [sp, #0]
   1592c:	9a01      	ldr	r2, [sp, #4]
   1592e:	686b      	ldr	r3, [r5, #4]
   15930:	4630      	mov	r0, r6
   15932:	4053      	eors	r3, r2
   15934:	9301      	str	r3, [sp, #4]
   15936:	9a02      	ldr	r2, [sp, #8]
   15938:	68ab      	ldr	r3, [r5, #8]
   1593a:	4053      	eors	r3, r2
   1593c:	9302      	str	r3, [sp, #8]
   1593e:	9a03      	ldr	r2, [sp, #12]
   15940:	68eb      	ldr	r3, [r5, #12]
   15942:	4053      	eors	r3, r2
   15944:	9303      	str	r3, [sp, #12]
   15946:	9a04      	ldr	r2, [sp, #16]
   15948:	692b      	ldr	r3, [r5, #16]
   1594a:	4053      	eors	r3, r2
   1594c:	9304      	str	r3, [sp, #16]
   1594e:	9a05      	ldr	r2, [sp, #20]
   15950:	696b      	ldr	r3, [r5, #20]
   15952:	4053      	eors	r3, r2
   15954:	69aa      	ldr	r2, [r5, #24]
   15956:	9305      	str	r3, [sp, #20]
   15958:	404a      	eors	r2, r1
   1595a:	69eb      	ldr	r3, [r5, #28]
   1595c:	9206      	str	r2, [sp, #24]
   1595e:	9a07      	ldr	r2, [sp, #28]
   15960:	4669      	mov	r1, sp
   15962:	4053      	eors	r3, r2
   15964:	2280      	movs	r2, #128	; 0x80
   15966:	9307      	str	r3, [sp, #28]
   15968:	f001 f80e 	bl	16988 <cc_mbedtls_aes_setkey_enc>
   1596c:	4680      	mov	r8, r0
   1596e:	b138      	cbz	r0, 15980 <ctr_drbg_update_internal+0x138>
   15970:	4668      	mov	r0, sp
   15972:	2120      	movs	r1, #32
   15974:	f7ff fe0c 	bl	15590 <mbedtls_platform_zeroize>
   15978:	4640      	mov	r0, r8
   1597a:	b008      	add	sp, #32
   1597c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15980:	2210      	movs	r2, #16
   15982:	4620      	mov	r0, r4
   15984:	eb0d 0102 	add.w	r1, sp, r2
   15988:	f002 fc2c 	bl	181e4 <memcpy>
   1598c:	e7f0      	b.n	15970 <ctr_drbg_update_internal+0x128>
   1598e:	bf00      	nop

00015990 <mbedtls_ctr_drbg_reseed_internal>:
   15990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15994:	461d      	mov	r5, r3
   15996:	6983      	ldr	r3, [r0, #24]
   15998:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   1599c:	d852      	bhi.n	15a44 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1599e:	4616      	mov	r6, r2
   159a0:	f5c3 72c0 	rsb	r2, r3, #384	; 0x180
   159a4:	42aa      	cmp	r2, r5
   159a6:	d34d      	bcc.n	15a44 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   159a8:	f5c5 72c0 	rsb	r2, r5, #384	; 0x180
   159ac:	1ad3      	subs	r3, r2, r3
   159ae:	42b3      	cmp	r3, r6
   159b0:	d348      	bcc.n	15a44 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   159b2:	4604      	mov	r4, r0
   159b4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 15a50 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   159b8:	f44f 72c0 	mov.w	r2, #384	; 0x180
   159bc:	460f      	mov	r7, r1
   159be:	4648      	mov	r0, r9
   159c0:	2100      	movs	r1, #0
   159c2:	f002 fc1a 	bl	181fa <memset>
   159c6:	4649      	mov	r1, r9
   159c8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   159cc:	69a2      	ldr	r2, [r4, #24]
   159ce:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   159d2:	4798      	blx	r3
   159d4:	2800      	cmp	r0, #0
   159d6:	d138      	bne.n	15a4a <mbedtls_ctr_drbg_reseed_internal+0xba>
   159d8:	f8d4 8018 	ldr.w	r8, [r4, #24]
   159dc:	b13d      	cbz	r5, 159ee <mbedtls_ctr_drbg_reseed_internal+0x5e>
   159de:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   159e2:	462a      	mov	r2, r5
   159e4:	eb09 0108 	add.w	r1, r9, r8
   159e8:	4798      	blx	r3
   159ea:	bb70      	cbnz	r0, 15a4a <mbedtls_ctr_drbg_reseed_internal+0xba>
   159ec:	44a8      	add	r8, r5
   159ee:	b107      	cbz	r7, 159f2 <mbedtls_ctr_drbg_reseed_internal+0x62>
   159f0:	b9c6      	cbnz	r6, 15a24 <mbedtls_ctr_drbg_reseed_internal+0x94>
   159f2:	4917      	ldr	r1, [pc, #92]	; (15a50 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   159f4:	4642      	mov	r2, r8
   159f6:	4608      	mov	r0, r1
   159f8:	f7ff fdd4 	bl	155a4 <block_cipher_df>
   159fc:	4605      	mov	r5, r0
   159fe:	b138      	cbz	r0, 15a10 <mbedtls_ctr_drbg_reseed_internal+0x80>
   15a00:	f44f 71c0 	mov.w	r1, #384	; 0x180
   15a04:	4812      	ldr	r0, [pc, #72]	; (15a50 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   15a06:	f7ff fdc3 	bl	15590 <mbedtls_platform_zeroize>
   15a0a:	4628      	mov	r0, r5
   15a0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15a10:	4620      	mov	r0, r4
   15a12:	490f      	ldr	r1, [pc, #60]	; (15a50 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   15a14:	f7ff ff18 	bl	15848 <ctr_drbg_update_internal>
   15a18:	4605      	mov	r5, r0
   15a1a:	2800      	cmp	r0, #0
   15a1c:	d1f0      	bne.n	15a00 <mbedtls_ctr_drbg_reseed_internal+0x70>
   15a1e:	2301      	movs	r3, #1
   15a20:	6123      	str	r3, [r4, #16]
   15a22:	e7ed      	b.n	15a00 <mbedtls_ctr_drbg_reseed_internal+0x70>
   15a24:	4639      	mov	r1, r7
   15a26:	4632      	mov	r2, r6
   15a28:	eb09 0008 	add.w	r0, r9, r8
   15a2c:	f002 fbda 	bl	181e4 <memcpy>
   15a30:	4907      	ldr	r1, [pc, #28]	; (15a50 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   15a32:	44b0      	add	r8, r6
   15a34:	4642      	mov	r2, r8
   15a36:	4608      	mov	r0, r1
   15a38:	f7ff fdb4 	bl	155a4 <block_cipher_df>
   15a3c:	4605      	mov	r5, r0
   15a3e:	2800      	cmp	r0, #0
   15a40:	d1de      	bne.n	15a00 <mbedtls_ctr_drbg_reseed_internal+0x70>
   15a42:	e7e5      	b.n	15a10 <mbedtls_ctr_drbg_reseed_internal+0x80>
   15a44:	f06f 0537 	mvn.w	r5, #55	; 0x37
   15a48:	e7df      	b.n	15a0a <mbedtls_ctr_drbg_reseed_internal+0x7a>
   15a4a:	f06f 0533 	mvn.w	r5, #51	; 0x33
   15a4e:	e7dc      	b.n	15a0a <mbedtls_ctr_drbg_reseed_internal+0x7a>
   15a50:	20000da4 	.word	0x20000da4

00015a54 <cc_mbedtls_ctr_drbg_init>:
   15a54:	b510      	push	{r4, lr}
   15a56:	22a4      	movs	r2, #164	; 0xa4
   15a58:	2100      	movs	r1, #0
   15a5a:	4604      	mov	r4, r0
   15a5c:	f002 fbcd 	bl	181fa <memset>
   15a60:	f04f 31ff 	mov.w	r1, #4294967295
   15a64:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   15a68:	4b04      	ldr	r3, [pc, #16]	; (15a7c <cc_mbedtls_ctr_drbg_init+0x28>)
   15a6a:	6121      	str	r1, [r4, #16]
   15a6c:	61e2      	str	r2, [r4, #28]
   15a6e:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   15a72:	681b      	ldr	r3, [r3, #0]
   15a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15a78:	4718      	bx	r3
   15a7a:	bf00      	nop
   15a7c:	200000c4 	.word	0x200000c4

00015a80 <cc_mbedtls_ctr_drbg_seed>:
   15a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15a84:	4605      	mov	r5, r0
   15a86:	b085      	sub	sp, #20
   15a88:	460f      	mov	r7, r1
   15a8a:	4616      	mov	r6, r2
   15a8c:	2100      	movs	r1, #0
   15a8e:	2210      	movs	r2, #16
   15a90:	4668      	mov	r0, sp
   15a92:	4699      	mov	r9, r3
   15a94:	f002 fbb1 	bl	181fa <memset>
   15a98:	4b1e      	ldr	r3, [pc, #120]	; (15b14 <cc_mbedtls_ctr_drbg_seed+0x94>)
   15a9a:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   15a9e:	4640      	mov	r0, r8
   15aa0:	681b      	ldr	r3, [r3, #0]
   15aa2:	4798      	blx	r3
   15aa4:	b120      	cbz	r0, 15ab0 <cc_mbedtls_ctr_drbg_seed+0x30>
   15aa6:	4604      	mov	r4, r0
   15aa8:	4620      	mov	r0, r4
   15aaa:	b005      	add	sp, #20
   15aac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15ab0:	f105 0420 	add.w	r4, r5, #32
   15ab4:	4620      	mov	r0, r4
   15ab6:	f000 ff51 	bl	1695c <cc_mbedtls_aes_init>
   15aba:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   15abe:	69ae      	ldr	r6, [r5, #24]
   15ac0:	b9f6      	cbnz	r6, 15b00 <cc_mbedtls_ctr_drbg_seed+0x80>
   15ac2:	2320      	movs	r3, #32
   15ac4:	61ab      	str	r3, [r5, #24]
   15ac6:	692b      	ldr	r3, [r5, #16]
   15ac8:	2b00      	cmp	r3, #0
   15aca:	db21      	blt.n	15b10 <cc_mbedtls_ctr_drbg_seed+0x90>
   15acc:	461e      	mov	r6, r3
   15ace:	4620      	mov	r0, r4
   15ad0:	4669      	mov	r1, sp
   15ad2:	2280      	movs	r2, #128	; 0x80
   15ad4:	f000 ff58 	bl	16988 <cc_mbedtls_aes_setkey_enc>
   15ad8:	4604      	mov	r4, r0
   15ada:	b930      	cbnz	r0, 15aea <cc_mbedtls_ctr_drbg_seed+0x6a>
   15adc:	4633      	mov	r3, r6
   15ade:	4649      	mov	r1, r9
   15ae0:	4628      	mov	r0, r5
   15ae2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15ae4:	f7ff ff54 	bl	15990 <mbedtls_ctr_drbg_reseed_internal>
   15ae8:	4604      	mov	r4, r0
   15aea:	4b0b      	ldr	r3, [pc, #44]	; (15b18 <cc_mbedtls_ctr_drbg_seed+0x98>)
   15aec:	4640      	mov	r0, r8
   15aee:	681b      	ldr	r3, [r3, #0]
   15af0:	4798      	blx	r3
   15af2:	2800      	cmp	r0, #0
   15af4:	bf18      	it	ne
   15af6:	4604      	movne	r4, r0
   15af8:	4620      	mov	r0, r4
   15afa:	b005      	add	sp, #20
   15afc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15b00:	692b      	ldr	r3, [r5, #16]
   15b02:	2b00      	cmp	r3, #0
   15b04:	dae2      	bge.n	15acc <cc_mbedtls_ctr_drbg_seed+0x4c>
   15b06:	2e17      	cmp	r6, #23
   15b08:	d802      	bhi.n	15b10 <cc_mbedtls_ctr_drbg_seed+0x90>
   15b0a:	3601      	adds	r6, #1
   15b0c:	0876      	lsrs	r6, r6, #1
   15b0e:	e7de      	b.n	15ace <cc_mbedtls_ctr_drbg_seed+0x4e>
   15b10:	2600      	movs	r6, #0
   15b12:	e7dc      	b.n	15ace <cc_mbedtls_ctr_drbg_seed+0x4e>
   15b14:	200000c8 	.word	0x200000c8
   15b18:	200000cc 	.word	0x200000cc

00015b1c <cc_mbedtls_ctr_drbg_random_with_add>:
   15b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b20:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   15b24:	b08d      	sub	sp, #52	; 0x34
   15b26:	9f16      	ldr	r7, [sp, #88]	; 0x58
   15b28:	f200 80e3 	bhi.w	15cf2 <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   15b2c:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   15b30:	f200 80dc 	bhi.w	15cec <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   15b34:	4604      	mov	r4, r0
   15b36:	4615      	mov	r5, r2
   15b38:	460e      	mov	r6, r1
   15b3a:	2220      	movs	r2, #32
   15b3c:	2100      	movs	r1, #0
   15b3e:	a804      	add	r0, sp, #16
   15b40:	4698      	mov	r8, r3
   15b42:	f002 fb5a 	bl	181fa <memset>
   15b46:	4b6c      	ldr	r3, [pc, #432]	; (15cf8 <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   15b48:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   15b4c:	4648      	mov	r0, r9
   15b4e:	681b      	ldr	r3, [r3, #0]
   15b50:	4798      	blx	r3
   15b52:	4683      	mov	fp, r0
   15b54:	2800      	cmp	r0, #0
   15b56:	f040 8092 	bne.w	15c7e <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   15b5a:	6922      	ldr	r2, [r4, #16]
   15b5c:	69e3      	ldr	r3, [r4, #28]
   15b5e:	429a      	cmp	r2, r3
   15b60:	f300 8091 	bgt.w	15c86 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   15b64:	6963      	ldr	r3, [r4, #20]
   15b66:	2b00      	cmp	r3, #0
   15b68:	f040 808d 	bne.w	15c86 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   15b6c:	2f00      	cmp	r7, #0
   15b6e:	f040 80a9 	bne.w	15cc4 <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   15b72:	f8df a188 	ldr.w	sl, [pc, #392]	; 15cfc <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   15b76:	466f      	mov	r7, sp
   15b78:	2d00      	cmp	r5, #0
   15b7a:	f000 8098 	beq.w	15cae <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   15b7e:	466f      	mov	r7, sp
   15b80:	f104 0820 	add.w	r8, r4, #32
   15b84:	e00e      	b.n	15ba4 <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   15b86:	2d10      	cmp	r5, #16
   15b88:	46ab      	mov	fp, r5
   15b8a:	bf28      	it	cs
   15b8c:	f04f 0b10 	movcs.w	fp, #16
   15b90:	4630      	mov	r0, r6
   15b92:	4639      	mov	r1, r7
   15b94:	465a      	mov	r2, fp
   15b96:	f002 fb25 	bl	181e4 <memcpy>
   15b9a:	ebb5 050b 	subs.w	r5, r5, fp
   15b9e:	445e      	add	r6, fp
   15ba0:	f000 8085 	beq.w	15cae <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   15ba4:	7be3      	ldrb	r3, [r4, #15]
   15ba6:	3301      	adds	r3, #1
   15ba8:	b2db      	uxtb	r3, r3
   15baa:	73e3      	strb	r3, [r4, #15]
   15bac:	2b00      	cmp	r3, #0
   15bae:	d14d      	bne.n	15c4c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   15bb0:	7ba3      	ldrb	r3, [r4, #14]
   15bb2:	3301      	adds	r3, #1
   15bb4:	b2db      	uxtb	r3, r3
   15bb6:	73a3      	strb	r3, [r4, #14]
   15bb8:	2b00      	cmp	r3, #0
   15bba:	d147      	bne.n	15c4c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   15bbc:	7b63      	ldrb	r3, [r4, #13]
   15bbe:	3301      	adds	r3, #1
   15bc0:	b2db      	uxtb	r3, r3
   15bc2:	7363      	strb	r3, [r4, #13]
   15bc4:	2b00      	cmp	r3, #0
   15bc6:	d141      	bne.n	15c4c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   15bc8:	7b23      	ldrb	r3, [r4, #12]
   15bca:	3301      	adds	r3, #1
   15bcc:	b2db      	uxtb	r3, r3
   15bce:	7323      	strb	r3, [r4, #12]
   15bd0:	2b00      	cmp	r3, #0
   15bd2:	d13b      	bne.n	15c4c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   15bd4:	7ae3      	ldrb	r3, [r4, #11]
   15bd6:	3301      	adds	r3, #1
   15bd8:	b2db      	uxtb	r3, r3
   15bda:	72e3      	strb	r3, [r4, #11]
   15bdc:	2b00      	cmp	r3, #0
   15bde:	d135      	bne.n	15c4c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   15be0:	7aa3      	ldrb	r3, [r4, #10]
   15be2:	3301      	adds	r3, #1
   15be4:	b2db      	uxtb	r3, r3
   15be6:	72a3      	strb	r3, [r4, #10]
   15be8:	2b00      	cmp	r3, #0
   15bea:	d12f      	bne.n	15c4c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   15bec:	7a63      	ldrb	r3, [r4, #9]
   15bee:	3301      	adds	r3, #1
   15bf0:	b2db      	uxtb	r3, r3
   15bf2:	7263      	strb	r3, [r4, #9]
   15bf4:	bb53      	cbnz	r3, 15c4c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   15bf6:	7a23      	ldrb	r3, [r4, #8]
   15bf8:	3301      	adds	r3, #1
   15bfa:	b2db      	uxtb	r3, r3
   15bfc:	7223      	strb	r3, [r4, #8]
   15bfe:	bb2b      	cbnz	r3, 15c4c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   15c00:	79e3      	ldrb	r3, [r4, #7]
   15c02:	3301      	adds	r3, #1
   15c04:	b2db      	uxtb	r3, r3
   15c06:	71e3      	strb	r3, [r4, #7]
   15c08:	bb03      	cbnz	r3, 15c4c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   15c0a:	79a3      	ldrb	r3, [r4, #6]
   15c0c:	3301      	adds	r3, #1
   15c0e:	b2db      	uxtb	r3, r3
   15c10:	71a3      	strb	r3, [r4, #6]
   15c12:	b9db      	cbnz	r3, 15c4c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   15c14:	7963      	ldrb	r3, [r4, #5]
   15c16:	3301      	adds	r3, #1
   15c18:	b2db      	uxtb	r3, r3
   15c1a:	7163      	strb	r3, [r4, #5]
   15c1c:	b9b3      	cbnz	r3, 15c4c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   15c1e:	7923      	ldrb	r3, [r4, #4]
   15c20:	3301      	adds	r3, #1
   15c22:	b2db      	uxtb	r3, r3
   15c24:	7123      	strb	r3, [r4, #4]
   15c26:	b98b      	cbnz	r3, 15c4c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   15c28:	78e3      	ldrb	r3, [r4, #3]
   15c2a:	3301      	adds	r3, #1
   15c2c:	b2db      	uxtb	r3, r3
   15c2e:	70e3      	strb	r3, [r4, #3]
   15c30:	b963      	cbnz	r3, 15c4c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   15c32:	78a3      	ldrb	r3, [r4, #2]
   15c34:	3301      	adds	r3, #1
   15c36:	b2db      	uxtb	r3, r3
   15c38:	70a3      	strb	r3, [r4, #2]
   15c3a:	b93b      	cbnz	r3, 15c4c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   15c3c:	7863      	ldrb	r3, [r4, #1]
   15c3e:	3301      	adds	r3, #1
   15c40:	b2db      	uxtb	r3, r3
   15c42:	7063      	strb	r3, [r4, #1]
   15c44:	b913      	cbnz	r3, 15c4c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   15c46:	7823      	ldrb	r3, [r4, #0]
   15c48:	3301      	adds	r3, #1
   15c4a:	7023      	strb	r3, [r4, #0]
   15c4c:	463b      	mov	r3, r7
   15c4e:	4622      	mov	r2, r4
   15c50:	2101      	movs	r1, #1
   15c52:	4640      	mov	r0, r8
   15c54:	f000 feb2 	bl	169bc <cc_mbedtls_aes_crypt_ecb>
   15c58:	4683      	mov	fp, r0
   15c5a:	2800      	cmp	r0, #0
   15c5c:	d093      	beq.n	15b86 <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   15c5e:	f8da 3000 	ldr.w	r3, [sl]
   15c62:	4648      	mov	r0, r9
   15c64:	4798      	blx	r3
   15c66:	4603      	mov	r3, r0
   15c68:	2120      	movs	r1, #32
   15c6a:	a804      	add	r0, sp, #16
   15c6c:	2b00      	cmp	r3, #0
   15c6e:	bf18      	it	ne
   15c70:	469b      	movne	fp, r3
   15c72:	f7ff fc8d 	bl	15590 <mbedtls_platform_zeroize>
   15c76:	2110      	movs	r1, #16
   15c78:	4638      	mov	r0, r7
   15c7a:	f7ff fc89 	bl	15590 <mbedtls_platform_zeroize>
   15c7e:	4658      	mov	r0, fp
   15c80:	b00d      	add	sp, #52	; 0x34
   15c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c86:	463a      	mov	r2, r7
   15c88:	4641      	mov	r1, r8
   15c8a:	2300      	movs	r3, #0
   15c8c:	4620      	mov	r0, r4
   15c8e:	f7ff fe7f 	bl	15990 <mbedtls_ctr_drbg_reseed_internal>
   15c92:	f8df a068 	ldr.w	sl, [pc, #104]	; 15cfc <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   15c96:	2800      	cmp	r0, #0
   15c98:	f43f af6d 	beq.w	15b76 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   15c9c:	4648      	mov	r0, r9
   15c9e:	f8da 3000 	ldr.w	r3, [sl]
   15ca2:	4798      	blx	r3
   15ca4:	4683      	mov	fp, r0
   15ca6:	2800      	cmp	r0, #0
   15ca8:	f43f af65 	beq.w	15b76 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   15cac:	e7e7      	b.n	15c7e <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   15cae:	4620      	mov	r0, r4
   15cb0:	a904      	add	r1, sp, #16
   15cb2:	f7ff fdc9 	bl	15848 <ctr_drbg_update_internal>
   15cb6:	4683      	mov	fp, r0
   15cb8:	2800      	cmp	r0, #0
   15cba:	d1d0      	bne.n	15c5e <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   15cbc:	6923      	ldr	r3, [r4, #16]
   15cbe:	3301      	adds	r3, #1
   15cc0:	6123      	str	r3, [r4, #16]
   15cc2:	e7cc      	b.n	15c5e <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   15cc4:	463a      	mov	r2, r7
   15cc6:	4641      	mov	r1, r8
   15cc8:	a804      	add	r0, sp, #16
   15cca:	f7ff fc6b 	bl	155a4 <block_cipher_df>
   15cce:	4683      	mov	fp, r0
   15cd0:	b118      	cbz	r0, 15cda <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   15cd2:	466f      	mov	r7, sp
   15cd4:	f8df a024 	ldr.w	sl, [pc, #36]	; 15cfc <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   15cd8:	e7c1      	b.n	15c5e <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   15cda:	4620      	mov	r0, r4
   15cdc:	a904      	add	r1, sp, #16
   15cde:	f7ff fdb3 	bl	15848 <ctr_drbg_update_internal>
   15ce2:	4683      	mov	fp, r0
   15ce4:	2800      	cmp	r0, #0
   15ce6:	f43f af44 	beq.w	15b72 <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   15cea:	e7f2      	b.n	15cd2 <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   15cec:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   15cf0:	e7c5      	b.n	15c7e <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   15cf2:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   15cf6:	e7c2      	b.n	15c7e <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   15cf8:	200000c8 	.word	0x200000c8
   15cfc:	200000cc 	.word	0x200000cc

00015d00 <entropy_update>:
   15d00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15d04:	2b20      	cmp	r3, #32
   15d06:	461d      	mov	r5, r3
   15d08:	4606      	mov	r6, r0
   15d0a:	4688      	mov	r8, r1
   15d0c:	4691      	mov	r9, r2
   15d0e:	b08b      	sub	sp, #44	; 0x2c
   15d10:	d826      	bhi.n	15d60 <entropy_update+0x60>
   15d12:	b2db      	uxtb	r3, r3
   15d14:	af02      	add	r7, sp, #8
   15d16:	6831      	ldr	r1, [r6, #0]
   15d18:	f88d 8004 	strb.w	r8, [sp, #4]
   15d1c:	f88d 3005 	strb.w	r3, [sp, #5]
   15d20:	f106 0804 	add.w	r8, r6, #4
   15d24:	b921      	cbnz	r1, 15d30 <entropy_update+0x30>
   15d26:	4640      	mov	r0, r8
   15d28:	f000 fe8a 	bl	16a40 <cc_mbedtls_sha256_starts>
   15d2c:	4604      	mov	r4, r0
   15d2e:	b940      	cbnz	r0, 15d42 <entropy_update+0x42>
   15d30:	2301      	movs	r3, #1
   15d32:	2202      	movs	r2, #2
   15d34:	4640      	mov	r0, r8
   15d36:	6033      	str	r3, [r6, #0]
   15d38:	a901      	add	r1, sp, #4
   15d3a:	f000 fe95 	bl	16a68 <cc_mbedtls_sha256_update>
   15d3e:	4604      	mov	r4, r0
   15d40:	b138      	cbz	r0, 15d52 <entropy_update+0x52>
   15d42:	4638      	mov	r0, r7
   15d44:	2120      	movs	r1, #32
   15d46:	f7ff fc23 	bl	15590 <mbedtls_platform_zeroize>
   15d4a:	4620      	mov	r0, r4
   15d4c:	b00b      	add	sp, #44	; 0x2c
   15d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15d52:	462a      	mov	r2, r5
   15d54:	4649      	mov	r1, r9
   15d56:	4640      	mov	r0, r8
   15d58:	f000 fe86 	bl	16a68 <cc_mbedtls_sha256_update>
   15d5c:	4604      	mov	r4, r0
   15d5e:	e7f0      	b.n	15d42 <entropy_update+0x42>
   15d60:	af02      	add	r7, sp, #8
   15d62:	4619      	mov	r1, r3
   15d64:	4610      	mov	r0, r2
   15d66:	2300      	movs	r3, #0
   15d68:	463a      	mov	r2, r7
   15d6a:	f001 f80f 	bl	16d8c <cc_mbedtls_sha256>
   15d6e:	4604      	mov	r4, r0
   15d70:	2800      	cmp	r0, #0
   15d72:	d1e6      	bne.n	15d42 <entropy_update+0x42>
   15d74:	2320      	movs	r3, #32
   15d76:	46b9      	mov	r9, r7
   15d78:	461d      	mov	r5, r3
   15d7a:	e7cc      	b.n	15d16 <entropy_update+0x16>

00015d7c <entropy_gather_internal.part.0>:
   15d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15d80:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   15d84:	b0a6      	sub	sp, #152	; 0x98
   15d86:	2b00      	cmp	r3, #0
   15d88:	bfd8      	it	le
   15d8a:	ae02      	addle	r6, sp, #8
   15d8c:	dd31      	ble.n	15df2 <entropy_gather_internal.part.0+0x76>
   15d8e:	4605      	mov	r5, r0
   15d90:	2700      	movs	r7, #0
   15d92:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   15d96:	ae02      	add	r6, sp, #8
   15d98:	f1a4 0801 	sub.w	r8, r4, #1
   15d9c:	2290      	movs	r2, #144	; 0x90
   15d9e:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   15da2:	4631      	mov	r1, r6
   15da4:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   15da8:	ab01      	add	r3, sp, #4
   15daa:	9701      	str	r7, [sp, #4]
   15dac:	fab8 f888 	clz	r8, r8
   15db0:	47a0      	blx	r4
   15db2:	ea4f 1858 	mov.w	r8, r8, lsr #5
   15db6:	4604      	mov	r4, r0
   15db8:	b920      	cbnz	r0, 15dc4 <entropy_gather_internal.part.0+0x48>
   15dba:	9b01      	ldr	r3, [sp, #4]
   15dbc:	b953      	cbnz	r3, 15dd4 <entropy_gather_internal.part.0+0x58>
   15dbe:	f1b8 0f00 	cmp.w	r8, #0
   15dc2:	d016      	beq.n	15df2 <entropy_gather_internal.part.0+0x76>
   15dc4:	4630      	mov	r0, r6
   15dc6:	2190      	movs	r1, #144	; 0x90
   15dc8:	f7ff fbe2 	bl	15590 <mbedtls_platform_zeroize>
   15dcc:	4620      	mov	r0, r4
   15dce:	b026      	add	sp, #152	; 0x98
   15dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15dd4:	4601      	mov	r1, r0
   15dd6:	4632      	mov	r2, r6
   15dd8:	4628      	mov	r0, r5
   15dda:	f7ff ff91 	bl	15d00 <entropy_update>
   15dde:	b958      	cbnz	r0, 15df8 <entropy_gather_internal.part.0+0x7c>
   15de0:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   15de4:	9a01      	ldr	r2, [sp, #4]
   15de6:	4413      	add	r3, r2
   15de8:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   15dec:	f1b8 0f00 	cmp.w	r8, #0
   15df0:	d1e8      	bne.n	15dc4 <entropy_gather_internal.part.0+0x48>
   15df2:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   15df6:	e7e5      	b.n	15dc4 <entropy_gather_internal.part.0+0x48>
   15df8:	4604      	mov	r4, r0
   15dfa:	4620      	mov	r0, r4
   15dfc:	b026      	add	sp, #152	; 0x98
   15dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15e02:	bf00      	nop

00015e04 <cc_mbedtls_entropy_init>:
   15e04:	b570      	push	{r4, r5, r6, lr}
   15e06:	2500      	movs	r5, #0
   15e08:	4604      	mov	r4, r0
   15e0a:	2214      	movs	r2, #20
   15e0c:	4629      	mov	r1, r5
   15e0e:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   15e12:	30fc      	adds	r0, #252	; 0xfc
   15e14:	f002 f9f1 	bl	181fa <memset>
   15e18:	4b15      	ldr	r3, [pc, #84]	; (15e70 <cc_mbedtls_entropy_init+0x6c>)
   15e1a:	f504 7688 	add.w	r6, r4, #272	; 0x110
   15e1e:	681b      	ldr	r3, [r3, #0]
   15e20:	4630      	mov	r0, r6
   15e22:	4798      	blx	r3
   15e24:	4620      	mov	r0, r4
   15e26:	f840 5b04 	str.w	r5, [r0], #4
   15e2a:	f000 fdef 	bl	16a0c <cc_mbedtls_sha256_init>
   15e2e:	4b11      	ldr	r3, [pc, #68]	; (15e74 <cc_mbedtls_entropy_init+0x70>)
   15e30:	4630      	mov	r0, r6
   15e32:	681b      	ldr	r3, [r3, #0]
   15e34:	4798      	blx	r3
   15e36:	b9c8      	cbnz	r0, 15e6c <cc_mbedtls_entropy_init+0x68>
   15e38:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   15e3c:	42ab      	cmp	r3, r5
   15e3e:	dc0f      	bgt.n	15e60 <cc_mbedtls_entropy_init+0x5c>
   15e40:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   15e44:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   15e48:	2120      	movs	r1, #32
   15e4a:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   15e4e:	2001      	movs	r0, #1
   15e50:	e9c2 1042 	strd	r1, r0, [r2, #264]	; 0x108
   15e54:	4908      	ldr	r1, [pc, #32]	; (15e78 <cc_mbedtls_entropy_init+0x74>)
   15e56:	3301      	adds	r3, #1
   15e58:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   15e5c:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   15e60:	4b06      	ldr	r3, [pc, #24]	; (15e7c <cc_mbedtls_entropy_init+0x78>)
   15e62:	4630      	mov	r0, r6
   15e64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15e68:	681b      	ldr	r3, [r3, #0]
   15e6a:	4718      	bx	r3
   15e6c:	bd70      	pop	{r4, r5, r6, pc}
   15e6e:	bf00      	nop
   15e70:	200000c4 	.word	0x200000c4
   15e74:	200000c8 	.word	0x200000c8
   15e78:	00016859 	.word	0x00016859
   15e7c:	200000cc 	.word	0x200000cc

00015e80 <cc_mbedtls_entropy_func>:
   15e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15e84:	2a20      	cmp	r2, #32
   15e86:	b088      	sub	sp, #32
   15e88:	d878      	bhi.n	15f7c <cc_mbedtls_entropy_func+0xfc>
   15e8a:	4b3e      	ldr	r3, [pc, #248]	; (15f84 <cc_mbedtls_entropy_func+0x104>)
   15e8c:	f500 7988 	add.w	r9, r0, #272	; 0x110
   15e90:	4604      	mov	r4, r0
   15e92:	681b      	ldr	r3, [r3, #0]
   15e94:	4648      	mov	r0, r9
   15e96:	4617      	mov	r7, r2
   15e98:	4688      	mov	r8, r1
   15e9a:	4798      	blx	r3
   15e9c:	4605      	mov	r5, r0
   15e9e:	bb40      	cbnz	r0, 15ef2 <cc_mbedtls_entropy_func+0x72>
   15ea0:	f240 1601 	movw	r6, #257	; 0x101
   15ea4:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   15ea8:	2b00      	cmp	r3, #0
   15eaa:	d063      	beq.n	15f74 <cc_mbedtls_entropy_func+0xf4>
   15eac:	4620      	mov	r0, r4
   15eae:	f7ff ff65 	bl	15d7c <entropy_gather_internal.part.0>
   15eb2:	4605      	mov	r5, r0
   15eb4:	2800      	cmp	r0, #0
   15eb6:	d15f      	bne.n	15f78 <cc_mbedtls_entropy_func+0xf8>
   15eb8:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   15ebc:	2b00      	cmp	r3, #0
   15ebe:	dd07      	ble.n	15ed0 <cc_mbedtls_entropy_func+0x50>
   15ec0:	e9d4 0241 	ldrd	r0, r2, [r4, #260]	; 0x104
   15ec4:	4290      	cmp	r0, r2
   15ec6:	d303      	bcc.n	15ed0 <cc_mbedtls_entropy_func+0x50>
   15ec8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   15ecc:	2a01      	cmp	r2, #1
   15ece:	d014      	beq.n	15efa <cc_mbedtls_entropy_func+0x7a>
   15ed0:	3e01      	subs	r6, #1
   15ed2:	d1e9      	bne.n	15ea8 <cc_mbedtls_entropy_func+0x28>
   15ed4:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   15ed8:	466e      	mov	r6, sp
   15eda:	2120      	movs	r1, #32
   15edc:	4630      	mov	r0, r6
   15ede:	f7ff fb57 	bl	15590 <mbedtls_platform_zeroize>
   15ee2:	4b29      	ldr	r3, [pc, #164]	; (15f88 <cc_mbedtls_entropy_func+0x108>)
   15ee4:	4648      	mov	r0, r9
   15ee6:	681b      	ldr	r3, [r3, #0]
   15ee8:	4798      	blx	r3
   15eea:	2800      	cmp	r0, #0
   15eec:	bf18      	it	ne
   15eee:	f06f 051d 	mvnne.w	r5, #29
   15ef2:	4628      	mov	r0, r5
   15ef4:	b008      	add	sp, #32
   15ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15efa:	281f      	cmp	r0, #31
   15efc:	d9e8      	bls.n	15ed0 <cc_mbedtls_entropy_func+0x50>
   15efe:	466e      	mov	r6, sp
   15f00:	4629      	mov	r1, r5
   15f02:	2220      	movs	r2, #32
   15f04:	4630      	mov	r0, r6
   15f06:	f104 0a04 	add.w	sl, r4, #4
   15f0a:	f002 f976 	bl	181fa <memset>
   15f0e:	4631      	mov	r1, r6
   15f10:	4650      	mov	r0, sl
   15f12:	f000 fdd3 	bl	16abc <cc_mbedtls_sha256_finish>
   15f16:	4605      	mov	r5, r0
   15f18:	2800      	cmp	r0, #0
   15f1a:	d1de      	bne.n	15eda <cc_mbedtls_entropy_func+0x5a>
   15f1c:	4650      	mov	r0, sl
   15f1e:	f000 fd89 	bl	16a34 <cc_mbedtls_sha256_free>
   15f22:	4650      	mov	r0, sl
   15f24:	f000 fd72 	bl	16a0c <cc_mbedtls_sha256_init>
   15f28:	4629      	mov	r1, r5
   15f2a:	4650      	mov	r0, sl
   15f2c:	f000 fd88 	bl	16a40 <cc_mbedtls_sha256_starts>
   15f30:	4605      	mov	r5, r0
   15f32:	2800      	cmp	r0, #0
   15f34:	d1d1      	bne.n	15eda <cc_mbedtls_entropy_func+0x5a>
   15f36:	4650      	mov	r0, sl
   15f38:	2220      	movs	r2, #32
   15f3a:	4631      	mov	r1, r6
   15f3c:	f000 fd94 	bl	16a68 <cc_mbedtls_sha256_update>
   15f40:	4605      	mov	r5, r0
   15f42:	2800      	cmp	r0, #0
   15f44:	d1c9      	bne.n	15eda <cc_mbedtls_entropy_func+0x5a>
   15f46:	4603      	mov	r3, r0
   15f48:	4632      	mov	r2, r6
   15f4a:	2120      	movs	r1, #32
   15f4c:	4630      	mov	r0, r6
   15f4e:	f000 ff1d 	bl	16d8c <cc_mbedtls_sha256>
   15f52:	4605      	mov	r5, r0
   15f54:	2800      	cmp	r0, #0
   15f56:	d1c0      	bne.n	15eda <cc_mbedtls_entropy_func+0x5a>
   15f58:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   15f5c:	463a      	mov	r2, r7
   15f5e:	2b00      	cmp	r3, #0
   15f60:	bfc8      	it	gt
   15f62:	2300      	movgt	r3, #0
   15f64:	4640      	mov	r0, r8
   15f66:	4631      	mov	r1, r6
   15f68:	bfc8      	it	gt
   15f6a:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   15f6e:	f002 f939 	bl	181e4 <memcpy>
   15f72:	e7b2      	b.n	15eda <cc_mbedtls_entropy_func+0x5a>
   15f74:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   15f78:	466e      	mov	r6, sp
   15f7a:	e7ae      	b.n	15eda <cc_mbedtls_entropy_func+0x5a>
   15f7c:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   15f80:	e7b7      	b.n	15ef2 <cc_mbedtls_entropy_func+0x72>
   15f82:	bf00      	nop
   15f84:	200000c8 	.word	0x200000c8
   15f88:	200000cc 	.word	0x200000cc

00015f8c <RndStartupTest.constprop.0>:
   15f8c:	2100      	movs	r1, #0
   15f8e:	b530      	push	{r4, r5, lr}
   15f90:	b08d      	sub	sp, #52	; 0x34
   15f92:	2228      	movs	r2, #40	; 0x28
   15f94:	a802      	add	r0, sp, #8
   15f96:	9101      	str	r1, [sp, #4]
   15f98:	f002 f92f 	bl	181fa <memset>
   15f9c:	a802      	add	r0, sp, #8
   15f9e:	f000 ff1d 	bl	16ddc <RNG_PLAT_SetUserRngParameters>
   15fa2:	4604      	mov	r4, r0
   15fa4:	b110      	cbz	r0, 15fac <RndStartupTest.constprop.0+0x20>
   15fa6:	4620      	mov	r0, r4
   15fa8:	b00d      	add	sp, #52	; 0x34
   15faa:	bd30      	pop	{r4, r5, pc}
   15fac:	4d18      	ldr	r5, [pc, #96]	; (16010 <RndStartupTest.constprop.0+0x84>)
   15fae:	f04f 31ff 	mov.w	r1, #4294967295
   15fb2:	6828      	ldr	r0, [r5, #0]
   15fb4:	f000 f93a 	bl	1622c <CC_PalMutexLock>
   15fb8:	4604      	mov	r4, r0
   15fba:	b9c0      	cbnz	r0, 15fee <RndStartupTest.constprop.0+0x62>
   15fbc:	2000      	movs	r0, #0
   15fbe:	f000 f965 	bl	1628c <CC_PalPowerSaveModeSelect>
   15fc2:	bb00      	cbnz	r0, 16006 <RndStartupTest.constprop.0+0x7a>
   15fc4:	4a13      	ldr	r2, [pc, #76]	; (16014 <RndStartupTest.constprop.0+0x88>)
   15fc6:	a902      	add	r1, sp, #8
   15fc8:	a801      	add	r0, sp, #4
   15fca:	f000 fc37 	bl	1683c <LLF_RND_RunTrngStartupTest>
   15fce:	4604      	mov	r4, r0
   15fd0:	2001      	movs	r0, #1
   15fd2:	f000 f95b 	bl	1628c <CC_PalPowerSaveModeSelect>
   15fd6:	b990      	cbnz	r0, 15ffe <RndStartupTest.constprop.0+0x72>
   15fd8:	6828      	ldr	r0, [r5, #0]
   15fda:	f000 f92f 	bl	1623c <CC_PalMutexUnlock>
   15fde:	2800      	cmp	r0, #0
   15fe0:	d0e1      	beq.n	15fa6 <RndStartupTest.constprop.0+0x1a>
   15fe2:	480d      	ldr	r0, [pc, #52]	; (16018 <RndStartupTest.constprop.0+0x8c>)
   15fe4:	f7ff f9c4 	bl	15370 <CC_PalAbort>
   15fe8:	4620      	mov	r0, r4
   15fea:	b00d      	add	sp, #52	; 0x34
   15fec:	bd30      	pop	{r4, r5, pc}
   15fee:	480b      	ldr	r0, [pc, #44]	; (1601c <RndStartupTest.constprop.0+0x90>)
   15ff0:	f7ff f9be 	bl	15370 <CC_PalAbort>
   15ff4:	2c01      	cmp	r4, #1
   15ff6:	bf08      	it	eq
   15ff8:	2405      	moveq	r4, #5
   15ffa:	d0ed      	beq.n	15fd8 <RndStartupTest.constprop.0+0x4c>
   15ffc:	e7de      	b.n	15fbc <RndStartupTest.constprop.0+0x30>
   15ffe:	4808      	ldr	r0, [pc, #32]	; (16020 <RndStartupTest.constprop.0+0x94>)
   16000:	f7ff f9b6 	bl	15370 <CC_PalAbort>
   16004:	e7e8      	b.n	15fd8 <RndStartupTest.constprop.0+0x4c>
   16006:	4807      	ldr	r0, [pc, #28]	; (16024 <RndStartupTest.constprop.0+0x98>)
   16008:	f7ff f9b2 	bl	15370 <CC_PalAbort>
   1600c:	e7da      	b.n	15fc4 <RndStartupTest.constprop.0+0x38>
   1600e:	bf00      	nop
   16010:	200000c0 	.word	0x200000c0
   16014:	20000f8c 	.word	0x20000f8c
   16018:	00018dc8 	.word	0x00018dc8
   1601c:	00018d70 	.word	0x00018d70
   16020:	00018da8 	.word	0x00018da8
   16024:	00018d88 	.word	0x00018d88

00016028 <CC_LibInit>:
   16028:	b510      	push	{r4, lr}
   1602a:	b082      	sub	sp, #8
   1602c:	f000 f850 	bl	160d0 <CC_HalInit>
   16030:	b128      	cbz	r0, 1603e <CC_LibInit+0x16>
   16032:	f000 f89f 	bl	16174 <CC_PalTerminate>
   16036:	2403      	movs	r4, #3
   16038:	4620      	mov	r0, r4
   1603a:	b002      	add	sp, #8
   1603c:	bd10      	pop	{r4, pc}
   1603e:	f000 f86b 	bl	16118 <CC_PalInit>
   16042:	b9d8      	cbnz	r0, 1607c <CC_LibInit+0x54>
   16044:	f000 f922 	bl	1628c <CC_PalPowerSaveModeSelect>
   16048:	b9e0      	cbnz	r0, 16084 <CC_LibInit+0x5c>
   1604a:	4c1e      	ldr	r4, [pc, #120]	; (160c4 <CC_LibInit+0x9c>)
   1604c:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   16050:	0e1b      	lsrs	r3, r3, #24
   16052:	2bf0      	cmp	r3, #240	; 0xf0
   16054:	d10a      	bne.n	1606c <CC_LibInit+0x44>
   16056:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   1605a:	4b1b      	ldr	r3, [pc, #108]	; (160c8 <CC_LibInit+0xa0>)
   1605c:	429a      	cmp	r2, r3
   1605e:	d029      	beq.n	160b4 <CC_LibInit+0x8c>
   16060:	f000 f838 	bl	160d4 <CC_HalTerminate>
   16064:	2407      	movs	r4, #7
   16066:	f000 f885 	bl	16174 <CC_PalTerminate>
   1606a:	e7e5      	b.n	16038 <CC_LibInit+0x10>
   1606c:	2406      	movs	r4, #6
   1606e:	f000 f831 	bl	160d4 <CC_HalTerminate>
   16072:	f000 f87f 	bl	16174 <CC_PalTerminate>
   16076:	4620      	mov	r0, r4
   16078:	b002      	add	sp, #8
   1607a:	bd10      	pop	{r4, pc}
   1607c:	2404      	movs	r4, #4
   1607e:	4620      	mov	r0, r4
   16080:	b002      	add	sp, #8
   16082:	bd10      	pop	{r4, pc}
   16084:	f000 f826 	bl	160d4 <CC_HalTerminate>
   16088:	f000 f874 	bl	16174 <CC_PalTerminate>
   1608c:	f7ff ff7e 	bl	15f8c <RndStartupTest.constprop.0>
   16090:	4604      	mov	r4, r0
   16092:	b958      	cbnz	r0, 160ac <CC_LibInit+0x84>
   16094:	4602      	mov	r2, r0
   16096:	4601      	mov	r1, r0
   16098:	f7ff f98c 	bl	153b4 <nrf_cc3xx_platform_ctr_drbg_init>
   1609c:	b930      	cbnz	r0, 160ac <CC_LibInit+0x84>
   1609e:	2268      	movs	r2, #104	; 0x68
   160a0:	490a      	ldr	r1, [pc, #40]	; (160cc <CC_LibInit+0xa4>)
   160a2:	ab01      	add	r3, sp, #4
   160a4:	f7ff f9b8 	bl	15418 <nrf_cc3xx_platform_ctr_drbg_get>
   160a8:	2800      	cmp	r0, #0
   160aa:	d0c5      	beq.n	16038 <CC_LibInit+0x10>
   160ac:	2405      	movs	r4, #5
   160ae:	4620      	mov	r0, r4
   160b0:	b002      	add	sp, #8
   160b2:	bd10      	pop	{r4, pc}
   160b4:	2001      	movs	r0, #1
   160b6:	f000 f8e9 	bl	1628c <CC_PalPowerSaveModeSelect>
   160ba:	2800      	cmp	r0, #0
   160bc:	d1e2      	bne.n	16084 <CC_LibInit+0x5c>
   160be:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   160c2:	e7e3      	b.n	1608c <CC_LibInit+0x64>
   160c4:	50841000 	.word	0x50841000
   160c8:	20e00000 	.word	0x20e00000
   160cc:	20000f24 	.word	0x20000f24

000160d0 <CC_HalInit>:
   160d0:	2000      	movs	r0, #0
   160d2:	4770      	bx	lr

000160d4 <CC_HalTerminate>:
   160d4:	2000      	movs	r0, #0
   160d6:	4770      	bx	lr

000160d8 <CC_HalClearInterruptBit>:
   160d8:	0543      	lsls	r3, r0, #21
   160da:	d504      	bpl.n	160e6 <CC_HalClearInterruptBit+0xe>
   160dc:	f04f 32ff 	mov.w	r2, #4294967295
   160e0:	4b03      	ldr	r3, [pc, #12]	; (160f0 <CC_HalClearInterruptBit+0x18>)
   160e2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   160e6:	4b02      	ldr	r3, [pc, #8]	; (160f0 <CC_HalClearInterruptBit+0x18>)
   160e8:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   160ec:	4770      	bx	lr
   160ee:	bf00      	nop
   160f0:	50841000 	.word	0x50841000

000160f4 <CC_HalMaskInterrupt>:
   160f4:	4b01      	ldr	r3, [pc, #4]	; (160fc <CC_HalMaskInterrupt+0x8>)
   160f6:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   160fa:	4770      	bx	lr
   160fc:	50841000 	.word	0x50841000

00016100 <CC_HalWaitInterrupt>:
   16100:	b108      	cbz	r0, 16106 <CC_HalWaitInterrupt+0x6>
   16102:	f000 b86b 	b.w	161dc <CC_PalWaitInterrupt>
   16106:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1610a:	4770      	bx	lr

0001610c <CC_HalWaitInterruptRND>:
   1610c:	b108      	cbz	r0, 16112 <CC_HalWaitInterruptRND+0x6>
   1610e:	f000 b84f 	b.w	161b0 <CC_PalWaitInterruptRND>
   16112:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   16116:	4770      	bx	lr

00016118 <CC_PalInit>:
   16118:	b510      	push	{r4, lr}
   1611a:	4811      	ldr	r0, [pc, #68]	; (16160 <CC_PalInit+0x48>)
   1611c:	f000 f872 	bl	16204 <CC_PalMutexCreate>
   16120:	b100      	cbz	r0, 16124 <CC_PalInit+0xc>
   16122:	bd10      	pop	{r4, pc}
   16124:	480f      	ldr	r0, [pc, #60]	; (16164 <CC_PalInit+0x4c>)
   16126:	f000 f86d 	bl	16204 <CC_PalMutexCreate>
   1612a:	2800      	cmp	r0, #0
   1612c:	d1f9      	bne.n	16122 <CC_PalInit+0xa>
   1612e:	4c0e      	ldr	r4, [pc, #56]	; (16168 <CC_PalInit+0x50>)
   16130:	4620      	mov	r0, r4
   16132:	f000 f867 	bl	16204 <CC_PalMutexCreate>
   16136:	2800      	cmp	r0, #0
   16138:	d1f3      	bne.n	16122 <CC_PalInit+0xa>
   1613a:	4b0c      	ldr	r3, [pc, #48]	; (1616c <CC_PalInit+0x54>)
   1613c:	480c      	ldr	r0, [pc, #48]	; (16170 <CC_PalInit+0x58>)
   1613e:	601c      	str	r4, [r3, #0]
   16140:	f000 f860 	bl	16204 <CC_PalMutexCreate>
   16144:	4601      	mov	r1, r0
   16146:	2800      	cmp	r0, #0
   16148:	d1eb      	bne.n	16122 <CC_PalInit+0xa>
   1614a:	f000 f82d 	bl	161a8 <CC_PalDmaInit>
   1614e:	4604      	mov	r4, r0
   16150:	b108      	cbz	r0, 16156 <CC_PalInit+0x3e>
   16152:	4620      	mov	r0, r4
   16154:	bd10      	pop	{r4, pc}
   16156:	f000 f87b 	bl	16250 <CC_PalPowerSaveModeInit>
   1615a:	4620      	mov	r0, r4
   1615c:	e7fa      	b.n	16154 <CC_PalInit+0x3c>
   1615e:	bf00      	nop
   16160:	200000bc 	.word	0x200000bc
   16164:	200000b0 	.word	0x200000b0
   16168:	200000b8 	.word	0x200000b8
   1616c:	200000c0 	.word	0x200000c0
   16170:	200000b4 	.word	0x200000b4

00016174 <CC_PalTerminate>:
   16174:	b508      	push	{r3, lr}
   16176:	4808      	ldr	r0, [pc, #32]	; (16198 <CC_PalTerminate+0x24>)
   16178:	f000 f84e 	bl	16218 <CC_PalMutexDestroy>
   1617c:	4807      	ldr	r0, [pc, #28]	; (1619c <CC_PalTerminate+0x28>)
   1617e:	f000 f84b 	bl	16218 <CC_PalMutexDestroy>
   16182:	4807      	ldr	r0, [pc, #28]	; (161a0 <CC_PalTerminate+0x2c>)
   16184:	f000 f848 	bl	16218 <CC_PalMutexDestroy>
   16188:	4806      	ldr	r0, [pc, #24]	; (161a4 <CC_PalTerminate+0x30>)
   1618a:	f000 f845 	bl	16218 <CC_PalMutexDestroy>
   1618e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   16192:	f000 b80b 	b.w	161ac <CC_PalDmaTerminate>
   16196:	bf00      	nop
   16198:	200000bc 	.word	0x200000bc
   1619c:	200000b0 	.word	0x200000b0
   161a0:	200000b8 	.word	0x200000b8
   161a4:	200000b4 	.word	0x200000b4

000161a8 <CC_PalDmaInit>:
   161a8:	2000      	movs	r0, #0
   161aa:	4770      	bx	lr

000161ac <CC_PalDmaTerminate>:
   161ac:	4770      	bx	lr
   161ae:	bf00      	nop

000161b0 <CC_PalWaitInterruptRND>:
   161b0:	4602      	mov	r2, r0
   161b2:	b410      	push	{r4}
   161b4:	4c08      	ldr	r4, [pc, #32]	; (161d8 <CC_PalWaitInterruptRND+0x28>)
   161b6:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   161ba:	4213      	tst	r3, r2
   161bc:	d0fb      	beq.n	161b6 <CC_PalWaitInterruptRND+0x6>
   161be:	b121      	cbz	r1, 161ca <CC_PalWaitInterruptRND+0x1a>
   161c0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   161c4:	600b      	str	r3, [r1, #0]
   161c6:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   161ca:	4b03      	ldr	r3, [pc, #12]	; (161d8 <CC_PalWaitInterruptRND+0x28>)
   161cc:	2000      	movs	r0, #0
   161ce:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   161d2:	bc10      	pop	{r4}
   161d4:	4770      	bx	lr
   161d6:	bf00      	nop
   161d8:	50841000 	.word	0x50841000

000161dc <CC_PalWaitInterrupt>:
   161dc:	4a04      	ldr	r2, [pc, #16]	; (161f0 <CC_PalWaitInterrupt+0x14>)
   161de:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   161e2:	4218      	tst	r0, r3
   161e4:	d0fb      	beq.n	161de <CC_PalWaitInterrupt+0x2>
   161e6:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   161ea:	2000      	movs	r0, #0
   161ec:	4770      	bx	lr
   161ee:	bf00      	nop
   161f0:	50841000 	.word	0x50841000

000161f4 <CC_PalMemCopyPlat>:
   161f4:	f001 bfde 	b.w	181b4 <memmove>

000161f8 <CC_PalMemSetPlat>:
   161f8:	f001 bfff 	b.w	181fa <memset>

000161fc <CC_PalMemSetZeroPlat>:
   161fc:	460a      	mov	r2, r1
   161fe:	2100      	movs	r1, #0
   16200:	f001 bffb 	b.w	181fa <memset>

00016204 <CC_PalMutexCreate>:
   16204:	b508      	push	{r3, lr}
   16206:	4b03      	ldr	r3, [pc, #12]	; (16214 <CC_PalMutexCreate+0x10>)
   16208:	6802      	ldr	r2, [r0, #0]
   1620a:	681b      	ldr	r3, [r3, #0]
   1620c:	6810      	ldr	r0, [r2, #0]
   1620e:	4798      	blx	r3
   16210:	2000      	movs	r0, #0
   16212:	bd08      	pop	{r3, pc}
   16214:	20000070 	.word	0x20000070

00016218 <CC_PalMutexDestroy>:
   16218:	b508      	push	{r3, lr}
   1621a:	4b03      	ldr	r3, [pc, #12]	; (16228 <CC_PalMutexDestroy+0x10>)
   1621c:	6802      	ldr	r2, [r0, #0]
   1621e:	685b      	ldr	r3, [r3, #4]
   16220:	6810      	ldr	r0, [r2, #0]
   16222:	4798      	blx	r3
   16224:	2000      	movs	r0, #0
   16226:	bd08      	pop	{r3, pc}
   16228:	20000070 	.word	0x20000070

0001622c <CC_PalMutexLock>:
   1622c:	4b02      	ldr	r3, [pc, #8]	; (16238 <CC_PalMutexLock+0xc>)
   1622e:	6802      	ldr	r2, [r0, #0]
   16230:	689b      	ldr	r3, [r3, #8]
   16232:	6810      	ldr	r0, [r2, #0]
   16234:	4718      	bx	r3
   16236:	bf00      	nop
   16238:	20000070 	.word	0x20000070

0001623c <CC_PalMutexUnlock>:
   1623c:	b508      	push	{r3, lr}
   1623e:	4b03      	ldr	r3, [pc, #12]	; (1624c <CC_PalMutexUnlock+0x10>)
   16240:	6802      	ldr	r2, [r0, #0]
   16242:	68db      	ldr	r3, [r3, #12]
   16244:	6810      	ldr	r0, [r2, #0]
   16246:	4798      	blx	r3
   16248:	2000      	movs	r0, #0
   1624a:	bd08      	pop	{r3, pc}
   1624c:	20000070 	.word	0x20000070

00016250 <CC_PalPowerSaveModeInit>:
   16250:	b570      	push	{r4, r5, r6, lr}
   16252:	4c09      	ldr	r4, [pc, #36]	; (16278 <CC_PalPowerSaveModeInit+0x28>)
   16254:	4d09      	ldr	r5, [pc, #36]	; (1627c <CC_PalPowerSaveModeInit+0x2c>)
   16256:	6920      	ldr	r0, [r4, #16]
   16258:	68ab      	ldr	r3, [r5, #8]
   1625a:	4798      	blx	r3
   1625c:	b118      	cbz	r0, 16266 <CC_PalPowerSaveModeInit+0x16>
   1625e:	4b08      	ldr	r3, [pc, #32]	; (16280 <CC_PalPowerSaveModeInit+0x30>)
   16260:	4808      	ldr	r0, [pc, #32]	; (16284 <CC_PalPowerSaveModeInit+0x34>)
   16262:	685b      	ldr	r3, [r3, #4]
   16264:	4798      	blx	r3
   16266:	2100      	movs	r1, #0
   16268:	4a07      	ldr	r2, [pc, #28]	; (16288 <CC_PalPowerSaveModeInit+0x38>)
   1626a:	68eb      	ldr	r3, [r5, #12]
   1626c:	6011      	str	r1, [r2, #0]
   1626e:	6920      	ldr	r0, [r4, #16]
   16270:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16274:	4718      	bx	r3
   16276:	bf00      	nop
   16278:	20000080 	.word	0x20000080
   1627c:	20000070 	.word	0x20000070
   16280:	20000060 	.word	0x20000060
   16284:	00018de0 	.word	0x00018de0
   16288:	200011ac 	.word	0x200011ac

0001628c <CC_PalPowerSaveModeSelect>:
   1628c:	b570      	push	{r4, r5, r6, lr}
   1628e:	4d1b      	ldr	r5, [pc, #108]	; (162fc <CC_PalPowerSaveModeSelect+0x70>)
   16290:	4e1b      	ldr	r6, [pc, #108]	; (16300 <CC_PalPowerSaveModeSelect+0x74>)
   16292:	4604      	mov	r4, r0
   16294:	68b2      	ldr	r2, [r6, #8]
   16296:	6928      	ldr	r0, [r5, #16]
   16298:	4790      	blx	r2
   1629a:	b9f8      	cbnz	r0, 162dc <CC_PalPowerSaveModeSelect+0x50>
   1629c:	b15c      	cbz	r4, 162b6 <CC_PalPowerSaveModeSelect+0x2a>
   1629e:	4c19      	ldr	r4, [pc, #100]	; (16304 <CC_PalPowerSaveModeSelect+0x78>)
   162a0:	6823      	ldr	r3, [r4, #0]
   162a2:	b1b3      	cbz	r3, 162d2 <CC_PalPowerSaveModeSelect+0x46>
   162a4:	2b01      	cmp	r3, #1
   162a6:	d01b      	beq.n	162e0 <CC_PalPowerSaveModeSelect+0x54>
   162a8:	3b01      	subs	r3, #1
   162aa:	6023      	str	r3, [r4, #0]
   162ac:	6928      	ldr	r0, [r5, #16]
   162ae:	68f3      	ldr	r3, [r6, #12]
   162b0:	4798      	blx	r3
   162b2:	2000      	movs	r0, #0
   162b4:	bd70      	pop	{r4, r5, r6, pc}
   162b6:	4c13      	ldr	r4, [pc, #76]	; (16304 <CC_PalPowerSaveModeSelect+0x78>)
   162b8:	6821      	ldr	r1, [r4, #0]
   162ba:	b941      	cbnz	r1, 162ce <CC_PalPowerSaveModeSelect+0x42>
   162bc:	2201      	movs	r2, #1
   162be:	4b12      	ldr	r3, [pc, #72]	; (16308 <CC_PalPowerSaveModeSelect+0x7c>)
   162c0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   162c4:	4a11      	ldr	r2, [pc, #68]	; (1630c <CC_PalPowerSaveModeSelect+0x80>)
   162c6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   162ca:	2b00      	cmp	r3, #0
   162cc:	d1fb      	bne.n	162c6 <CC_PalPowerSaveModeSelect+0x3a>
   162ce:	3101      	adds	r1, #1
   162d0:	6021      	str	r1, [r4, #0]
   162d2:	68f3      	ldr	r3, [r6, #12]
   162d4:	6928      	ldr	r0, [r5, #16]
   162d6:	4798      	blx	r3
   162d8:	2000      	movs	r0, #0
   162da:	bd70      	pop	{r4, r5, r6, pc}
   162dc:	480c      	ldr	r0, [pc, #48]	; (16310 <CC_PalPowerSaveModeSelect+0x84>)
   162de:	bd70      	pop	{r4, r5, r6, pc}
   162e0:	4a0a      	ldr	r2, [pc, #40]	; (1630c <CC_PalPowerSaveModeSelect+0x80>)
   162e2:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   162e6:	2b00      	cmp	r3, #0
   162e8:	d1fb      	bne.n	162e2 <CC_PalPowerSaveModeSelect+0x56>
   162ea:	4a07      	ldr	r2, [pc, #28]	; (16308 <CC_PalPowerSaveModeSelect+0x7c>)
   162ec:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   162f0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   162f4:	f7ff fefe 	bl	160f4 <CC_HalMaskInterrupt>
   162f8:	6823      	ldr	r3, [r4, #0]
   162fa:	e7d5      	b.n	162a8 <CC_PalPowerSaveModeSelect+0x1c>
   162fc:	20000080 	.word	0x20000080
   16300:	20000070 	.word	0x20000070
   16304:	200011ac 	.word	0x200011ac
   16308:	50840000 	.word	0x50840000
   1630c:	50841000 	.word	0x50841000
   16310:	ffff8fe9 	.word	0xffff8fe9

00016314 <mutex_init>:
   16314:	4b01      	ldr	r3, [pc, #4]	; (1631c <mutex_init+0x8>)
   16316:	681b      	ldr	r3, [r3, #0]
   16318:	4718      	bx	r3
   1631a:	bf00      	nop
   1631c:	20000070 	.word	0x20000070

00016320 <mutex_lock>:
   16320:	4b01      	ldr	r3, [pc, #4]	; (16328 <mutex_lock+0x8>)
   16322:	689b      	ldr	r3, [r3, #8]
   16324:	4718      	bx	r3
   16326:	bf00      	nop
   16328:	20000070 	.word	0x20000070

0001632c <mutex_unlock>:
   1632c:	4b01      	ldr	r3, [pc, #4]	; (16334 <mutex_unlock+0x8>)
   1632e:	68db      	ldr	r3, [r3, #12]
   16330:	4718      	bx	r3
   16332:	bf00      	nop
   16334:	20000070 	.word	0x20000070

00016338 <startTrngHW>:
   16338:	2800      	cmp	r0, #0
   1633a:	f000 8084 	beq.w	16446 <startTrngHW+0x10e>
   1633e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16342:	460c      	mov	r4, r1
   16344:	b083      	sub	sp, #12
   16346:	2900      	cmp	r1, #0
   16348:	d078      	beq.n	1643c <startTrngHW+0x104>
   1634a:	461d      	mov	r5, r3
   1634c:	2b00      	cmp	r3, #0
   1634e:	d075      	beq.n	1643c <startTrngHW+0x104>
   16350:	4607      	mov	r7, r0
   16352:	b11a      	cbz	r2, 1635c <startTrngHW+0x24>
   16354:	2201      	movs	r2, #1
   16356:	2300      	movs	r3, #0
   16358:	602a      	str	r2, [r5, #0]
   1635a:	6003      	str	r3, [r0, #0]
   1635c:	682b      	ldr	r3, [r5, #0]
   1635e:	2b00      	cmp	r3, #0
   16360:	d067      	beq.n	16432 <startTrngHW+0xfa>
   16362:	4629      	mov	r1, r5
   16364:	4620      	mov	r0, r4
   16366:	f000 fe2f 	bl	16fc8 <LLF_RND_GetFastestRosc>
   1636a:	4603      	mov	r3, r0
   1636c:	2800      	cmp	r0, #0
   1636e:	d161      	bne.n	16434 <startTrngHW+0xfc>
   16370:	4621      	mov	r1, r4
   16372:	6828      	ldr	r0, [r5, #0]
   16374:	f000 fe0a 	bl	16f8c <LLF_RND_GetRoscSampleCnt>
   16378:	4603      	mov	r3, r0
   1637a:	2800      	cmp	r0, #0
   1637c:	d15a      	bne.n	16434 <startTrngHW+0xfc>
   1637e:	682a      	ldr	r2, [r5, #0]
   16380:	2a08      	cmp	r2, #8
   16382:	d072      	beq.n	1646a <startTrngHW+0x132>
   16384:	2a04      	cmp	r2, #4
   16386:	d073      	beq.n	16470 <startTrngHW+0x138>
   16388:	f1a2 0802 	sub.w	r8, r2, #2
   1638c:	fab8 f888 	clz	r8, r8
   16390:	ea4f 1858 	mov.w	r8, r8, lsr #5
   16394:	2001      	movs	r0, #1
   16396:	4e38      	ldr	r6, [pc, #224]	; (16478 <startTrngHW+0x140>)
   16398:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   1639c:	f8c6 0140 	str.w	r0, [r6, #320]	; 0x140
   163a0:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   163a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
   163a6:	f8c6 2130 	str.w	r2, [r6, #304]	; 0x130
   163aa:	f8d6 1130 	ldr.w	r1, [r6, #304]	; 0x130
   163ae:	428a      	cmp	r2, r1
   163b0:	d1f6      	bne.n	163a0 <startTrngHW+0x68>
   163b2:	f04f 0900 	mov.w	r9, #0
   163b6:	9301      	str	r3, [sp, #4]
   163b8:	f04f 30ff 	mov.w	r0, #4294967295
   163bc:	f8c6 912c 	str.w	r9, [r6, #300]	; 0x12c
   163c0:	f7ff fe8a 	bl	160d8 <CC_HalClearInterruptBit>
   163c4:	f06f 021b 	mvn.w	r2, #27
   163c8:	4648      	mov	r0, r9
   163ca:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
   163ce:	f7ff fe91 	bl	160f4 <CC_HalMaskInterrupt>
   163d2:	f8c6 810c 	str.w	r8, [r6, #268]	; 0x10c
   163d6:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   163da:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   163de:	f7ff fe89 	bl	160f4 <CC_HalMaskInterrupt>
   163e2:	220a      	movs	r2, #10
   163e4:	f8c6 2138 	str.w	r2, [r6, #312]	; 0x138
   163e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   163ea:	2b01      	cmp	r3, #1
   163ec:	9b01      	ldr	r3, [sp, #4]
   163ee:	d02d      	beq.n	1644c <startTrngHW+0x114>
   163f0:	6922      	ldr	r2, [r4, #16]
   163f2:	4922      	ldr	r1, [pc, #136]	; (1647c <startTrngHW+0x144>)
   163f4:	fba1 1202 	umull	r1, r2, r1, r2
   163f8:	0912      	lsrs	r2, r2, #4
   163fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
   163fc:	4618      	mov	r0, r3
   163fe:	fb01 f202 	mul.w	r2, r1, r2
   16402:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   16406:	491c      	ldr	r1, [pc, #112]	; (16478 <startTrngHW+0x140>)
   16408:	03d2      	lsls	r2, r2, #15
   1640a:	0992      	lsrs	r2, r2, #6
   1640c:	f8c1 21d8 	str.w	r2, [r1, #472]	; 0x1d8
   16410:	2201      	movs	r2, #1
   16412:	f8c1 212c 	str.w	r2, [r1, #300]	; 0x12c
   16416:	683a      	ldr	r2, [r7, #0]
   16418:	6829      	ldr	r1, [r5, #0]
   1641a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1641e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   16422:	603a      	str	r2, [r7, #0]
   16424:	6829      	ldr	r1, [r5, #0]
   16426:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1642a:	603a      	str	r2, [r7, #0]
   1642c:	b003      	add	sp, #12
   1642e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16432:	4b13      	ldr	r3, [pc, #76]	; (16480 <startTrngHW+0x148>)
   16434:	4618      	mov	r0, r3
   16436:	b003      	add	sp, #12
   16438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1643c:	4b11      	ldr	r3, [pc, #68]	; (16484 <startTrngHW+0x14c>)
   1643e:	4618      	mov	r0, r3
   16440:	b003      	add	sp, #12
   16442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16446:	4b0f      	ldr	r3, [pc, #60]	; (16484 <startTrngHW+0x14c>)
   16448:	4618      	mov	r0, r3
   1644a:	4770      	bx	lr
   1644c:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
   16450:	f8d2 1c0c 	ldr.w	r1, [r2, #3084]	; 0xc0c
   16454:	3101      	adds	r1, #1
   16456:	d006      	beq.n	16466 <startTrngHW+0x12e>
   16458:	f8d2 2c0c 	ldr.w	r2, [r2, #3084]	; 0xc0c
   1645c:	4907      	ldr	r1, [pc, #28]	; (1647c <startTrngHW+0x144>)
   1645e:	fba1 1202 	umull	r1, r2, r1, r2
   16462:	0912      	lsrs	r2, r2, #4
   16464:	e7c9      	b.n	163fa <startTrngHW+0xc2>
   16466:	2216      	movs	r2, #22
   16468:	e7c7      	b.n	163fa <startTrngHW+0xc2>
   1646a:	f04f 0803 	mov.w	r8, #3
   1646e:	e791      	b.n	16394 <startTrngHW+0x5c>
   16470:	f04f 0802 	mov.w	r8, #2
   16474:	e78e      	b.n	16394 <startTrngHW+0x5c>
   16476:	bf00      	nop
   16478:	50841000 	.word	0x50841000
   1647c:	aaaaaaab 	.word	0xaaaaaaab
   16480:	00f10c31 	.word	0x00f10c31
   16484:	00f10c35 	.word	0x00f10c35

00016488 <LLF_RND_RepetitionCounterTest.part.0>:
   16488:	b570      	push	{r4, r5, r6, lr}
   1648a:	2400      	movs	r4, #0
   1648c:	00c9      	lsls	r1, r1, #3
   1648e:	f04f 0c01 	mov.w	ip, #1
   16492:	4625      	mov	r5, r4
   16494:	46a6      	mov	lr, r4
   16496:	1e4e      	subs	r6, r1, #1
   16498:	e008      	b.n	164ac <LLF_RND_RepetitionCounterTest.part.0+0x24>
   1649a:	459e      	cmp	lr, r3
   1649c:	d014      	beq.n	164c8 <LLF_RND_RepetitionCounterTest.part.0+0x40>
   1649e:	2501      	movs	r5, #1
   164a0:	45b4      	cmp	ip, r6
   164a2:	d816      	bhi.n	164d2 <LLF_RND_RepetitionCounterTest.part.0+0x4a>
   164a4:	469e      	mov	lr, r3
   164a6:	3401      	adds	r4, #1
   164a8:	f10c 0c01 	add.w	ip, ip, #1
   164ac:	0963      	lsrs	r3, r4, #5
   164ae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   164b2:	f004 011f 	and.w	r1, r4, #31
   164b6:	40cb      	lsrs	r3, r1
   164b8:	291f      	cmp	r1, #31
   164ba:	bf18      	it	ne
   164bc:	f003 0301 	andne.w	r3, r3, #1
   164c0:	2c00      	cmp	r4, #0
   164c2:	d1ea      	bne.n	1649a <LLF_RND_RepetitionCounterTest.part.0+0x12>
   164c4:	2501      	movs	r5, #1
   164c6:	e7ed      	b.n	164a4 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   164c8:	3501      	adds	r5, #1
   164ca:	4295      	cmp	r5, r2
   164cc:	d1e8      	bne.n	164a0 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   164ce:	4802      	ldr	r0, [pc, #8]	; (164d8 <LLF_RND_RepetitionCounterTest.part.0+0x50>)
   164d0:	bd70      	pop	{r4, r5, r6, pc}
   164d2:	2000      	movs	r0, #0
   164d4:	bd70      	pop	{r4, r5, r6, pc}
   164d6:	bf00      	nop
   164d8:	00f10c36 	.word	0x00f10c36

000164dc <LLF_RND_AdaptiveProportionTest>:
   164dc:	2800      	cmp	r0, #0
   164de:	d03f      	beq.n	16560 <LLF_RND_AdaptiveProportionTest+0x84>
   164e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   164e4:	1e4c      	subs	r4, r1, #1
   164e6:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   164ea:	d228      	bcs.n	1653e <LLF_RND_AdaptiveProportionTest+0x62>
   164ec:	b33b      	cbz	r3, 1653e <LLF_RND_AdaptiveProportionTest+0x62>
   164ee:	b332      	cbz	r2, 1653e <LLF_RND_AdaptiveProportionTest+0x62>
   164f0:	f04f 0e00 	mov.w	lr, #0
   164f4:	4676      	mov	r6, lr
   164f6:	4675      	mov	r5, lr
   164f8:	4674      	mov	r4, lr
   164fa:	00cf      	lsls	r7, r1, #3
   164fc:	f103 38ff 	add.w	r8, r3, #4294967295
   16500:	0961      	lsrs	r1, r4, #5
   16502:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   16506:	f004 0c1f 	and.w	ip, r4, #31
   1650a:	fa21 f10c 	lsr.w	r1, r1, ip
   1650e:	f1bc 0f1f 	cmp.w	ip, #31
   16512:	bf18      	it	ne
   16514:	f001 0101 	andne.w	r1, r1, #1
   16518:	b1a4      	cbz	r4, 16544 <LLF_RND_AdaptiveProportionTest+0x68>
   1651a:	42ab      	cmp	r3, r5
   1651c:	d018      	beq.n	16550 <LLF_RND_AdaptiveProportionTest+0x74>
   1651e:	428e      	cmp	r6, r1
   16520:	bf08      	it	eq
   16522:	f10e 0e01 	addeq.w	lr, lr, #1
   16526:	45a8      	cmp	r8, r5
   16528:	d015      	beq.n	16556 <LLF_RND_AdaptiveProportionTest+0x7a>
   1652a:	4631      	mov	r1, r6
   1652c:	3501      	adds	r5, #1
   1652e:	3401      	adds	r4, #1
   16530:	42bc      	cmp	r4, r7
   16532:	d001      	beq.n	16538 <LLF_RND_AdaptiveProportionTest+0x5c>
   16534:	460e      	mov	r6, r1
   16536:	e7e3      	b.n	16500 <LLF_RND_AdaptiveProportionTest+0x24>
   16538:	2000      	movs	r0, #0
   1653a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1653e:	4809      	ldr	r0, [pc, #36]	; (16564 <LLF_RND_AdaptiveProportionTest+0x88>)
   16540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16544:	f04f 0e01 	mov.w	lr, #1
   16548:	460e      	mov	r6, r1
   1654a:	4674      	mov	r4, lr
   1654c:	4675      	mov	r5, lr
   1654e:	e7d7      	b.n	16500 <LLF_RND_AdaptiveProportionTest+0x24>
   16550:	2501      	movs	r5, #1
   16552:	46ae      	mov	lr, r5
   16554:	e7eb      	b.n	1652e <LLF_RND_AdaptiveProportionTest+0x52>
   16556:	4572      	cmp	r2, lr
   16558:	d3f1      	bcc.n	1653e <LLF_RND_AdaptiveProportionTest+0x62>
   1655a:	4631      	mov	r1, r6
   1655c:	461d      	mov	r5, r3
   1655e:	e7e6      	b.n	1652e <LLF_RND_AdaptiveProportionTest+0x52>
   16560:	4800      	ldr	r0, [pc, #0]	; (16564 <LLF_RND_AdaptiveProportionTest+0x88>)
   16562:	4770      	bx	lr
   16564:	00f10c37 	.word	0x00f10c37

00016568 <getTrngSource>:
   16568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1656c:	b091      	sub	sp, #68	; 0x44
   1656e:	4683      	mov	fp, r0
   16570:	e9dd 461b 	ldrd	r4, r6, [sp, #108]	; 0x6c
   16574:	460d      	mov	r5, r1
   16576:	2e00      	cmp	r6, #0
   16578:	d14d      	bne.n	16616 <getTrngSource+0xae>
   1657a:	6909      	ldr	r1, [r1, #16]
   1657c:	9106      	str	r1, [sp, #24]
   1657e:	601c      	str	r4, [r3, #0]
   16580:	2300      	movs	r3, #0
   16582:	991a      	ldr	r1, [sp, #104]	; 0x68
   16584:	600b      	str	r3, [r1, #0]
   16586:	2a00      	cmp	r2, #0
   16588:	f000 8125 	beq.w	167d6 <getTrngSource+0x26e>
   1658c:	4b9e      	ldr	r3, [pc, #632]	; (16808 <getTrngSource+0x2a0>)
   1658e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   16590:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   16594:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   16598:	429a      	cmp	r2, r3
   1659a:	d148      	bne.n	1662e <getTrngSource+0xc6>
   1659c:	290a      	cmp	r1, #10
   1659e:	d146      	bne.n	1662e <getTrngSource+0xc6>
   165a0:	f89b 3003 	ldrb.w	r3, [fp, #3]
   165a4:	9308      	str	r3, [sp, #32]
   165a6:	f104 0308 	add.w	r3, r4, #8
   165aa:	9307      	str	r3, [sp, #28]
   165ac:	2304      	movs	r3, #4
   165ae:	9a06      	ldr	r2, [sp, #24]
   165b0:	9305      	str	r3, [sp, #20]
   165b2:	4b96      	ldr	r3, [pc, #600]	; (1680c <getTrngSource+0x2a4>)
   165b4:	4c94      	ldr	r4, [pc, #592]	; (16808 <getTrngSource+0x2a0>)
   165b6:	fba3 1302 	umull	r1, r3, r3, r2
   165ba:	089b      	lsrs	r3, r3, #2
   165bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   165c0:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
   165c4:	9303      	str	r3, [sp, #12]
   165c6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   165c8:	9e06      	ldr	r6, [sp, #24]
   165ca:	601e      	str	r6, [r3, #0]
   165cc:	2e00      	cmp	r6, #0
   165ce:	d034      	beq.n	1663a <getTrngSource+0xd2>
   165d0:	f04f 0800 	mov.w	r8, #0
   165d4:	f04f 0a01 	mov.w	sl, #1
   165d8:	f8dd 901c 	ldr.w	r9, [sp, #28]
   165dc:	f000 fd04 	bl	16fe8 <LLF_RND_TurnOffTrng>
   165e0:	2300      	movs	r3, #0
   165e2:	9309      	str	r3, [sp, #36]	; 0x24
   165e4:	f1bb 0f00 	cmp.w	fp, #0
   165e8:	f000 80df 	beq.w	167aa <getTrngSource+0x242>
   165ec:	2d00      	cmp	r5, #0
   165ee:	f000 80dc 	beq.w	167aa <getTrngSource+0x242>
   165f2:	9b08      	ldr	r3, [sp, #32]
   165f4:	b1eb      	cbz	r3, 16632 <getTrngSource+0xca>
   165f6:	4628      	mov	r0, r5
   165f8:	a908      	add	r1, sp, #32
   165fa:	f000 fce5 	bl	16fc8 <LLF_RND_GetFastestRosc>
   165fe:	2800      	cmp	r0, #0
   16600:	d03e      	beq.n	16680 <getTrngSource+0x118>
   16602:	4b83      	ldr	r3, [pc, #524]	; (16810 <getTrngSource+0x2a8>)
   16604:	4298      	cmp	r0, r3
   16606:	d118      	bne.n	1663a <getTrngSource+0xd2>
   16608:	9003      	str	r0, [sp, #12]
   1660a:	f000 fced 	bl	16fe8 <LLF_RND_TurnOffTrng>
   1660e:	9803      	ldr	r0, [sp, #12]
   16610:	b011      	add	sp, #68	; 0x44
   16612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16616:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
   1661a:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   1661e:	3001      	adds	r0, #1
   16620:	bf0c      	ite	eq
   16622:	f44f 7104 	moveq.w	r1, #528	; 0x210
   16626:	f8d1 1c0c 	ldrne.w	r1, [r1, #3084]	; 0xc0c
   1662a:	9106      	str	r1, [sp, #24]
   1662c:	e7a7      	b.n	1657e <getTrngSource+0x16>
   1662e:	4879      	ldr	r0, [pc, #484]	; (16814 <getTrngSource+0x2ac>)
   16630:	e7ea      	b.n	16608 <getTrngSource+0xa0>
   16632:	4879      	ldr	r0, [pc, #484]	; (16818 <getTrngSource+0x2b0>)
   16634:	4b76      	ldr	r3, [pc, #472]	; (16810 <getTrngSource+0x2a8>)
   16636:	4298      	cmp	r0, r3
   16638:	d0e6      	beq.n	16608 <getTrngSource+0xa0>
   1663a:	9b08      	ldr	r3, [sp, #32]
   1663c:	2b08      	cmp	r3, #8
   1663e:	f000 80c8 	beq.w	167d2 <getTrngSource+0x26a>
   16642:	2200      	movs	r2, #0
   16644:	005b      	lsls	r3, r3, #1
   16646:	9308      	str	r3, [sp, #32]
   16648:	4629      	mov	r1, r5
   1664a:	ab08      	add	r3, sp, #32
   1664c:	4658      	mov	r0, fp
   1664e:	9200      	str	r2, [sp, #0]
   16650:	f7ff fe72 	bl	16338 <startTrngHW>
   16654:	4b70      	ldr	r3, [pc, #448]	; (16818 <getTrngSource+0x2b0>)
   16656:	4298      	cmp	r0, r3
   16658:	f000 80b7 	beq.w	167ca <getTrngSource+0x262>
   1665c:	2800      	cmp	r0, #0
   1665e:	d1d3      	bne.n	16608 <getTrngSource+0xa0>
   16660:	f8db 2000 	ldr.w	r2, [fp]
   16664:	0a13      	lsrs	r3, r2, #8
   16666:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1666a:	4313      	orrs	r3, r2
   1666c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   16670:	f8cb 3000 	str.w	r3, [fp]
   16674:	9b05      	ldr	r3, [sp, #20]
   16676:	3b01      	subs	r3, #1
   16678:	9305      	str	r3, [sp, #20]
   1667a:	d1a4      	bne.n	165c6 <getTrngSource+0x5e>
   1667c:	2000      	movs	r0, #0
   1667e:	e7c3      	b.n	16608 <getTrngSource+0xa0>
   16680:	4629      	mov	r1, r5
   16682:	9808      	ldr	r0, [sp, #32]
   16684:	f000 fc82 	bl	16f8c <LLF_RND_GetRoscSampleCnt>
   16688:	2800      	cmp	r0, #0
   1668a:	d1ba      	bne.n	16602 <getTrngSource+0x9a>
   1668c:	9b08      	ldr	r3, [sp, #32]
   1668e:	2b08      	cmp	r3, #8
   16690:	f000 8095 	beq.w	167be <getTrngSource+0x256>
   16694:	2b04      	cmp	r3, #4
   16696:	f000 8095 	beq.w	167c4 <getTrngSource+0x25c>
   1669a:	f1a3 0302 	sub.w	r3, r3, #2
   1669e:	fab3 f383 	clz	r3, r3
   166a2:	095b      	lsrs	r3, r3, #5
   166a4:	9304      	str	r3, [sp, #16]
   166a6:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   166aa:	f8c4 a140 	str.w	sl, [r4, #320]	; 0x140
   166ae:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   166b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   166b4:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   166b8:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   166bc:	4293      	cmp	r3, r2
   166be:	d1f6      	bne.n	166ae <getTrngSource+0x146>
   166c0:	2300      	movs	r3, #0
   166c2:	f04f 30ff 	mov.w	r0, #4294967295
   166c6:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
   166ca:	f7ff fd05 	bl	160d8 <CC_HalClearInterruptBit>
   166ce:	2300      	movs	r3, #0
   166d0:	4618      	mov	r0, r3
   166d2:	f06f 031b 	mvn.w	r3, #27
   166d6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   166da:	f7ff fd0b 	bl	160f4 <CC_HalMaskInterrupt>
   166de:	9b04      	ldr	r3, [sp, #16]
   166e0:	4f4a      	ldr	r7, [pc, #296]	; (1680c <getTrngSource+0x2a4>)
   166e2:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   166e6:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   166ea:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   166ee:	f7ff fd01 	bl	160f4 <CC_HalMaskInterrupt>
   166f2:	230a      	movs	r3, #10
   166f4:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   166f8:	692b      	ldr	r3, [r5, #16]
   166fa:	a809      	add	r0, sp, #36	; 0x24
   166fc:	fba7 2303 	umull	r2, r3, r7, r3
   16700:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   16702:	091b      	lsrs	r3, r3, #4
   16704:	fb02 f303 	mul.w	r3, r2, r3
   16708:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1670c:	03db      	lsls	r3, r3, #15
   1670e:	099b      	lsrs	r3, r3, #6
   16710:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   16714:	f8c4 a12c 	str.w	sl, [r4, #300]	; 0x12c
   16718:	9908      	ldr	r1, [sp, #32]
   1671a:	f8db 2000 	ldr.w	r2, [fp]
   1671e:	020b      	lsls	r3, r1, #8
   16720:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   16724:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   16728:	4313      	orrs	r3, r2
   1672a:	f8cb 3000 	str.w	r3, [fp]
   1672e:	f000 fc1d 	bl	16f6c <LLF_RND_WaitRngInterrupt>
   16732:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16734:	f003 031a 	and.w	r3, r3, #26
   16738:	4303      	orrs	r3, r0
   1673a:	f47f af7e 	bne.w	1663a <getTrngSource+0xd2>
   1673e:	fba7 3706 	umull	r3, r7, r7, r6
   16742:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   16746:	ebb8 0f97 	cmp.w	r8, r7, lsr #2
   1674a:	930a      	str	r3, [sp, #40]	; 0x28
   1674c:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   16750:	930b      	str	r3, [sp, #44]	; 0x2c
   16752:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   16756:	930c      	str	r3, [sp, #48]	; 0x30
   16758:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1675c:	930d      	str	r3, [sp, #52]	; 0x34
   1675e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16762:	930e      	str	r3, [sp, #56]	; 0x38
   16764:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   16768:	930f      	str	r3, [sp, #60]	; 0x3c
   1676a:	d101      	bne.n	16770 <getTrngSource+0x208>
   1676c:	9b03      	ldr	r3, [sp, #12]
   1676e:	b9f3      	cbnz	r3, 167ae <getTrngSource+0x246>
   16770:	4648      	mov	r0, r9
   16772:	2218      	movs	r2, #24
   16774:	a90a      	add	r1, sp, #40	; 0x28
   16776:	3e18      	subs	r6, #24
   16778:	f109 0918 	add.w	r9, r9, #24
   1677c:	f7ff fd3a 	bl	161f4 <CC_PalMemCopyPlat>
   16780:	f108 0801 	add.w	r8, r8, #1
   16784:	2e00      	cmp	r6, #0
   16786:	f47f af29 	bne.w	165dc <getTrngSource+0x74>
   1678a:	9b06      	ldr	r3, [sp, #24]
   1678c:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   16790:	d836      	bhi.n	16800 <getTrngSource+0x298>
   16792:	9e07      	ldr	r6, [sp, #28]
   16794:	4619      	mov	r1, r3
   16796:	4630      	mov	r0, r6
   16798:	696a      	ldr	r2, [r5, #20]
   1679a:	461f      	mov	r7, r3
   1679c:	f7ff fe74 	bl	16488 <LLF_RND_RepetitionCounterTest.part.0>
   167a0:	b320      	cbz	r0, 167ec <getTrngSource+0x284>
   167a2:	2300      	movs	r3, #0
   167a4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   167a6:	6013      	str	r3, [r2, #0]
   167a8:	e72b      	b.n	16602 <getTrngSource+0x9a>
   167aa:	481c      	ldr	r0, [pc, #112]	; (1681c <getTrngSource+0x2b4>)
   167ac:	e729      	b.n	16602 <getTrngSource+0x9a>
   167ae:	4648      	mov	r0, r9
   167b0:	461a      	mov	r2, r3
   167b2:	a90a      	add	r1, sp, #40	; 0x28
   167b4:	1af6      	subs	r6, r6, r3
   167b6:	4499      	add	r9, r3
   167b8:	f7ff fd1c 	bl	161f4 <CC_PalMemCopyPlat>
   167bc:	e7e0      	b.n	16780 <getTrngSource+0x218>
   167be:	2303      	movs	r3, #3
   167c0:	9304      	str	r3, [sp, #16]
   167c2:	e770      	b.n	166a6 <getTrngSource+0x13e>
   167c4:	2302      	movs	r3, #2
   167c6:	9304      	str	r3, [sp, #16]
   167c8:	e76d      	b.n	166a6 <getTrngSource+0x13e>
   167ca:	6a2b      	ldr	r3, [r5, #32]
   167cc:	2b00      	cmp	r3, #0
   167ce:	f43f af1b 	beq.w	16608 <getTrngSource+0xa0>
   167d2:	4813      	ldr	r0, [pc, #76]	; (16820 <getTrngSource+0x2b8>)
   167d4:	e718      	b.n	16608 <getTrngSource+0xa0>
   167d6:	2201      	movs	r2, #1
   167d8:	4629      	mov	r1, r5
   167da:	4658      	mov	r0, fp
   167dc:	9600      	str	r6, [sp, #0]
   167de:	ab08      	add	r3, sp, #32
   167e0:	f7ff fdaa 	bl	16338 <startTrngHW>
   167e4:	2800      	cmp	r0, #0
   167e6:	f43f aede 	beq.w	165a6 <getTrngSource+0x3e>
   167ea:	e70d      	b.n	16608 <getTrngSource+0xa0>
   167ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
   167f0:	4639      	mov	r1, r7
   167f2:	4630      	mov	r0, r6
   167f4:	69aa      	ldr	r2, [r5, #24]
   167f6:	f7ff fe71 	bl	164dc <LLF_RND_AdaptiveProportionTest>
   167fa:	2800      	cmp	r0, #0
   167fc:	d1d1      	bne.n	167a2 <getTrngSource+0x23a>
   167fe:	e73d      	b.n	1667c <getTrngSource+0x114>
   16800:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   16802:	601e      	str	r6, [r3, #0]
   16804:	e719      	b.n	1663a <getTrngSource+0xd2>
   16806:	bf00      	nop
   16808:	50841000 	.word	0x50841000
   1680c:	aaaaaaab 	.word	0xaaaaaaab
   16810:	00f10c02 	.word	0x00f10c02
   16814:	00f10c30 	.word	0x00f10c30
   16818:	00f10c31 	.word	0x00f10c31
   1681c:	00f10c35 	.word	0x00f10c35
   16820:	00f10c32 	.word	0x00f10c32

00016824 <LLF_RND_GetTrngSource>:
   16824:	b410      	push	{r4}
   16826:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   1682a:	9401      	str	r4, [sp, #4]
   1682c:	2400      	movs	r4, #0
   1682e:	f8dd c00c 	ldr.w	ip, [sp, #12]
   16832:	e9cd c402 	strd	ip, r4, [sp, #8]
   16836:	bc10      	pop	{r4}
   16838:	f7ff be96 	b.w	16568 <getTrngSource>

0001683c <LLF_RND_RunTrngStartupTest>:
   1683c:	b530      	push	{r4, r5, lr}
   1683e:	4615      	mov	r5, r2
   16840:	2401      	movs	r4, #1
   16842:	b087      	sub	sp, #28
   16844:	ab05      	add	r3, sp, #20
   16846:	9300      	str	r3, [sp, #0]
   16848:	2200      	movs	r2, #0
   1684a:	e9cd 5401 	strd	r5, r4, [sp, #4]
   1684e:	ab04      	add	r3, sp, #16
   16850:	f7ff fe8a 	bl	16568 <getTrngSource>
   16854:	b007      	add	sp, #28
   16856:	bd30      	pop	{r4, r5, pc}

00016858 <mbedtls_hardware_poll>:
   16858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1685c:	b088      	sub	sp, #32
   1685e:	9205      	str	r2, [sp, #20]
   16860:	2900      	cmp	r1, #0
   16862:	d068      	beq.n	16936 <mbedtls_hardware_poll+0xde>
   16864:	461c      	mov	r4, r3
   16866:	2b00      	cmp	r3, #0
   16868:	d065      	beq.n	16936 <mbedtls_hardware_poll+0xde>
   1686a:	4615      	mov	r5, r2
   1686c:	2a00      	cmp	r2, #0
   1686e:	d062      	beq.n	16936 <mbedtls_hardware_poll+0xde>
   16870:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 1693c <mbedtls_hardware_poll+0xe4>
   16874:	460e      	mov	r6, r1
   16876:	f8d8 0000 	ldr.w	r0, [r8]
   1687a:	f04f 31ff 	mov.w	r1, #4294967295
   1687e:	f7ff fcd5 	bl	1622c <CC_PalMutexLock>
   16882:	2800      	cmp	r0, #0
   16884:	d14c      	bne.n	16920 <mbedtls_hardware_poll+0xc8>
   16886:	2000      	movs	r0, #0
   16888:	f7ff fd00 	bl	1628c <CC_PalPowerSaveModeSelect>
   1688c:	2800      	cmp	r0, #0
   1688e:	d143      	bne.n	16918 <mbedtls_hardware_poll+0xc0>
   16890:	482b      	ldr	r0, [pc, #172]	; (16940 <mbedtls_hardware_poll+0xe8>)
   16892:	f000 faa3 	bl	16ddc <RNG_PLAT_SetUserRngParameters>
   16896:	b1e8      	cbz	r0, 168d4 <mbedtls_hardware_poll+0x7c>
   16898:	2001      	movs	r0, #1
   1689a:	f04f 37ff 	mov.w	r7, #4294967295
   1689e:	f7ff fcf5 	bl	1628c <CC_PalPowerSaveModeSelect>
   168a2:	2800      	cmp	r0, #0
   168a4:	d134      	bne.n	16910 <mbedtls_hardware_poll+0xb8>
   168a6:	f44f 7108 	mov.w	r1, #544	; 0x220
   168aa:	4826      	ldr	r0, [pc, #152]	; (16944 <mbedtls_hardware_poll+0xec>)
   168ac:	f7fe fe66 	bl	1557c <mbedtls_zeroize_internal>
   168b0:	2104      	movs	r1, #4
   168b2:	4825      	ldr	r0, [pc, #148]	; (16948 <mbedtls_hardware_poll+0xf0>)
   168b4:	f7fe fe62 	bl	1557c <mbedtls_zeroize_internal>
   168b8:	4821      	ldr	r0, [pc, #132]	; (16940 <mbedtls_hardware_poll+0xe8>)
   168ba:	2128      	movs	r1, #40	; 0x28
   168bc:	f7fe fe5e 	bl	1557c <mbedtls_zeroize_internal>
   168c0:	f8d8 0000 	ldr.w	r0, [r8]
   168c4:	f7ff fcba 	bl	1623c <CC_PalMutexUnlock>
   168c8:	2800      	cmp	r0, #0
   168ca:	d12d      	bne.n	16928 <mbedtls_hardware_poll+0xd0>
   168cc:	4638      	mov	r0, r7
   168ce:	b008      	add	sp, #32
   168d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   168d4:	4b1b      	ldr	r3, [pc, #108]	; (16944 <mbedtls_hardware_poll+0xec>)
   168d6:	4602      	mov	r2, r0
   168d8:	9302      	str	r3, [sp, #8]
   168da:	ab07      	add	r3, sp, #28
   168dc:	9003      	str	r0, [sp, #12]
   168de:	9300      	str	r3, [sp, #0]
   168e0:	4917      	ldr	r1, [pc, #92]	; (16940 <mbedtls_hardware_poll+0xe8>)
   168e2:	4819      	ldr	r0, [pc, #100]	; (16948 <mbedtls_hardware_poll+0xf0>)
   168e4:	9401      	str	r4, [sp, #4]
   168e6:	ab05      	add	r3, sp, #20
   168e8:	f7ff ff9c 	bl	16824 <LLF_RND_GetTrngSource>
   168ec:	2800      	cmp	r0, #0
   168ee:	d1d3      	bne.n	16898 <mbedtls_hardware_poll+0x40>
   168f0:	6823      	ldr	r3, [r4, #0]
   168f2:	42ab      	cmp	r3, r5
   168f4:	d3d0      	bcc.n	16898 <mbedtls_hardware_poll+0x40>
   168f6:	9907      	ldr	r1, [sp, #28]
   168f8:	4607      	mov	r7, r0
   168fa:	462a      	mov	r2, r5
   168fc:	4630      	mov	r0, r6
   168fe:	3108      	adds	r1, #8
   16900:	f7ff fc78 	bl	161f4 <CC_PalMemCopyPlat>
   16904:	2001      	movs	r0, #1
   16906:	6025      	str	r5, [r4, #0]
   16908:	f7ff fcc0 	bl	1628c <CC_PalPowerSaveModeSelect>
   1690c:	2800      	cmp	r0, #0
   1690e:	d0ca      	beq.n	168a6 <mbedtls_hardware_poll+0x4e>
   16910:	480e      	ldr	r0, [pc, #56]	; (1694c <mbedtls_hardware_poll+0xf4>)
   16912:	f7fe fd2d 	bl	15370 <CC_PalAbort>
   16916:	e7c6      	b.n	168a6 <mbedtls_hardware_poll+0x4e>
   16918:	480d      	ldr	r0, [pc, #52]	; (16950 <mbedtls_hardware_poll+0xf8>)
   1691a:	f7fe fd29 	bl	15370 <CC_PalAbort>
   1691e:	e7b7      	b.n	16890 <mbedtls_hardware_poll+0x38>
   16920:	480c      	ldr	r0, [pc, #48]	; (16954 <mbedtls_hardware_poll+0xfc>)
   16922:	f7fe fd25 	bl	15370 <CC_PalAbort>
   16926:	e7ae      	b.n	16886 <mbedtls_hardware_poll+0x2e>
   16928:	480b      	ldr	r0, [pc, #44]	; (16958 <mbedtls_hardware_poll+0x100>)
   1692a:	f7fe fd21 	bl	15370 <CC_PalAbort>
   1692e:	4638      	mov	r0, r7
   16930:	b008      	add	sp, #32
   16932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16936:	f04f 37ff 	mov.w	r7, #4294967295
   1693a:	e7c7      	b.n	168cc <mbedtls_hardware_poll+0x74>
   1693c:	200000c0 	.word	0x200000c0
   16940:	200013d4 	.word	0x200013d4
   16944:	200011b4 	.word	0x200011b4
   16948:	200011b0 	.word	0x200011b0
   1694c:	00018da8 	.word	0x00018da8
   16950:	00018d88 	.word	0x00018d88
   16954:	00018d70 	.word	0x00018d70
   16958:	00018e00 	.word	0x00018e00

0001695c <cc_mbedtls_aes_init>:
   1695c:	b510      	push	{r4, lr}
   1695e:	4604      	mov	r4, r0
   16960:	b130      	cbz	r0, 16970 <cc_mbedtls_aes_init+0x14>
   16962:	2200      	movs	r2, #0
   16964:	2301      	movs	r3, #1
   16966:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   1696a:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   1696e:	bd10      	pop	{r4, pc}
   16970:	4801      	ldr	r0, [pc, #4]	; (16978 <cc_mbedtls_aes_init+0x1c>)
   16972:	f7fe fcfd 	bl	15370 <CC_PalAbort>
   16976:	e7f4      	b.n	16962 <cc_mbedtls_aes_init+0x6>
   16978:	00018e18 	.word	0x00018e18

0001697c <cc_mbedtls_aes_free>:
   1697c:	b118      	cbz	r0, 16986 <cc_mbedtls_aes_free+0xa>
   1697e:	2274      	movs	r2, #116	; 0x74
   16980:	2100      	movs	r1, #0
   16982:	f7ff bc39 	b.w	161f8 <CC_PalMemSetPlat>
   16986:	4770      	bx	lr

00016988 <cc_mbedtls_aes_setkey_enc>:
   16988:	b188      	cbz	r0, 169ae <cc_mbedtls_aes_setkey_enc+0x26>
   1698a:	b199      	cbz	r1, 169b4 <cc_mbedtls_aes_setkey_enc+0x2c>
   1698c:	b510      	push	{r4, lr}
   1698e:	2400      	movs	r4, #0
   16990:	2a80      	cmp	r2, #128	; 0x80
   16992:	6384      	str	r4, [r0, #56]	; 0x38
   16994:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   16998:	d106      	bne.n	169a8 <cc_mbedtls_aes_setkey_enc+0x20>
   1699a:	2210      	movs	r2, #16
   1699c:	6304      	str	r4, [r0, #48]	; 0x30
   1699e:	4410      	add	r0, r2
   169a0:	f7ff fc28 	bl	161f4 <CC_PalMemCopyPlat>
   169a4:	4620      	mov	r0, r4
   169a6:	bd10      	pop	{r4, pc}
   169a8:	f06f 001f 	mvn.w	r0, #31
   169ac:	bd10      	pop	{r4, pc}
   169ae:	f06f 0021 	mvn.w	r0, #33	; 0x21
   169b2:	4770      	bx	lr
   169b4:	f06f 001f 	mvn.w	r0, #31
   169b8:	4770      	bx	lr
   169ba:	bf00      	nop

000169bc <cc_mbedtls_aes_crypt_ecb>:
   169bc:	b570      	push	{r4, r5, r6, lr}
   169be:	4604      	mov	r4, r0
   169c0:	b086      	sub	sp, #24
   169c2:	b1f8      	cbz	r0, 16a04 <cc_mbedtls_aes_crypt_ecb+0x48>
   169c4:	4610      	mov	r0, r2
   169c6:	b1ea      	cbz	r2, 16a04 <cc_mbedtls_aes_crypt_ecb+0x48>
   169c8:	b1e3      	cbz	r3, 16a04 <cc_mbedtls_aes_crypt_ecb+0x48>
   169ca:	2901      	cmp	r1, #1
   169cc:	d81a      	bhi.n	16a04 <cc_mbedtls_aes_crypt_ecb+0x48>
   169ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   169d0:	d016      	beq.n	16a00 <cc_mbedtls_aes_crypt_ecb+0x44>
   169d2:	2a01      	cmp	r2, #1
   169d4:	d116      	bne.n	16a04 <cc_mbedtls_aes_crypt_ecb+0x48>
   169d6:	2510      	movs	r5, #16
   169d8:	2100      	movs	r1, #0
   169da:	eb0d 0605 	add.w	r6, sp, r5
   169de:	9601      	str	r6, [sp, #4]
   169e0:	aa02      	add	r2, sp, #8
   169e2:	6361      	str	r1, [r4, #52]	; 0x34
   169e4:	4629      	mov	r1, r5
   169e6:	9500      	str	r5, [sp, #0]
   169e8:	f000 fb0a 	bl	17000 <SetDataBuffersInfo>
   169ec:	b950      	cbnz	r0, 16a04 <cc_mbedtls_aes_crypt_ecb+0x48>
   169ee:	462b      	mov	r3, r5
   169f0:	4632      	mov	r2, r6
   169f2:	4620      	mov	r0, r4
   169f4:	a902      	add	r1, sp, #8
   169f6:	f000 fd97 	bl	17528 <ProcessAesDrv>
   169fa:	b918      	cbnz	r0, 16a04 <cc_mbedtls_aes_crypt_ecb+0x48>
   169fc:	b006      	add	sp, #24
   169fe:	bd70      	pop	{r4, r5, r6, pc}
   16a00:	2a00      	cmp	r2, #0
   16a02:	d0e8      	beq.n	169d6 <cc_mbedtls_aes_crypt_ecb+0x1a>
   16a04:	f06f 0021 	mvn.w	r0, #33	; 0x21
   16a08:	e7f8      	b.n	169fc <cc_mbedtls_aes_crypt_ecb+0x40>
   16a0a:	bf00      	nop

00016a0c <cc_mbedtls_sha256_init>:
   16a0c:	b510      	push	{r4, lr}
   16a0e:	4604      	mov	r4, r0
   16a10:	b128      	cbz	r0, 16a1e <cc_mbedtls_sha256_init+0x12>
   16a12:	4620      	mov	r0, r4
   16a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16a18:	21f4      	movs	r1, #244	; 0xf4
   16a1a:	f7ff bbef 	b.w	161fc <CC_PalMemSetZeroPlat>
   16a1e:	4804      	ldr	r0, [pc, #16]	; (16a30 <cc_mbedtls_sha256_init+0x24>)
   16a20:	f7fe fca6 	bl	15370 <CC_PalAbort>
   16a24:	4620      	mov	r0, r4
   16a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16a2a:	21f4      	movs	r1, #244	; 0xf4
   16a2c:	f7ff bbe6 	b.w	161fc <CC_PalMemSetZeroPlat>
   16a30:	00018e2c 	.word	0x00018e2c

00016a34 <cc_mbedtls_sha256_free>:
   16a34:	b110      	cbz	r0, 16a3c <cc_mbedtls_sha256_free+0x8>
   16a36:	21f4      	movs	r1, #244	; 0xf4
   16a38:	f7fe bda0 	b.w	1557c <mbedtls_zeroize_internal>
   16a3c:	4770      	bx	lr
   16a3e:	bf00      	nop

00016a40 <cc_mbedtls_sha256_starts>:
   16a40:	b508      	push	{r3, lr}
   16a42:	b161      	cbz	r1, 16a5e <cc_mbedtls_sha256_starts+0x1e>
   16a44:	2901      	cmp	r1, #1
   16a46:	d107      	bne.n	16a58 <cc_mbedtls_sha256_starts+0x18>
   16a48:	2102      	movs	r1, #2
   16a4a:	f000 f85b 	bl	16b04 <mbedtls_sha_starts_internal>
   16a4e:	2800      	cmp	r0, #0
   16a50:	bf18      	it	ne
   16a52:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   16a56:	bd08      	pop	{r3, pc}
   16a58:	f06f 0036 	mvn.w	r0, #54	; 0x36
   16a5c:	bd08      	pop	{r3, pc}
   16a5e:	2101      	movs	r1, #1
   16a60:	f000 f850 	bl	16b04 <mbedtls_sha_starts_internal>
   16a64:	e7f3      	b.n	16a4e <cc_mbedtls_sha256_starts+0xe>
   16a66:	bf00      	nop

00016a68 <cc_mbedtls_sha256_update>:
   16a68:	b530      	push	{r4, r5, lr}
   16a6a:	4605      	mov	r5, r0
   16a6c:	1888      	adds	r0, r1, r2
   16a6e:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   16a72:	460b      	mov	r3, r1
   16a74:	4614      	mov	r4, r2
   16a76:	b0a1      	sub	sp, #132	; 0x84
   16a78:	d801      	bhi.n	16a7e <cc_mbedtls_sha256_update+0x16>
   16a7a:	2a80      	cmp	r2, #128	; 0x80
   16a7c:	d90c      	bls.n	16a98 <cc_mbedtls_sha256_update+0x30>
   16a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   16a82:	d917      	bls.n	16ab4 <cc_mbedtls_sha256_update+0x4c>
   16a84:	4622      	mov	r2, r4
   16a86:	4619      	mov	r1, r3
   16a88:	4628      	mov	r0, r5
   16a8a:	f000 f87d 	bl	16b88 <mbedtls_sha_update_internal>
   16a8e:	4604      	mov	r4, r0
   16a90:	b984      	cbnz	r4, 16ab4 <cc_mbedtls_sha256_update+0x4c>
   16a92:	4620      	mov	r0, r4
   16a94:	b021      	add	sp, #132	; 0x84
   16a96:	bd30      	pop	{r4, r5, pc}
   16a98:	4668      	mov	r0, sp
   16a9a:	f7ff fbab 	bl	161f4 <CC_PalMemCopyPlat>
   16a9e:	4622      	mov	r2, r4
   16aa0:	4669      	mov	r1, sp
   16aa2:	4628      	mov	r0, r5
   16aa4:	f000 f870 	bl	16b88 <mbedtls_sha_update_internal>
   16aa8:	2180      	movs	r1, #128	; 0x80
   16aaa:	4604      	mov	r4, r0
   16aac:	4668      	mov	r0, sp
   16aae:	f7ff fba5 	bl	161fc <CC_PalMemSetZeroPlat>
   16ab2:	e7ed      	b.n	16a90 <cc_mbedtls_sha256_update+0x28>
   16ab4:	f06f 0436 	mvn.w	r4, #54	; 0x36
   16ab8:	e7eb      	b.n	16a92 <cc_mbedtls_sha256_update+0x2a>
   16aba:	bf00      	nop

00016abc <cc_mbedtls_sha256_finish>:
   16abc:	b570      	push	{r4, r5, r6, lr}
   16abe:	b1e8      	cbz	r0, 16afc <cc_mbedtls_sha256_finish+0x40>
   16ac0:	460e      	mov	r6, r1
   16ac2:	b1d9      	cbz	r1, 16afc <cc_mbedtls_sha256_finish+0x40>
   16ac4:	4604      	mov	r4, r0
   16ac6:	f000 f831 	bl	16b2c <mbedtls_sha_finish_internal>
   16aca:	4605      	mov	r5, r0
   16acc:	b9b0      	cbnz	r0, 16afc <cc_mbedtls_sha256_finish+0x40>
   16ace:	6823      	ldr	r3, [r4, #0]
   16ad0:	2b01      	cmp	r3, #1
   16ad2:	d00b      	beq.n	16aec <cc_mbedtls_sha256_finish+0x30>
   16ad4:	2b02      	cmp	r3, #2
   16ad6:	d001      	beq.n	16adc <cc_mbedtls_sha256_finish+0x20>
   16ad8:	4628      	mov	r0, r5
   16ada:	bd70      	pop	{r4, r5, r6, pc}
   16adc:	221c      	movs	r2, #28
   16ade:	4630      	mov	r0, r6
   16ae0:	f104 0108 	add.w	r1, r4, #8
   16ae4:	f7ff fb86 	bl	161f4 <CC_PalMemCopyPlat>
   16ae8:	4628      	mov	r0, r5
   16aea:	bd70      	pop	{r4, r5, r6, pc}
   16aec:	2220      	movs	r2, #32
   16aee:	4630      	mov	r0, r6
   16af0:	f104 0108 	add.w	r1, r4, #8
   16af4:	f7ff fb7e 	bl	161f4 <CC_PalMemCopyPlat>
   16af8:	4628      	mov	r0, r5
   16afa:	bd70      	pop	{r4, r5, r6, pc}
   16afc:	f06f 0536 	mvn.w	r5, #54	; 0x36
   16b00:	e7ea      	b.n	16ad8 <cc_mbedtls_sha256_finish+0x1c>
   16b02:	bf00      	nop

00016b04 <mbedtls_sha_starts_internal>:
   16b04:	b178      	cbz	r0, 16b26 <mbedtls_sha_starts_internal+0x22>
   16b06:	b538      	push	{r3, r4, r5, lr}
   16b08:	460d      	mov	r5, r1
   16b0a:	21f0      	movs	r1, #240	; 0xf0
   16b0c:	4604      	mov	r4, r0
   16b0e:	f7ff fb75 	bl	161fc <CC_PalMemSetZeroPlat>
   16b12:	2340      	movs	r3, #64	; 0x40
   16b14:	4620      	mov	r0, r4
   16b16:	6025      	str	r5, [r4, #0]
   16b18:	65e3      	str	r3, [r4, #92]	; 0x5c
   16b1a:	f000 faa5 	bl	17068 <InitHashDrv>
   16b1e:	3800      	subs	r0, #0
   16b20:	bf18      	it	ne
   16b22:	2001      	movne	r0, #1
   16b24:	bd38      	pop	{r3, r4, r5, pc}
   16b26:	2001      	movs	r0, #1
   16b28:	4770      	bx	lr
   16b2a:	bf00      	nop

00016b2c <mbedtls_sha_finish_internal>:
   16b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16b2e:	6e05      	ldr	r5, [r0, #96]	; 0x60
   16b30:	b0a5      	sub	sp, #148	; 0x94
   16b32:	4604      	mov	r4, r0
   16b34:	ae04      	add	r6, sp, #16
   16b36:	b9e5      	cbnz	r5, 16b72 <mbedtls_sha_finish_internal+0x46>
   16b38:	2300      	movs	r3, #0
   16b3a:	2701      	movs	r7, #1
   16b3c:	9301      	str	r3, [sp, #4]
   16b3e:	4630      	mov	r0, r6
   16b40:	6067      	str	r7, [r4, #4]
   16b42:	4629      	mov	r1, r5
   16b44:	aa02      	add	r2, sp, #8
   16b46:	9300      	str	r3, [sp, #0]
   16b48:	f000 fa5a 	bl	17000 <SetDataBuffersInfo>
   16b4c:	b110      	cbz	r0, 16b54 <mbedtls_sha_finish_internal+0x28>
   16b4e:	2001      	movs	r0, #1
   16b50:	b025      	add	sp, #148	; 0x94
   16b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16b54:	462a      	mov	r2, r5
   16b56:	4620      	mov	r0, r4
   16b58:	a902      	add	r1, sp, #8
   16b5a:	f000 faaf 	bl	170bc <ProcessHashDrv>
   16b5e:	2800      	cmp	r0, #0
   16b60:	d1f5      	bne.n	16b4e <mbedtls_sha_finish_internal+0x22>
   16b62:	4620      	mov	r0, r4
   16b64:	f000 fbc0 	bl	172e8 <FinishHashDrv>
   16b68:	2800      	cmp	r0, #0
   16b6a:	d1f0      	bne.n	16b4e <mbedtls_sha_finish_internal+0x22>
   16b6c:	6620      	str	r0, [r4, #96]	; 0x60
   16b6e:	b025      	add	sp, #148	; 0x94
   16b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16b72:	2d80      	cmp	r5, #128	; 0x80
   16b74:	462a      	mov	r2, r5
   16b76:	4630      	mov	r0, r6
   16b78:	bf28      	it	cs
   16b7a:	2280      	movcs	r2, #128	; 0x80
   16b7c:	f104 0164 	add.w	r1, r4, #100	; 0x64
   16b80:	f7ff fb38 	bl	161f4 <CC_PalMemCopyPlat>
   16b84:	6e25      	ldr	r5, [r4, #96]	; 0x60
   16b86:	e7d7      	b.n	16b38 <mbedtls_sha_finish_internal+0xc>

00016b88 <mbedtls_sha_update_internal>:
   16b88:	2800      	cmp	r0, #0
   16b8a:	f000 80dc 	beq.w	16d46 <mbedtls_sha_update_internal+0x1be>
   16b8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b92:	4617      	mov	r7, r2
   16b94:	b0a5      	sub	sp, #148	; 0x94
   16b96:	2a00      	cmp	r2, #0
   16b98:	f000 80ab 	beq.w	16cf2 <mbedtls_sha_update_internal+0x16a>
   16b9c:	460c      	mov	r4, r1
   16b9e:	2900      	cmp	r1, #0
   16ba0:	d061      	beq.n	16c66 <mbedtls_sha_update_internal+0xde>
   16ba2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   16ba6:	4605      	mov	r5, r0
   16ba8:	f0c0 80ed 	bcc.w	16d86 <mbedtls_sha_update_internal+0x1fe>
   16bac:	f64f 7aff 	movw	sl, #65535	; 0xffff
   16bb0:	f5a2 477f 	sub.w	r7, r2, #65280	; 0xff00
   16bb4:	6e00      	ldr	r0, [r0, #96]	; 0x60
   16bb6:	3fff      	subs	r7, #255	; 0xff
   16bb8:	f105 0b64 	add.w	fp, r5, #100	; 0x64
   16bbc:	eb01 090a 	add.w	r9, r1, sl
   16bc0:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   16bc2:	f5a9 467f 	sub.w	r6, r9, #65280	; 0xff00
   16bc6:	1a14      	subs	r4, r2, r0
   16bc8:	fbb4 f3f2 	udiv	r3, r4, r2
   16bcc:	fb02 4413 	mls	r4, r2, r3, r4
   16bd0:	3eff      	subs	r6, #255	; 0xff
   16bd2:	2c00      	cmp	r4, #0
   16bd4:	d161      	bne.n	16c9a <mbedtls_sha_update_internal+0x112>
   16bd6:	4282      	cmp	r2, r0
   16bd8:	f64f 74ff 	movw	r4, #65535	; 0xffff
   16bdc:	d06e      	beq.n	16cbc <mbedtls_sha_update_internal+0x134>
   16bde:	fbb4 f8f2 	udiv	r8, r4, r2
   16be2:	fb02 f808 	mul.w	r8, r2, r8
   16be6:	f1b8 0f00 	cmp.w	r8, #0
   16bea:	d140      	bne.n	16c6e <mbedtls_sha_update_internal+0xe6>
   16bec:	b954      	cbnz	r4, 16c04 <mbedtls_sha_update_internal+0x7c>
   16bee:	f5a7 437f 	sub.w	r3, r7, #65280	; 0xff00
   16bf2:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   16bf6:	464c      	mov	r4, r9
   16bf8:	f1a3 03ff 	sub.w	r3, r3, #255	; 0xff
   16bfc:	44d1      	add	r9, sl
   16bfe:	d314      	bcc.n	16c2a <mbedtls_sha_update_internal+0xa2>
   16c00:	461f      	mov	r7, r3
   16c02:	e7dd      	b.n	16bc0 <mbedtls_sha_update_internal+0x38>
   16c04:	3019      	adds	r0, #25
   16c06:	4622      	mov	r2, r4
   16c08:	4631      	mov	r1, r6
   16c0a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   16c0e:	f7ff faf1 	bl	161f4 <CC_PalMemCopyPlat>
   16c12:	6e28      	ldr	r0, [r5, #96]	; 0x60
   16c14:	f5a7 437f 	sub.w	r3, r7, #65280	; 0xff00
   16c18:	4420      	add	r0, r4
   16c1a:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   16c1e:	464c      	mov	r4, r9
   16c20:	6628      	str	r0, [r5, #96]	; 0x60
   16c22:	44d1      	add	r9, sl
   16c24:	f1a3 03ff 	sub.w	r3, r3, #255	; 0xff
   16c28:	d2ea      	bcs.n	16c00 <mbedtls_sha_update_internal+0x78>
   16c2a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   16c2c:	1a16      	subs	r6, r2, r0
   16c2e:	fbb6 f3f2 	udiv	r3, r6, r2
   16c32:	fb02 6613 	mls	r6, r2, r3, r6
   16c36:	42be      	cmp	r6, r7
   16c38:	bf28      	it	cs
   16c3a:	463e      	movcs	r6, r7
   16c3c:	2e00      	cmp	r6, #0
   16c3e:	d174      	bne.n	16d2a <mbedtls_sha_update_internal+0x1a2>
   16c40:	4290      	cmp	r0, r2
   16c42:	f000 8082 	beq.w	16d4a <mbedtls_sha_update_internal+0x1c2>
   16c46:	fbb7 f6f2 	udiv	r6, r7, r2
   16c4a:	fb02 f606 	mul.w	r6, r2, r6
   16c4e:	2e00      	cmp	r6, #0
   16c50:	d05c      	beq.n	16d0c <mbedtls_sha_update_internal+0x184>
   16c52:	2300      	movs	r3, #0
   16c54:	4631      	mov	r1, r6
   16c56:	4620      	mov	r0, r4
   16c58:	e9cd 3300 	strd	r3, r3, [sp]
   16c5c:	aa02      	add	r2, sp, #8
   16c5e:	f000 f9cf 	bl	17000 <SetDataBuffersInfo>
   16c62:	2800      	cmp	r0, #0
   16c64:	d049      	beq.n	16cfa <mbedtls_sha_update_internal+0x172>
   16c66:	2001      	movs	r0, #1
   16c68:	b025      	add	sp, #148	; 0x94
   16c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c6e:	2300      	movs	r3, #0
   16c70:	4641      	mov	r1, r8
   16c72:	4630      	mov	r0, r6
   16c74:	e9cd 3300 	strd	r3, r3, [sp]
   16c78:	aa02      	add	r2, sp, #8
   16c7a:	f000 f9c1 	bl	17000 <SetDataBuffersInfo>
   16c7e:	2800      	cmp	r0, #0
   16c80:	d1f1      	bne.n	16c66 <mbedtls_sha_update_internal+0xde>
   16c82:	4642      	mov	r2, r8
   16c84:	4628      	mov	r0, r5
   16c86:	a902      	add	r1, sp, #8
   16c88:	f000 fa18 	bl	170bc <ProcessHashDrv>
   16c8c:	2800      	cmp	r0, #0
   16c8e:	d1ea      	bne.n	16c66 <mbedtls_sha_update_internal+0xde>
   16c90:	6e28      	ldr	r0, [r5, #96]	; 0x60
   16c92:	4446      	add	r6, r8
   16c94:	eba4 0408 	sub.w	r4, r4, r8
   16c98:	e7a8      	b.n	16bec <mbedtls_sha_update_internal+0x64>
   16c9a:	4554      	cmp	r4, sl
   16c9c:	bf28      	it	cs
   16c9e:	4654      	movcs	r4, sl
   16ca0:	4631      	mov	r1, r6
   16ca2:	4622      	mov	r2, r4
   16ca4:	4458      	add	r0, fp
   16ca6:	f7ff faa5 	bl	161f4 <CC_PalMemCopyPlat>
   16caa:	6e28      	ldr	r0, [r5, #96]	; 0x60
   16cac:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   16cae:	4420      	add	r0, r4
   16cb0:	4282      	cmp	r2, r0
   16cb2:	4426      	add	r6, r4
   16cb4:	6628      	str	r0, [r5, #96]	; 0x60
   16cb6:	ebaa 0404 	sub.w	r4, sl, r4
   16cba:	d190      	bne.n	16bde <mbedtls_sha_update_internal+0x56>
   16cbc:	2a80      	cmp	r2, #128	; 0x80
   16cbe:	bf28      	it	cs
   16cc0:	2280      	movcs	r2, #128	; 0x80
   16cc2:	4659      	mov	r1, fp
   16cc4:	a804      	add	r0, sp, #16
   16cc6:	f7ff fa95 	bl	161f4 <CC_PalMemCopyPlat>
   16cca:	2300      	movs	r3, #0
   16ccc:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   16cce:	aa02      	add	r2, sp, #8
   16cd0:	e9cd 3300 	strd	r3, r3, [sp]
   16cd4:	a804      	add	r0, sp, #16
   16cd6:	f000 f993 	bl	17000 <SetDataBuffersInfo>
   16cda:	2800      	cmp	r0, #0
   16cdc:	d1c3      	bne.n	16c66 <mbedtls_sha_update_internal+0xde>
   16cde:	4628      	mov	r0, r5
   16ce0:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   16ce2:	a902      	add	r1, sp, #8
   16ce4:	f000 f9ea 	bl	170bc <ProcessHashDrv>
   16ce8:	2800      	cmp	r0, #0
   16cea:	d1bc      	bne.n	16c66 <mbedtls_sha_update_internal+0xde>
   16cec:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   16cee:	6628      	str	r0, [r5, #96]	; 0x60
   16cf0:	e775      	b.n	16bde <mbedtls_sha_update_internal+0x56>
   16cf2:	4638      	mov	r0, r7
   16cf4:	b025      	add	sp, #148	; 0x94
   16cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cfa:	4632      	mov	r2, r6
   16cfc:	4628      	mov	r0, r5
   16cfe:	a902      	add	r1, sp, #8
   16d00:	f000 f9dc 	bl	170bc <ProcessHashDrv>
   16d04:	2800      	cmp	r0, #0
   16d06:	d1ae      	bne.n	16c66 <mbedtls_sha_update_internal+0xde>
   16d08:	4434      	add	r4, r6
   16d0a:	1bbf      	subs	r7, r7, r6
   16d0c:	2f00      	cmp	r7, #0
   16d0e:	d0f0      	beq.n	16cf2 <mbedtls_sha_update_internal+0x16a>
   16d10:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   16d12:	463a      	mov	r2, r7
   16d14:	3319      	adds	r3, #25
   16d16:	eb05 0083 	add.w	r0, r5, r3, lsl #2
   16d1a:	4621      	mov	r1, r4
   16d1c:	f7ff fa6a 	bl	161f4 <CC_PalMemCopyPlat>
   16d20:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   16d22:	2000      	movs	r0, #0
   16d24:	443b      	add	r3, r7
   16d26:	662b      	str	r3, [r5, #96]	; 0x60
   16d28:	e79e      	b.n	16c68 <mbedtls_sha_update_internal+0xe0>
   16d2a:	f105 0364 	add.w	r3, r5, #100	; 0x64
   16d2e:	4621      	mov	r1, r4
   16d30:	4632      	mov	r2, r6
   16d32:	4418      	add	r0, r3
   16d34:	f7ff fa5e 	bl	161f4 <CC_PalMemCopyPlat>
   16d38:	6e28      	ldr	r0, [r5, #96]	; 0x60
   16d3a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   16d3c:	4430      	add	r0, r6
   16d3e:	1bbf      	subs	r7, r7, r6
   16d40:	4434      	add	r4, r6
   16d42:	6628      	str	r0, [r5, #96]	; 0x60
   16d44:	e77c      	b.n	16c40 <mbedtls_sha_update_internal+0xb8>
   16d46:	2001      	movs	r0, #1
   16d48:	4770      	bx	lr
   16d4a:	2a80      	cmp	r2, #128	; 0x80
   16d4c:	bf28      	it	cs
   16d4e:	2280      	movcs	r2, #128	; 0x80
   16d50:	f105 0164 	add.w	r1, r5, #100	; 0x64
   16d54:	a804      	add	r0, sp, #16
   16d56:	f7ff fa4d 	bl	161f4 <CC_PalMemCopyPlat>
   16d5a:	2300      	movs	r3, #0
   16d5c:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   16d5e:	a804      	add	r0, sp, #16
   16d60:	e9cd 3300 	strd	r3, r3, [sp]
   16d64:	aa02      	add	r2, sp, #8
   16d66:	f000 f94b 	bl	17000 <SetDataBuffersInfo>
   16d6a:	2800      	cmp	r0, #0
   16d6c:	f47f af7b 	bne.w	16c66 <mbedtls_sha_update_internal+0xde>
   16d70:	4628      	mov	r0, r5
   16d72:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   16d74:	a902      	add	r1, sp, #8
   16d76:	f000 f9a1 	bl	170bc <ProcessHashDrv>
   16d7a:	2800      	cmp	r0, #0
   16d7c:	f47f af73 	bne.w	16c66 <mbedtls_sha_update_internal+0xde>
   16d80:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   16d82:	6628      	str	r0, [r5, #96]	; 0x60
   16d84:	e75f      	b.n	16c46 <mbedtls_sha_update_internal+0xbe>
   16d86:	6e00      	ldr	r0, [r0, #96]	; 0x60
   16d88:	e74f      	b.n	16c2a <mbedtls_sha_update_internal+0xa2>
   16d8a:	bf00      	nop

00016d8c <cc_mbedtls_sha256>:
   16d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16d8e:	461c      	mov	r4, r3
   16d90:	4605      	mov	r5, r0
   16d92:	4811      	ldr	r0, [pc, #68]	; (16dd8 <cc_mbedtls_sha256+0x4c>)
   16d94:	4616      	mov	r6, r2
   16d96:	460f      	mov	r7, r1
   16d98:	f7ff fe38 	bl	16a0c <cc_mbedtls_sha256_init>
   16d9c:	4621      	mov	r1, r4
   16d9e:	480e      	ldr	r0, [pc, #56]	; (16dd8 <cc_mbedtls_sha256+0x4c>)
   16da0:	f7ff fe4e 	bl	16a40 <cc_mbedtls_sha256_starts>
   16da4:	4604      	mov	r4, r0
   16da6:	b120      	cbz	r0, 16db2 <cc_mbedtls_sha256+0x26>
   16da8:	480b      	ldr	r0, [pc, #44]	; (16dd8 <cc_mbedtls_sha256+0x4c>)
   16daa:	f7ff fe43 	bl	16a34 <cc_mbedtls_sha256_free>
   16dae:	4620      	mov	r0, r4
   16db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16db2:	463a      	mov	r2, r7
   16db4:	4629      	mov	r1, r5
   16db6:	4808      	ldr	r0, [pc, #32]	; (16dd8 <cc_mbedtls_sha256+0x4c>)
   16db8:	f7ff fe56 	bl	16a68 <cc_mbedtls_sha256_update>
   16dbc:	4604      	mov	r4, r0
   16dbe:	2800      	cmp	r0, #0
   16dc0:	d1f2      	bne.n	16da8 <cc_mbedtls_sha256+0x1c>
   16dc2:	4631      	mov	r1, r6
   16dc4:	4804      	ldr	r0, [pc, #16]	; (16dd8 <cc_mbedtls_sha256+0x4c>)
   16dc6:	f7ff fe79 	bl	16abc <cc_mbedtls_sha256_finish>
   16dca:	4604      	mov	r4, r0
   16dcc:	4802      	ldr	r0, [pc, #8]	; (16dd8 <cc_mbedtls_sha256+0x4c>)
   16dce:	f7ff fe31 	bl	16a34 <cc_mbedtls_sha256_free>
   16dd2:	4620      	mov	r0, r4
   16dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16dd6:	bf00      	nop
   16dd8:	200013fc 	.word	0x200013fc

00016ddc <RNG_PLAT_SetUserRngParameters>:
   16ddc:	231c      	movs	r3, #28
   16dde:	b530      	push	{r4, r5, lr}
   16de0:	b083      	sub	sp, #12
   16de2:	a901      	add	r1, sp, #4
   16de4:	4604      	mov	r4, r0
   16de6:	9301      	str	r3, [sp, #4]
   16de8:	f000 f836 	bl	16e58 <CC_PalTrngParamGet>
   16dec:	4605      	mov	r5, r0
   16dee:	b938      	cbnz	r0, 16e00 <RNG_PLAT_SetUserRngParameters+0x24>
   16df0:	9b01      	ldr	r3, [sp, #4]
   16df2:	2b1c      	cmp	r3, #28
   16df4:	d007      	beq.n	16e06 <RNG_PLAT_SetUserRngParameters+0x2a>
   16df6:	4d16      	ldr	r5, [pc, #88]	; (16e50 <RNG_PLAT_SetUserRngParameters+0x74>)
   16df8:	211c      	movs	r1, #28
   16dfa:	4620      	mov	r0, r4
   16dfc:	f7ff f9fe 	bl	161fc <CC_PalMemSetZeroPlat>
   16e00:	4628      	mov	r0, r5
   16e02:	b003      	add	sp, #12
   16e04:	bd30      	pop	{r4, r5, pc}
   16e06:	2101      	movs	r1, #1
   16e08:	e9d4 3200 	ldrd	r3, r2, [r4]
   16e0c:	3b00      	subs	r3, #0
   16e0e:	bf18      	it	ne
   16e10:	2301      	movne	r3, #1
   16e12:	61e1      	str	r1, [r4, #28]
   16e14:	b10a      	cbz	r2, 16e1a <RNG_PLAT_SetUserRngParameters+0x3e>
   16e16:	f043 0302 	orr.w	r3, r3, #2
   16e1a:	68a2      	ldr	r2, [r4, #8]
   16e1c:	b932      	cbnz	r2, 16e2c <RNG_PLAT_SetUserRngParameters+0x50>
   16e1e:	68e2      	ldr	r2, [r4, #12]
   16e20:	b942      	cbnz	r2, 16e34 <RNG_PLAT_SetUserRngParameters+0x58>
   16e22:	e9c4 3208 	strd	r3, r2, [r4, #32]
   16e26:	b98b      	cbnz	r3, 16e4c <RNG_PLAT_SetUserRngParameters+0x70>
   16e28:	4d0a      	ldr	r5, [pc, #40]	; (16e54 <RNG_PLAT_SetUserRngParameters+0x78>)
   16e2a:	e7e5      	b.n	16df8 <RNG_PLAT_SetUserRngParameters+0x1c>
   16e2c:	68e2      	ldr	r2, [r4, #12]
   16e2e:	f043 0304 	orr.w	r3, r3, #4
   16e32:	b13a      	cbz	r2, 16e44 <RNG_PLAT_SetUserRngParameters+0x68>
   16e34:	2200      	movs	r2, #0
   16e36:	4628      	mov	r0, r5
   16e38:	f043 0308 	orr.w	r3, r3, #8
   16e3c:	e9c4 3208 	strd	r3, r2, [r4, #32]
   16e40:	b003      	add	sp, #12
   16e42:	bd30      	pop	{r4, r5, pc}
   16e44:	4615      	mov	r5, r2
   16e46:	e9c4 3208 	strd	r3, r2, [r4, #32]
   16e4a:	e7d9      	b.n	16e00 <RNG_PLAT_SetUserRngParameters+0x24>
   16e4c:	4615      	mov	r5, r2
   16e4e:	e7d7      	b.n	16e00 <RNG_PLAT_SetUserRngParameters+0x24>
   16e50:	00f00c37 	.word	0x00f00c37
   16e54:	00f00c0e 	.word	0x00f00c0e

00016e58 <CC_PalTrngParamGet>:
   16e58:	4603      	mov	r3, r0
   16e5a:	2800      	cmp	r0, #0
   16e5c:	d066      	beq.n	16f2c <CC_PalTrngParamGet+0xd4>
   16e5e:	2900      	cmp	r1, #0
   16e60:	d064      	beq.n	16f2c <CC_PalTrngParamGet+0xd4>
   16e62:	680a      	ldr	r2, [r1, #0]
   16e64:	2a1c      	cmp	r2, #28
   16e66:	d161      	bne.n	16f2c <CC_PalTrngParamGet+0xd4>
   16e68:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
   16e6c:	493b      	ldr	r1, [pc, #236]	; (16f5c <CC_PalTrngParamGet+0x104>)
   16e6e:	f8d2 0c10 	ldr.w	r0, [r2, #3088]	; 0xc10
   16e72:	4288      	cmp	r0, r1
   16e74:	d05c      	beq.n	16f30 <CC_PalTrngParamGet+0xd8>
   16e76:	f8d2 1c10 	ldr.w	r1, [r2, #3088]	; 0xc10
   16e7a:	3101      	adds	r1, #1
   16e7c:	d058      	beq.n	16f30 <CC_PalTrngParamGet+0xd8>
   16e7e:	f8d2 1c10 	ldr.w	r1, [r2, #3088]	; 0xc10
   16e82:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
   16e86:	6019      	str	r1, [r3, #0]
   16e88:	f8d2 0c14 	ldr.w	r0, [r2, #3092]	; 0xc14
   16e8c:	4934      	ldr	r1, [pc, #208]	; (16f60 <CC_PalTrngParamGet+0x108>)
   16e8e:	4288      	cmp	r0, r1
   16e90:	d060      	beq.n	16f54 <CC_PalTrngParamGet+0xfc>
   16e92:	f8d2 1c14 	ldr.w	r1, [r2, #3092]	; 0xc14
   16e96:	3101      	adds	r1, #1
   16e98:	d05c      	beq.n	16f54 <CC_PalTrngParamGet+0xfc>
   16e9a:	f8d2 1c14 	ldr.w	r1, [r2, #3092]	; 0xc14
   16e9e:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
   16ea2:	6059      	str	r1, [r3, #4]
   16ea4:	f8d2 1c18 	ldr.w	r1, [r2, #3096]	; 0xc18
   16ea8:	f511 7f94 	cmn.w	r1, #296	; 0x128
   16eac:	d04f      	beq.n	16f4e <CC_PalTrngParamGet+0xf6>
   16eae:	f8d2 1c18 	ldr.w	r1, [r2, #3096]	; 0xc18
   16eb2:	3101      	adds	r1, #1
   16eb4:	d04b      	beq.n	16f4e <CC_PalTrngParamGet+0xf6>
   16eb6:	f8d2 1c18 	ldr.w	r1, [r2, #3096]	; 0xc18
   16eba:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
   16ebe:	6099      	str	r1, [r3, #8]
   16ec0:	f8d2 0c1c 	ldr.w	r0, [r2, #3100]	; 0xc1c
   16ec4:	4927      	ldr	r1, [pc, #156]	; (16f64 <CC_PalTrngParamGet+0x10c>)
   16ec6:	4288      	cmp	r0, r1
   16ec8:	d03e      	beq.n	16f48 <CC_PalTrngParamGet+0xf0>
   16eca:	f8d2 1c1c 	ldr.w	r1, [r2, #3100]	; 0xc1c
   16ece:	3101      	adds	r1, #1
   16ed0:	d03a      	beq.n	16f48 <CC_PalTrngParamGet+0xf0>
   16ed2:	f8d2 1c1c 	ldr.w	r1, [r2, #3100]	; 0xc1c
   16ed6:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
   16eda:	60d9      	str	r1, [r3, #12]
   16edc:	f8d2 1c00 	ldr.w	r1, [r2, #3072]	; 0xc00
   16ee0:	3170      	adds	r1, #112	; 0x70
   16ee2:	d02f      	beq.n	16f44 <CC_PalTrngParamGet+0xec>
   16ee4:	f8d2 1c00 	ldr.w	r1, [r2, #3072]	; 0xc00
   16ee8:	3101      	adds	r1, #1
   16eea:	d02b      	beq.n	16f44 <CC_PalTrngParamGet+0xec>
   16eec:	f8d2 1c00 	ldr.w	r1, [r2, #3072]	; 0xc00
   16ef0:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
   16ef4:	6119      	str	r1, [r3, #16]
   16ef6:	f8d2 1c04 	ldr.w	r1, [r2, #3076]	; 0xc04
   16efa:	31af      	adds	r1, #175	; 0xaf
   16efc:	d020      	beq.n	16f40 <CC_PalTrngParamGet+0xe8>
   16efe:	f8d2 1c04 	ldr.w	r1, [r2, #3076]	; 0xc04
   16f02:	3101      	adds	r1, #1
   16f04:	d01c      	beq.n	16f40 <CC_PalTrngParamGet+0xe8>
   16f06:	f8d2 1c04 	ldr.w	r1, [r2, #3076]	; 0xc04
   16f0a:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
   16f0e:	6159      	str	r1, [r3, #20]
   16f10:	f8d2 0c08 	ldr.w	r0, [r2, #3080]	; 0xc08
   16f14:	4914      	ldr	r1, [pc, #80]	; (16f68 <CC_PalTrngParamGet+0x110>)
   16f16:	4288      	cmp	r0, r1
   16f18:	d00d      	beq.n	16f36 <CC_PalTrngParamGet+0xde>
   16f1a:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
   16f1e:	3101      	adds	r1, #1
   16f20:	d009      	beq.n	16f36 <CC_PalTrngParamGet+0xde>
   16f22:	f8d2 2c08 	ldr.w	r2, [r2, #3080]	; 0xc08
   16f26:	2000      	movs	r0, #0
   16f28:	619a      	str	r2, [r3, #24]
   16f2a:	4770      	bx	lr
   16f2c:	2001      	movs	r0, #1
   16f2e:	4770      	bx	lr
   16f30:	f640 01fc 	movw	r1, #2300	; 0x8fc
   16f34:	e7a5      	b.n	16e82 <CC_PalTrngParamGet+0x2a>
   16f36:	f240 3237 	movw	r2, #823	; 0x337
   16f3a:	2000      	movs	r0, #0
   16f3c:	619a      	str	r2, [r3, #24]
   16f3e:	4770      	bx	lr
   16f40:	2151      	movs	r1, #81	; 0x51
   16f42:	e7e2      	b.n	16f0a <CC_PalTrngParamGet+0xb2>
   16f44:	2190      	movs	r1, #144	; 0x90
   16f46:	e7d3      	b.n	16ef0 <CC_PalTrngParamGet+0x98>
   16f48:	f642 1104 	movw	r1, #10500	; 0x2904
   16f4c:	e7c3      	b.n	16ed6 <CC_PalTrngParamGet+0x7e>
   16f4e:	f640 61d8 	movw	r1, #3800	; 0xed8
   16f52:	e7b2      	b.n	16eba <CC_PalTrngParamGet+0x62>
   16f54:	f242 01d0 	movw	r1, #8400	; 0x20d0
   16f58:	e7a1      	b.n	16e9e <CC_PalTrngParamGet+0x46>
   16f5a:	bf00      	nop
   16f5c:	fffff8fc 	.word	0xfffff8fc
   16f60:	ffff20d0 	.word	0xffff20d0
   16f64:	ffff2904 	.word	0xffff2904
   16f68:	fffff337 	.word	0xfffff337

00016f6c <LLF_RND_WaitRngInterrupt>:
   16f6c:	4601      	mov	r1, r0
   16f6e:	b508      	push	{r3, lr}
   16f70:	f44f 6080 	mov.w	r0, #1024	; 0x400
   16f74:	f7ff f8ca 	bl	1610c <CC_HalWaitInterruptRND>
   16f78:	2200      	movs	r2, #0
   16f7a:	4b03      	ldr	r3, [pc, #12]	; (16f88 <LLF_RND_WaitRngInterrupt+0x1c>)
   16f7c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   16f80:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   16f84:	bd08      	pop	{r3, pc}
   16f86:	bf00      	nop
   16f88:	50841000 	.word	0x50841000

00016f8c <LLF_RND_GetRoscSampleCnt>:
   16f8c:	3801      	subs	r0, #1
   16f8e:	2807      	cmp	r0, #7
   16f90:	d805      	bhi.n	16f9e <LLF_RND_GetRoscSampleCnt+0x12>
   16f92:	e8df f000 	tbb	[pc, r0]
   16f96:	0e12      	.short	0x0e12
   16f98:	04040a04 	.word	0x04040a04
   16f9c:	0604      	.short	0x0604
   16f9e:	4809      	ldr	r0, [pc, #36]	; (16fc4 <LLF_RND_GetRoscSampleCnt+0x38>)
   16fa0:	4770      	bx	lr
   16fa2:	68cb      	ldr	r3, [r1, #12]
   16fa4:	2000      	movs	r0, #0
   16fa6:	624b      	str	r3, [r1, #36]	; 0x24
   16fa8:	4770      	bx	lr
   16faa:	688b      	ldr	r3, [r1, #8]
   16fac:	2000      	movs	r0, #0
   16fae:	624b      	str	r3, [r1, #36]	; 0x24
   16fb0:	4770      	bx	lr
   16fb2:	684b      	ldr	r3, [r1, #4]
   16fb4:	2000      	movs	r0, #0
   16fb6:	624b      	str	r3, [r1, #36]	; 0x24
   16fb8:	4770      	bx	lr
   16fba:	680b      	ldr	r3, [r1, #0]
   16fbc:	2000      	movs	r0, #0
   16fbe:	624b      	str	r3, [r1, #36]	; 0x24
   16fc0:	4770      	bx	lr
   16fc2:	bf00      	nop
   16fc4:	00f10c31 	.word	0x00f10c31

00016fc8 <LLF_RND_GetFastestRosc>:
   16fc8:	680b      	ldr	r3, [r1, #0]
   16fca:	e002      	b.n	16fd2 <LLF_RND_GetFastestRosc+0xa>
   16fcc:	2b08      	cmp	r3, #8
   16fce:	600b      	str	r3, [r1, #0]
   16fd0:	d806      	bhi.n	16fe0 <LLF_RND_GetFastestRosc+0x18>
   16fd2:	6a02      	ldr	r2, [r0, #32]
   16fd4:	4213      	tst	r3, r2
   16fd6:	ea4f 0343 	mov.w	r3, r3, lsl #1
   16fda:	d0f7      	beq.n	16fcc <LLF_RND_GetFastestRosc+0x4>
   16fdc:	2000      	movs	r0, #0
   16fde:	4770      	bx	lr
   16fe0:	4800      	ldr	r0, [pc, #0]	; (16fe4 <LLF_RND_GetFastestRosc+0x1c>)
   16fe2:	4770      	bx	lr
   16fe4:	00f10c31 	.word	0x00f10c31

00016fe8 <LLF_RND_TurnOffTrng>:
   16fe8:	2200      	movs	r2, #0
   16fea:	4b04      	ldr	r3, [pc, #16]	; (16ffc <LLF_RND_TurnOffTrng+0x14>)
   16fec:	f44f 6080 	mov.w	r0, #1024	; 0x400
   16ff0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   16ff4:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   16ff8:	f7ff b86e 	b.w	160d8 <CC_HalClearInterruptBit>
   16ffc:	50841000 	.word	0x50841000

00017000 <SetDataBuffersInfo>:
   17000:	b5f0      	push	{r4, r5, r6, r7, lr}
   17002:	2400      	movs	r4, #0
   17004:	b083      	sub	sp, #12
   17006:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   1700a:	f88d 4007 	strb.w	r4, [sp, #7]
   1700e:	d325      	bcc.n	1705c <SetDataBuffersInfo+0x5c>
   17010:	468c      	mov	ip, r1
   17012:	4484      	add	ip, r0
   17014:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   17018:	4604      	mov	r4, r0
   1701a:	d81f      	bhi.n	1705c <SetDataBuffersInfo+0x5c>
   1701c:	4617      	mov	r7, r2
   1701e:	461d      	mov	r5, r3
   17020:	2201      	movs	r2, #1
   17022:	f10d 0307 	add.w	r3, sp, #7
   17026:	f000 ff6f 	bl	17f08 <CC_PalDataBufferAttrGet>
   1702a:	4606      	mov	r6, r0
   1702c:	b9b0      	cbnz	r0, 1705c <SetDataBuffersInfo+0x5c>
   1702e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17032:	9a09      	ldr	r2, [sp, #36]	; 0x24
   17034:	603c      	str	r4, [r7, #0]
   17036:	713b      	strb	r3, [r7, #4]
   17038:	b192      	cbz	r2, 17060 <SetDataBuffersInfo+0x60>
   1703a:	b14d      	cbz	r5, 17050 <SetDataBuffersInfo+0x50>
   1703c:	4602      	mov	r2, r0
   1703e:	9908      	ldr	r1, [sp, #32]
   17040:	4628      	mov	r0, r5
   17042:	f10d 0307 	add.w	r3, sp, #7
   17046:	f000 ff5f 	bl	17f08 <CC_PalDataBufferAttrGet>
   1704a:	b938      	cbnz	r0, 1705c <SetDataBuffersInfo+0x5c>
   1704c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17050:	4630      	mov	r0, r6
   17052:	9a09      	ldr	r2, [sp, #36]	; 0x24
   17054:	6015      	str	r5, [r2, #0]
   17056:	7113      	strb	r3, [r2, #4]
   17058:	b003      	add	sp, #12
   1705a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1705c:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   17060:	4630      	mov	r0, r6
   17062:	b003      	add	sp, #12
   17064:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17066:	bf00      	nop

00017068 <InitHashDrv>:
   17068:	b1e8      	cbz	r0, 170a6 <InitHashDrv+0x3e>
   1706a:	b510      	push	{r4, lr}
   1706c:	6804      	ldr	r4, [r0, #0]
   1706e:	2c01      	cmp	r4, #1
   17070:	d004      	beq.n	1707c <InitHashDrv+0x14>
   17072:	2c02      	cmp	r4, #2
   17074:	d010      	beq.n	17098 <InitHashDrv+0x30>
   17076:	b144      	cbz	r4, 1708a <InitHashDrv+0x22>
   17078:	480c      	ldr	r0, [pc, #48]	; (170ac <InitHashDrv+0x44>)
   1707a:	bd10      	pop	{r4, pc}
   1707c:	2220      	movs	r2, #32
   1707e:	490c      	ldr	r1, [pc, #48]	; (170b0 <InitHashDrv+0x48>)
   17080:	3008      	adds	r0, #8
   17082:	f7ff f8b7 	bl	161f4 <CC_PalMemCopyPlat>
   17086:	2000      	movs	r0, #0
   17088:	bd10      	pop	{r4, pc}
   1708a:	2214      	movs	r2, #20
   1708c:	4909      	ldr	r1, [pc, #36]	; (170b4 <InitHashDrv+0x4c>)
   1708e:	3008      	adds	r0, #8
   17090:	f7ff f8b0 	bl	161f4 <CC_PalMemCopyPlat>
   17094:	4620      	mov	r0, r4
   17096:	bd10      	pop	{r4, pc}
   17098:	2220      	movs	r2, #32
   1709a:	4907      	ldr	r1, [pc, #28]	; (170b8 <InitHashDrv+0x50>)
   1709c:	3008      	adds	r0, #8
   1709e:	f7ff f8a9 	bl	161f4 <CC_PalMemCopyPlat>
   170a2:	2000      	movs	r0, #0
   170a4:	bd10      	pop	{r4, pc}
   170a6:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   170aa:	4770      	bx	lr
   170ac:	00f30001 	.word	0x00f30001
   170b0:	00018e70 	.word	0x00018e70
   170b4:	00018e3c 	.word	0x00018e3c
   170b8:	00018e50 	.word	0x00018e50

000170bc <ProcessHashDrv>:
   170bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   170c0:	2900      	cmp	r1, #0
   170c2:	f000 80f9 	beq.w	172b8 <ProcessHashDrv+0x1fc>
   170c6:	4604      	mov	r4, r0
   170c8:	2800      	cmp	r0, #0
   170ca:	f000 80f9 	beq.w	172c0 <ProcessHashDrv+0x204>
   170ce:	6803      	ldr	r3, [r0, #0]
   170d0:	460f      	mov	r7, r1
   170d2:	4690      	mov	r8, r2
   170d4:	2b00      	cmp	r3, #0
   170d6:	f000 80c3 	beq.w	17260 <ProcessHashDrv+0x1a4>
   170da:	3b01      	subs	r3, #1
   170dc:	2b01      	cmp	r3, #1
   170de:	f200 80d7 	bhi.w	17290 <ProcessHashDrv+0x1d4>
   170e2:	f04f 31ff 	mov.w	r1, #4294967295
   170e6:	4878      	ldr	r0, [pc, #480]	; (172c8 <ProcessHashDrv+0x20c>)
   170e8:	f04f 0902 	mov.w	r9, #2
   170ec:	f7ff f89e 	bl	1622c <CC_PalMutexLock>
   170f0:	2800      	cmp	r0, #0
   170f2:	f040 80bf 	bne.w	17274 <ProcessHashDrv+0x1b8>
   170f6:	2000      	movs	r0, #0
   170f8:	f7ff f8c8 	bl	1628c <CC_PalPowerSaveModeSelect>
   170fc:	4606      	mov	r6, r0
   170fe:	2800      	cmp	r0, #0
   17100:	f040 80c2 	bne.w	17288 <ProcessHashDrv+0x1cc>
   17104:	4a71      	ldr	r2, [pc, #452]	; (172cc <ProcessHashDrv+0x210>)
   17106:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   1710a:	2b00      	cmp	r3, #0
   1710c:	d1fb      	bne.n	17106 <ProcessHashDrv+0x4a>
   1710e:	4d6f      	ldr	r5, [pc, #444]	; (172cc <ProcessHashDrv+0x210>)
   17110:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   17114:	2b00      	cmp	r3, #0
   17116:	d1fb      	bne.n	17110 <ProcessHashDrv+0x54>
   17118:	f04f 30ff 	mov.w	r0, #4294967295
   1711c:	f7fe ffdc 	bl	160d8 <CC_HalClearInterruptBit>
   17120:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   17124:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   17128:	f7fe ffe4 	bl	160f4 <CC_HalMaskInterrupt>
   1712c:	2301      	movs	r3, #1
   1712e:	2207      	movs	r2, #7
   17130:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   17134:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   17138:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   1713c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1713e:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   17142:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   17144:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   17148:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   1714c:	6823      	ldr	r3, [r4, #0]
   1714e:	b15b      	cbz	r3, 17168 <ProcessHashDrv+0xac>
   17150:	3b01      	subs	r3, #1
   17152:	2b01      	cmp	r3, #1
   17154:	d818      	bhi.n	17188 <ProcessHashDrv+0xcc>
   17156:	6a63      	ldr	r3, [r4, #36]	; 0x24
   17158:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   1715c:	6a23      	ldr	r3, [r4, #32]
   1715e:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   17162:	69e3      	ldr	r3, [r4, #28]
   17164:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   17168:	69a2      	ldr	r2, [r4, #24]
   1716a:	4b58      	ldr	r3, [pc, #352]	; (172cc <ProcessHashDrv+0x210>)
   1716c:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   17170:	6962      	ldr	r2, [r4, #20]
   17172:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   17176:	6922      	ldr	r2, [r4, #16]
   17178:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   1717c:	68e2      	ldr	r2, [r4, #12]
   1717e:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   17182:	68a2      	ldr	r2, [r4, #8]
   17184:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   17188:	4a50      	ldr	r2, [pc, #320]	; (172cc <ProcessHashDrv+0x210>)
   1718a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1718e:	2b00      	cmp	r3, #0
   17190:	d1fb      	bne.n	1718a <ProcessHashDrv+0xce>
   17192:	f1b8 0f00 	cmp.w	r8, #0
   17196:	d05f      	beq.n	17258 <ProcessHashDrv+0x19c>
   17198:	6863      	ldr	r3, [r4, #4]
   1719a:	2040      	movs	r0, #64	; 0x40
   1719c:	2b01      	cmp	r3, #1
   1719e:	bf08      	it	eq
   171a0:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   171a4:	683a      	ldr	r2, [r7, #0]
   171a6:	4b49      	ldr	r3, [pc, #292]	; (172cc <ProcessHashDrv+0x210>)
   171a8:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   171ac:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   171b0:	f7fe ffa6 	bl	16100 <CC_HalWaitInterrupt>
   171b4:	4606      	mov	r6, r0
   171b6:	4a45      	ldr	r2, [pc, #276]	; (172cc <ProcessHashDrv+0x210>)
   171b8:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   171bc:	2b00      	cmp	r3, #0
   171be:	d1fb      	bne.n	171b8 <ProcessHashDrv+0xfc>
   171c0:	4a42      	ldr	r2, [pc, #264]	; (172cc <ProcessHashDrv+0x210>)
   171c2:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   171c6:	2b00      	cmp	r3, #0
   171c8:	d1fb      	bne.n	171c2 <ProcessHashDrv+0x106>
   171ca:	6823      	ldr	r3, [r4, #0]
   171cc:	b15b      	cbz	r3, 171e6 <ProcessHashDrv+0x12a>
   171ce:	3b01      	subs	r3, #1
   171d0:	2b01      	cmp	r3, #1
   171d2:	d818      	bhi.n	17206 <ProcessHashDrv+0x14a>
   171d4:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   171d8:	6263      	str	r3, [r4, #36]	; 0x24
   171da:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   171de:	6223      	str	r3, [r4, #32]
   171e0:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   171e4:	61e3      	str	r3, [r4, #28]
   171e6:	4b39      	ldr	r3, [pc, #228]	; (172cc <ProcessHashDrv+0x210>)
   171e8:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   171ec:	61a2      	str	r2, [r4, #24]
   171ee:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   171f2:	6162      	str	r2, [r4, #20]
   171f4:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   171f8:	6122      	str	r2, [r4, #16]
   171fa:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   171fe:	60e2      	str	r2, [r4, #12]
   17200:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   17204:	60a3      	str	r3, [r4, #8]
   17206:	2300      	movs	r3, #0
   17208:	2101      	movs	r1, #1
   1720a:	4a30      	ldr	r2, [pc, #192]	; (172cc <ProcessHashDrv+0x210>)
   1720c:	f8d2 07cc 	ldr.w	r0, [r2, #1996]	; 0x7cc
   17210:	64a0      	str	r0, [r4, #72]	; 0x48
   17212:	f8d2 07d0 	ldr.w	r0, [r2, #2000]	; 0x7d0
   17216:	64e0      	str	r0, [r4, #76]	; 0x4c
   17218:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   1721c:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   17220:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   17224:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   17228:	2b00      	cmp	r3, #0
   1722a:	d1fb      	bne.n	17224 <ProcessHashDrv+0x168>
   1722c:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   17230:	2e00      	cmp	r6, #0
   17232:	d13b      	bne.n	172ac <ProcessHashDrv+0x1f0>
   17234:	4b25      	ldr	r3, [pc, #148]	; (172cc <ProcessHashDrv+0x210>)
   17236:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   1723a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1723e:	f7fe ff59 	bl	160f4 <CC_HalMaskInterrupt>
   17242:	2001      	movs	r0, #1
   17244:	f7ff f822 	bl	1628c <CC_PalPowerSaveModeSelect>
   17248:	bb60      	cbnz	r0, 172a4 <ProcessHashDrv+0x1e8>
   1724a:	481f      	ldr	r0, [pc, #124]	; (172c8 <ProcessHashDrv+0x20c>)
   1724c:	f7fe fff6 	bl	1623c <CC_PalMutexUnlock>
   17250:	bb10      	cbnz	r0, 17298 <ProcessHashDrv+0x1dc>
   17252:	4630      	mov	r0, r6
   17254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17258:	2304      	movs	r3, #4
   1725a:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   1725e:	e7aa      	b.n	171b6 <ProcessHashDrv+0xfa>
   17260:	f04f 31ff 	mov.w	r1, #4294967295
   17264:	4818      	ldr	r0, [pc, #96]	; (172c8 <ProcessHashDrv+0x20c>)
   17266:	f04f 0901 	mov.w	r9, #1
   1726a:	f7fe ffdf 	bl	1622c <CC_PalMutexLock>
   1726e:	2800      	cmp	r0, #0
   17270:	f43f af41 	beq.w	170f6 <ProcessHashDrv+0x3a>
   17274:	4816      	ldr	r0, [pc, #88]	; (172d0 <ProcessHashDrv+0x214>)
   17276:	f7fe f87b 	bl	15370 <CC_PalAbort>
   1727a:	2000      	movs	r0, #0
   1727c:	f7ff f806 	bl	1628c <CC_PalPowerSaveModeSelect>
   17280:	4606      	mov	r6, r0
   17282:	2800      	cmp	r0, #0
   17284:	f43f af3e 	beq.w	17104 <ProcessHashDrv+0x48>
   17288:	4812      	ldr	r0, [pc, #72]	; (172d4 <ProcessHashDrv+0x218>)
   1728a:	f7fe f871 	bl	15370 <CC_PalAbort>
   1728e:	e739      	b.n	17104 <ProcessHashDrv+0x48>
   17290:	4e11      	ldr	r6, [pc, #68]	; (172d8 <ProcessHashDrv+0x21c>)
   17292:	4630      	mov	r0, r6
   17294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17298:	4810      	ldr	r0, [pc, #64]	; (172dc <ProcessHashDrv+0x220>)
   1729a:	f7fe f869 	bl	15370 <CC_PalAbort>
   1729e:	4630      	mov	r0, r6
   172a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   172a4:	480e      	ldr	r0, [pc, #56]	; (172e0 <ProcessHashDrv+0x224>)
   172a6:	f7fe f863 	bl	15370 <CC_PalAbort>
   172aa:	e7ce      	b.n	1724a <ProcessHashDrv+0x18e>
   172ac:	2110      	movs	r1, #16
   172ae:	f104 0008 	add.w	r0, r4, #8
   172b2:	f7fe ffa3 	bl	161fc <CC_PalMemSetZeroPlat>
   172b6:	e7bd      	b.n	17234 <ProcessHashDrv+0x178>
   172b8:	4e0a      	ldr	r6, [pc, #40]	; (172e4 <ProcessHashDrv+0x228>)
   172ba:	4630      	mov	r0, r6
   172bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   172c0:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   172c4:	e7c5      	b.n	17252 <ProcessHashDrv+0x196>
   172c6:	bf00      	nop
   172c8:	200000bc 	.word	0x200000bc
   172cc:	50841000 	.word	0x50841000
   172d0:	00018d70 	.word	0x00018d70
   172d4:	00018d88 	.word	0x00018d88
   172d8:	00f30001 	.word	0x00f30001
   172dc:	00018dc8 	.word	0x00018dc8
   172e0:	00018da8 	.word	0x00018da8
   172e4:	00f30003 	.word	0x00f30003

000172e8 <FinishHashDrv>:
   172e8:	b3a0      	cbz	r0, 17354 <FinishHashDrv+0x6c>
   172ea:	4603      	mov	r3, r0
   172ec:	b470      	push	{r4, r5, r6}
   172ee:	e9d0 4002 	ldrd	r4, r0, [r0, #8]
   172f2:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
   172f6:	ba26      	rev	r6, r4
   172f8:	ba05      	rev	r5, r0
   172fa:	ba0c      	rev	r4, r1
   172fc:	ba10      	rev	r0, r2
   172fe:	e9c3 4004 	strd	r4, r0, [r3, #16]
   17302:	e9d3 1206 	ldrd	r1, r2, [r3, #24]
   17306:	6a98      	ldr	r0, [r3, #40]	; 0x28
   17308:	ba09      	rev	r1, r1
   1730a:	e9c3 6502 	strd	r6, r5, [r3, #8]
   1730e:	ba12      	rev	r2, r2
   17310:	6199      	str	r1, [r3, #24]
   17312:	ba00      	rev	r0, r0
   17314:	e9d3 4108 	ldrd	r4, r1, [r3, #32]
   17318:	ba25      	rev	r5, r4
   1731a:	ba0c      	rev	r4, r1
   1731c:	e9c3 2507 	strd	r2, r5, [r3, #28]
   17320:	e9d3 120b 	ldrd	r1, r2, [r3, #44]	; 0x2c
   17324:	e9c3 4009 	strd	r4, r0, [r3, #36]	; 0x24
   17328:	ba09      	rev	r1, r1
   1732a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   1732c:	ba12      	rev	r2, r2
   1732e:	62d9      	str	r1, [r3, #44]	; 0x2c
   17330:	e9d3 410d 	ldrd	r4, r1, [r3, #52]	; 0x34
   17334:	ba25      	rev	r5, r4
   17336:	e9c3 250c 	strd	r2, r5, [r3, #48]	; 0x30
   1733a:	ba0c      	rev	r4, r1
   1733c:	ba00      	rev	r0, r0
   1733e:	e9d3 1210 	ldrd	r1, r2, [r3, #64]	; 0x40
   17342:	ba09      	rev	r1, r1
   17344:	ba12      	rev	r2, r2
   17346:	e9c3 400e 	strd	r4, r0, [r3, #56]	; 0x38
   1734a:	6419      	str	r1, [r3, #64]	; 0x40
   1734c:	2000      	movs	r0, #0
   1734e:	645a      	str	r2, [r3, #68]	; 0x44
   17350:	bc70      	pop	{r4, r5, r6}
   17352:	4770      	bx	lr
   17354:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   17358:	4770      	bx	lr
   1735a:	bf00      	nop

0001735c <LoadAesKey>:
   1735c:	2800      	cmp	r0, #0
   1735e:	d067      	beq.n	17430 <LoadAesKey+0xd4>
   17360:	b538      	push	{r3, r4, r5, lr}
   17362:	4604      	mov	r4, r0
   17364:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
   17368:	2802      	cmp	r0, #2
   1736a:	d017      	beq.n	1739c <LoadAesKey+0x40>
   1736c:	2803      	cmp	r0, #3
   1736e:	d041      	beq.n	173f4 <LoadAesKey+0x98>
   17370:	2800      	cmp	r0, #0
   17372:	d031      	beq.n	173d8 <LoadAesKey+0x7c>
   17374:	4830      	ldr	r0, [pc, #192]	; (17438 <LoadAesKey+0xdc>)
   17376:	4d31      	ldr	r5, [pc, #196]	; (1743c <LoadAesKey+0xe0>)
   17378:	682a      	ldr	r2, [r5, #0]
   1737a:	4b31      	ldr	r3, [pc, #196]	; (17440 <LoadAesKey+0xe4>)
   1737c:	6812      	ldr	r2, [r2, #0]
   1737e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   17382:	682a      	ldr	r2, [r5, #0]
   17384:	6852      	ldr	r2, [r2, #4]
   17386:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   1738a:	682a      	ldr	r2, [r5, #0]
   1738c:	6892      	ldr	r2, [r2, #8]
   1738e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   17392:	682a      	ldr	r2, [r5, #0]
   17394:	68d2      	ldr	r2, [r2, #12]
   17396:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1739a:	bd38      	pop	{r3, r4, r5, pc}
   1739c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1739e:	6c20      	ldr	r0, [r4, #64]	; 0x40
   173a0:	f000 fbc2 	bl	17b28 <kmu_validate_slot_and_size_no_kdr>
   173a4:	4d25      	ldr	r5, [pc, #148]	; (1743c <LoadAesKey+0xe0>)
   173a6:	2800      	cmp	r0, #0
   173a8:	d1e6      	bne.n	17378 <LoadAesKey+0x1c>
   173aa:	682a      	ldr	r2, [r5, #0]
   173ac:	4b24      	ldr	r3, [pc, #144]	; (17440 <LoadAesKey+0xe4>)
   173ae:	6812      	ldr	r2, [r2, #0]
   173b0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   173b4:	682a      	ldr	r2, [r5, #0]
   173b6:	6852      	ldr	r2, [r2, #4]
   173b8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   173bc:	682a      	ldr	r2, [r5, #0]
   173be:	6892      	ldr	r2, [r2, #8]
   173c0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   173c4:	682a      	ldr	r2, [r5, #0]
   173c6:	68d2      	ldr	r2, [r2, #12]
   173c8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   173cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   173ce:	6c20      	ldr	r0, [r4, #64]	; 0x40
   173d0:	f000 fc1c 	bl	17c0c <kmu_load_key_aes>
   173d4:	b350      	cbz	r0, 1742c <LoadAesKey+0xd0>
   173d6:	e7cf      	b.n	17378 <LoadAesKey+0x1c>
   173d8:	6922      	ldr	r2, [r4, #16]
   173da:	4b19      	ldr	r3, [pc, #100]	; (17440 <LoadAesKey+0xe4>)
   173dc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   173e0:	6962      	ldr	r2, [r4, #20]
   173e2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   173e6:	69a2      	ldr	r2, [r4, #24]
   173e8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   173ec:	69e2      	ldr	r2, [r4, #28]
   173ee:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   173f2:	bd38      	pop	{r3, r4, r5, pc}
   173f4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   173f6:	6c20      	ldr	r0, [r4, #64]	; 0x40
   173f8:	f000 fbda 	bl	17bb0 <kmu_validate_kdr_slot_and_size>
   173fc:	4d0f      	ldr	r5, [pc, #60]	; (1743c <LoadAesKey+0xe0>)
   173fe:	2800      	cmp	r0, #0
   17400:	d1ba      	bne.n	17378 <LoadAesKey+0x1c>
   17402:	682a      	ldr	r2, [r5, #0]
   17404:	4b0e      	ldr	r3, [pc, #56]	; (17440 <LoadAesKey+0xe4>)
   17406:	6812      	ldr	r2, [r2, #0]
   17408:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1740c:	682a      	ldr	r2, [r5, #0]
   1740e:	6852      	ldr	r2, [r2, #4]
   17410:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   17414:	682a      	ldr	r2, [r5, #0]
   17416:	6892      	ldr	r2, [r2, #8]
   17418:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1741c:	682a      	ldr	r2, [r5, #0]
   1741e:	68d2      	ldr	r2, [r2, #12]
   17420:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   17424:	f000 fbe8 	bl	17bf8 <kmu_use_kdr_key>
   17428:	2800      	cmp	r0, #0
   1742a:	d1a5      	bne.n	17378 <LoadAesKey+0x1c>
   1742c:	2000      	movs	r0, #0
   1742e:	bd38      	pop	{r3, r4, r5, pc}
   17430:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   17434:	4770      	bx	lr
   17436:	bf00      	nop
   17438:	00f10009 	.word	0x00f10009
   1743c:	200000ac 	.word	0x200000ac
   17440:	50841000 	.word	0x50841000

00017444 <InitAes.part.0>:
   17444:	b538      	push	{r3, r4, r5, lr}
   17446:	4604      	mov	r4, r0
   17448:	4a36      	ldr	r2, [pc, #216]	; (17524 <InitAes.part.0+0xe0>)
   1744a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1744e:	2b00      	cmp	r3, #0
   17450:	d1fb      	bne.n	1744a <InitAes.part.0+0x6>
   17452:	4a34      	ldr	r2, [pc, #208]	; (17524 <InitAes.part.0+0xe0>)
   17454:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   17458:	2b00      	cmp	r3, #0
   1745a:	d1fb      	bne.n	17454 <InitAes.part.0+0x10>
   1745c:	4a31      	ldr	r2, [pc, #196]	; (17524 <InitAes.part.0+0xe0>)
   1745e:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   17462:	2b00      	cmp	r3, #0
   17464:	d1fb      	bne.n	1745e <InitAes.part.0+0x1a>
   17466:	4a2f      	ldr	r2, [pc, #188]	; (17524 <InitAes.part.0+0xe0>)
   17468:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   1746c:	2b00      	cmp	r3, #0
   1746e:	d1fb      	bne.n	17468 <InitAes.part.0+0x24>
   17470:	4a2c      	ldr	r2, [pc, #176]	; (17524 <InitAes.part.0+0xe0>)
   17472:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   17476:	2b00      	cmp	r3, #0
   17478:	d1fb      	bne.n	17472 <InitAes.part.0+0x2e>
   1747a:	4d2a      	ldr	r5, [pc, #168]	; (17524 <InitAes.part.0+0xe0>)
   1747c:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   17480:	2b00      	cmp	r3, #0
   17482:	d1fb      	bne.n	1747c <InitAes.part.0+0x38>
   17484:	f04f 30ff 	mov.w	r0, #4294967295
   17488:	f7fe fe26 	bl	160d8 <CC_HalClearInterruptBit>
   1748c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1748e:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   17492:	f023 0304 	bic.w	r3, r3, #4
   17496:	2b03      	cmp	r3, #3
   17498:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1749a:	d039      	beq.n	17510 <InitAes.part.0+0xcc>
   1749c:	2b01      	cmp	r3, #1
   1749e:	bf0c      	ite	eq
   174a0:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   174a4:	f020 0020 	bicne.w	r0, r0, #32
   174a8:	f7fe fe24 	bl	160f4 <CC_HalMaskInterrupt>
   174ac:	2301      	movs	r3, #1
   174ae:	4a1d      	ldr	r2, [pc, #116]	; (17524 <InitAes.part.0+0xe0>)
   174b0:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   174b4:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   174b8:	2b00      	cmp	r3, #0
   174ba:	d1fb      	bne.n	174b4 <InitAes.part.0+0x70>
   174bc:	4a19      	ldr	r2, [pc, #100]	; (17524 <InitAes.part.0+0xe0>)
   174be:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   174c2:	2b00      	cmp	r3, #0
   174c4:	d1fb      	bne.n	174be <InitAes.part.0+0x7a>
   174c6:	4917      	ldr	r1, [pc, #92]	; (17524 <InitAes.part.0+0xe0>)
   174c8:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   174cc:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   174d0:	2b00      	cmp	r3, #0
   174d2:	d1fb      	bne.n	174cc <InitAes.part.0+0x88>
   174d4:	4a13      	ldr	r2, [pc, #76]	; (17524 <InitAes.part.0+0xe0>)
   174d6:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   174da:	2b00      	cmp	r3, #0
   174dc:	d1fb      	bne.n	174d6 <InitAes.part.0+0x92>
   174de:	6b62      	ldr	r2, [r4, #52]	; 0x34
   174e0:	2000      	movs	r0, #0
   174e2:	f022 0104 	bic.w	r1, r2, #4
   174e6:	2903      	cmp	r1, #3
   174e8:	bf18      	it	ne
   174ea:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   174ec:	ea4f 0282 	mov.w	r2, r2, lsl #2
   174f0:	490c      	ldr	r1, [pc, #48]	; (17524 <InitAes.part.0+0xe0>)
   174f2:	bf18      	it	ne
   174f4:	f003 0301 	andne.w	r3, r3, #1
   174f8:	f002 021c 	and.w	r2, r2, #28
   174fc:	4313      	orrs	r3, r2
   174fe:	f8c1 34c0 	str.w	r3, [r1, #1216]	; 0x4c0
   17502:	6b63      	ldr	r3, [r4, #52]	; 0x34
   17504:	2b07      	cmp	r3, #7
   17506:	bf04      	itt	eq
   17508:	2301      	moveq	r3, #1
   1750a:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   1750e:	bd38      	pop	{r3, r4, r5, pc}
   17510:	2b01      	cmp	r3, #1
   17512:	bf0c      	ite	eq
   17514:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   17518:	f020 0010 	bicne.w	r0, r0, #16
   1751c:	f7fe fdea 	bl	160f4 <CC_HalMaskInterrupt>
   17520:	e7c4      	b.n	174ac <InitAes.part.0+0x68>
   17522:	bf00      	nop
   17524:	50841000 	.word	0x50841000

00017528 <ProcessAesDrv>:
   17528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1752c:	b085      	sub	sp, #20
   1752e:	2900      	cmp	r1, #0
   17530:	f000 80a6 	beq.w	17680 <ProcessAesDrv+0x158>
   17534:	4690      	mov	r8, r2
   17536:	2a00      	cmp	r2, #0
   17538:	f000 80a2 	beq.w	17680 <ProcessAesDrv+0x158>
   1753c:	4605      	mov	r5, r0
   1753e:	2800      	cmp	r0, #0
   17540:	f000 813f 	beq.w	177c2 <ProcessAesDrv+0x29a>
   17544:	4699      	mov	r9, r3
   17546:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   17548:	460e      	mov	r6, r1
   1754a:	2b00      	cmp	r3, #0
   1754c:	d151      	bne.n	175f2 <ProcessAesDrv+0xca>
   1754e:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   17552:	d253      	bcs.n	175fc <ProcessAesDrv+0xd4>
   17554:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   17558:	2b04      	cmp	r3, #4
   1755a:	f000 8115 	beq.w	17788 <ProcessAesDrv+0x260>
   1755e:	2700      	movs	r7, #0
   17560:	f04f 31ff 	mov.w	r1, #4294967295
   17564:	48a7      	ldr	r0, [pc, #668]	; (17804 <ProcessAesDrv+0x2dc>)
   17566:	f7fe fe61 	bl	1622c <CC_PalMutexLock>
   1756a:	2800      	cmp	r0, #0
   1756c:	f040 80eb 	bne.w	17746 <ProcessAesDrv+0x21e>
   17570:	2000      	movs	r0, #0
   17572:	f7fe fe8b 	bl	1628c <CC_PalPowerSaveModeSelect>
   17576:	2800      	cmp	r0, #0
   17578:	f040 80ee 	bne.w	17758 <ProcessAesDrv+0x230>
   1757c:	2301      	movs	r3, #1
   1757e:	48a2      	ldr	r0, [pc, #648]	; (17808 <ProcessAesDrv+0x2e0>)
   17580:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   17584:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   17588:	2c00      	cmp	r4, #0
   1758a:	d1fb      	bne.n	17584 <ProcessAesDrv+0x5c>
   1758c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1758e:	2b03      	cmp	r3, #3
   17590:	dc39      	bgt.n	17606 <ProcessAesDrv+0xde>
   17592:	2b00      	cmp	r3, #0
   17594:	da3a      	bge.n	1760c <ProcessAesDrv+0xe4>
   17596:	4c9d      	ldr	r4, [pc, #628]	; (1780c <ProcessAesDrv+0x2e4>)
   17598:	4a9b      	ldr	r2, [pc, #620]	; (17808 <ProcessAesDrv+0x2e0>)
   1759a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1759e:	2b00      	cmp	r3, #0
   175a0:	d1fb      	bne.n	1759a <ProcessAesDrv+0x72>
   175a2:	2f00      	cmp	r7, #0
   175a4:	f040 80e7 	bne.w	17776 <ProcessAesDrv+0x24e>
   175a8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   175aa:	f023 0304 	bic.w	r3, r3, #4
   175ae:	2b03      	cmp	r3, #3
   175b0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   175b2:	d059      	beq.n	17668 <ProcessAesDrv+0x140>
   175b4:	2b01      	cmp	r3, #1
   175b6:	4b94      	ldr	r3, [pc, #592]	; (17808 <ProcessAesDrv+0x2e0>)
   175b8:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   175bc:	bf0c      	ite	eq
   175be:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   175c2:	f040 0020 	orrne.w	r0, r0, #32
   175c6:	f7fe fd95 	bl	160f4 <CC_HalMaskInterrupt>
   175ca:	2200      	movs	r2, #0
   175cc:	4b8e      	ldr	r3, [pc, #568]	; (17808 <ProcessAesDrv+0x2e0>)
   175ce:	2001      	movs	r0, #1
   175d0:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   175d4:	f7fe fe5a 	bl	1628c <CC_PalPowerSaveModeSelect>
   175d8:	2800      	cmp	r0, #0
   175da:	f040 80c8 	bne.w	1776e <ProcessAesDrv+0x246>
   175de:	4889      	ldr	r0, [pc, #548]	; (17804 <ProcessAesDrv+0x2dc>)
   175e0:	f7fe fe2c 	bl	1623c <CC_PalMutexUnlock>
   175e4:	2800      	cmp	r0, #0
   175e6:	f040 80bb 	bne.w	17760 <ProcessAesDrv+0x238>
   175ea:	4620      	mov	r0, r4
   175ec:	b005      	add	sp, #20
   175ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175f2:	2b01      	cmp	r3, #1
   175f4:	d1ae      	bne.n	17554 <ProcessAesDrv+0x2c>
   175f6:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   175fa:	d3ab      	bcc.n	17554 <ProcessAesDrv+0x2c>
   175fc:	4c84      	ldr	r4, [pc, #528]	; (17810 <ProcessAesDrv+0x2e8>)
   175fe:	4620      	mov	r0, r4
   17600:	b005      	add	sp, #20
   17602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17606:	3b06      	subs	r3, #6
   17608:	2b01      	cmp	r3, #1
   1760a:	d8c4      	bhi.n	17596 <ProcessAesDrv+0x6e>
   1760c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1760e:	2b01      	cmp	r3, #1
   17610:	f200 80d5 	bhi.w	177be <ProcessAesDrv+0x296>
   17614:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   17616:	2b01      	cmp	r3, #1
   17618:	d837      	bhi.n	1768a <ProcessAesDrv+0x162>
   1761a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1761c:	2b01      	cmp	r3, #1
   1761e:	f200 8126 	bhi.w	1786e <ProcessAesDrv+0x346>
   17622:	4628      	mov	r0, r5
   17624:	f7ff ff0e 	bl	17444 <InitAes.part.0>
   17628:	4604      	mov	r4, r0
   1762a:	2800      	cmp	r0, #0
   1762c:	d1b4      	bne.n	17598 <ProcessAesDrv+0x70>
   1762e:	4628      	mov	r0, r5
   17630:	f7ff fe94 	bl	1735c <LoadAesKey>
   17634:	4604      	mov	r4, r0
   17636:	2800      	cmp	r0, #0
   17638:	d1ae      	bne.n	17598 <ProcessAesDrv+0x70>
   1763a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1763c:	2b07      	cmp	r3, #7
   1763e:	d8aa      	bhi.n	17596 <ProcessAesDrv+0x6e>
   17640:	a201      	add	r2, pc, #4	; (adr r2, 17648 <ProcessAesDrv+0x120>)
   17642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17646:	bf00      	nop
   17648:	000176ab 	.word	0x000176ab
   1764c:	0001768f 	.word	0x0001768f
   17650:	00017835 	.word	0x00017835
   17654:	0001768f 	.word	0x0001768f
   17658:	00017597 	.word	0x00017597
   1765c:	00017597 	.word	0x00017597
   17660:	00017835 	.word	0x00017835
   17664:	0001768f 	.word	0x0001768f
   17668:	2b01      	cmp	r3, #1
   1766a:	4b67      	ldr	r3, [pc, #412]	; (17808 <ProcessAesDrv+0x2e0>)
   1766c:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   17670:	bf0c      	ite	eq
   17672:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   17676:	f040 0010 	orrne.w	r0, r0, #16
   1767a:	f7fe fd3b 	bl	160f4 <CC_HalMaskInterrupt>
   1767e:	e7a4      	b.n	175ca <ProcessAesDrv+0xa2>
   17680:	4c64      	ldr	r4, [pc, #400]	; (17814 <ProcessAesDrv+0x2ec>)
   17682:	4620      	mov	r0, r4
   17684:	b005      	add	sp, #20
   17686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1768a:	4c63      	ldr	r4, [pc, #396]	; (17818 <ProcessAesDrv+0x2f0>)
   1768c:	e784      	b.n	17598 <ProcessAesDrv+0x70>
   1768e:	682a      	ldr	r2, [r5, #0]
   17690:	4b5d      	ldr	r3, [pc, #372]	; (17808 <ProcessAesDrv+0x2e0>)
   17692:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   17696:	686a      	ldr	r2, [r5, #4]
   17698:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   1769c:	68aa      	ldr	r2, [r5, #8]
   1769e:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   176a2:	68ea      	ldr	r2, [r5, #12]
   176a4:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   176a8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   176aa:	f023 0304 	bic.w	r3, r3, #4
   176ae:	2b03      	cmp	r3, #3
   176b0:	6832      	ldr	r2, [r6, #0]
   176b2:	d00d      	beq.n	176d0 <ProcessAesDrv+0x1a8>
   176b4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   176b6:	f8d8 1000 	ldr.w	r1, [r8]
   176ba:	2b01      	cmp	r3, #1
   176bc:	4b52      	ldr	r3, [pc, #328]	; (17808 <ProcessAesDrv+0x2e0>)
   176be:	bf0b      	itete	eq
   176c0:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   176c4:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   176c8:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   176cc:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   176d0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   176d2:	2b01      	cmp	r3, #1
   176d4:	4b4c      	ldr	r3, [pc, #304]	; (17808 <ProcessAesDrv+0x2e0>)
   176d6:	bf0b      	itete	eq
   176d8:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   176dc:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   176e0:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   176e4:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   176e8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   176ea:	f023 0304 	bic.w	r3, r3, #4
   176ee:	2b03      	cmp	r3, #3
   176f0:	d06a      	beq.n	177c8 <ProcessAesDrv+0x2a0>
   176f2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   176f4:	2b01      	cmp	r3, #1
   176f6:	bf0c      	ite	eq
   176f8:	2080      	moveq	r0, #128	; 0x80
   176fa:	2020      	movne	r0, #32
   176fc:	f7fe fd00 	bl	16100 <CC_HalWaitInterrupt>
   17700:	4604      	mov	r4, r0
   17702:	2800      	cmp	r0, #0
   17704:	f47f af48 	bne.w	17598 <ProcessAesDrv+0x70>
   17708:	4b3f      	ldr	r3, [pc, #252]	; (17808 <ProcessAesDrv+0x2e0>)
   1770a:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   1770e:	2c00      	cmp	r4, #0
   17710:	d1fb      	bne.n	1770a <ProcessAesDrv+0x1e2>
   17712:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   17714:	3b01      	subs	r3, #1
   17716:	2b06      	cmp	r3, #6
   17718:	d812      	bhi.n	17740 <ProcessAesDrv+0x218>
   1771a:	e8df f003 	tbb	[pc, r3]
   1771e:	9a04      	.short	0x9a04
   17720:	9a111104 	.word	0x9a111104
   17724:	04          	.byte	0x04
   17725:	00          	.byte	0x00
   17726:	4b38      	ldr	r3, [pc, #224]	; (17808 <ProcessAesDrv+0x2e0>)
   17728:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   1772c:	602a      	str	r2, [r5, #0]
   1772e:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   17732:	606a      	str	r2, [r5, #4]
   17734:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   17738:	60aa      	str	r2, [r5, #8]
   1773a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   1773e:	60eb      	str	r3, [r5, #12]
   17740:	2301      	movs	r3, #1
   17742:	65ab      	str	r3, [r5, #88]	; 0x58
   17744:	e728      	b.n	17598 <ProcessAesDrv+0x70>
   17746:	4835      	ldr	r0, [pc, #212]	; (1781c <ProcessAesDrv+0x2f4>)
   17748:	f7fd fe12 	bl	15370 <CC_PalAbort>
   1774c:	2000      	movs	r0, #0
   1774e:	f7fe fd9d 	bl	1628c <CC_PalPowerSaveModeSelect>
   17752:	2800      	cmp	r0, #0
   17754:	f43f af12 	beq.w	1757c <ProcessAesDrv+0x54>
   17758:	4831      	ldr	r0, [pc, #196]	; (17820 <ProcessAesDrv+0x2f8>)
   1775a:	f7fd fe09 	bl	15370 <CC_PalAbort>
   1775e:	e70d      	b.n	1757c <ProcessAesDrv+0x54>
   17760:	4830      	ldr	r0, [pc, #192]	; (17824 <ProcessAesDrv+0x2fc>)
   17762:	f7fd fe05 	bl	15370 <CC_PalAbort>
   17766:	4620      	mov	r0, r4
   17768:	b005      	add	sp, #20
   1776a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1776e:	482e      	ldr	r0, [pc, #184]	; (17828 <ProcessAesDrv+0x300>)
   17770:	f7fd fdfe 	bl	15370 <CC_PalAbort>
   17774:	e733      	b.n	175de <ProcessAesDrv+0xb6>
   17776:	2304      	movs	r3, #4
   17778:	2120      	movs	r1, #32
   1777a:	f105 0010 	add.w	r0, r5, #16
   1777e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   17782:	f7fe fd3b 	bl	161fc <CC_PalMemSetZeroPlat>
   17786:	e70f      	b.n	175a8 <ProcessAesDrv+0x80>
   17788:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1778a:	6c28      	ldr	r0, [r5, #64]	; 0x40
   1778c:	f000 f9b6 	bl	17afc <kmu_validate_slot_and_size>
   17790:	b998      	cbnz	r0, 177ba <ProcessAesDrv+0x292>
   17792:	4f26      	ldr	r7, [pc, #152]	; (1782c <ProcessAesDrv+0x304>)
   17794:	4c1c      	ldr	r4, [pc, #112]	; (17808 <ProcessAesDrv+0x2e0>)
   17796:	683b      	ldr	r3, [r7, #0]
   17798:	681b      	ldr	r3, [r3, #0]
   1779a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   1779e:	683b      	ldr	r3, [r7, #0]
   177a0:	685b      	ldr	r3, [r3, #4]
   177a2:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   177a6:	683b      	ldr	r3, [r7, #0]
   177a8:	689b      	ldr	r3, [r3, #8]
   177aa:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   177ae:	683b      	ldr	r3, [r7, #0]
   177b0:	68db      	ldr	r3, [r3, #12]
   177b2:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   177b6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   177b8:	b161      	cbz	r1, 177d4 <ProcessAesDrv+0x2ac>
   177ba:	2701      	movs	r7, #1
   177bc:	e6d0      	b.n	17560 <ProcessAesDrv+0x38>
   177be:	4c1c      	ldr	r4, [pc, #112]	; (17830 <ProcessAesDrv+0x308>)
   177c0:	e6ea      	b.n	17598 <ProcessAesDrv+0x70>
   177c2:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   177c6:	e710      	b.n	175ea <ProcessAesDrv+0xc2>
   177c8:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   177ca:	2b01      	cmp	r3, #1
   177cc:	bf0c      	ite	eq
   177ce:	2040      	moveq	r0, #64	; 0x40
   177d0:	2010      	movne	r0, #16
   177d2:	e793      	b.n	176fc <ProcessAesDrv+0x1d4>
   177d4:	f04f 0b10 	mov.w	fp, #16
   177d8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   177da:	eb05 0a0b 	add.w	sl, r5, fp
   177de:	9301      	str	r3, [sp, #4]
   177e0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   177e2:	f8cd a008 	str.w	sl, [sp, #8]
   177e6:	9300      	str	r3, [sp, #0]
   177e8:	6c28      	ldr	r0, [r5, #64]	; 0x40
   177ea:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   177ee:	f8cd b00c 	str.w	fp, [sp, #12]
   177f2:	f000 fa7d 	bl	17cf0 <kmu_derive_cmac>
   177f6:	2800      	cmp	r0, #0
   177f8:	d13b      	bne.n	17872 <ProcessAesDrv+0x34a>
   177fa:	2300      	movs	r3, #0
   177fc:	2701      	movs	r7, #1
   177fe:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   17802:	e6ad      	b.n	17560 <ProcessAesDrv+0x38>
   17804:	200000bc 	.word	0x200000bc
   17808:	50841000 	.word	0x50841000
   1780c:	00f10001 	.word	0x00f10001
   17810:	00f10005 	.word	0x00f10005
   17814:	00f1000b 	.word	0x00f1000b
   17818:	00f10003 	.word	0x00f10003
   1781c:	00018d70 	.word	0x00018d70
   17820:	00018d88 	.word	0x00018d88
   17824:	00018dc8 	.word	0x00018dc8
   17828:	00018da8 	.word	0x00018da8
   1782c:	200000ac 	.word	0x200000ac
   17830:	00f10002 	.word	0x00f10002
   17834:	682a      	ldr	r2, [r5, #0]
   17836:	4b19      	ldr	r3, [pc, #100]	; (1789c <ProcessAesDrv+0x374>)
   17838:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   1783c:	686a      	ldr	r2, [r5, #4]
   1783e:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   17842:	68aa      	ldr	r2, [r5, #8]
   17844:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   17848:	68ea      	ldr	r2, [r5, #12]
   1784a:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   1784e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   17850:	e72b      	b.n	176aa <ProcessAesDrv+0x182>
   17852:	4b12      	ldr	r3, [pc, #72]	; (1789c <ProcessAesDrv+0x374>)
   17854:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   17858:	602a      	str	r2, [r5, #0]
   1785a:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   1785e:	606a      	str	r2, [r5, #4]
   17860:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   17864:	60aa      	str	r2, [r5, #8]
   17866:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   1786a:	60eb      	str	r3, [r5, #12]
   1786c:	e768      	b.n	17740 <ProcessAesDrv+0x218>
   1786e:	4c0c      	ldr	r4, [pc, #48]	; (178a0 <ProcessAesDrv+0x378>)
   17870:	e692      	b.n	17598 <ProcessAesDrv+0x70>
   17872:	683b      	ldr	r3, [r7, #0]
   17874:	4659      	mov	r1, fp
   17876:	681b      	ldr	r3, [r3, #0]
   17878:	4650      	mov	r0, sl
   1787a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   1787e:	683b      	ldr	r3, [r7, #0]
   17880:	685b      	ldr	r3, [r3, #4]
   17882:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   17886:	683b      	ldr	r3, [r7, #0]
   17888:	689b      	ldr	r3, [r3, #8]
   1788a:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   1788e:	683b      	ldr	r3, [r7, #0]
   17890:	68db      	ldr	r3, [r3, #12]
   17892:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   17896:	f7fe fcb1 	bl	161fc <CC_PalMemSetZeroPlat>
   1789a:	e7ae      	b.n	177fa <ProcessAesDrv+0x2d2>
   1789c:	50841000 	.word	0x50841000
   178a0:	00f10004 	.word	0x00f10004

000178a4 <FinishAesDrv>:
   178a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   178a8:	b301      	cbz	r1, 178ec <FinishAesDrv+0x48>
   178aa:	b1fa      	cbz	r2, 178ec <FinishAesDrv+0x48>
   178ac:	4604      	mov	r4, r0
   178ae:	2800      	cmp	r0, #0
   178b0:	d07c      	beq.n	179ac <FinishAesDrv+0x108>
   178b2:	461d      	mov	r5, r3
   178b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   178b6:	460e      	mov	r6, r1
   178b8:	2b07      	cmp	r3, #7
   178ba:	d01b      	beq.n	178f4 <FinishAesDrv+0x50>
   178bc:	b95d      	cbnz	r5, 178d6 <FinishAesDrv+0x32>
   178be:	2b03      	cmp	r3, #3
   178c0:	d110      	bne.n	178e4 <FinishAesDrv+0x40>
   178c2:	6d83      	ldr	r3, [r0, #88]	; 0x58
   178c4:	b973      	cbnz	r3, 178e4 <FinishAesDrv+0x40>
   178c6:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   178ca:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   178ce:	2510      	movs	r5, #16
   178d0:	f100 0364 	add.w	r3, r0, #100	; 0x64
   178d4:	600b      	str	r3, [r1, #0]
   178d6:	462b      	mov	r3, r5
   178d8:	4631      	mov	r1, r6
   178da:	4620      	mov	r0, r4
   178dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   178e0:	f7ff be22 	b.w	17528 <ProcessAesDrv>
   178e4:	462f      	mov	r7, r5
   178e6:	4638      	mov	r0, r7
   178e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   178ec:	4f77      	ldr	r7, [pc, #476]	; (17acc <FinishAesDrv+0x228>)
   178ee:	4638      	mov	r0, r7
   178f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   178f4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   178f6:	2b00      	cmp	r3, #0
   178f8:	d15b      	bne.n	179b2 <FinishAesDrv+0x10e>
   178fa:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   178fe:	d25d      	bcs.n	179bc <FinishAesDrv+0x118>
   17900:	b915      	cbnz	r5, 17908 <FinishAesDrv+0x64>
   17902:	6da3      	ldr	r3, [r4, #88]	; 0x58
   17904:	2b00      	cmp	r3, #0
   17906:	d159      	bne.n	179bc <FinishAesDrv+0x118>
   17908:	f04f 31ff 	mov.w	r1, #4294967295
   1790c:	4870      	ldr	r0, [pc, #448]	; (17ad0 <FinishAesDrv+0x22c>)
   1790e:	f7fe fc8d 	bl	1622c <CC_PalMutexLock>
   17912:	2800      	cmp	r0, #0
   17914:	f040 80b8 	bne.w	17a88 <FinishAesDrv+0x1e4>
   17918:	2000      	movs	r0, #0
   1791a:	f7fe fcb7 	bl	1628c <CC_PalPowerSaveModeSelect>
   1791e:	2800      	cmp	r0, #0
   17920:	f040 80ae 	bne.w	17a80 <FinishAesDrv+0x1dc>
   17924:	2301      	movs	r3, #1
   17926:	4a6b      	ldr	r2, [pc, #428]	; (17ad4 <FinishAesDrv+0x230>)
   17928:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   1792c:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   17930:	2b00      	cmp	r3, #0
   17932:	d1fb      	bne.n	1792c <FinishAesDrv+0x88>
   17934:	6b63      	ldr	r3, [r4, #52]	; 0x34
   17936:	2b03      	cmp	r3, #3
   17938:	dd20      	ble.n	1797c <FinishAesDrv+0xd8>
   1793a:	3b06      	subs	r3, #6
   1793c:	2b01      	cmp	r3, #1
   1793e:	d81f      	bhi.n	17980 <FinishAesDrv+0xdc>
   17940:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   17942:	2b01      	cmp	r3, #1
   17944:	d83c      	bhi.n	179c0 <FinishAesDrv+0x11c>
   17946:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   17948:	2b01      	cmp	r3, #1
   1794a:	f200 80a5 	bhi.w	17a98 <FinishAesDrv+0x1f4>
   1794e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   17950:	2b01      	cmp	r3, #1
   17952:	f200 80a3 	bhi.w	17a9c <FinishAesDrv+0x1f8>
   17956:	4620      	mov	r0, r4
   17958:	f7ff fd74 	bl	17444 <InitAes.part.0>
   1795c:	4607      	mov	r7, r0
   1795e:	b980      	cbnz	r0, 17982 <FinishAesDrv+0xde>
   17960:	4620      	mov	r0, r4
   17962:	f7ff fcfb 	bl	1735c <LoadAesKey>
   17966:	4607      	mov	r7, r0
   17968:	b958      	cbnz	r0, 17982 <FinishAesDrv+0xde>
   1796a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1796c:	2b07      	cmp	r3, #7
   1796e:	d807      	bhi.n	17980 <FinishAesDrv+0xdc>
   17970:	e8df f003 	tbb	[pc, r3]
   17974:	285c2835 	.word	0x285c2835
   17978:	285c0606 	.word	0x285c0606
   1797c:	2b00      	cmp	r3, #0
   1797e:	dadf      	bge.n	17940 <FinishAesDrv+0x9c>
   17980:	4f55      	ldr	r7, [pc, #340]	; (17ad8 <FinishAesDrv+0x234>)
   17982:	4a54      	ldr	r2, [pc, #336]	; (17ad4 <FinishAesDrv+0x230>)
   17984:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   17988:	2b00      	cmp	r3, #0
   1798a:	d1fb      	bne.n	17984 <FinishAesDrv+0xe0>
   1798c:	2001      	movs	r0, #1
   1798e:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   17992:	f7fe fc7b 	bl	1628c <CC_PalPowerSaveModeSelect>
   17996:	2800      	cmp	r0, #0
   17998:	d17a      	bne.n	17a90 <FinishAesDrv+0x1ec>
   1799a:	484d      	ldr	r0, [pc, #308]	; (17ad0 <FinishAesDrv+0x22c>)
   1799c:	f7fe fc4e 	bl	1623c <CC_PalMutexUnlock>
   179a0:	2800      	cmp	r0, #0
   179a2:	d0a0      	beq.n	178e6 <FinishAesDrv+0x42>
   179a4:	484d      	ldr	r0, [pc, #308]	; (17adc <FinishAesDrv+0x238>)
   179a6:	f7fd fce3 	bl	15370 <CC_PalAbort>
   179aa:	e79c      	b.n	178e6 <FinishAesDrv+0x42>
   179ac:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   179b0:	e799      	b.n	178e6 <FinishAesDrv+0x42>
   179b2:	2b01      	cmp	r3, #1
   179b4:	d1a4      	bne.n	17900 <FinishAesDrv+0x5c>
   179b6:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   179ba:	d3a1      	bcc.n	17900 <FinishAesDrv+0x5c>
   179bc:	4f48      	ldr	r7, [pc, #288]	; (17ae0 <FinishAesDrv+0x23c>)
   179be:	e792      	b.n	178e6 <FinishAesDrv+0x42>
   179c0:	4f48      	ldr	r7, [pc, #288]	; (17ae4 <FinishAesDrv+0x240>)
   179c2:	e7de      	b.n	17982 <FinishAesDrv+0xde>
   179c4:	6822      	ldr	r2, [r4, #0]
   179c6:	4b43      	ldr	r3, [pc, #268]	; (17ad4 <FinishAesDrv+0x230>)
   179c8:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   179cc:	6862      	ldr	r2, [r4, #4]
   179ce:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   179d2:	68a2      	ldr	r2, [r4, #8]
   179d4:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   179d8:	68e2      	ldr	r2, [r4, #12]
   179da:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   179de:	2201      	movs	r2, #1
   179e0:	4b3c      	ldr	r3, [pc, #240]	; (17ad4 <FinishAesDrv+0x230>)
   179e2:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   179e6:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   179ea:	2d00      	cmp	r5, #0
   179ec:	d158      	bne.n	17aa0 <FinishAesDrv+0x1fc>
   179ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
   179f0:	b909      	cbnz	r1, 179f6 <FinishAesDrv+0x152>
   179f2:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   179f6:	4b37      	ldr	r3, [pc, #220]	; (17ad4 <FinishAesDrv+0x230>)
   179f8:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   179fc:	2f00      	cmp	r7, #0
   179fe:	d1fb      	bne.n	179f8 <FinishAesDrv+0x154>
   17a00:	6b63      	ldr	r3, [r4, #52]	; 0x34
   17a02:	3b01      	subs	r3, #1
   17a04:	2b06      	cmp	r3, #6
   17a06:	d8bc      	bhi.n	17982 <FinishAesDrv+0xde>
   17a08:	a201      	add	r2, pc, #4	; (adr r2, 17a10 <FinishAesDrv+0x16c>)
   17a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17a0e:	bf00      	nop
   17a10:	00017a49 	.word	0x00017a49
   17a14:	00017a65 	.word	0x00017a65
   17a18:	00017a49 	.word	0x00017a49
   17a1c:	00017983 	.word	0x00017983
   17a20:	00017983 	.word	0x00017983
   17a24:	00017a65 	.word	0x00017a65
   17a28:	00017a49 	.word	0x00017a49
   17a2c:	6822      	ldr	r2, [r4, #0]
   17a2e:	4b29      	ldr	r3, [pc, #164]	; (17ad4 <FinishAesDrv+0x230>)
   17a30:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   17a34:	6862      	ldr	r2, [r4, #4]
   17a36:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   17a3a:	68a2      	ldr	r2, [r4, #8]
   17a3c:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   17a40:	68e2      	ldr	r2, [r4, #12]
   17a42:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   17a46:	e7ca      	b.n	179de <FinishAesDrv+0x13a>
   17a48:	4b22      	ldr	r3, [pc, #136]	; (17ad4 <FinishAesDrv+0x230>)
   17a4a:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   17a4e:	6022      	str	r2, [r4, #0]
   17a50:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   17a54:	6062      	str	r2, [r4, #4]
   17a56:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   17a5a:	60a2      	str	r2, [r4, #8]
   17a5c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   17a60:	60e3      	str	r3, [r4, #12]
   17a62:	e78e      	b.n	17982 <FinishAesDrv+0xde>
   17a64:	4b1b      	ldr	r3, [pc, #108]	; (17ad4 <FinishAesDrv+0x230>)
   17a66:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   17a6a:	6022      	str	r2, [r4, #0]
   17a6c:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   17a70:	6062      	str	r2, [r4, #4]
   17a72:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   17a76:	60a2      	str	r2, [r4, #8]
   17a78:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   17a7c:	60e3      	str	r3, [r4, #12]
   17a7e:	e780      	b.n	17982 <FinishAesDrv+0xde>
   17a80:	4819      	ldr	r0, [pc, #100]	; (17ae8 <FinishAesDrv+0x244>)
   17a82:	f7fd fc75 	bl	15370 <CC_PalAbort>
   17a86:	e74d      	b.n	17924 <FinishAesDrv+0x80>
   17a88:	4818      	ldr	r0, [pc, #96]	; (17aec <FinishAesDrv+0x248>)
   17a8a:	f7fd fc71 	bl	15370 <CC_PalAbort>
   17a8e:	e743      	b.n	17918 <FinishAesDrv+0x74>
   17a90:	4817      	ldr	r0, [pc, #92]	; (17af0 <FinishAesDrv+0x24c>)
   17a92:	f7fd fc6d 	bl	15370 <CC_PalAbort>
   17a96:	e780      	b.n	1799a <FinishAesDrv+0xf6>
   17a98:	4f16      	ldr	r7, [pc, #88]	; (17af4 <FinishAesDrv+0x250>)
   17a9a:	e772      	b.n	17982 <FinishAesDrv+0xde>
   17a9c:	4f16      	ldr	r7, [pc, #88]	; (17af8 <FinishAesDrv+0x254>)
   17a9e:	e770      	b.n	17982 <FinishAesDrv+0xde>
   17aa0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   17aa2:	6832      	ldr	r2, [r6, #0]
   17aa4:	2901      	cmp	r1, #1
   17aa6:	d00a      	beq.n	17abe <FinishAesDrv+0x21a>
   17aa8:	2010      	movs	r0, #16
   17aaa:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
   17aae:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   17ab2:	f7fe fb25 	bl	16100 <CC_HalWaitInterrupt>
   17ab6:	4607      	mov	r7, r0
   17ab8:	2800      	cmp	r0, #0
   17aba:	d09c      	beq.n	179f6 <FinishAesDrv+0x152>
   17abc:	e761      	b.n	17982 <FinishAesDrv+0xde>
   17abe:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   17ac2:	2040      	movs	r0, #64	; 0x40
   17ac4:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   17ac8:	e7f3      	b.n	17ab2 <FinishAesDrv+0x20e>
   17aca:	bf00      	nop
   17acc:	00f1000b 	.word	0x00f1000b
   17ad0:	200000bc 	.word	0x200000bc
   17ad4:	50841000 	.word	0x50841000
   17ad8:	00f10001 	.word	0x00f10001
   17adc:	00018dc8 	.word	0x00018dc8
   17ae0:	00f10005 	.word	0x00f10005
   17ae4:	00f10002 	.word	0x00f10002
   17ae8:	00018d88 	.word	0x00018d88
   17aec:	00018d70 	.word	0x00018d70
   17af0:	00018da8 	.word	0x00018da8
   17af4:	00f10003 	.word	0x00f10003
   17af8:	00f10004 	.word	0x00f10004

00017afc <kmu_validate_slot_and_size>:
   17afc:	287f      	cmp	r0, #127	; 0x7f
   17afe:	d80c      	bhi.n	17b1a <kmu_validate_slot_and_size+0x1e>
   17b00:	b149      	cbz	r1, 17b16 <kmu_validate_slot_and_size+0x1a>
   17b02:	2903      	cmp	r1, #3
   17b04:	d001      	beq.n	17b0a <kmu_validate_slot_and_size+0xe>
   17b06:	4806      	ldr	r0, [pc, #24]	; (17b20 <kmu_validate_slot_and_size+0x24>)
   17b08:	4770      	bx	lr
   17b0a:	4906      	ldr	r1, [pc, #24]	; (17b24 <kmu_validate_slot_and_size+0x28>)
   17b0c:	287f      	cmp	r0, #127	; 0x7f
   17b0e:	bf0c      	ite	eq
   17b10:	4608      	moveq	r0, r1
   17b12:	2000      	movne	r0, #0
   17b14:	4770      	bx	lr
   17b16:	4608      	mov	r0, r1
   17b18:	4770      	bx	lr
   17b1a:	4802      	ldr	r0, [pc, #8]	; (17b24 <kmu_validate_slot_and_size+0x28>)
   17b1c:	4770      	bx	lr
   17b1e:	bf00      	nop
   17b20:	00f70003 	.word	0x00f70003
   17b24:	00f70001 	.word	0x00f70001

00017b28 <kmu_validate_slot_and_size_no_kdr>:
   17b28:	b470      	push	{r4, r5, r6}
   17b2a:	4d1c      	ldr	r5, [pc, #112]	; (17b9c <kmu_validate_slot_and_size_no_kdr+0x74>)
   17b2c:	1c43      	adds	r3, r0, #1
   17b2e:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
   17b32:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
   17b36:	f50c 037f 	add.w	r3, ip, #16711680	; 0xff0000
   17b3a:	f503 4304 	add.w	r3, r3, #33792	; 0x8400
   17b3e:	681b      	ldr	r3, [r3, #0]
   17b40:	b083      	sub	sp, #12
   17b42:	f3bf 8f4f 	dsb	sy
   17b46:	9300      	str	r3, [sp, #0]
   17b48:	2300      	movs	r3, #0
   17b4a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
   17b4e:	4a14      	ldr	r2, [pc, #80]	; (17ba0 <kmu_validate_slot_and_size_no_kdr+0x78>)
   17b50:	9c00      	ldr	r4, [sp, #0]
   17b52:	4294      	cmp	r4, r2
   17b54:	d018      	beq.n	17b88 <kmu_validate_slot_and_size_no_kdr+0x60>
   17b56:	b1a9      	cbz	r1, 17b84 <kmu_validate_slot_and_size_no_kdr+0x5c>
   17b58:	1c86      	adds	r6, r0, #2
   17b5a:	4c12      	ldr	r4, [pc, #72]	; (17ba4 <kmu_validate_slot_and_size_no_kdr+0x7c>)
   17b5c:	f8c5 6500 	str.w	r6, [r5, #1280]	; 0x500
   17b60:	f854 400c 	ldr.w	r4, [r4, ip]
   17b64:	f3bf 8f4f 	dsb	sy
   17b68:	9401      	str	r4, [sp, #4]
   17b6a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
   17b6e:	9c01      	ldr	r4, [sp, #4]
   17b70:	4294      	cmp	r4, r2
   17b72:	d009      	beq.n	17b88 <kmu_validate_slot_and_size_no_kdr+0x60>
   17b74:	287f      	cmp	r0, #127	; 0x7f
   17b76:	d807      	bhi.n	17b88 <kmu_validate_slot_and_size_no_kdr+0x60>
   17b78:	2903      	cmp	r1, #3
   17b7a:	d10b      	bne.n	17b94 <kmu_validate_slot_and_size_no_kdr+0x6c>
   17b7c:	287f      	cmp	r0, #127	; 0x7f
   17b7e:	d003      	beq.n	17b88 <kmu_validate_slot_and_size_no_kdr+0x60>
   17b80:	4618      	mov	r0, r3
   17b82:	e002      	b.n	17b8a <kmu_validate_slot_and_size_no_kdr+0x62>
   17b84:	287f      	cmp	r0, #127	; 0x7f
   17b86:	d903      	bls.n	17b90 <kmu_validate_slot_and_size_no_kdr+0x68>
   17b88:	4807      	ldr	r0, [pc, #28]	; (17ba8 <kmu_validate_slot_and_size_no_kdr+0x80>)
   17b8a:	b003      	add	sp, #12
   17b8c:	bc70      	pop	{r4, r5, r6}
   17b8e:	4770      	bx	lr
   17b90:	4608      	mov	r0, r1
   17b92:	e7fa      	b.n	17b8a <kmu_validate_slot_and_size_no_kdr+0x62>
   17b94:	4805      	ldr	r0, [pc, #20]	; (17bac <kmu_validate_slot_and_size_no_kdr+0x84>)
   17b96:	b003      	add	sp, #12
   17b98:	bc70      	pop	{r4, r5, r6}
   17b9a:	4770      	bx	lr
   17b9c:	50039000 	.word	0x50039000
   17ba0:	50841a50 	.word	0x50841a50
   17ba4:	00ff8408 	.word	0x00ff8408
   17ba8:	00f70001 	.word	0x00f70001
   17bac:	00f70003 	.word	0x00f70003

00017bb0 <kmu_validate_kdr_slot_and_size>:
   17bb0:	b9b9      	cbnz	r1, 17be2 <kmu_validate_kdr_slot_and_size+0x32>
   17bb2:	4a0d      	ldr	r2, [pc, #52]	; (17be8 <kmu_validate_kdr_slot_and_size+0x38>)
   17bb4:	00c3      	lsls	r3, r0, #3
   17bb6:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
   17bba:	3001      	adds	r0, #1
   17bbc:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
   17bc0:	f503 4304 	add.w	r3, r3, #33792	; 0x8400
   17bc4:	b082      	sub	sp, #8
   17bc6:	681b      	ldr	r3, [r3, #0]
   17bc8:	f3bf 8f4f 	dsb	sy
   17bcc:	9301      	str	r3, [sp, #4]
   17bce:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   17bd2:	9a01      	ldr	r2, [sp, #4]
   17bd4:	4b05      	ldr	r3, [pc, #20]	; (17bec <kmu_validate_kdr_slot_and_size+0x3c>)
   17bd6:	4806      	ldr	r0, [pc, #24]	; (17bf0 <kmu_validate_kdr_slot_and_size+0x40>)
   17bd8:	429a      	cmp	r2, r3
   17bda:	bf08      	it	eq
   17bdc:	2000      	moveq	r0, #0
   17bde:	b002      	add	sp, #8
   17be0:	4770      	bx	lr
   17be2:	4804      	ldr	r0, [pc, #16]	; (17bf4 <kmu_validate_kdr_slot_and_size+0x44>)
   17be4:	4770      	bx	lr
   17be6:	bf00      	nop
   17be8:	50039000 	.word	0x50039000
   17bec:	50841a50 	.word	0x50841a50
   17bf0:	00f70001 	.word	0x00f70001
   17bf4:	00f70003 	.word	0x00f70003

00017bf8 <kmu_use_kdr_key>:
   17bf8:	2000      	movs	r0, #0
   17bfa:	2201      	movs	r2, #1
   17bfc:	4b02      	ldr	r3, [pc, #8]	; (17c08 <kmu_use_kdr_key+0x10>)
   17bfe:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   17c02:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   17c06:	4770      	bx	lr
   17c08:	50841000 	.word	0x50841000

00017c0c <kmu_load_key_aes>:
   17c0c:	b109      	cbz	r1, 17c12 <kmu_load_key_aes+0x6>
   17c0e:	4831      	ldr	r0, [pc, #196]	; (17cd4 <kmu_load_key_aes+0xc8>)
   17c10:	4770      	bx	lr
   17c12:	b430      	push	{r4, r5}
   17c14:	2401      	movs	r4, #1
   17c16:	4b30      	ldr	r3, [pc, #192]	; (17cd8 <kmu_load_key_aes+0xcc>)
   17c18:	4d30      	ldr	r5, [pc, #192]	; (17cdc <kmu_load_key_aes+0xd0>)
   17c1a:	b084      	sub	sp, #16
   17c1c:	f8c5 4500 	str.w	r4, [r5, #1280]	; 0x500
   17c20:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   17c24:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
   17c28:	00c2      	lsls	r2, r0, #3
   17c2a:	9502      	str	r5, [sp, #8]
   17c2c:	9d02      	ldr	r5, [sp, #8]
   17c2e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   17c32:	f8d3 5100 	ldr.w	r5, [r3, #256]	; 0x100
   17c36:	4420      	add	r0, r4
   17c38:	9502      	str	r5, [sp, #8]
   17c3a:	9d02      	ldr	r5, [sp, #8]
   17c3c:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   17c40:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
   17c44:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   17c48:	9102      	str	r1, [sp, #8]
   17c4a:	9902      	ldr	r1, [sp, #8]
   17c4c:	f502 4204 	add.w	r2, r2, #33792	; 0x8400
   17c50:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   17c54:	6812      	ldr	r2, [r2, #0]
   17c56:	f3bf 8f4f 	dsb	sy
   17c5a:	9203      	str	r2, [sp, #12]
   17c5c:	9903      	ldr	r1, [sp, #12]
   17c5e:	4a20      	ldr	r2, [pc, #128]	; (17ce0 <kmu_load_key_aes+0xd4>)
   17c60:	4291      	cmp	r1, r2
   17c62:	d131      	bne.n	17cc8 <kmu_load_key_aes+0xbc>
   17c64:	601c      	str	r4, [r3, #0]
   17c66:	e005      	b.n	17c74 <kmu_load_key_aes+0x68>
   17c68:	f89d 2006 	ldrb.w	r2, [sp, #6]
   17c6c:	b9da      	cbnz	r2, 17ca6 <kmu_load_key_aes+0x9a>
   17c6e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   17c72:	b9c2      	cbnz	r2, 17ca6 <kmu_load_key_aes+0x9a>
   17c74:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   17c78:	3a00      	subs	r2, #0
   17c7a:	bf18      	it	ne
   17c7c:	2201      	movne	r2, #1
   17c7e:	f88d 2005 	strb.w	r2, [sp, #5]
   17c82:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   17c86:	3a00      	subs	r2, #0
   17c88:	bf18      	it	ne
   17c8a:	2201      	movne	r2, #1
   17c8c:	f88d 2006 	strb.w	r2, [sp, #6]
   17c90:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   17c94:	3a00      	subs	r2, #0
   17c96:	bf18      	it	ne
   17c98:	2201      	movne	r2, #1
   17c9a:	f88d 2007 	strb.w	r2, [sp, #7]
   17c9e:	f89d 2005 	ldrb.w	r2, [sp, #5]
   17ca2:	2a00      	cmp	r2, #0
   17ca4:	d0e0      	beq.n	17c68 <kmu_load_key_aes+0x5c>
   17ca6:	f89d 3006 	ldrb.w	r3, [sp, #6]
   17caa:	b98b      	cbnz	r3, 17cd0 <kmu_load_key_aes+0xc4>
   17cac:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17cb0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   17cb4:	b933      	cbnz	r3, 17cc4 <kmu_load_key_aes+0xb8>
   17cb6:	4610      	mov	r0, r2
   17cb8:	4b07      	ldr	r3, [pc, #28]	; (17cd8 <kmu_load_key_aes+0xcc>)
   17cba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   17cbe:	b004      	add	sp, #16
   17cc0:	bc30      	pop	{r4, r5}
   17cc2:	4770      	bx	lr
   17cc4:	4807      	ldr	r0, [pc, #28]	; (17ce4 <kmu_load_key_aes+0xd8>)
   17cc6:	e7fa      	b.n	17cbe <kmu_load_key_aes+0xb2>
   17cc8:	4807      	ldr	r0, [pc, #28]	; (17ce8 <kmu_load_key_aes+0xdc>)
   17cca:	b004      	add	sp, #16
   17ccc:	bc30      	pop	{r4, r5}
   17cce:	4770      	bx	lr
   17cd0:	4806      	ldr	r0, [pc, #24]	; (17cec <kmu_load_key_aes+0xe0>)
   17cd2:	e7f4      	b.n	17cbe <kmu_load_key_aes+0xb2>
   17cd4:	00f1000c 	.word	0x00f1000c
   17cd8:	50039000 	.word	0x50039000
   17cdc:	50840000 	.word	0x50840000
   17ce0:	50841400 	.word	0x50841400
   17ce4:	00f70002 	.word	0x00f70002
   17ce8:	00f70006 	.word	0x00f70006
   17cec:	00f70001 	.word	0x00f70001

00017cf0 <kmu_derive_cmac>:
   17cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17cf4:	2400      	movs	r4, #0
   17cf6:	b0ce      	sub	sp, #312	; 0x138
   17cf8:	4605      	mov	r5, r0
   17cfa:	468a      	mov	sl, r1
   17cfc:	4617      	mov	r7, r2
   17cfe:	4621      	mov	r1, r4
   17d00:	2274      	movs	r2, #116	; 0x74
   17d02:	a810      	add	r0, sp, #64	; 0x40
   17d04:	4698      	mov	r8, r3
   17d06:	9e59      	ldr	r6, [sp, #356]	; 0x164
   17d08:	f8dd 9160 	ldr.w	r9, [sp, #352]	; 0x160
   17d0c:	f000 fa75 	bl	181fa <memset>
   17d10:	2280      	movs	r2, #128	; 0x80
   17d12:	4621      	mov	r1, r4
   17d14:	a82e      	add	r0, sp, #184	; 0xb8
   17d16:	942d      	str	r4, [sp, #180]	; 0xb4
   17d18:	f000 fa6f 	bl	181fa <memset>
   17d1c:	2384      	movs	r3, #132	; 0x84
   17d1e:	f5b6 6f7f 	cmp.w	r6, #4080	; 0xff0
   17d22:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   17d26:	940f      	str	r4, [sp, #60]	; 0x3c
   17d28:	940e      	str	r4, [sp, #56]	; 0x38
   17d2a:	9306      	str	r3, [sp, #24]
   17d2c:	d874      	bhi.n	17e18 <kmu_derive_cmac+0x128>
   17d2e:	ab06      	add	r3, sp, #24
   17d30:	ac2d      	add	r4, sp, #180	; 0xb4
   17d32:	9301      	str	r3, [sp, #4]
   17d34:	4641      	mov	r1, r8
   17d36:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
   17d3a:	4638      	mov	r0, r7
   17d3c:	9602      	str	r6, [sp, #8]
   17d3e:	9400      	str	r4, [sp, #0]
   17d40:	f000 f87e 	bl	17e40 <UtilCmacBuildDataForDerivation>
   17d44:	2800      	cmp	r0, #0
   17d46:	d16e      	bne.n	17e26 <kmu_derive_cmac+0x136>
   17d48:	2307      	movs	r3, #7
   17d4a:	931d      	str	r3, [sp, #116]	; 0x74
   17d4c:	2301      	movs	r3, #1
   17d4e:	9520      	str	r5, [sp, #128]	; 0x80
   17d50:	9328      	str	r3, [sp, #160]	; 0xa0
   17d52:	2200      	movs	r2, #0
   17d54:	00e9      	lsls	r1, r5, #3
   17d56:	441d      	add	r5, r3
   17d58:	2301      	movs	r3, #1
   17d5a:	4f35      	ldr	r7, [pc, #212]	; (17e30 <kmu_derive_cmac+0x140>)
   17d5c:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
   17d60:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
   17d64:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
   17d68:	901e      	str	r0, [sp, #120]	; 0x78
   17d6a:	f501 4104 	add.w	r1, r1, #33792	; 0x8400
   17d6e:	f8c7 5500 	str.w	r5, [r7, #1280]	; 0x500
   17d72:	680b      	ldr	r3, [r1, #0]
   17d74:	f3bf 8f4f 	dsb	sy
   17d78:	9307      	str	r3, [sp, #28]
   17d7a:	f8c7 0500 	str.w	r0, [r7, #1280]	; 0x500
   17d7e:	9a07      	ldr	r2, [sp, #28]
   17d80:	4b2c      	ldr	r3, [pc, #176]	; (17e34 <kmu_derive_cmac+0x144>)
   17d82:	429a      	cmp	r2, r3
   17d84:	d142      	bne.n	17e0c <kmu_derive_cmac+0x11c>
   17d86:	2203      	movs	r2, #3
   17d88:	f10d 0317 	add.w	r3, sp, #23
   17d8c:	701a      	strb	r2, [r3, #0]
   17d8e:	781b      	ldrb	r3, [r3, #0]
   17d90:	2110      	movs	r1, #16
   17d92:	a810      	add	r0, sp, #64	; 0x40
   17d94:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
   17d98:	f7fe fa30 	bl	161fc <CC_PalMemSetZeroPlat>
   17d9c:	2210      	movs	r2, #16
   17d9e:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   17da2:	9200      	str	r2, [sp, #0]
   17da4:	4620      	mov	r0, r4
   17da6:	9906      	ldr	r1, [sp, #24]
   17da8:	ab0c      	add	r3, sp, #48	; 0x30
   17daa:	f8cd 8004 	str.w	r8, [sp, #4]
   17dae:	aa08      	add	r2, sp, #32
   17db0:	f7ff f926 	bl	17000 <SetDataBuffersInfo>
   17db4:	4607      	mov	r7, r0
   17db6:	bb00      	cbnz	r0, 17dfa <kmu_derive_cmac+0x10a>
   17db8:	2401      	movs	r4, #1
   17dba:	e010      	b.n	17dde <kmu_derive_cmac+0xee>
   17dbc:	2e10      	cmp	r6, #16
   17dbe:	4635      	mov	r5, r6
   17dc0:	bf28      	it	cs
   17dc2:	2510      	movcs	r5, #16
   17dc4:	a910      	add	r1, sp, #64	; 0x40
   17dc6:	462a      	mov	r2, r5
   17dc8:	f7fe fa14 	bl	161f4 <CC_PalMemCopyPlat>
   17dcc:	2110      	movs	r1, #16
   17dce:	a810      	add	r0, sp, #64	; 0x40
   17dd0:	f7fe fa14 	bl	161fc <CC_PalMemSetZeroPlat>
   17dd4:	3401      	adds	r4, #1
   17dd6:	1b76      	subs	r6, r6, r5
   17dd8:	442f      	add	r7, r5
   17dda:	b2e4      	uxtb	r4, r4
   17ddc:	d021      	beq.n	17e22 <kmu_derive_cmac+0x132>
   17dde:	9b06      	ldr	r3, [sp, #24]
   17de0:	4642      	mov	r2, r8
   17de2:	a908      	add	r1, sp, #32
   17de4:	a810      	add	r0, sp, #64	; 0x40
   17de6:	f88d 40b4 	strb.w	r4, [sp, #180]	; 0xb4
   17dea:	f7ff fd5b 	bl	178a4 <FinishAesDrv>
   17dee:	4603      	mov	r3, r0
   17df0:	eb09 0007 	add.w	r0, r9, r7
   17df4:	2b00      	cmp	r3, #0
   17df6:	d0e1      	beq.n	17dbc <kmu_derive_cmac+0xcc>
   17df8:	461f      	mov	r7, r3
   17dfa:	a810      	add	r0, sp, #64	; 0x40
   17dfc:	2274      	movs	r2, #116	; 0x74
   17dfe:	2100      	movs	r1, #0
   17e00:	f7fe f9fa 	bl	161f8 <CC_PalMemSetPlat>
   17e04:	4638      	mov	r0, r7
   17e06:	b04e      	add	sp, #312	; 0x138
   17e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17e0c:	2202      	movs	r2, #2
   17e0e:	f10d 0317 	add.w	r3, sp, #23
   17e12:	f88d 2017 	strb.w	r2, [sp, #23]
   17e16:	e7ba      	b.n	17d8e <kmu_derive_cmac+0x9e>
   17e18:	4f07      	ldr	r7, [pc, #28]	; (17e38 <kmu_derive_cmac+0x148>)
   17e1a:	4638      	mov	r0, r7
   17e1c:	b04e      	add	sp, #312	; 0x138
   17e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17e22:	4637      	mov	r7, r6
   17e24:	e7e9      	b.n	17dfa <kmu_derive_cmac+0x10a>
   17e26:	4f05      	ldr	r7, [pc, #20]	; (17e3c <kmu_derive_cmac+0x14c>)
   17e28:	4638      	mov	r0, r7
   17e2a:	b04e      	add	sp, #312	; 0x138
   17e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17e30:	50039000 	.word	0x50039000
   17e34:	50841a50 	.word	0x50841a50
   17e38:	00f1000f 	.word	0x00f1000f
   17e3c:	00f1000e 	.word	0x00f1000e

00017e40 <UtilCmacBuildDataForDerivation>:
   17e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17e44:	2500      	movs	r5, #0
   17e46:	b082      	sub	sp, #8
   17e48:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   17e4a:	9501      	str	r5, [sp, #4]
   17e4c:	f5b4 6f7f 	cmp.w	r4, #4080	; 0xff0
   17e50:	d840      	bhi.n	17ed4 <UtilCmacBuildDataForDerivation+0x94>
   17e52:	00e4      	lsls	r4, r4, #3
   17e54:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   17e58:	461e      	mov	r6, r3
   17e5a:	bf34      	ite	cc
   17e5c:	2303      	movcc	r3, #3
   17e5e:	2304      	movcs	r3, #4
   17e60:	f101 3cff 	add.w	ip, r1, #4294967295
   17e64:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
   17e68:	460d      	mov	r5, r1
   17e6a:	9300      	str	r3, [sp, #0]
   17e6c:	d832      	bhi.n	17ed4 <UtilCmacBuildDataForDerivation+0x94>
   17e6e:	b388      	cbz	r0, 17ed4 <UtilCmacBuildDataForDerivation+0x94>
   17e70:	4617      	mov	r7, r2
   17e72:	b116      	cbz	r6, 17e7a <UtilCmacBuildDataForDerivation+0x3a>
   17e74:	b372      	cbz	r2, 17ed4 <UtilCmacBuildDataForDerivation+0x94>
   17e76:	2e40      	cmp	r6, #64	; 0x40
   17e78:	d82c      	bhi.n	17ed4 <UtilCmacBuildDataForDerivation+0x94>
   17e7a:	9a08      	ldr	r2, [sp, #32]
   17e7c:	b352      	cbz	r2, 17ed4 <UtilCmacBuildDataForDerivation+0x94>
   17e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   17e80:	6811      	ldr	r1, [r2, #0]
   17e82:	b339      	cbz	r1, 17ed4 <UtilCmacBuildDataForDerivation+0x94>
   17e84:	19aa      	adds	r2, r5, r6
   17e86:	4413      	add	r3, r2
   17e88:	4299      	cmp	r1, r3
   17e8a:	d323      	bcc.n	17ed4 <UtilCmacBuildDataForDerivation+0x94>
   17e8c:	9b08      	ldr	r3, [sp, #32]
   17e8e:	4601      	mov	r1, r0
   17e90:	462a      	mov	r2, r5
   17e92:	1c58      	adds	r0, r3, #1
   17e94:	f7fe f9ae 	bl	161f4 <CC_PalMemCopyPlat>
   17e98:	9b08      	ldr	r3, [sp, #32]
   17e9a:	f105 0802 	add.w	r8, r5, #2
   17e9e:	441d      	add	r5, r3
   17ea0:	2300      	movs	r3, #0
   17ea2:	706b      	strb	r3, [r5, #1]
   17ea4:	bb26      	cbnz	r6, 17ef0 <UtilCmacBuildDataForDerivation+0xb0>
   17ea6:	2cff      	cmp	r4, #255	; 0xff
   17ea8:	9400      	str	r4, [sp, #0]
   17eaa:	d917      	bls.n	17edc <UtilCmacBuildDataForDerivation+0x9c>
   17eac:	0223      	lsls	r3, r4, #8
   17eae:	b29b      	uxth	r3, r3
   17eb0:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
   17eb4:	9b08      	ldr	r3, [sp, #32]
   17eb6:	2202      	movs	r2, #2
   17eb8:	eb03 0008 	add.w	r0, r3, r8
   17ebc:	a901      	add	r1, sp, #4
   17ebe:	9401      	str	r4, [sp, #4]
   17ec0:	f7fe f998 	bl	161f4 <CC_PalMemCopyPlat>
   17ec4:	f108 0302 	add.w	r3, r8, #2
   17ec8:	2000      	movs	r0, #0
   17eca:	9a09      	ldr	r2, [sp, #36]	; 0x24
   17ecc:	6013      	str	r3, [r2, #0]
   17ece:	b002      	add	sp, #8
   17ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17ed4:	480b      	ldr	r0, [pc, #44]	; (17f04 <UtilCmacBuildDataForDerivation+0xc4>)
   17ed6:	b002      	add	sp, #8
   17ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17edc:	9b08      	ldr	r3, [sp, #32]
   17ede:	2201      	movs	r2, #1
   17ee0:	eb03 0008 	add.w	r0, r3, r8
   17ee4:	4669      	mov	r1, sp
   17ee6:	f7fe f985 	bl	161f4 <CC_PalMemCopyPlat>
   17eea:	f108 0301 	add.w	r3, r8, #1
   17eee:	e7eb      	b.n	17ec8 <UtilCmacBuildDataForDerivation+0x88>
   17ef0:	9b08      	ldr	r3, [sp, #32]
   17ef2:	4632      	mov	r2, r6
   17ef4:	eb03 0008 	add.w	r0, r3, r8
   17ef8:	4639      	mov	r1, r7
   17efa:	f7fe f97b 	bl	161f4 <CC_PalMemCopyPlat>
   17efe:	44b0      	add	r8, r6
   17f00:	e7d1      	b.n	17ea6 <UtilCmacBuildDataForDerivation+0x66>
   17f02:	bf00      	nop
   17f04:	80000006 	.word	0x80000006

00017f08 <CC_PalDataBufferAttrGet>:
   17f08:	2000      	movs	r0, #0
   17f0a:	7018      	strb	r0, [r3, #0]
   17f0c:	4770      	bx	lr
   17f0e:	bf00      	nop

00017f10 <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
   17f10:	b508      	push	{r3, lr}
	spm_config();
   17f12:	f7f9 fa7b 	bl	1140c <spm_config>
	spm_jump();
}
   17f16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
   17f1a:	f7f9 ba29 	b.w	11370 <spm_jump>

00017f1e <arch_printk_char_out>:
}
   17f1e:	2000      	movs	r0, #0
   17f20:	4770      	bx	lr

00017f22 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   17f22:	b40f      	push	{r0, r1, r2, r3}
   17f24:	b507      	push	{r0, r1, r2, lr}
   17f26:	a904      	add	r1, sp, #16
   17f28:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   17f2c:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   17f2e:	f7f8 fc1b 	bl	10768 <vprintk>

	va_end(ap);
}
   17f32:	b003      	add	sp, #12
   17f34:	f85d eb04 	ldr.w	lr, [sp], #4
   17f38:	b004      	add	sp, #16
   17f3a:	4770      	bx	lr

00017f3c <onoff_manager_init>:
	return rv;
}

int onoff_manager_init(struct onoff_manager *mgr,
		       const struct onoff_transitions *transitions)
{
   17f3c:	b538      	push	{r3, r4, r5, lr}
   17f3e:	460c      	mov	r4, r1
	if ((mgr == NULL)
   17f40:	4605      	mov	r5, r0
   17f42:	b158      	cbz	r0, 17f5c <onoff_manager_init+0x20>
	    || (transitions == NULL)
   17f44:	b151      	cbz	r1, 17f5c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   17f46:	680b      	ldr	r3, [r1, #0]
   17f48:	b143      	cbz	r3, 17f5c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   17f4a:	684b      	ldr	r3, [r1, #4]
   17f4c:	b133      	cbz	r3, 17f5c <onoff_manager_init+0x20>
		return -EINVAL;
	}

	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   17f4e:	2220      	movs	r2, #32
   17f50:	2100      	movs	r1, #0
   17f52:	f000 f952 	bl	181fa <memset>

	return 0;
   17f56:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   17f58:	612c      	str	r4, [r5, #16]
}
   17f5a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   17f5c:	f06f 0015 	mvn.w	r0, #21
   17f60:	e7fb      	b.n	17f5a <onoff_manager_init+0x1e>

00017f62 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   17f62:	4604      	mov	r4, r0
   17f64:	b508      	push	{r3, lr}
   17f66:	4608      	mov	r0, r1
   17f68:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   17f6a:	461a      	mov	r2, r3
   17f6c:	47a0      	blx	r4
	return z_impl_z_current_get();
   17f6e:	f7fc fe87 	bl	14c80 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   17f72:	f7fa f947 	bl	12204 <z_impl_k_thread_abort>

00017f76 <encode_uint>:
{
   17f76:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f7a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   17f7c:	78d3      	ldrb	r3, [r2, #3]
{
   17f7e:	4680      	mov	r8, r0
	switch (specifier) {
   17f80:	2b6f      	cmp	r3, #111	; 0x6f
{
   17f82:	460f      	mov	r7, r1
   17f84:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   17f86:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   17f8a:	d029      	beq.n	17fe0 <encode_uint+0x6a>
   17f8c:	d824      	bhi.n	17fd8 <encode_uint+0x62>
		return 16;
   17f8e:	2b58      	cmp	r3, #88	; 0x58
   17f90:	bf14      	ite	ne
   17f92:	260a      	movne	r6, #10
   17f94:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   17f96:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   17f9a:	4632      	mov	r2, r6
   17f9c:	2300      	movs	r3, #0
   17f9e:	4640      	mov	r0, r8
   17fa0:	4639      	mov	r1, r7
   17fa2:	f7f8 fa4b 	bl	1043c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   17fa6:	2a09      	cmp	r2, #9
   17fa8:	b2d4      	uxtb	r4, r2
   17faa:	d81e      	bhi.n	17fea <encode_uint+0x74>
   17fac:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   17fae:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   17fb0:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   17fb2:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   17fb6:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   17fba:	d301      	bcc.n	17fc0 <encode_uint+0x4a>
   17fbc:	45d1      	cmp	r9, sl
   17fbe:	d811      	bhi.n	17fe4 <encode_uint+0x6e>
	if (conv->flag_hash) {
   17fc0:	782b      	ldrb	r3, [r5, #0]
   17fc2:	069b      	lsls	r3, r3, #26
   17fc4:	d505      	bpl.n	17fd2 <encode_uint+0x5c>
		if (radix == 8) {
   17fc6:	2e08      	cmp	r6, #8
   17fc8:	d115      	bne.n	17ff6 <encode_uint+0x80>
			conv->altform_0 = true;
   17fca:	78ab      	ldrb	r3, [r5, #2]
   17fcc:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   17fd0:	70ab      	strb	r3, [r5, #2]
}
   17fd2:	4648      	mov	r0, r9
   17fd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   17fd8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   17fdc:	2b70      	cmp	r3, #112	; 0x70
   17fde:	e7d7      	b.n	17f90 <encode_uint+0x1a>
	switch (specifier) {
   17fe0:	2608      	movs	r6, #8
   17fe2:	e7d8      	b.n	17f96 <encode_uint+0x20>
		value /= radix;
   17fe4:	4680      	mov	r8, r0
   17fe6:	460f      	mov	r7, r1
   17fe8:	e7d7      	b.n	17f9a <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   17fea:	f1bb 0f19 	cmp.w	fp, #25
   17fee:	bf94      	ite	ls
   17ff0:	3437      	addls	r4, #55	; 0x37
   17ff2:	3457      	addhi	r4, #87	; 0x57
   17ff4:	e7db      	b.n	17fae <encode_uint+0x38>
		} else if (radix == 16) {
   17ff6:	2e10      	cmp	r6, #16
   17ff8:	d1eb      	bne.n	17fd2 <encode_uint+0x5c>
			conv->altform_0c = true;
   17ffa:	78ab      	ldrb	r3, [r5, #2]
   17ffc:	f043 0310 	orr.w	r3, r3, #16
   18000:	e7e6      	b.n	17fd0 <encode_uint+0x5a>

00018002 <outs>:
{
   18002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18006:	4607      	mov	r7, r0
   18008:	4688      	mov	r8, r1
   1800a:	4615      	mov	r5, r2
   1800c:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1800e:	4614      	mov	r4, r2
   18010:	42b4      	cmp	r4, r6
   18012:	eba4 0005 	sub.w	r0, r4, r5
   18016:	d302      	bcc.n	1801e <outs+0x1c>
   18018:	b93e      	cbnz	r6, 1802a <outs+0x28>
   1801a:	7823      	ldrb	r3, [r4, #0]
   1801c:	b12b      	cbz	r3, 1802a <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1801e:	4641      	mov	r1, r8
   18020:	f814 0b01 	ldrb.w	r0, [r4], #1
   18024:	47b8      	blx	r7
		if (rc < 0) {
   18026:	2800      	cmp	r0, #0
   18028:	daf2      	bge.n	18010 <outs+0xe>
}
   1802a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001802e <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   1802e:	4040      	eors	r0, r0
   18030:	f380 8811 	msr	BASEPRI, r0
   18034:	f04f 0004 	mov.w	r0, #4
   18038:	df02      	svc	2
}
   1803a:	4770      	bx	lr

0001803c <assert_print>:

void assert_print(const char *fmt, ...)
{
   1803c:	b40f      	push	{r0, r1, r2, r3}
   1803e:	b507      	push	{r0, r1, r2, lr}
   18040:	a904      	add	r1, sp, #16
   18042:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   18046:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   18048:	f7f8 fb8e 	bl	10768 <vprintk>

	va_end(ap);
}
   1804c:	b003      	add	sp, #12
   1804e:	f85d eb04 	ldr.w	lr, [sp], #4
   18052:	b004      	add	sp, #16
   18054:	4770      	bx	lr

00018056 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
   18056:	4770      	bx	lr

00018058 <pm_state_exit_post_ops>:
   18058:	2300      	movs	r3, #0
   1805a:	f383 8811 	msr	BASEPRI, r3
   1805e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   18062:	4770      	bx	lr

00018064 <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
   18064:	b40f      	push	{r0, r1, r2, r3}
   18066:	b507      	push	{r0, r1, r2, lr}
   18068:	a904      	add	r1, sp, #16
   1806a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1806e:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   18070:	f7f8 fb7a 	bl	10768 <vprintk>
	va_end(ap);
}
   18074:	b003      	add	sp, #12
   18076:	f85d eb04 	ldr.w	lr, [sp], #4
   1807a:	b004      	add	sp, #16
   1807c:	4770      	bx	lr

0001807e <__acle_se_spm_firmware_info_nse>:
#endif /* CONFIG_SPM_SERVICE_S0_ACTIVE */

#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info_nse(uint32_t fw_address, struct fw_info *info)
{
   1807e:	b538      	push	{r3, r4, r5, lr}
   18080:	4605      	mov	r5, r0
	const struct fw_info *tmp_info;

	if (info == NULL) {
   18082:	460c      	mov	r4, r1
   18084:	b951      	cbnz	r1, 1809c <__acle_se_spm_firmware_info_nse+0x1e>
		return -EINVAL;
   18086:	f06f 0015 	mvn.w	r0, #21
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
}
   1808a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1808e:	4671      	mov	r1, lr
   18090:	4672      	mov	r2, lr
   18092:	4673      	mov	r3, lr
   18094:	46f4      	mov	ip, lr
   18096:	f38e 8c00 	msr	CPSR_fs, lr
   1809a:	4774      	bxns	lr
	return arm_cmse_addr_is_secure(ptr) == 1;
   1809c:	f000 f864 	bl	18168 <arm_cmse_addr_is_secure>
	if (!ptr_in_secure_area(fw_address)) {
   180a0:	2801      	cmp	r0, #1
   180a2:	d1f0      	bne.n	18086 <__acle_se_spm_firmware_info_nse+0x8>
	return arm_cmse_addr_is_secure(ptr) == 1;
   180a4:	4620      	mov	r0, r4
   180a6:	f000 f85f 	bl	18168 <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)info)) {
   180aa:	2801      	cmp	r0, #1
   180ac:	d0eb      	beq.n	18086 <__acle_se_spm_firmware_info_nse+0x8>
	tmp_info = fw_info_find(fw_address);
   180ae:	4628      	mov	r0, r5
   180b0:	f7f9 fa9a 	bl	115e8 <fw_info_find>
	if (tmp_info != NULL) {
   180b4:	4601      	mov	r1, r0
   180b6:	b128      	cbz	r0, 180c4 <__acle_se_spm_firmware_info_nse+0x46>
		memcpy(info, tmp_info, sizeof(*tmp_info));
   180b8:	223c      	movs	r2, #60	; 0x3c
   180ba:	4620      	mov	r0, r4
   180bc:	f000 f892 	bl	181e4 <memcpy>
		return 0;
   180c0:	2000      	movs	r0, #0
   180c2:	e7e2      	b.n	1808a <__acle_se_spm_firmware_info_nse+0xc>
	return -EFAULT;
   180c4:	f06f 000d 	mvn.w	r0, #13
   180c8:	e7df      	b.n	1808a <__acle_se_spm_firmware_info_nse+0xc>

000180ca <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
   180ca:	2000      	movs	r0, #0
{
   180cc:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   180ce:	f7f8 ff1b 	bl	10f08 <sys_reboot>

000180d2 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   180d2:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   180d4:	6800      	ldr	r0, [r0, #0]
   180d6:	f7f9 bc25 	b.w	11924 <z_arm_fatal_error>

000180da <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   180da:	2100      	movs	r1, #0
   180dc:	2001      	movs	r0, #1
   180de:	f7f9 bc21 	b.w	11924 <z_arm_fatal_error>

000180e2 <irq_target_state_set>:
 *
 * @return The resulting target state of the given IRQ
 */
irq_target_state_t irq_target_state_set(unsigned int irq,
	irq_target_state_t irq_target_state)
{
   180e2:	4602      	mov	r2, r0
	uint32_t result;

	if (irq_target_state == IRQ_TARGET_STATE_SECURE) {
		/* Set target to Secure */
		result = NVIC_ClearTargetState(irq);
   180e4:	b243      	sxtb	r3, r0
	if (irq_target_state == IRQ_TARGET_STATE_SECURE) {
   180e6:	4608      	mov	r0, r1
   180e8:	b9c1      	cbnz	r1, 1811c <irq_target_state_set+0x3a>
  if ((int32_t)(IRQn) >= 0)
   180ea:	2b00      	cmp	r3, #0
   180ec:	db27      	blt.n	1813e <irq_target_state_set+0x5c>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   180ee:	2001      	movs	r0, #1
   180f0:	095b      	lsrs	r3, r3, #5
   180f2:	009b      	lsls	r3, r3, #2
   180f4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   180f8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   180fc:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
   18100:	f002 021f 	and.w	r2, r2, #31
   18104:	4090      	lsls	r0, r2
   18106:	ea21 0100 	bic.w	r1, r1, r0
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   1810a:	f8c3 1280 	str.w	r1, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
   1810e:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
   18112:	40d0      	lsrs	r0, r2
   18114:	f000 0001 	and.w	r0, r0, #1
	} else {
		/* Set target to Non-Secure */
		result = NVIC_SetTargetState(irq);
	}

	if (result) {
   18118:	b2c0      	uxtb	r0, r0
   1811a:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
   1811c:	2b00      	cmp	r3, #0
   1811e:	db0d      	blt.n	1813c <irq_target_state_set+0x5a>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   18120:	2101      	movs	r1, #1
   18122:	095b      	lsrs	r3, r3, #5
   18124:	009b      	lsls	r3, r3, #2
   18126:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   1812a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   1812e:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
   18132:	f002 021f 	and.w	r2, r2, #31
   18136:	4091      	lsls	r1, r2
   18138:	4301      	orrs	r1, r0
   1813a:	e7e6      	b.n	1810a <irq_target_state_set+0x28>
		return IRQ_TARGET_STATE_NON_SECURE;
	} else {
		return IRQ_TARGET_STATE_SECURE;
   1813c:	2000      	movs	r0, #0
	}
}
   1813e:	4770      	bx	lr

00018140 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   18140:	b508      	push	{r3, lr}
	handler();
   18142:	f7f9 fc61 	bl	11a08 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   18146:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1814a:	f7f9 bd23 	b.w	11b94 <z_arm_exc_exit>

0001814e <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1814e:	6e43      	ldr	r3, [r0, #100]	; 0x64
   18150:	f383 880b 	msr	PSPLIM, r3
}
   18154:	4770      	bx	lr

00018156 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   18156:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   1815a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1815e:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   18160:	bf08      	it	eq
   18162:	f06f 0015 	mvneq.w	r0, #21
   18166:	4770      	bx	lr

00018168 <arm_cmse_addr_is_secure>:
   18168:	e840 f000 	tt	r0, r0
int arm_cmse_addr_is_secure(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	return addr_info.flags.secure;
}
   1816c:	f3c0 5080 	ubfx	r0, r0, #22, #1
   18170:	4770      	bx	lr

00018172 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   18172:	4603      	mov	r3, r0
	size_t n = 0;
   18174:	2000      	movs	r0, #0

	while (*s != '\0') {
   18176:	5c1a      	ldrb	r2, [r3, r0]
   18178:	b902      	cbnz	r2, 1817c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1817a:	4770      	bx	lr
		n++;
   1817c:	3001      	adds	r0, #1
   1817e:	e7fa      	b.n	18176 <strlen+0x4>

00018180 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   18180:	4603      	mov	r3, r0
	size_t n = 0;
   18182:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   18184:	5c1a      	ldrb	r2, [r3, r0]
   18186:	b10a      	cbz	r2, 1818c <strnlen+0xc>
   18188:	4288      	cmp	r0, r1
   1818a:	d100      	bne.n	1818e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1818c:	4770      	bx	lr
		n++;
   1818e:	3001      	adds	r0, #1
   18190:	e7f8      	b.n	18184 <strnlen+0x4>

00018192 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   18192:	4603      	mov	r3, r0
   18194:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   18196:	b15a      	cbz	r2, 181b0 <memcmp+0x1e>
   18198:	3901      	subs	r1, #1
   1819a:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1819c:	f813 0b01 	ldrb.w	r0, [r3], #1
   181a0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   181a4:	42a3      	cmp	r3, r4
   181a6:	d001      	beq.n	181ac <memcmp+0x1a>
   181a8:	4290      	cmp	r0, r2
   181aa:	d0f7      	beq.n	1819c <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   181ac:	1a80      	subs	r0, r0, r2
}
   181ae:	bd10      	pop	{r4, pc}
		return 0;
   181b0:	4610      	mov	r0, r2
   181b2:	e7fc      	b.n	181ae <memcmp+0x1c>

000181b4 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   181b4:	1a43      	subs	r3, r0, r1
   181b6:	4293      	cmp	r3, r2
{
   181b8:	b510      	push	{r4, lr}
   181ba:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   181be:	d308      	bcc.n	181d2 <memmove+0x1e>
	char *dest = d;
   181c0:	4602      	mov	r2, r0
   181c2:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   181c4:	429a      	cmp	r2, r3
   181c6:	d007      	beq.n	181d8 <memmove+0x24>
			*dest = *src;
   181c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   181cc:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   181d0:	e7f8      	b.n	181c4 <memmove+0x10>
   181d2:	440a      	add	r2, r1
		while (n > 0) {
   181d4:	428a      	cmp	r2, r1
   181d6:	d100      	bne.n	181da <memmove+0x26>
		}
	}

	return d;
}
   181d8:	bd10      	pop	{r4, pc}
			dest[n] = src[n];
   181da:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   181de:	f803 4d01 	strb.w	r4, [r3, #-1]!
   181e2:	e7f7      	b.n	181d4 <memmove+0x20>

000181e4 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   181e4:	b510      	push	{r4, lr}
   181e6:	1e43      	subs	r3, r0, #1
   181e8:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   181ea:	4291      	cmp	r1, r2
   181ec:	d100      	bne.n	181f0 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   181ee:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   181f0:	f811 4b01 	ldrb.w	r4, [r1], #1
   181f4:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   181f8:	e7f7      	b.n	181ea <memcpy+0x6>

000181fa <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   181fa:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
   181fc:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   181fe:	4402      	add	r2, r0
   18200:	4293      	cmp	r3, r2
   18202:	d100      	bne.n	18206 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   18204:	4770      	bx	lr
		*(d_byte++) = c_byte;
   18206:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1820a:	e7f9      	b.n	18200 <memset+0x6>

0001820c <_stdout_hook_default>:
}
   1820c:	f04f 30ff 	mov.w	r0, #4294967295
   18210:	4770      	bx	lr

00018212 <set_on_state>:
	__asm__ volatile(
   18212:	f04f 0320 	mov.w	r3, #32
   18216:	f3ef 8211 	mrs	r2, BASEPRI
   1821a:	f383 8812 	msr	BASEPRI_MAX, r3
   1821e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   18222:	6803      	ldr	r3, [r0, #0]
   18224:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   18228:	f043 0302 	orr.w	r3, r3, #2
   1822c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1822e:	f382 8811 	msr	BASEPRI, r2
   18232:	f3bf 8f6f 	isb	sy
}
   18236:	4770      	bx	lr

00018238 <async_start>:
{
   18238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1823a:	9f06      	ldr	r7, [sp, #24]
   1823c:	4605      	mov	r5, r0
	struct nrf_clock_control_data *data = dev->data;
   1823e:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   18240:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   18242:	f04f 0020 	mov.w	r0, #32
   18246:	f3ef 8c11 	mrs	ip, BASEPRI
   1824a:	f380 8812 	msr	BASEPRI_MAX, r0
   1824e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   18252:	260c      	movs	r6, #12
   18254:	fb06 4601 	mla	r6, r6, r1, r4
   18258:	6cb0      	ldr	r0, [r6, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1825a:	f000 0e07 	and.w	lr, r0, #7
   1825e:	f1be 0f01 	cmp.w	lr, #1
   18262:	d110      	bne.n	18286 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   18264:	64b7      	str	r7, [r6, #72]	; 0x48
	int err = 0;
   18266:	2600      	movs	r6, #0
	__asm__ volatile(
   18268:	f38c 8811 	msr	BASEPRI, ip
   1826c:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   18270:	b93e      	cbnz	r6, 18282 <async_start+0x4a>
	subdata->cb = cb;
   18272:	200c      	movs	r0, #12
   18274:	4341      	muls	r1, r0
   18276:	440c      	add	r4, r1
	subdata->user_data = user_data;
   18278:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   1827c:	686b      	ldr	r3, [r5, #4]
   1827e:	585b      	ldr	r3, [r3, r1]
   18280:	4798      	blx	r3
}
   18282:	4630      	mov	r0, r6
   18284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   18286:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   1828a:	4287      	cmp	r7, r0
   1828c:	bf14      	ite	ne
   1828e:	f04f 36ff 	movne.w	r6, #4294967295
   18292:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   18296:	e7e7      	b.n	18268 <async_start+0x30>

00018298 <api_start>:
{
   18298:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1829a:	2480      	movs	r4, #128	; 0x80
   1829c:	9400      	str	r4, [sp, #0]
   1829e:	f7ff ffcb 	bl	18238 <async_start>
}
   182a2:	b002      	add	sp, #8
   182a4:	bd10      	pop	{r4, pc}

000182a6 <onoff_started_callback>:
	return &data->mgr[type];
   182a6:	6900      	ldr	r0, [r0, #16]
   182a8:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   182aa:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   182ae:	2100      	movs	r1, #0
   182b0:	4710      	bx	r2

000182b2 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   182b2:	2000      	movs	r0, #0
   182b4:	f7fb b836 	b.w	13324 <nrfx_clock_start>

000182b8 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   182b8:	2000      	movs	r0, #0
   182ba:	f7fb b895 	b.w	133e8 <nrfx_clock_stop>

000182be <api_stop>:
	return stop(dev, subsys, CTX_API);
   182be:	2280      	movs	r2, #128	; 0x80
   182c0:	f7fa ba76 	b.w	127b0 <stop>

000182c4 <blocking_start_callback>:
{
   182c4:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   182c6:	f7fb bd95 	b.w	13df4 <z_impl_k_sem_give>

000182ca <uarte_nrfx_config_get>:
{
   182ca:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   182cc:	6902      	ldr	r2, [r0, #16]
   182ce:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   182d2:	e883 0003 	stmia.w	r3, {r0, r1}
}
   182d6:	2000      	movs	r0, #0
   182d8:	4770      	bx	lr

000182da <uarte_nrfx_err_check>:
	return config->uarte_regs;
   182da:	6843      	ldr	r3, [r0, #4]
   182dc:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   182de:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   182e2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   182e6:	4770      	bx	lr

000182e8 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   182e8:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   182ea:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   182ec:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   182ee:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   182f2:	b148      	cbz	r0, 18308 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   182f4:	2000      	movs	r0, #0
	*c = data->rx_data;
   182f6:	7c52      	ldrb	r2, [r2, #17]
   182f8:	700a      	strb	r2, [r1, #0]
   182fa:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   182fe:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18302:	2201      	movs	r2, #1
   18304:	601a      	str	r2, [r3, #0]
	return 0;
   18306:	4770      	bx	lr
		return -1;
   18308:	f04f 30ff 	mov.w	r0, #4294967295
}
   1830c:	4770      	bx	lr

0001830e <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1830e:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   18310:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18312:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   18316:	b940      	cbnz	r0, 1832a <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   18318:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1831a:	079b      	lsls	r3, r3, #30
   1831c:	d406      	bmi.n	1832c <is_tx_ready.isra.0+0x1e>
   1831e:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   18322:	3800      	subs	r0, #0
   18324:	bf18      	it	ne
   18326:	2001      	movne	r0, #1
   18328:	4770      	bx	lr
   1832a:	2001      	movs	r0, #1
}
   1832c:	4770      	bx	lr

0001832e <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   1832e:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   18330:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   18332:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   18336:	05c9      	lsls	r1, r1, #23
   18338:	d518      	bpl.n	1836c <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1833a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1833e:	b1a9      	cbz	r1, 1836c <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   18340:	f04f 0020 	mov.w	r0, #32
   18344:	f3ef 8111 	mrs	r1, BASEPRI
   18348:	f380 8812 	msr	BASEPRI_MAX, r0
   1834c:	f3bf 8f6f 	isb	sy
   18350:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   18354:	b130      	cbz	r0, 18364 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18356:	2000      	movs	r0, #0
   18358:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1835c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18360:	2001      	movs	r0, #1
   18362:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   18364:	f381 8811 	msr	BASEPRI, r1
   18368:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1836c:	6852      	ldr	r2, [r2, #4]
   1836e:	06d2      	lsls	r2, r2, #27
   18370:	d515      	bpl.n	1839e <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   18372:	f04f 0120 	mov.w	r1, #32
   18376:	f3ef 8211 	mrs	r2, BASEPRI
   1837a:	f381 8812 	msr	BASEPRI_MAX, r1
   1837e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18382:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   18386:	b111      	cbz	r1, 1838e <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   18388:	2100      	movs	r1, #0
   1838a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1838e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   18392:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   18396:	f382 8811 	msr	BASEPRI, r2
   1839a:	f3bf 8f6f 	isb	sy
}
   1839e:	4770      	bx	lr

000183a0 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   183a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   183a4:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
   183a6:	6846      	ldr	r6, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   183a8:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   183aa:	6834      	ldr	r4, [r6, #0]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   183ac:	68f7      	ldr	r7, [r6, #12]
   183ae:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
   183b2:	4680      	mov	r8, r0
	data->dev = dev;
   183b4:	6028      	str	r0, [r5, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   183b6:	aa01      	add	r2, sp, #4
   183b8:	4638      	mov	r0, r7
   183ba:	f000 f869 	bl	18490 <pinctrl_lookup_state>
	if (ret < 0) {
   183be:	2800      	cmp	r0, #0
   183c0:	db33      	blt.n	1842a <uarte_instance_init.constprop.0+0x8a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   183c2:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   183c4:	683a      	ldr	r2, [r7, #0]
   183c6:	7919      	ldrb	r1, [r3, #4]
   183c8:	6818      	ldr	r0, [r3, #0]
   183ca:	f000 f8b6 	bl	1853a <pinctrl_configure_pins>
	if (err < 0) {
   183ce:	2800      	cmp	r0, #0
   183d0:	db2b      	blt.n	1842a <uarte_instance_init.constprop.0+0x8a>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   183d2:	4640      	mov	r0, r8
   183d4:	1d29      	adds	r1, r5, #4
   183d6:	f7fa fb37 	bl	12a48 <uarte_nrfx_configure>
	if (err) {
   183da:	bb30      	cbnz	r0, 1842a <uarte_instance_init.constprop.0+0x8a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   183dc:	2308      	movs	r3, #8
   183de:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   183e2:	7a33      	ldrb	r3, [r6, #8]
   183e4:	b95b      	cbnz	r3, 183fe <uarte_instance_init.constprop.0+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   183e6:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
   183ea:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   183ee:	f105 0311 	add.w	r3, r5, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   183f2:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   183f6:	2301      	movs	r3, #1
   183f8:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   183fc:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   183fe:	6873      	ldr	r3, [r6, #4]

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   18400:	3510      	adds	r5, #16
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   18402:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   18404:	bf5c      	itt	pl
   18406:	f44f 7280 	movpl.w	r2, #256	; 0x100
   1840a:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1840e:	06db      	lsls	r3, r3, #27
   18410:	bf44      	itt	mi
   18412:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   18416:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   1841a:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1841c:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   18420:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18424:	2301      	movs	r3, #1
   18426:	60a3      	str	r3, [r4, #8]
   18428:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1842a:	b002      	add	sp, #8
   1842c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018430 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   18430:	b510      	push	{r4, lr}
   18432:	4604      	mov	r4, r0
   18434:	2200      	movs	r2, #0
   18436:	2101      	movs	r1, #1
   18438:	2009      	movs	r0, #9
   1843a:	f7f9 fabf 	bl	119bc <z_arm_irq_priority_set>
   1843e:	2009      	movs	r0, #9
   18440:	f7f9 fa9e 	bl	11980 <arch_irq_enable>
   18444:	4620      	mov	r0, r4
   18446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1844a:	f7ff bfa9 	b.w	183a0 <uarte_instance_init.constprop.0>

0001844e <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   1844e:	b510      	push	{r4, lr}
   18450:	4604      	mov	r4, r0
   18452:	2200      	movs	r2, #0
   18454:	2101      	movs	r1, #1
   18456:	2008      	movs	r0, #8
   18458:	f7f9 fab0 	bl	119bc <z_arm_irq_priority_set>
   1845c:	2008      	movs	r0, #8
   1845e:	f7f9 fa8f 	bl	11980 <arch_irq_enable>
   18462:	4620      	mov	r0, r4
   18464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18468:	f7ff bf9a 	b.w	183a0 <uarte_instance_init.constprop.0>

0001846c <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   1846c:	2200      	movs	r2, #0
{
   1846e:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   18470:	4611      	mov	r1, r2
   18472:	4610      	mov	r0, r2
   18474:	f7fc ff9e 	bl	153b4 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   18478:	2800      	cmp	r0, #0
	}
#endif

	return 0;
}
   1847a:	bf18      	it	ne
   1847c:	f06f 0015 	mvnne.w	r0, #21
   18480:	bd08      	pop	{r3, pc}

00018482 <sys_clock_disable>:
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
   18482:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   18486:	6913      	ldr	r3, [r2, #16]
   18488:	f023 0301 	bic.w	r3, r3, #1
   1848c:	6113      	str	r3, [r2, #16]
}
   1848e:	4770      	bx	lr

00018490 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   18490:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   18492:	6843      	ldr	r3, [r0, #4]
   18494:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   18496:	7a03      	ldrb	r3, [r0, #8]
   18498:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   1849c:	3b01      	subs	r3, #1
   1849e:	00db      	lsls	r3, r3, #3
   184a0:	6845      	ldr	r5, [r0, #4]
   184a2:	6814      	ldr	r4, [r2, #0]
   184a4:	441d      	add	r5, r3
   184a6:	42ac      	cmp	r4, r5
   184a8:	d902      	bls.n	184b0 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
   184aa:	f06f 0001 	mvn.w	r0, #1
}
   184ae:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   184b0:	7965      	ldrb	r5, [r4, #5]
   184b2:	428d      	cmp	r5, r1
   184b4:	d002      	beq.n	184bc <pinctrl_lookup_state+0x2c>
		(*state)++;
   184b6:	3408      	adds	r4, #8
   184b8:	6014      	str	r4, [r2, #0]
   184ba:	e7f1      	b.n	184a0 <pinctrl_lookup_state+0x10>
			return 0;
   184bc:	2000      	movs	r0, #0
   184be:	e7f6      	b.n	184ae <pinctrl_lookup_state+0x1e>

000184c0 <nrf_gpio_pin_clear>:
{
   184c0:	b507      	push	{r0, r1, r2, lr}
   184c2:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   184c4:	a801      	add	r0, sp, #4
   184c6:	f7fa fd31 	bl	12f2c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   184ca:	2301      	movs	r3, #1
   184cc:	9a01      	ldr	r2, [sp, #4]
   184ce:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   184d0:	60c3      	str	r3, [r0, #12]
}
   184d2:	b003      	add	sp, #12
   184d4:	f85d fb04 	ldr.w	pc, [sp], #4

000184d8 <nrf_gpio_pin_set>:
{
   184d8:	b507      	push	{r0, r1, r2, lr}
   184da:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   184dc:	a801      	add	r0, sp, #4
   184de:	f7fa fd25 	bl	12f2c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   184e2:	2301      	movs	r3, #1
   184e4:	9a01      	ldr	r2, [sp, #4]
   184e6:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   184e8:	6083      	str	r3, [r0, #8]
}
   184ea:	b003      	add	sp, #12
   184ec:	f85d fb04 	ldr.w	pc, [sp], #4

000184f0 <nrf_gpio_pin_write>:
    if (value == 0)
   184f0:	b909      	cbnz	r1, 184f6 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
   184f2:	f7ff bfe5 	b.w	184c0 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   184f6:	f7ff bfef 	b.w	184d8 <nrf_gpio_pin_set>

000184fa <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
   184fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
   184fc:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
{
   18500:	4604      	mov	r4, r0
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   18502:	2b00      	cmp	r3, #0
   18504:	bf0a      	itet	eq
   18506:	460e      	moveq	r6, r1
   18508:	2600      	movne	r6, #0
   1850a:	4615      	moveq	r5, r2
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
   1850c:	f000 033f 	and.w	r3, r0, #63	; 0x3f
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   18510:	bf18      	it	ne
   18512:	2501      	movne	r5, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   18514:	a801      	add	r0, sp, #4
   18516:	9301      	str	r3, [sp, #4]
   18518:	f7fa fd08 	bl	12f2c <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1851c:	f3c4 1281 	ubfx	r2, r4, #6, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   18520:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
    reg->PIN_CNF[pin_number] = cnf;
   18524:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   18526:	ea44 0282 	orr.w	r2, r4, r2, lsl #2
   1852a:	4332      	orrs	r2, r6
   1852c:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   18530:	3380      	adds	r3, #128	; 0x80
   18532:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
   18536:	b002      	add	sp, #8
   18538:	bd70      	pop	{r4, r5, r6, pc}

0001853a <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   1853a:	b570      	push	{r4, r5, r6, lr}
   1853c:	4615      	mov	r5, r2
   1853e:	4604      	mov	r4, r0
   18540:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   18544:	42a6      	cmp	r6, r4
   18546:	d101      	bne.n	1854c <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   18548:	2000      	movs	r0, #0
}
   1854a:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
   1854c:	6823      	ldr	r3, [r4, #0]
   1854e:	0c1a      	lsrs	r2, r3, #16
   18550:	2a19      	cmp	r2, #25
   18552:	d869      	bhi.n	18628 <pinctrl_configure_pins+0xee>
   18554:	e8df f002 	tbb	[pc, r2]
   18558:	3e1f180d 	.word	0x3e1f180d
   1855c:	683e3424 	.word	0x683e3424
   18560:	43686868 	.word	0x43686868
   18564:	68686848 	.word	0x68686848
   18568:	68686868 	.word	0x68686868
   1856c:	594d6868 	.word	0x594d6868
   18570:	635e      	.short	0x635e
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   18572:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   18576:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   1857a:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_set(pin_number);
   1857c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   18580:	f7ff ffaa 	bl	184d8 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   18584:	2201      	movs	r2, #1
   18586:	e004      	b.n	18592 <pinctrl_configure_pins+0x58>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   18588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1858c:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   18590:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   18592:	4611      	mov	r1, r2
   18594:	e00f      	b.n	185b6 <pinctrl_configure_pins+0x7c>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   18596:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1859a:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
   1859e:	e7ec      	b.n	1857a <pinctrl_configure_pins+0x40>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   185a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   185a4:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   185a8:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
   185aa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   185ae:	f7ff ff87 	bl	184c0 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   185b2:	2200      	movs	r2, #0
   185b4:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   185b6:	6820      	ldr	r0, [r4, #0]
   185b8:	f7ff ff9f 	bl	184fa <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   185bc:	3404      	adds	r4, #4
   185be:	e7c1      	b.n	18544 <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   185c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   185c4:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   185c8:	6820      	ldr	r0, [r4, #0]
   185ca:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   185ce:	f7ff ff77 	bl	184c0 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   185d2:	e7d7      	b.n	18584 <pinctrl_configure_pins+0x4a>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
   185d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   185d8:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   185dc:	e7d8      	b.n	18590 <pinctrl_configure_pins+0x56>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
   185de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   185e2:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   185e6:	e7d3      	b.n	18590 <pinctrl_configure_pins+0x56>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
   185e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   185ec:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
   185f0:	e7ce      	b.n	18590 <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   185f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   185f6:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   185fa:	6820      	ldr	r0, [r4, #0]
   185fc:	f3c0 3140 	ubfx	r1, r0, #13, #1
   18600:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   18604:	f7ff ff74 	bl	184f0 <nrf_gpio_pin_write>
   18608:	e7bc      	b.n	18584 <pinctrl_configure_pins+0x4a>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   1860a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1860e:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   18612:	e7f2      	b.n	185fa <pinctrl_configure_pins+0xc0>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   18614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   18618:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   1861c:	e7ed      	b.n	185fa <pinctrl_configure_pins+0xc0>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   1861e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   18622:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
   18626:	e7e8      	b.n	185fa <pinctrl_configure_pins+0xc0>
		switch (NRF_GET_FUN(pins[i])) {
   18628:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1862c:	e78d      	b.n	1854a <pinctrl_configure_pins+0x10>

0001862e <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   1862e:	f7fc be6b 	b.w	15308 <nrf_cc3xx_platform_init>

00018632 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   18632:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   18634:	f7f9 f8a0 	bl	11778 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   18638:	f7f9 f94a 	bl	118d0 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   1863c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   18640:	f7fc be62 	b.w	15308 <nrf_cc3xx_platform_init>

00018644 <nrf91_errata_14>:
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   18644:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   18648:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   1864c:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
  __ASM volatile ("dsb 0xF":::"memory");
   18650:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
   18654:	2a09      	cmp	r2, #9
   18656:	d103      	bne.n	18660 <nrf91_errata_14+0x1c>
                switch(var2)
   18658:	1e43      	subs	r3, r0, #1
   1865a:	4258      	negs	r0, r3
   1865c:	4158      	adcs	r0, r3
   1865e:	4770      	bx	lr
        return false;
   18660:	2000      	movs	r0, #0
}
   18662:	4770      	bx	lr

00018664 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   18664:	4700      	bx	r0

00018666 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   18666:	f000 b869 	b.w	1873c <z_impl_k_busy_wait>

0001866a <z_device_state_init>:
}
   1866a:	4770      	bx	lr

0001866c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1866c:	b138      	cbz	r0, 1867e <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1866e:	68c3      	ldr	r3, [r0, #12]
   18670:	8818      	ldrh	r0, [r3, #0]
   18672:	f3c0 0008 	ubfx	r0, r0, #0, #9
   18676:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   1867a:	4258      	negs	r0, r3
   1867c:	4158      	adcs	r0, r3
}
   1867e:	4770      	bx	lr

00018680 <z_early_memset>:
	(void) memset(dst, c, n);
   18680:	f7ff bdbb 	b.w	181fa <memset>

00018684 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   18684:	f7ff bdae 	b.w	181e4 <memcpy>

00018688 <k_mem_slab_init>:
{
   18688:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1868a:	2400      	movs	r4, #0
   1868c:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   1868e:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   18690:	ea41 0402 	orr.w	r4, r1, r2
   18694:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   18698:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
   1869c:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1869e:	d10c      	bne.n	186ba <k_mem_slab_init+0x32>
	slab->free_list = NULL;
   186a0:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   186a2:	42a3      	cmp	r3, r4
   186a4:	d103      	bne.n	186ae <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
   186a6:	e9c0 0000 	strd	r0, r0, [r0]
}
   186aa:	2000      	movs	r0, #0
}
   186ac:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   186ae:	6985      	ldr	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   186b0:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   186b2:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   186b4:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
   186b6:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   186b8:	e7f3      	b.n	186a2 <k_mem_slab_init+0x1a>
		return -EINVAL;
   186ba:	f06f 0015 	mvn.w	r0, #21
	return rc;
   186be:	e7f5      	b.n	186ac <k_mem_slab_init+0x24>

000186c0 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   186c0:	f3ef 8005 	mrs	r0, IPSR
}
   186c4:	3800      	subs	r0, #0
   186c6:	bf18      	it	ne
   186c8:	2001      	movne	r0, #1
   186ca:	4770      	bx	lr

000186cc <k_thread_name_get>:
}
   186cc:	2000      	movs	r0, #0
   186ce:	4770      	bx	lr

000186d0 <z_pm_save_idle_exit>:
{
   186d0:	b508      	push	{r3, lr}
	pm_system_resume();
   186d2:	f7f8 fcc3 	bl	1105c <pm_system_resume>
}
   186d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   186da:	f7fa bc19 	b.w	12f10 <sys_clock_idle_exit>

000186de <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   186de:	f990 300e 	ldrsb.w	r3, [r0, #14]
   186e2:	428b      	cmp	r3, r1
   186e4:	d001      	beq.n	186ea <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   186e6:	f7fc b80d 	b.w	14704 <z_set_prio>
}
   186ea:	2000      	movs	r0, #0
   186ec:	4770      	bx	lr

000186ee <z_impl_k_mutex_init>:
{
   186ee:	4603      	mov	r3, r0
	mutex->owner = NULL;
   186f0:	2000      	movs	r0, #0
   186f2:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   186f6:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   186fa:	4770      	bx	lr

000186fc <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   186fc:	4603      	mov	r3, r0
   186fe:	b920      	cbnz	r0, 1870a <z_reschedule_irqlock+0xe>
   18700:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   18704:	b90a      	cbnz	r2, 1870a <z_reschedule_irqlock+0xe>
   18706:	f7f9 b99f 	b.w	11a48 <arch_swap>
   1870a:	f383 8811 	msr	BASEPRI, r3
   1870e:	f3bf 8f6f 	isb	sy
}
   18712:	4770      	bx	lr

00018714 <z_reschedule_unlocked>:
	__asm__ volatile(
   18714:	f04f 0320 	mov.w	r3, #32
   18718:	f3ef 8011 	mrs	r0, BASEPRI
   1871c:	f383 8812 	msr	BASEPRI_MAX, r3
   18720:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   18724:	f7ff bfea 	b.w	186fc <z_reschedule_irqlock>

00018728 <z_priq_dumb_best>:
{
   18728:	4603      	mov	r3, r0
	return list->head == list;
   1872a:	6800      	ldr	r0, [r0, #0]
}
   1872c:	4283      	cmp	r3, r0
   1872e:	bf08      	it	eq
   18730:	2000      	moveq	r0, #0
   18732:	4770      	bx	lr

00018734 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   18734:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   18736:	f7fc fd9d 	bl	15274 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1873a:	bd08      	pop	{r3, pc}

0001873c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1873c:	b108      	cbz	r0, 18742 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1873e:	f7f8 bc0f 	b.w	10f60 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   18742:	4770      	bx	lr

00018744 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   18744:	4770      	bx	lr
	...

00018748 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   18748:	f7fa bc7a 	b.w	13040 <SystemInit>

Disassembly of section .gnu.sgstubs:

00019ec0 <spm_firmware_info_nse-0x6120>:
	...

0001ffe0 <spm_firmware_info_nse>:
   1ffe0:	e97f e97f 	sg
   1ffe4:	f7f8 b84b 	b.w	1807e <__acle_se_spm_firmware_info_nse>

0001ffe8 <spm_request_random_number_nse>:
   1ffe8:	e97f e97f 	sg
   1ffec:	f7f1 bb62 	b.w	116b4 <__acle_se_spm_request_random_number_nse>

0001fff0 <spm_s0_active>:
   1fff0:	e97f e97f 	sg
   1fff4:	f7f1 bb82 	b.w	116fc <__acle_se_spm_s0_active>

0001fff8 <spm_request_read_nse>:
   1fff8:	e97f e97f 	sg
   1fffc:	f7f1 bb20 	b.w	11640 <__acle_se_spm_request_read_nse>

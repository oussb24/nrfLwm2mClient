
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
   0:	e8 fc 00 20 01 21 00 00 b3 64 00 00 d5 20 00 00     ... .!...d... ..
  10:	d5 20 00 00 d5 20 00 00 d5 20 00 00 d5 20 00 00     . ... ... ... ..
	...
  2c:	91 1c 00 00 d5 20 00 00 00 00 00 00 d5 20 00 00     ..... ....... ..
  3c:	d5 20 00 00                                         . ..

00000040 <_irq_vector_table>:
  40:	f1 1c 00 00 f1 1c 00 00 f1 1c 00 00 f1 1c 00 00     ................
  50:	f1 1c 00 00 f1 1c 00 00 f1 1c 00 00 f1 1c 00 00     ................
  60:	f1 1c 00 00 f1 1c 00 00 f1 1c 00 00 f1 1c 00 00     ................
  70:	f1 1c 00 00 f1 1c 00 00 f1 1c 00 00 f1 1c 00 00     ................
  80:	f1 1c 00 00 f1 1c 00 00 f1 1c 00 00 f1 1c 00 00     ................
  90:	f1 1c 00 00 f1 1c 00 00 f1 1c 00 00 f1 1c 00 00     ................
  a0:	f1 1c 00 00 f1 1c 00 00 f1 1c 00 00 f1 1c 00 00     ................
  b0:	f1 1c 00 00 f1 1c 00 00 f1 1c 00 00 f1 1c 00 00     ................
  c0:	f1 1c 00 00 f1 1c 00 00 f1 1c 00 00 f1 1c 00 00     ................
  d0:	f1 1c 00 00 f1 1c 00 00 f1 1c 00 00 f1 1c 00 00     ................
  e0:	f1 1c 00 00 f1 1c 00 00 f1 1c 00 00 f1 1c 00 00     ................
  f0:	f1 1c 00 00 f1 1c 00 00 f1 1c 00 00 f1 1c 00 00     ................
 100:	f1 1c 00 00 f1 1c 00 00 f1 1c 00 00 f1 1c 00 00     ................
 110:	f1 1c 00 00 f1 1c 00 00 f1 1c 00 00 f1 1c 00 00     ................
 120:	f1 1c 00 00 f1 1c 00 00 f1 1c 00 00 f1 1c 00 00     ................
 130:	f1 1c 00 00 f1 1c 00 00 f1 1c 00 00 f1 1c 00 00     ................
 140:	f1 1c 00 00                                         ....

Disassembly of section text:

00000144 <__aeabi_uldivmod>:
     144:	b953      	cbnz	r3, 15c <__aeabi_uldivmod+0x18>
     146:	b94a      	cbnz	r2, 15c <__aeabi_uldivmod+0x18>
     148:	2900      	cmp	r1, #0
     14a:	bf08      	it	eq
     14c:	2800      	cmpeq	r0, #0
     14e:	bf1c      	itt	ne
     150:	f04f 31ff 	movne.w	r1, #4294967295
     154:	f04f 30ff 	movne.w	r0, #4294967295
     158:	f000 b80c 	b.w	174 <__aeabi_idiv0>
     15c:	f1ad 0c08 	sub.w	ip, sp, #8
     160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     164:	f000 f808 	bl	178 <__udivmoddi4>
     168:	f8dd e004 	ldr.w	lr, [sp, #4]
     16c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     170:	b004      	add	sp, #16
     172:	4770      	bx	lr

00000174 <__aeabi_idiv0>:
     174:	4770      	bx	lr
     176:	bf00      	nop

00000178 <__udivmoddi4>:
     178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     17c:	9e09      	ldr	r6, [sp, #36]	; 0x24
     17e:	4688      	mov	r8, r1
     180:	468e      	mov	lr, r1
     182:	4615      	mov	r5, r2
     184:	4604      	mov	r4, r0
     186:	4619      	mov	r1, r3
     188:	2b00      	cmp	r3, #0
     18a:	f040 80c6 	bne.w	31a <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x1a>
     18e:	4542      	cmp	r2, r8
     190:	fab2 f782 	clz	r7, r2
     194:	d946      	bls.n	224 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x24>
     196:	b14f      	cbz	r7, 1ac <__udivmoddi4+0x34>
     198:	f1c7 0c20 	rsb	ip, r7, #32
     19c:	fa08 f307 	lsl.w	r3, r8, r7
     1a0:	40bd      	lsls	r5, r7
     1a2:	40bc      	lsls	r4, r7
     1a4:	fa20 fc0c 	lsr.w	ip, r0, ip
     1a8:	ea4c 0e03 	orr.w	lr, ip, r3
     1ac:	ea4f 4815 	mov.w	r8, r5, lsr #16
     1b0:	fa1f fc85 	uxth.w	ip, r5
     1b4:	0c22      	lsrs	r2, r4, #16
     1b6:	fbbe f9f8 	udiv	r9, lr, r8
     1ba:	fb08 e319 	mls	r3, r8, r9, lr
     1be:	fb09 fa0c 	mul.w	sl, r9, ip
     1c2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     1c6:	459a      	cmp	sl, r3
     1c8:	d928      	bls.n	21c <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x1c>
     1ca:	18eb      	adds	r3, r5, r3
     1cc:	f109 30ff 	add.w	r0, r9, #4294967295
     1d0:	d204      	bcs.n	1dc <__udivmoddi4+0x64>
     1d2:	459a      	cmp	sl, r3
     1d4:	d902      	bls.n	1dc <__udivmoddi4+0x64>
     1d6:	f1a9 0002 	sub.w	r0, r9, #2
     1da:	442b      	add	r3, r5
     1dc:	eba3 030a 	sub.w	r3, r3, sl
     1e0:	b2a4      	uxth	r4, r4
     1e2:	fbb3 f2f8 	udiv	r2, r3, r8
     1e6:	fb08 3312 	mls	r3, r8, r2, r3
     1ea:	fb02 fc0c 	mul.w	ip, r2, ip
     1ee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1f2:	45a4      	cmp	ip, r4
     1f4:	d914      	bls.n	220 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x20>
     1f6:	192c      	adds	r4, r5, r4
     1f8:	f102 33ff 	add.w	r3, r2, #4294967295
     1fc:	d203      	bcs.n	206 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x6>
     1fe:	45a4      	cmp	ip, r4
     200:	d901      	bls.n	206 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x6>
     202:	1e93      	subs	r3, r2, #2
     204:	442c      	add	r4, r5
     206:	eba4 040c 	sub.w	r4, r4, ip
     20a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     20e:	b11e      	cbz	r6, 218 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x18>
     210:	40fc      	lsrs	r4, r7
     212:	2300      	movs	r3, #0
     214:	6034      	str	r4, [r6, #0]
     216:	6073      	str	r3, [r6, #4]
     218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     21c:	4648      	mov	r0, r9
     21e:	e7dd      	b.n	1dc <__udivmoddi4+0x64>
     220:	4613      	mov	r3, r2
     222:	e7f0      	b.n	206 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x6>
     224:	b902      	cbnz	r2, 228 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x28>
     226:	deff      	udf	#255	; 0xff
     228:	bb8f      	cbnz	r7, 28e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xe>
     22a:	eba8 0302 	sub.w	r3, r8, r2
     22e:	2101      	movs	r1, #1
     230:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     234:	b2aa      	uxth	r2, r5
     236:	0c20      	lsrs	r0, r4, #16
     238:	fbb3 fcfe 	udiv	ip, r3, lr
     23c:	fb0e 331c 	mls	r3, lr, ip, r3
     240:	fb0c f802 	mul.w	r8, ip, r2
     244:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     248:	4598      	cmp	r8, r3
     24a:	d962      	bls.n	312 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x12>
     24c:	18eb      	adds	r3, r5, r3
     24e:	f10c 30ff 	add.w	r0, ip, #4294967295
     252:	d204      	bcs.n	25e <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x5e>
     254:	4598      	cmp	r8, r3
     256:	d902      	bls.n	25e <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x5e>
     258:	f1ac 0002 	sub.w	r0, ip, #2
     25c:	442b      	add	r3, r5
     25e:	eba3 0308 	sub.w	r3, r3, r8
     262:	b2a4      	uxth	r4, r4
     264:	fbb3 fcfe 	udiv	ip, r3, lr
     268:	fb0e 331c 	mls	r3, lr, ip, r3
     26c:	fb0c f202 	mul.w	r2, ip, r2
     270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     274:	42a2      	cmp	r2, r4
     276:	d94e      	bls.n	316 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x16>
     278:	192c      	adds	r4, r5, r4
     27a:	f10c 33ff 	add.w	r3, ip, #4294967295
     27e:	d204      	bcs.n	28a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa>
     280:	42a2      	cmp	r2, r4
     282:	d902      	bls.n	28a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa>
     284:	f1ac 0302 	sub.w	r3, ip, #2
     288:	442c      	add	r4, r5
     28a:	1aa4      	subs	r4, r4, r2
     28c:	e7bd      	b.n	20a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xa>
     28e:	f1c7 0c20 	rsb	ip, r7, #32
     292:	40bd      	lsls	r5, r7
     294:	fa08 f307 	lsl.w	r3, r8, r7
     298:	40bc      	lsls	r4, r7
     29a:	fa28 f90c 	lsr.w	r9, r8, ip
     29e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     2a2:	fa20 fc0c 	lsr.w	ip, r0, ip
     2a6:	ea4c 0203 	orr.w	r2, ip, r3
     2aa:	b2ab      	uxth	r3, r5
     2ac:	fbb9 fcfe 	udiv	ip, r9, lr
     2b0:	0c11      	lsrs	r1, r2, #16
     2b2:	fb0e 901c 	mls	r0, lr, ip, r9
     2b6:	fb0c f803 	mul.w	r8, ip, r3
     2ba:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     2be:	4580      	cmp	r8, r0
     2c0:	d923      	bls.n	30a <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xa>
     2c2:	1828      	adds	r0, r5, r0
     2c4:	f10c 31ff 	add.w	r1, ip, #4294967295
     2c8:	d204      	bcs.n	2d4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x54>
     2ca:	4580      	cmp	r8, r0
     2cc:	d902      	bls.n	2d4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x54>
     2ce:	f1ac 0102 	sub.w	r1, ip, #2
     2d2:	4428      	add	r0, r5
     2d4:	eba0 0008 	sub.w	r0, r0, r8
     2d8:	b292      	uxth	r2, r2
     2da:	fbb0 fcfe 	udiv	ip, r0, lr
     2de:	fb0e 001c 	mls	r0, lr, ip, r0
     2e2:	fb0c f803 	mul.w	r8, ip, r3
     2e6:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2ea:	4598      	cmp	r8, r3
     2ec:	d90f      	bls.n	30e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xe>
     2ee:	18eb      	adds	r3, r5, r3
     2f0:	f10c 32ff 	add.w	r2, ip, #4294967295
     2f4:	d204      	bcs.n	300 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE>
     2f6:	4598      	cmp	r8, r3
     2f8:	d902      	bls.n	300 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE>
     2fa:	f1ac 0202 	sub.w	r2, ip, #2
     2fe:	442b      	add	r3, r5
     300:	eba3 0308 	sub.w	r3, r3, r8
     304:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     308:	e792      	b.n	230 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x30>
     30a:	4661      	mov	r1, ip
     30c:	e7e2      	b.n	2d4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x54>
     30e:	4662      	mov	r2, ip
     310:	e7f6      	b.n	300 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE>
     312:	4660      	mov	r0, ip
     314:	e7a3      	b.n	25e <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x5e>
     316:	4663      	mov	r3, ip
     318:	e7b7      	b.n	28a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa>
     31a:	4543      	cmp	r3, r8
     31c:	d905      	bls.n	32a <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x2a>
     31e:	b10e      	cbz	r6, 324 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x24>
     320:	e9c6 0800 	strd	r0, r8, [r6]
     324:	2100      	movs	r1, #0
     326:	4608      	mov	r0, r1
     328:	e776      	b.n	218 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x18>
     32a:	fab3 fc83 	clz	ip, r3
     32e:	f1bc 0f00 	cmp.w	ip, #0
     332:	d110      	bne.n	356 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x56>
     334:	4543      	cmp	r3, r8
     336:	d301      	bcc.n	33c <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x3c>
     338:	4282      	cmp	r2, r0
     33a:	d80a      	bhi.n	352 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x52>
     33c:	1a84      	subs	r4, r0, r2
     33e:	eb68 0303 	sbc.w	r3, r8, r3
     342:	2001      	movs	r0, #1
     344:	469e      	mov	lr, r3
     346:	2e00      	cmp	r6, #0
     348:	d068      	beq.n	41c <CONFIG_FLASH_SIZE+0x1c>
     34a:	e9c6 4e00 	strd	r4, lr, [r6]
     34e:	2100      	movs	r1, #0
     350:	e762      	b.n	218 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x18>
     352:	4660      	mov	r0, ip
     354:	e7f7      	b.n	346 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x46>
     356:	f1cc 0e20 	rsb	lr, ip, #32
     35a:	fa03 f30c 	lsl.w	r3, r3, ip
     35e:	fa02 f50c 	lsl.w	r5, r2, ip
     362:	fa00 f70c 	lsl.w	r7, r0, ip
     366:	fa22 f40e 	lsr.w	r4, r2, lr
     36a:	fa28 fb0e 	lsr.w	fp, r8, lr
     36e:	fa20 f10e 	lsr.w	r1, r0, lr
     372:	431c      	orrs	r4, r3
     374:	fa08 f30c 	lsl.w	r3, r8, ip
     378:	ea4f 4914 	mov.w	r9, r4, lsr #16
     37c:	4319      	orrs	r1, r3
     37e:	b2a3      	uxth	r3, r4
     380:	0c0a      	lsrs	r2, r1, #16
     382:	fbbb f8f9 	udiv	r8, fp, r9
     386:	fb09 bb18 	mls	fp, r9, r8, fp
     38a:	fb08 fa03 	mul.w	sl, r8, r3
     38e:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     392:	4592      	cmp	sl, r2
     394:	d93e      	bls.n	414 <CONFIG_FLASH_SIZE+0x14>
     396:	18a2      	adds	r2, r4, r2
     398:	f108 30ff 	add.w	r0, r8, #4294967295
     39c:	d204      	bcs.n	3a8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xa8>
     39e:	4592      	cmp	sl, r2
     3a0:	d902      	bls.n	3a8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xa8>
     3a2:	f1a8 0002 	sub.w	r0, r8, #2
     3a6:	4422      	add	r2, r4
     3a8:	eba2 020a 	sub.w	r2, r2, sl
     3ac:	b289      	uxth	r1, r1
     3ae:	fbb2 f8f9 	udiv	r8, r2, r9
     3b2:	fb09 2218 	mls	r2, r9, r8, r2
     3b6:	fb08 f303 	mul.w	r3, r8, r3
     3ba:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
     3be:	4293      	cmp	r3, r2
     3c0:	d92a      	bls.n	418 <CONFIG_FLASH_SIZE+0x18>
     3c2:	18a2      	adds	r2, r4, r2
     3c4:	f108 31ff 	add.w	r1, r8, #4294967295
     3c8:	d204      	bcs.n	3d4 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd4>
     3ca:	4293      	cmp	r3, r2
     3cc:	d902      	bls.n	3d4 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd4>
     3ce:	f1a8 0102 	sub.w	r1, r8, #2
     3d2:	4422      	add	r2, r4
     3d4:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     3d8:	1ad2      	subs	r2, r2, r3
     3da:	fba0 9805 	umull	r9, r8, r0, r5
     3de:	4542      	cmp	r2, r8
     3e0:	464b      	mov	r3, r9
     3e2:	4641      	mov	r1, r8
     3e4:	d302      	bcc.n	3ec <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xec>
     3e6:	d106      	bne.n	3f6 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xf6>
     3e8:	454f      	cmp	r7, r9
     3ea:	d204      	bcs.n	3f6 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xf6>
     3ec:	3801      	subs	r0, #1
     3ee:	ebb9 0305 	subs.w	r3, r9, r5
     3f2:	eb68 0104 	sbc.w	r1, r8, r4
     3f6:	b18e      	cbz	r6, 41c <CONFIG_FLASH_SIZE+0x1c>
     3f8:	1afc      	subs	r4, r7, r3
     3fa:	eb62 0701 	sbc.w	r7, r2, r1
     3fe:	fa07 fe0e 	lsl.w	lr, r7, lr
     402:	fa24 f30c 	lsr.w	r3, r4, ip
     406:	fa27 f70c 	lsr.w	r7, r7, ip
     40a:	ea4e 0303 	orr.w	r3, lr, r3
     40e:	e9c6 3700 	strd	r3, r7, [r6]
     412:	e79c      	b.n	34e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x4e>
     414:	4640      	mov	r0, r8
     416:	e7c7      	b.n	3a8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xa8>
     418:	4641      	mov	r1, r8
     41a:	e7db      	b.n	3d4 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd4>
     41c:	4631      	mov	r1, r6
     41e:	e6fb      	b.n	218 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x18>

00000420 <main>:
    return detect_value == expected;
}
#endif

void main(void)
{
     420:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     422:	4b30      	ldr	r3, [pc, #192]	; (4e4 <FIH_LABEL_FIH_CALL_END_262+0x78>)
     424:	4a30      	ldr	r2, [pc, #192]	; (4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>)
    fih_int fih_rc = FIH_FAILURE;

    MCUBOOT_WATCHDOG_FEED();

#if !defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Starting bootloader");
     426:	4831      	ldr	r0, [pc, #196]	; (4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>)
     428:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
     42c:	2149      	movs	r1, #73	; 0x49
     42e:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
     432:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
     436:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
     43a:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
     43e:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
     442:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
     446:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
     44a:	f005 ff98 	bl	637e <z_log_minimal_printk>
#ifdef CONFIG_MCUBOOT_INDICATION_LED
    /* LED init */
    led_init();
#endif

    os_heap_init();
     44e:	f005 fb52 	bl	5af6 <os_heap_init>
    ZEPHYR_BOOT_LOG_START();

    (void)rc;

#if (!defined(CONFIG_XTENSA) && DT_HAS_CHOSEN(zephyr_flash_controller))
    if (!flash_device_get_binding(DT_LABEL(DT_CHOSEN(zephyr_flash_controller)))) {
     452:	4827      	ldr	r0, [pc, #156]	; (4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>)
     454:	f000 f85c 	bl	510 <flash_device_get_binding>
     458:	b928      	cbnz	r0, 466 <FIH_LABEL_FIH_CALL_START_249>
        BOOT_LOG_ERR("Flash device %s not found",
     45a:	2145      	movs	r1, #69	; 0x45
     45c:	4a24      	ldr	r2, [pc, #144]	; (4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>)
     45e:	4825      	ldr	r0, [pc, #148]	; (4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>)
     460:	f005 ff8d 	bl	637e <z_log_minimal_printk>
		     DT_LABEL(DT_CHOSEN(zephyr_flash_controller)));
        while (1)
     464:	e7fe      	b.n	464 <main+0x44>

00000466 <FIH_LABEL_FIH_CALL_START_249>:
    rc = boot_console_init();
    int timeout_in_ms = CONFIG_BOOT_SERIAL_WAIT_FOR_DFU_TIMEOUT;
    uint32_t start = k_uptime_get_32();
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     466:	a801      	add	r0, sp, #4
     468:	f000 fc6a 	bl	d40 <boot_go>

0000046c <FIH_LABEL_FIH_CALL_END_262>:
        timeout_in_ms = 1;
    }
   boot_serial_check_start(&boot_funcs,timeout_in_ms);
#endif

    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     46c:	4b22      	ldr	r3, [pc, #136]	; (4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>)
     46e:	681b      	ldr	r3, [r3, #0]
     470:	4283      	cmp	r3, r0
     472:	d004      	beq.n	47e <FIH_LABEL_FIH_CALL_END_262+0x12>
        BOOT_LOG_ERR("Unable to find bootable image");
     474:	2145      	movs	r1, #69	; 0x45
     476:	4821      	ldr	r0, [pc, #132]	; (4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>)
     478:	f005 ff81 	bl	637e <z_log_minimal_printk>
        FIH_PANIC;
     47c:	e7fe      	b.n	47c <FIH_LABEL_FIH_CALL_END_262+0x10>
    }

    BOOT_LOG_INF("Bootloader chainload address offset: 0x%x",
     47e:	2149      	movs	r1, #73	; 0x49
     480:	9a03      	ldr	r2, [sp, #12]
     482:	481f      	ldr	r0, [pc, #124]	; (500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>)
     484:	f005 ff7b 	bl	637e <z_log_minimal_printk>
                 rsp.br_image_off);

#if defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Jumping to the image slot");
#else
    BOOT_LOG_INF("Jumping to the first image slot");
     488:	2149      	movs	r1, #73	; 0x49
     48a:	481e      	ldr	r0, [pc, #120]	; (504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>)
     48c:	f005 ff77 	bl	637e <z_log_minimal_printk>
/* There is only one instance of MCUBoot */
#define PROTECT_SIZE (PM_MCUBOOT_PRIMARY_ADDRESS - PM_MCUBOOT_ADDRESS)
#define PROTECT_ADDR PM_MCUBOOT_ADDRESS
#endif

    rc = fprotect_area(PROTECT_ADDR, PROTECT_SIZE);
     490:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     494:	2000      	movs	r0, #0
     496:	f002 ffd9 	bl	344c <fprotect_area>

    if (rc != 0) {
     49a:	b120      	cbz	r0, 4a6 <FIH_LABEL_FIH_CALL_END_262+0x3a>
        BOOT_LOG_ERR("Protect mcuboot flash failed, cancel startup.");
     49c:	2145      	movs	r1, #69	; 0x45
     49e:	481a      	ldr	r0, [pc, #104]	; (508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>)
     4a0:	f005 ff6d 	bl	637e <z_log_minimal_printk>
        while (1)
     4a4:	e7fe      	b.n	4a4 <FIH_LABEL_FIH_CALL_END_262+0x38>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     4a6:	4669      	mov	r1, sp
     4a8:	f89d 0008 	ldrb.w	r0, [sp, #8]
     4ac:	f000 f83c 	bl	528 <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     4b0:	9b00      	ldr	r3, [sp, #0]
     4b2:	9c03      	ldr	r4, [sp, #12]
     4b4:	441c      	add	r4, r3
                                     rsp->br_hdr->ih_hdr_size);
     4b6:	9b01      	ldr	r3, [sp, #4]
     4b8:	891d      	ldrh	r5, [r3, #8]
    nrf_cleanup_peripheral();
     4ba:	f000 ff39 	bl	1330 <nrf_cleanup_peripheral>
                                     rsp->br_image_off +
     4be:	1966      	adds	r6, r4, r5
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     4c0:	f04f 0220 	mov.w	r2, #32
     4c4:	f3ef 8311 	mrs	r3, BASEPRI
     4c8:	f382 8812 	msr	BASEPRI_MAX, r2
     4cc:	f3bf 8f6f 	isb	sy
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     4d0:	5963      	ldr	r3, [r4, r5]
     4d2:	f383 8808 	msr	MSP, r3
    ((void (*)(void))vt->reset)();
     4d6:	6873      	ldr	r3, [r6, #4]
     4d8:	4798      	blx	r3

    ZEPHYR_BOOT_LOG_STOP();

    do_boot(&rsp);

    BOOT_LOG_ERR("Never should get here");
     4da:	2145      	movs	r1, #69	; 0x45
     4dc:	480b      	ldr	r0, [pc, #44]	; (50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>)
     4de:	f005 ff4e 	bl	637e <z_log_minimal_printk>
    while (1)
     4e2:	e7fe      	b.n	4e2 <FIH_LABEL_FIH_CALL_END_262+0x76>
     4e4:	50018000 	.word	0x50018000
     4e8:	6e524635 	.word	0x6e524635
     4ec:	0000733c 	.word	0x0000733c
     4f0:	00007355 	.word	0x00007355
     4f4:	00007368 	.word	0x00007368
     4f8:	2000c6cc 	.word	0x2000c6cc
     4fc:	00007387 	.word	0x00007387
     500:	000073aa 	.word	0x000073aa
     504:	000073d9 	.word	0x000073d9
     508:	000073fe 	.word	0x000073fe
     50c:	00007431 	.word	0x00007431

00000510 <flash_device_get_binding>:
#endif

static const struct device *flash_dev;

const struct device *flash_device_get_binding(char *dev_name)
{
     510:	b510      	push	{r4, lr}
    if (!flash_dev) {
     512:	4c04      	ldr	r4, [pc, #16]	; (524 <flash_device_get_binding+0x14>)
     514:	6823      	ldr	r3, [r4, #0]
     516:	b913      	cbnz	r3, 51e <flash_device_get_binding+0xe>
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     518:	f003 fda4 	bl	4064 <z_impl_device_get_binding>
        flash_dev = device_get_binding(dev_name);
     51c:	6020      	str	r0, [r4, #0]
    }
    return flash_dev;
}
     51e:	6820      	ldr	r0, [r4, #0]
     520:	bd10      	pop	{r4, pc}
     522:	bf00      	nop
     524:	2000c6c8 	.word	0x2000c6c8

00000528 <flash_device_base>:

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
     528:	b508      	push	{r3, lr}
    if (fd_id != FLASH_DEVICE_ID) {
     52a:	b140      	cbz	r0, 53e <flash_device_base+0x16>
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
     52c:	4602      	mov	r2, r0
     52e:	2300      	movs	r3, #0
     530:	4804      	ldr	r0, [pc, #16]	; (544 <flash_device_base+0x1c>)
     532:	2145      	movs	r1, #69	; 0x45
     534:	f005 ff23 	bl	637e <z_log_minimal_printk>
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
     538:	f06f 0015 	mvn.w	r0, #21
    }
    *ret = FLASH_DEVICE_BASE;
    return 0;
}
     53c:	bd08      	pop	{r3, pc}
    *ret = FLASH_DEVICE_BASE;
     53e:	6008      	str	r0, [r1, #0]
    return 0;
     540:	e7fc      	b.n	53c <flash_device_base+0x14>
     542:	bf00      	nop
     544:	00007454 	.word	0x00007454

00000548 <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     54c:	461d      	mov	r5, r3
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    fih_int valid_signature = FIH_FAILURE;
     54e:	4b83      	ldr	r3, [pc, #524]	; (75c <FIH_LABEL_FIH_CALL_END_936+0x26>)
{
     550:	b0db      	sub	sp, #364	; 0x16c
     552:	4617      	mov	r7, r2
     554:	e9dd 4866 	ldrd	r4, r8, [sp, #408]	; 0x198
    fih_int valid_signature = FIH_FAILURE;
     558:	681e      	ldr	r6, [r3, #0]
{
     55a:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
}

/* Enable and disable cc310 to reduce power consumption */
static inline void cc310_sha256_init(nrf_cc310_bl_hash_context_sha256_t * ctx)
{
    cc310_init();
     55e:	f000 feb5 	bl	12cc <cc310_init>
    NRF_CRYPTOCELL->ENABLE=1;
     562:	2201      	movs	r2, #1
     564:	4b7e      	ldr	r3, [pc, #504]	; (760 <FIH_LABEL_FIH_CALL_END_936+0x2a>)
    nrf_cc310_enable();
    nrf_cc310_bl_hash_sha256_init(ctx);
     566:	a83a      	add	r0, sp, #232	; 0xe8
    NRF_CRYPTOCELL->ENABLE=1;
     568:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    nrf_cc310_bl_hash_sha256_init(ctx);
     56c:	f004 f9f2 	bl	4954 <nrf_cc310_bl_hash_sha256_init>
    if (seed && (seed_len > 0)) {
     570:	b13c      	cbz	r4, 582 <bootutil_img_validate+0x3a>
     572:	f1b8 0f00 	cmp.w	r8, #0
     576:	dd04      	ble.n	582 <bootutil_img_validate+0x3a>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    cc310_sha256_update(ctx, data, data_len);
     578:	4642      	mov	r2, r8
     57a:	4621      	mov	r1, r4
     57c:	a83a      	add	r0, sp, #232	; 0xe8
     57e:	f005 fe0a 	bl	6196 <cc310_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     582:	f04f 0900 	mov.w	r9, #0
    size += hdr->ih_protect_tlv_size;
     586:	897b      	ldrh	r3, [r7, #10]
    size = hdr_size = hdr->ih_hdr_size;
     588:	f8b7 8008 	ldrh.w	r8, [r7, #8]
     58c:	4498      	add	r8, r3
    size += hdr->ih_protect_tlv_size;
     58e:	68fb      	ldr	r3, [r7, #12]
     590:	4498      	add	r8, r3
    for (off = 0; off < size; off += blk_sz) {
     592:	45c8      	cmp	r8, r9
     594:	d84e      	bhi.n	634 <FIH_LABEL_FIH_CALL_END_388+0xe>
}

static inline void cc310_sha256_finalize(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    nrf_cc310_bl_hash_sha256_finalize(ctx,
     596:	a90d      	add	r1, sp, #52	; 0x34
     598:	a83a      	add	r0, sp, #232	; 0xe8
     59a:	f004 fa4d 	bl	4a38 <nrf_cc310_bl_hash_sha256_finalize>
    NRF_CRYPTOCELL->ENABLE=0;
     59e:	2200      	movs	r2, #0
     5a0:	4b6f      	ldr	r3, [pc, #444]	; (760 <FIH_LABEL_FIH_CALL_END_936+0x2a>)
     5a2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
     5a6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     5aa:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
     5ac:	b123      	cbz	r3, 5b8 <bootutil_img_validate+0x70>
        memcpy(out_hash, hash, 32);
     5ae:	2220      	movs	r2, #32
     5b0:	4618      	mov	r0, r3
     5b2:	a90d      	add	r1, sp, #52	; 0x34
     5b4:	f005 ffb2 	bl	651c <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     5b8:	2300      	movs	r3, #0
     5ba:	462a      	mov	r2, r5
     5bc:	9300      	str	r3, [sp, #0]
     5be:	4639      	mov	r1, r7
     5c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
     5c4:	a807      	add	r0, sp, #28
     5c6:	f005 fa97 	bl	5af8 <bootutil_tlv_iter_begin>
    if (rc) {
     5ca:	4604      	mov	r4, r0
     5cc:	2800      	cmp	r0, #0
     5ce:	d144      	bne.n	65a <FIH_LABEL_FIH_CALL_END_388+0x34>
    int key_id = -1;
     5d0:	f04f 37ff 	mov.w	r7, #4294967295
             * can be multiple signatures, each preceded by a key.
             */
#endif /* !MCUBOOT_HW_KEY */
        } else if (type == EXPECTED_SIG_TLV) {
            /* Ignore this signature if it is out of bounds. */
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     5d4:	f8df a194 	ldr.w	sl, [pc, #404]	; 76c <FIH_LABEL_FIH_CALL_END_936+0x36>
     5d8:	f8df 8184 	ldr.w	r8, [pc, #388]	; 760 <FIH_LABEL_FIH_CALL_END_936+0x2a>
    int sha256_valid = 0;
     5dc:	9002      	str	r0, [sp, #8]
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     5de:	f10d 0316 	add.w	r3, sp, #22
     5e2:	aa05      	add	r2, sp, #20
     5e4:	a906      	add	r1, sp, #24
     5e6:	a807      	add	r0, sp, #28
     5e8:	f005 fad2 	bl	5b90 <bootutil_tlv_iter_next>
        if (rc < 0) {
     5ec:	1e04      	subs	r4, r0, #0
     5ee:	db34      	blt.n	65a <FIH_LABEL_FIH_CALL_END_388+0x34>
        } else if (rc > 0) {
     5f0:	f040 80a4 	bne.w	73c <FIH_LABEL_FIH_CALL_END_936+0x6>
        if (type == IMAGE_TLV_SHA256) {
     5f4:	f8bd 9016 	ldrh.w	r9, [sp, #22]
     5f8:	f1b9 0f10 	cmp.w	r9, #16
     5fc:	d138      	bne.n	670 <FIH_LABEL_FIH_CALL_END_388+0x4a>
            if (len != sizeof(hash)) {
     5fe:	f8bd 9014 	ldrh.w	r9, [sp, #20]
     602:	f1b9 0f20 	cmp.w	r9, #32
     606:	f040 80a3 	bne.w	750 <FIH_LABEL_FIH_CALL_END_936+0x1a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     60a:	464b      	mov	r3, r9
     60c:	4628      	mov	r0, r5
     60e:	9906      	ldr	r1, [sp, #24]
     610:	aa3a      	add	r2, sp, #232	; 0xe8
     612:	f005 fec2 	bl	639a <flash_area_read>
            if (rc) {
     616:	4604      	mov	r4, r0
     618:	b9f8      	cbnz	r0, 65a <FIH_LABEL_FIH_CALL_END_388+0x34>

0000061a <FIH_LABEL_FIH_CALL_START_369>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     61a:	464a      	mov	r2, r9
     61c:	a93a      	add	r1, sp, #232	; 0xe8
     61e:	a80d      	add	r0, sp, #52	; 0x34
     620:	f005 fb2d 	bl	5c7e <boot_fih_memequal>
     624:	4604      	mov	r4, r0

00000626 <FIH_LABEL_FIH_CALL_END_388>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     626:	4b4f      	ldr	r3, [pc, #316]	; (764 <FIH_LABEL_FIH_CALL_END_936+0x2e>)
     628:	681b      	ldr	r3, [r3, #0]
     62a:	4283      	cmp	r3, r0
     62c:	d115      	bne.n	65a <FIH_LABEL_FIH_CALL_END_388+0x34>
            sha256_valid = 1;
     62e:	2301      	movs	r3, #1
     630:	9302      	str	r3, [sp, #8]
     632:	e7d4      	b.n	5de <bootutil_img_validate+0x96>
        blk_sz = size - off;
     634:	9a65      	ldr	r2, [sp, #404]	; 0x194
     636:	eba8 0309 	sub.w	r3, r8, r9
        if (blk_sz > tmp_buf_sz) {
     63a:	429a      	cmp	r2, r3
     63c:	bf28      	it	cs
     63e:	461a      	movcs	r2, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     640:	4649      	mov	r1, r9
     642:	4613      	mov	r3, r2
     644:	4692      	mov	sl, r2
     646:	4628      	mov	r0, r5
     648:	465a      	mov	r2, fp
     64a:	f005 fea6 	bl	639a <flash_area_read>
        if (rc) {
     64e:	4604      	mov	r4, r0
     650:	b138      	cbz	r0, 662 <FIH_LABEL_FIH_CALL_END_388+0x3c>
     652:	2200      	movs	r2, #0
     654:	4b42      	ldr	r3, [pc, #264]	; (760 <FIH_LABEL_FIH_CALL_END_936+0x2a>)
     656:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     65a:	4620      	mov	r0, r4
     65c:	b05b      	add	sp, #364	; 0x16c
     65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     662:	4652      	mov	r2, sl
     664:	4659      	mov	r1, fp
     666:	a83a      	add	r0, sp, #232	; 0xe8
     668:	f005 fd95 	bl	6196 <cc310_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     66c:	44d1      	add	r9, sl
     66e:	e790      	b.n	592 <bootutil_img_validate+0x4a>
        } else if (type == IMAGE_TLV_KEYHASH) {
     670:	f1b9 0f01 	cmp.w	r9, #1
     674:	d13e      	bne.n	6f4 <FIH_LABEL_FIH_CALL_END_388+0xce>
            if (len > 32) {
     676:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     67a:	2b20      	cmp	r3, #32
     67c:	d868      	bhi.n	750 <FIH_LABEL_FIH_CALL_END_936+0x1a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     67e:	4628      	mov	r0, r5
     680:	9906      	ldr	r1, [sp, #24]
     682:	aa3a      	add	r2, sp, #232	; 0xe8
     684:	f005 fe89 	bl	639a <flash_area_read>
            if (rc) {
     688:	4604      	mov	r4, r0
     68a:	2800      	cmp	r0, #0
     68c:	d1e5      	bne.n	65a <FIH_LABEL_FIH_CALL_END_388+0x34>
            key_id = bootutil_find_key(buf, len);
     68e:	f89d b014 	ldrb.w	fp, [sp, #20]
    if (keyhash_len > 32) {
     692:	f1bb 0f20 	cmp.w	fp, #32
     696:	d809      	bhi.n	6ac <FIH_LABEL_FIH_CALL_END_388+0x86>
    for (i = 0; i < bootutil_key_cnt; i++) {
     698:	f8da 3000 	ldr.w	r3, [sl]
     69c:	4f32      	ldr	r7, [pc, #200]	; (768 <FIH_LABEL_FIH_CALL_END_936+0x32>)
     69e:	9303      	str	r3, [sp, #12]
     6a0:	9b03      	ldr	r3, [sp, #12]
     6a2:	429c      	cmp	r4, r3
     6a4:	db05      	blt.n	6b2 <FIH_LABEL_FIH_CALL_END_388+0x8c>
     6a6:	2300      	movs	r3, #0
     6a8:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
        return -1;
     6ac:	f04f 34ff 	mov.w	r4, #4294967295
     6b0:	e01c      	b.n	6ec <FIH_LABEL_FIH_CALL_END_388+0xc6>
    cc310_init();
     6b2:	f000 fe0b 	bl	12cc <cc310_init>
    NRF_CRYPTOCELL->ENABLE=1;
     6b6:	f8c8 9500 	str.w	r9, [r8, #1280]	; 0x500
    nrf_cc310_bl_hash_sha256_init(ctx);
     6ba:	a81d      	add	r0, sp, #116	; 0x74
     6bc:	f004 f94a 	bl	4954 <nrf_cc310_bl_hash_sha256_init>
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     6c0:	687a      	ldr	r2, [r7, #4]
     6c2:	a81d      	add	r0, sp, #116	; 0x74
     6c4:	6812      	ldr	r2, [r2, #0]
     6c6:	f857 1b08 	ldr.w	r1, [r7], #8
     6ca:	f005 fd64 	bl	6196 <cc310_sha256_update>
    nrf_cc310_bl_hash_sha256_finalize(ctx,
     6ce:	a915      	add	r1, sp, #84	; 0x54
     6d0:	a81d      	add	r0, sp, #116	; 0x74
     6d2:	f004 f9b1 	bl	4a38 <nrf_cc310_bl_hash_sha256_finalize>
    NRF_CRYPTOCELL->ENABLE=0;
     6d6:	2200      	movs	r2, #0
        if (!memcmp(hash, keyhash, keyhash_len)) {
     6d8:	a93a      	add	r1, sp, #232	; 0xe8
     6da:	f8c8 2500 	str.w	r2, [r8, #1280]	; 0x500
     6de:	a815      	add	r0, sp, #84	; 0x54
     6e0:	465a      	mov	r2, fp
     6e2:	f005 ff0a 	bl	64fa <memcmp>
     6e6:	b918      	cbnz	r0, 6f0 <FIH_LABEL_FIH_CALL_END_388+0xca>
     6e8:	f8c8 0500 	str.w	r0, [r8, #1280]	; 0x500
            key_id = bootutil_find_key(buf, len);
     6ec:	4627      	mov	r7, r4
     6ee:	e776      	b.n	5de <bootutil_img_validate+0x96>
    for (i = 0; i < bootutil_key_cnt; i++) {
     6f0:	3401      	adds	r4, #1
     6f2:	e7d5      	b.n	6a0 <FIH_LABEL_FIH_CALL_END_388+0x7a>
        } else if (type == EXPECTED_SIG_TLV) {
     6f4:	f1b9 0f22 	cmp.w	r9, #34	; 0x22
     6f8:	f47f af71 	bne.w	5de <bootutil_img_validate+0x96>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     6fc:	1c7b      	adds	r3, r7, #1
     6fe:	f43f af6e 	beq.w	5de <bootutil_img_validate+0x96>
     702:	f8da 3000 	ldr.w	r3, [sl]
     706:	42bb      	cmp	r3, r7
     708:	dd15      	ble.n	736 <FIH_LABEL_FIH_CALL_END_936>
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     70a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     70e:	2b80      	cmp	r3, #128	; 0x80
     710:	d81e      	bhi.n	750 <FIH_LABEL_FIH_CALL_END_936+0x1a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     712:	4628      	mov	r0, r5
     714:	9906      	ldr	r1, [sp, #24]
     716:	aa3a      	add	r2, sp, #232	; 0xe8
     718:	f005 fe3f 	bl	639a <flash_area_read>
            if (rc) {
     71c:	4604      	mov	r4, r0
     71e:	2800      	cmp	r0, #0
     720:	d19b      	bne.n	65a <FIH_LABEL_FIH_CALL_END_388+0x34>

00000722 <FIH_LABEL_FIH_CALL_START_914>:
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     722:	b2ff      	uxtb	r7, r7
     724:	2120      	movs	r1, #32
     726:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     72a:	9700      	str	r7, [sp, #0]
     72c:	aa3a      	add	r2, sp, #232	; 0xe8
     72e:	a80d      	add	r0, sp, #52	; 0x34
     730:	f000 f81e 	bl	770 <bootutil_verify_sig>
     734:	4606      	mov	r6, r0

00000736 <FIH_LABEL_FIH_CALL_END_936>:
                key_id = -1;
     736:	f04f 37ff 	mov.w	r7, #4294967295
     73a:	e750      	b.n	5de <bootutil_img_validate+0x96>
    if (rc) {
     73c:	9b02      	ldr	r3, [sp, #8]
     73e:	b153      	cbz	r3, 756 <FIH_LABEL_FIH_CALL_END_936+0x20>
    fih_rc = fih_int_encode_zero_equality(fih_not_eq(valid_signature,
     740:	4b08      	ldr	r3, [pc, #32]	; (764 <FIH_LABEL_FIH_CALL_END_936+0x2e>)
 * value that is not FIH_SUCCESS
 */
__attribute__((always_inline)) inline
fih_int fih_int_encode_zero_equality(int x)
{
    if (x) {
     742:	681b      	ldr	r3, [r3, #0]
     744:	42b3      	cmp	r3, r6
     746:	d001      	beq.n	74c <FIH_LABEL_FIH_CALL_END_936+0x16>
        return FIH_FAILURE;
     748:	4b04      	ldr	r3, [pc, #16]	; (75c <FIH_LABEL_FIH_CALL_END_936+0x26>)
     74a:	681e      	ldr	r6, [r3, #0]
                rc = -1;
     74c:	4634      	mov	r4, r6
     74e:	e784      	b.n	65a <FIH_LABEL_FIH_CALL_END_388+0x34>
     750:	f04f 34ff 	mov.w	r4, #4294967295
     754:	e781      	b.n	65a <FIH_LABEL_FIH_CALL_END_388+0x34>
     756:	2401      	movs	r4, #1
    FIH_RET(fih_rc);
     758:	e77f      	b.n	65a <FIH_LABEL_FIH_CALL_END_388+0x34>
     75a:	bf00      	nop
     75c:	2000c500 	.word	0x2000c500
     760:	50840000 	.word	0x50840000
     764:	2000c6cc 	.word	0x2000c6cc
     768:	00006f8c 	.word	0x00006f8c
     76c:	00006f88 	.word	0x00006f88

00000770 <bootutil_verify_sig>:
#endif /* not MCUBOOT_ECDSA_NEED_ASN1_SIG */

int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     774:	b096      	sub	sp, #88	; 0x58
     776:	4617      	mov	r7, r2
     778:	461d      	mov	r5, r3
     77a:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70

#ifndef MCUBOOT_ECDSA_NEED_ASN1_SIG
    uint8_t signature[2 * NUM_ECC_BYTES];
#endif

    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     77e:	4b35      	ldr	r3, [pc, #212]	; (854 <CONFIG_ISR_STACK_SIZE+0x54>)
{
     780:	460e      	mov	r6, r1
    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     782:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
    end = pubkey + *bootutil_keys[key_id].len;
     786:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
     78a:	685b      	ldr	r3, [r3, #4]
{
     78c:	4680      	mov	r8, r0
    end = pubkey + *bootutil_keys[key_id].len;
     78e:	6818      	ldr	r0, [r3, #0]
    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     790:	9101      	str	r1, [sp, #4]
    if (mbedtls_asn1_get_tag(cp, end, &len,
     792:	2330      	movs	r3, #48	; 0x30
     794:	4401      	add	r1, r0
     796:	aa02      	add	r2, sp, #8
     798:	a801      	add	r0, sp, #4
     79a:	f005 fc89 	bl	60b0 <mbedtls_asn1_get_tag>
     79e:	b110      	cbz	r0, 7a6 <bootutil_verify_sig+0x36>
    }
    rc = mbedtls_ecdsa_read_signature(&ctx, hash, hlen, sig, slen);

#else /* CY_MBEDTLS_HW_ACCELERATION */
    if (hlen != NUM_ECC_BYTES) {
        return -1;
     7a0:	f04f 30ff 	mov.w	r0, #4294967295
     7a4:	e053      	b.n	84e <CONFIG_ISR_STACK_SIZE+0x4e>
    end = *cp + len;
     7a6:	e9dd 4301 	ldrd	r4, r3, [sp, #4]
     7aa:	441c      	add	r4, r3
    if (mbedtls_asn1_get_alg(cp, end, &alg, &param)) {
     7ac:	4621      	mov	r1, r4
     7ae:	ab06      	add	r3, sp, #24
     7b0:	aa03      	add	r2, sp, #12
     7b2:	a801      	add	r0, sp, #4
     7b4:	f005 fca4 	bl	6100 <mbedtls_asn1_get_alg>
     7b8:	2800      	cmp	r0, #0
     7ba:	d1f1      	bne.n	7a0 <bootutil_verify_sig+0x30>
    if (alg.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_pubkey_oid) - 1 ||
     7bc:	9a04      	ldr	r2, [sp, #16]
     7be:	2a07      	cmp	r2, #7
     7c0:	d1ee      	bne.n	7a0 <bootutil_verify_sig+0x30>
        memcmp(alg.MBEDTLS_CONTEXT_MEMBER(p), ec_pubkey_oid, sizeof(ec_pubkey_oid) - 1)) {
     7c2:	4925      	ldr	r1, [pc, #148]	; (858 <CONFIG_ISR_STACK_SIZE+0x58>)
     7c4:	9805      	ldr	r0, [sp, #20]
     7c6:	f005 fe98 	bl	64fa <memcmp>
    if (alg.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_pubkey_oid) - 1 ||
     7ca:	2800      	cmp	r0, #0
     7cc:	d1e8      	bne.n	7a0 <bootutil_verify_sig+0x30>
    if (param.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_secp256r1_oid) - 1 ||
     7ce:	9a07      	ldr	r2, [sp, #28]
     7d0:	2a08      	cmp	r2, #8
     7d2:	d1e5      	bne.n	7a0 <bootutil_verify_sig+0x30>
        memcmp(param.MBEDTLS_CONTEXT_MEMBER(p), ec_secp256r1_oid, sizeof(ec_secp256r1_oid) - 1)) {
     7d4:	4921      	ldr	r1, [pc, #132]	; (85c <CONFIG_ISR_STACK_SIZE+0x5c>)
     7d6:	9808      	ldr	r0, [sp, #32]
     7d8:	f005 fe8f 	bl	64fa <memcmp>
    if (param.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_secp256r1_oid) - 1 ||
     7dc:	2800      	cmp	r0, #0
     7de:	d1df      	bne.n	7a0 <bootutil_verify_sig+0x30>
    if (mbedtls_asn1_get_bitstring_null(cp, end, &len)) {
     7e0:	4621      	mov	r1, r4
     7e2:	aa02      	add	r2, sp, #8
     7e4:	a801      	add	r0, sp, #4
     7e6:	f005 fc77 	bl	60d8 <mbedtls_asn1_get_bitstring_null>
     7ea:	2800      	cmp	r0, #0
     7ec:	d1d8      	bne.n	7a0 <bootutil_verify_sig+0x30>
    if (*cp + len != end) {
     7ee:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
     7f2:	4413      	add	r3, r2
     7f4:	429c      	cmp	r4, r3
     7f6:	d1d3      	bne.n	7a0 <bootutil_verify_sig+0x30>
    if (len != 2 * NUM_ECC_BYTES + 1) {
     7f8:	2a41      	cmp	r2, #65	; 0x41
     7fa:	d1d1      	bne.n	7a0 <bootutil_verify_sig+0x30>
    rc = bootutil_decode_sig(signature, sig, sig + slen);
     7fc:	443d      	add	r5, r7
    rc = mbedtls_asn1_get_tag(&cp, end, &len,
     7fe:	2330      	movs	r3, #48	; 0x30
     800:	4629      	mov	r1, r5
     802:	aa03      	add	r2, sp, #12
     804:	a802      	add	r0, sp, #8
     806:	9702      	str	r7, [sp, #8]
     808:	f005 fc52 	bl	60b0 <mbedtls_asn1_get_tag>
    if (rc) {
     80c:	2800      	cmp	r0, #0
     80e:	d1c7      	bne.n	7a0 <bootutil_verify_sig+0x30>
    if (cp + len > end) {
     810:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
     814:	4413      	add	r3, r2
     816:	429d      	cmp	r5, r3
     818:	d3c2      	bcc.n	7a0 <bootutil_verify_sig+0x30>
    rc = bootutil_read_bigint(signature, &cp, end);
     81a:	462a      	mov	r2, r5
     81c:	a902      	add	r1, sp, #8
     81e:	a806      	add	r0, sp, #24
     820:	f005 fa01 	bl	5c26 <bootutil_read_bigint>
    if (rc) {
     824:	2800      	cmp	r0, #0
     826:	d1bb      	bne.n	7a0 <bootutil_verify_sig+0x30>
    rc = bootutil_read_bigint(signature + NUM_ECC_BYTES, &cp, end);
     828:	462a      	mov	r2, r5
     82a:	a902      	add	r1, sp, #8
     82c:	a80e      	add	r0, sp, #56	; 0x38
     82e:	f005 f9fa 	bl	5c26 <bootutil_read_bigint>
    if (rc) {
     832:	2800      	cmp	r0, #0
     834:	d1b4      	bne.n	7a0 <bootutil_verify_sig+0x30>
    if (hlen != NUM_ECC_BYTES) {
     836:	2e20      	cmp	r6, #32
     838:	d1b2      	bne.n	7a0 <bootutil_verify_sig+0x30>

    bootutil_ecdsa_p256_init(&ctx);
#ifdef MCUBOOT_ECDSA_NEED_ASN1_SIG
    rc = bootutil_ecdsa_p256_verify(&ctx, pubkey, end - pubkey, hash, sig, slen);
#else
    rc = bootutil_ecdsa_p256_verify(&ctx, pubkey, end - pubkey, hash, signature,
     83a:	9901      	ldr	r1, [sp, #4]
    (void)ctx;
    (void)pk_len;
    (void)sig_len;

    /* Only support uncompressed keys. */
    if (pk[0] != 0x04) {
     83c:	780b      	ldrb	r3, [r1, #0]
     83e:	2b04      	cmp	r3, #4
     840:	d1ae      	bne.n	7a0 <bootutil_verify_sig+0x30>
        return -1;
    }
    pk++;

    return cc310_ecdsa_verify_secp256r1(hash, pk, sig, BOOTUTIL_CRYPTO_ECDSA_P256_HASH_SIZE);
     842:	4633      	mov	r3, r6
     844:	4640      	mov	r0, r8
     846:	aa06      	add	r2, sp, #24
     848:	3101      	adds	r1, #1
     84a:	f000 fd57 	bl	12fc <cc310_ecdsa_verify_secp256r1>
#endif /* CY_MBEDTLS_HW_ACCELERATION */

    bootutil_ecdsa_p256_drop(&ctx);

    return rc;
}
     84e:	b016      	add	sp, #88	; 0x58
     850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     854:	00006f8c 	.word	0x00006f8c
     858:	0000747a 	.word	0x0000747a
     85c:	00007482 	.word	0x00007482

00000860 <boot_read_swap_size>:
    return -1;
}

int
boot_read_swap_size(int image_index, uint32_t *swap_size)
{
     860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t areas[2] = {
     864:	2303      	movs	r3, #3
{
     866:	b086      	sub	sp, #24
     868:	460d      	mov	r5, r1
     86a:	466f      	mov	r7, sp
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     86c:	2600      	movs	r6, #0
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
     86e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8d8 <boot_read_swap_size+0x78>
    uint8_t areas[2] = {
     872:	f8ad 3000 	strh.w	r3, [sp]
        rc = flash_area_open(areas[i], fap);
     876:	f817 0b01 	ldrb.w	r0, [r7], #1
     87a:	a901      	add	r1, sp, #4
     87c:	f001 f8fe 	bl	1a7c <flash_area_open>
        if (rc != 0) {
     880:	4604      	mov	r4, r0
     882:	b9a0      	cbnz	r0, 8ae <boot_read_swap_size+0x4e>
        off = boot_magic_off(*fap);
     884:	9801      	ldr	r0, [sp, #4]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     886:	2310      	movs	r3, #16
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
     888:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     88a:	aa02      	add	r2, sp, #8
     88c:	3910      	subs	r1, #16
     88e:	f005 fd84 	bl	639a <flash_area_read>
     892:	4604      	mov	r4, r0
        flash_area_close(*fap);
     894:	9801      	ldr	r0, [sp, #4]
     896:	f005 fd7f 	bl	6398 <flash_area_close>
        if (rc != 0) {
     89a:	b944      	cbnz	r4, 8ae <boot_read_swap_size+0x4e>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
     89c:	2210      	movs	r2, #16
     89e:	4641      	mov	r1, r8
     8a0:	a802      	add	r0, sp, #8
     8a2:	f005 fe2a 	bl	64fa <memcmp>
     8a6:	b140      	cbz	r0, 8ba <boot_read_swap_size+0x5a>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     8a8:	b12e      	cbz	r6, 8b6 <boot_read_swap_size+0x56>
    return -1;
     8aa:	f04f 34ff 	mov.w	r4, #4294967295
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
        flash_area_close(fap);
    }

    return rc;
}
     8ae:	4620      	mov	r0, r4
     8b0:	b006      	add	sp, #24
     8b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     8b6:	2601      	movs	r6, #1
     8b8:	e7dd      	b.n	876 <boot_read_swap_size+0x16>
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
     8ba:	9801      	ldr	r0, [sp, #4]
     8bc:	f006 f81c 	bl	68f8 <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
     8c0:	2304      	movs	r3, #4
     8c2:	f1a0 0108 	sub.w	r1, r0, #8
     8c6:	462a      	mov	r2, r5
     8c8:	9801      	ldr	r0, [sp, #4]
     8ca:	f005 fd66 	bl	639a <flash_area_read>
     8ce:	4604      	mov	r4, r0
        flash_area_close(fap);
     8d0:	9801      	ldr	r0, [sp, #4]
     8d2:	f005 fd61 	bl	6398 <flash_area_close>
     8d6:	e7ea      	b.n	8ae <boot_read_swap_size+0x4e>
     8d8:	0000732c 	.word	0x0000732c

000008dc <boot_validate_slot.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         1 (or its fih_int encoded form)  if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
     8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
     8e0:	4b38      	ldr	r3, [pc, #224]	; (9c4 <FIH_LABEL_FIH_CALL_END_296+0x80>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     8e2:	b088      	sub	sp, #32
     8e4:	4606      	mov	r6, r0
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     8e6:	2000      	movs	r0, #0
boot_validate_slot(struct boot_loader_state *state, int slot,
     8e8:	460d      	mov	r5, r1
    fih_int fih_rc = FIH_FAILURE;
     8ea:	681c      	ldr	r4, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     8ec:	f005 f8f8 	bl	5ae0 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     8f0:	a906      	add	r1, sp, #24
     8f2:	b2c0      	uxtb	r0, r0
     8f4:	f001 f8c2 	bl	1a7c <flash_area_open>
    if (rc != 0) {
     8f8:	2800      	cmp	r0, #0
     8fa:	d157      	bne.n	9ac <FIH_LABEL_FIH_CALL_END_296+0x68>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     8fc:	4629      	mov	r1, r5
     8fe:	f005 f8ef 	bl	5ae0 <flash_area_id_from_multi_image_slot>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     902:	242c      	movs	r4, #44	; 0x2c
    rc = flash_area_open(area_id, &fap);
     904:	a907      	add	r1, sp, #28
     906:	b2c0      	uxtb	r0, r0
     908:	fb04 6405 	mla	r4, r4, r5, r6
     90c:	f001 f8b6 	bl	1a7c <flash_area_open>
    if (rc != 0) {
     910:	2800      	cmp	r0, #0
     912:	d036      	beq.n	982 <FIH_LABEL_FIH_CALL_END_296+0x3e>
        FIH_RET(fih_rc);
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     914:	f04f 082c 	mov.w	r8, #44	; 0x2c
     918:	fb08 f805 	mul.w	r8, r8, r5
     91c:	eb06 0708 	add.w	r7, r6, r8
     920:	6939      	ldr	r1, [r7, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     922:	f011 0110 	ands.w	r1, r1, #16
     926:	d137      	bne.n	998 <FIH_LABEL_FIH_CALL_END_296+0x54>

00000928 <FIH_LABEL_FIH_CALL_START_240>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     928:	f44f 7380 	mov.w	r3, #256	; 0x100
     92c:	9301      	str	r3, [sp, #4]
     92e:	4b26      	ldr	r3, [pc, #152]	; (9c8 <FIH_LABEL_FIH_CALL_END_296+0x84>)
     930:	4622      	mov	r2, r4
     932:	9300      	str	r3, [sp, #0]
     934:	4608      	mov	r0, r1
     936:	e9cd 1103 	strd	r1, r1, [sp, #12]
     93a:	9b06      	ldr	r3, [sp, #24]
     93c:	9102      	str	r1, [sp, #8]
     93e:	f7ff fe03 	bl	548 <bootutil_img_validate>
     942:	4604      	mov	r4, r0

00000944 <FIH_LABEL_FIH_CALL_END_296>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     944:	4b21      	ldr	r3, [pc, #132]	; (9cc <FIH_LABEL_FIH_CALL_END_296+0x88>)
     946:	f856 2008 	ldr.w	r2, [r6, r8]
                       fih_rc, BOOT_CURR_IMG(state), slot);
    if (fih_eq(fih_rc, fih_int_encode(BOOT_HOOK_REGULAR)))
    {
        FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
    }
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     94a:	9806      	ldr	r0, [sp, #24]
    if (hdr->ih_magic != IMAGE_MAGIC) {
     94c:	429a      	cmp	r2, r3
     94e:	d10c      	bne.n	96a <FIH_LABEL_FIH_CALL_END_296+0x26>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     950:	893a      	ldrh	r2, [r7, #8]
     952:	68fb      	ldr	r3, [r7, #12]
    if (a > UINT32_MAX - b) {
     954:	43d1      	mvns	r1, r2
     956:	428b      	cmp	r3, r1
     958:	d807      	bhi.n	96a <FIH_LABEL_FIH_CALL_END_296+0x26>
        *dest = a + b;
     95a:	4413      	add	r3, r2
    if (size >= flash_area_get_size(fap)) {
     95c:	6882      	ldr	r2, [r0, #8]
     95e:	4293      	cmp	r3, r2
     960:	d203      	bcs.n	96a <FIH_LABEL_FIH_CALL_END_296+0x26>
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     962:	4b1b      	ldr	r3, [pc, #108]	; (9d0 <FIH_LABEL_FIH_CALL_END_296+0x8c>)
     964:	681b      	ldr	r3, [r3, #0]
     966:	42a3      	cmp	r3, r4
     968:	d01d      	beq.n	9a6 <FIH_LABEL_FIH_CALL_END_296+0x62>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     96a:	b345      	cbz	r5, 9be <FIH_LABEL_FIH_CALL_END_296+0x7a>
            flash_area_erase(fap, 0, flash_area_get_size(fap));
     96c:	6882      	ldr	r2, [r0, #8]
     96e:	2100      	movs	r1, #0
     970:	f005 fd4b 	bl	640a <flash_area_erase>
            /* Image is invalid, erase it to prevent further unnecessary
             * attempts to validate and boot it.
             */
        }
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     974:	4a17      	ldr	r2, [pc, #92]	; (9d4 <FIH_LABEL_FIH_CALL_END_296+0x90>)
     976:	2145      	movs	r1, #69	; 0x45
     978:	4817      	ldr	r0, [pc, #92]	; (9d8 <FIH_LABEL_FIH_CALL_END_296+0x94>)
     97a:	f005 fd00 	bl	637e <z_log_minimal_printk>
        fih_rc = fih_int_encode(1);
     97e:	2401      	movs	r4, #1
     980:	e011      	b.n	9a6 <FIH_LABEL_FIH_CALL_END_296+0x62>
    erased_val = flash_area_erased_val(fap);
     982:	9807      	ldr	r0, [sp, #28]
     984:	f005 fd61 	bl	644a <flash_area_erased_val>
     988:	4607      	mov	r7, r0
    flash_area_close(fap);
     98a:	9807      	ldr	r0, [sp, #28]
     98c:	f005 fd04 	bl	6398 <flash_area_close>
boot_data_is_set_to(uint8_t val, void *data, size_t len)
     990:	1e63      	subs	r3, r4, #1
     992:	1ce2      	adds	r2, r4, #3
    for (i = 0; i < len; i++) {
     994:	4293      	cmp	r3, r2
     996:	d10d      	bne.n	9b4 <FIH_LABEL_FIH_CALL_END_296+0x70>
        if (slot != BOOT_PRIMARY_SLOT) {
     998:	2d00      	cmp	r5, #0
     99a:	d0f0      	beq.n	97e <FIH_LABEL_FIH_CALL_END_296+0x3a>
            swap_erase_trailer_sectors(state, fap);
     99c:	4630      	mov	r0, r6
     99e:	9906      	ldr	r1, [sp, #24]
     9a0:	f005 fa65 	bl	5e6e <swap_erase_trailer_sectors>
        fih_rc = fih_int_encode(1);
     9a4:	462c      	mov	r4, r5
        }
    }
#endif

out:
    flash_area_close(fap);
     9a6:	9806      	ldr	r0, [sp, #24]
     9a8:	f005 fcf6 	bl	6398 <flash_area_close>

    FIH_RET(fih_rc);
}
     9ac:	4620      	mov	r0, r4
     9ae:	b008      	add	sp, #32
     9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (val != p[i]) {
     9b4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
     9b8:	42b9      	cmp	r1, r7
     9ba:	d0eb      	beq.n	994 <FIH_LABEL_FIH_CALL_END_296+0x50>
     9bc:	e7aa      	b.n	914 <boot_validate_slot.isra.0+0x38>
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     9be:	4a07      	ldr	r2, [pc, #28]	; (9dc <FIH_LABEL_FIH_CALL_END_296+0x98>)
     9c0:	e7d9      	b.n	976 <FIH_LABEL_FIH_CALL_END_296+0x32>
     9c2:	bf00      	nop
     9c4:	2000c500 	.word	0x2000c500
     9c8:	2000d3e4 	.word	0x2000d3e4
     9cc:	96f3b83d 	.word	0x96f3b83d
     9d0:	2000c6cc 	.word	0x2000c6cc
     9d4:	0000748b 	.word	0x0000748b
     9d8:	0000749d 	.word	0x0000749d
     9dc:	00007495 	.word	0x00007495

000009e0 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
     9e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
     9e2:	460d      	mov	r5, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     9e4:	2100      	movs	r1, #0
{
     9e6:	4604      	mov	r4, r0
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
     9e8:	4628      	mov	r0, r5
    size = copy_size = 0;
     9ea:	e9cd 1100 	strd	r1, r1, [sp]
    if (boot_status_is_reset(bs)) {
     9ee:	f005 f9fd 	bl	5dec <boot_status_is_reset>
     9f2:	b330      	cbz	r0, a42 <boot_swap_image+0x62>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     9f4:	4e16      	ldr	r6, [pc, #88]	; (a50 <boot_swap_image+0x70>)
     9f6:	6823      	ldr	r3, [r4, #0]
     9f8:	42b3      	cmp	r3, r6
     9fa:	d103      	bne.n	a04 <boot_swap_image+0x24>
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     9fc:	4620      	mov	r0, r4
     9fe:	aa01      	add	r2, sp, #4
     a00:	f005 f989 	bl	5d16 <boot_read_image_size.isra.0>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_ALIGN_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     a04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     a06:	42b3      	cmp	r3, r6
     a08:	d104      	bne.n	a14 <boot_swap_image+0x34>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     a0a:	466a      	mov	r2, sp
     a0c:	2101      	movs	r1, #1
     a0e:	4620      	mov	r0, r4
     a10:	f005 f981 	bl	5d16 <boot_read_image_size.isra.0>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_ALIGN_SIZE);
        }
#endif

        if (size > copy_size) {
     a14:	e9dd 3200 	ldrd	r3, r2, [sp]
     a18:	4293      	cmp	r3, r2
            copy_size = size;
     a1a:	bf88      	it	hi
     a1c:	9301      	strhi	r3, [sp, #4]
        }

        bs->swap_size = copy_size;
     a1e:	9b01      	ldr	r3, [sp, #4]
     a20:	60ab      	str	r3, [r5, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
     a22:	9a01      	ldr	r2, [sp, #4]
     a24:	4629      	mov	r1, r5
     a26:	4620      	mov	r0, r4
     a28:	f000 fb34 	bl	1094 <swap_run>

#ifdef MCUBOOT_VALIDATE_PRIMARY_SLOT
    extern int boot_status_fails;
    if (boot_status_fails > 0) {
     a2c:	4b09      	ldr	r3, [pc, #36]	; (a54 <boot_swap_image+0x74>)
     a2e:	681a      	ldr	r2, [r3, #0]
     a30:	2a00      	cmp	r2, #0
     a32:	dd03      	ble.n	a3c <boot_swap_image+0x5c>
        BOOT_LOG_WRN("%d status write fails performing the swap",
     a34:	2157      	movs	r1, #87	; 0x57
     a36:	4808      	ldr	r0, [pc, #32]	; (a58 <boot_swap_image+0x78>)
     a38:	f005 fca1 	bl	637e <z_log_minimal_printk>
                     boot_status_fails);
    }
#endif

    return 0;
}
     a3c:	2000      	movs	r0, #0
     a3e:	b002      	add	sp, #8
     a40:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_read_swap_size(image_index, &bs->swap_size);
     a42:	f105 0108 	add.w	r1, r5, #8
     a46:	f7ff ff0b 	bl	860 <boot_read_swap_size>
        copy_size = bs->swap_size;
     a4a:	68ab      	ldr	r3, [r5, #8]
     a4c:	9301      	str	r3, [sp, #4]
     a4e:	e7e8      	b.n	a22 <boot_swap_image+0x42>
     a50:	96f3b83d 	.word	0x96f3b83d
     a54:	2000d330 	.word	0x2000d330
     a58:	000074c5 	.word	0x000074c5

00000a5c <boot_copy_region>:
{
     a5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a60:	468a      	mov	sl, r1
     a62:	4690      	mov	r8, r2
     a64:	4699      	mov	r9, r3
    bytes_copied = 0;
     a66:	2600      	movs	r6, #0
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     a68:	f8df b070 	ldr.w	fp, [pc, #112]	; adc <boot_copy_region+0x80>
     a6c:	4c19      	ldr	r4, [pc, #100]	; (ad4 <boot_copy_region+0x78>)
     a6e:	4d1a      	ldr	r5, [pc, #104]	; (ad8 <boot_copy_region+0x7c>)
    while (bytes_copied < sz) {
     a70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     a72:	429e      	cmp	r6, r3
     a74:	d301      	bcc.n	a7a <boot_copy_region+0x1e>
    return 0;
     a76:	2000      	movs	r0, #0
     a78:	e00f      	b.n	a9a <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     a7c:	4650      	mov	r0, sl
        if (sz - bytes_copied > sizeof buf) {
     a7e:	1b9f      	subs	r7, r3, r6
     a80:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     a84:	bf28      	it	cs
     a86:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     a8a:	4a14      	ldr	r2, [pc, #80]	; (adc <boot_copy_region+0x80>)
     a8c:	463b      	mov	r3, r7
     a8e:	eb06 0109 	add.w	r1, r6, r9
     a92:	f005 fc82 	bl	639a <flash_area_read>
        if (rc != 0) {
     a96:	b110      	cbz	r0, a9e <boot_copy_region+0x42>
            return BOOT_EFLASH;
     a98:	2001      	movs	r0, #1
}
     a9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     a9e:	990a      	ldr	r1, [sp, #40]	; 0x28
     aa0:	463b      	mov	r3, r7
     aa2:	465a      	mov	r2, fp
     aa4:	4640      	mov	r0, r8
     aa6:	1871      	adds	r1, r6, r1
     aa8:	f005 fc93 	bl	63d2 <flash_area_write>
        if (rc != 0) {
     aac:	2800      	cmp	r0, #0
     aae:	d1f3      	bne.n	a98 <boot_copy_region+0x3c>
     ab0:	f8c4 5600 	str.w	r5, [r4, #1536]	; 0x600
        bytes_copied += chunk_sz;
     ab4:	443e      	add	r6, r7
     ab6:	f8c4 5604 	str.w	r5, [r4, #1540]	; 0x604
     aba:	f8c4 5608 	str.w	r5, [r4, #1544]	; 0x608
     abe:	f8c4 560c 	str.w	r5, [r4, #1548]	; 0x60c
     ac2:	f8c4 5610 	str.w	r5, [r4, #1552]	; 0x610
     ac6:	f8c4 5614 	str.w	r5, [r4, #1556]	; 0x614
     aca:	f8c4 5618 	str.w	r5, [r4, #1560]	; 0x618
     ace:	f8c4 561c 	str.w	r5, [r4, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     ad2:	e7cd      	b.n	a70 <boot_copy_region+0x14>
     ad4:	50018000 	.word	0x50018000
     ad8:	6e524635 	.word	0x6e524635
     adc:	2000c730 	.word	0x2000c730

00000ae0 <context_boot_go>:
#endif
}

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     ae4:	460f      	mov	r7, r1

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     ae6:	2100      	movs	r1, #0
    fih_int fih_rc = FIH_FAILURE;
     ae8:	4b8d      	ldr	r3, [pc, #564]	; (d20 <FIH_LABEL_FIH_CALL_END_2422+0x46>)
{
     aea:	b085      	sub	sp, #20
    fih_int fih_rc = FIH_FAILURE;
     aec:	681e      	ldr	r6, [r3, #0]
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     aee:	4b8d      	ldr	r3, [pc, #564]	; (d24 <FIH_LABEL_FIH_CALL_END_2422+0x4a>)
{
     af0:	4604      	mov	r4, r0
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     af2:	6243      	str	r3, [r0, #36]	; 0x24
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     af4:	4b8c      	ldr	r3, [pc, #560]	; (d28 <FIH_LABEL_FIH_CALL_END_2422+0x4e>)
     af6:	6503      	str	r3, [r0, #80]	; 0x50
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     af8:	4608      	mov	r0, r1
     afa:	f004 fff1 	bl	5ae0 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     afe:	f104 0120 	add.w	r1, r4, #32
     b02:	b2c0      	uxtb	r0, r0
     b04:	f000 ffba 	bl	1a7c <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     b08:	2101      	movs	r1, #1
     b0a:	2000      	movs	r0, #0
     b0c:	f004 ffe8 	bl	5ae0 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     b10:	f104 014c 	add.w	r1, r4, #76	; 0x4c
     b14:	b2c0      	uxtb	r0, r0
     b16:	f000 ffb1 	bl	1a7c <flash_area_open>
     b1a:	4605      	mov	r5, r0
    rc = boot_read_sectors(state);
     b1c:	4620      	mov	r0, r4
     b1e:	f005 f93b 	bl	5d98 <boot_read_sectors>
    if (rc != 0) {
     b22:	4680      	mov	r8, r0
     b24:	b968      	cbnz	r0, b42 <context_boot_go+0x62>
    rc = boot_read_image_headers(state, false, NULL);
     b26:	2200      	movs	r2, #0
     b28:	4620      	mov	r0, r4
     b2a:	4611      	mov	r1, r2
     b2c:	f005 f8da 	bl	5ce4 <boot_read_image_headers>
    if (rc != 0) {
     b30:	4680      	mov	r8, r0
     b32:	b300      	cbz	r0, b76 <context_boot_go+0x96>
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     b34:	2200      	movs	r2, #0
     b36:	2157      	movs	r1, #87	; 0x57
     b38:	487c      	ldr	r0, [pc, #496]	; (d2c <FIH_LABEL_FIH_CALL_END_2422+0x52>)
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     b3a:	f005 fc20 	bl	637e <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b3e:	2301      	movs	r3, #1
     b40:	e091      	b.n	c66 <FIH_LABEL_FIH_CALL_END_2209+0xe>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
     b42:	2280      	movs	r2, #128	; 0x80
     b44:	2157      	movs	r1, #87	; 0x57
     b46:	487a      	ldr	r0, [pc, #488]	; (d30 <FIH_LABEL_FIH_CALL_END_2422+0x56>)
     b48:	f005 fc19 	bl	637e <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b4c:	2301      	movs	r3, #1
        if (rc == BOOT_EFLASH)
     b4e:	4598      	cmp	r8, r3
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b50:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (rc == BOOT_EFLASH)
     b54:	d1e7      	bne.n	b26 <context_boot_go+0x46>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     b56:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);

        switch (BOOT_SWAP_TYPE(state)) {
     b5a:	2b04      	cmp	r3, #4
        bs.swap_type = BOOT_SWAP_TYPE(state);
     b5c:	f88d 3007 	strb.w	r3, [sp, #7]
        switch (BOOT_SWAP_TYPE(state)) {
     b60:	f200 8084 	bhi.w	c6c <FIH_LABEL_FIH_CALL_END_2209+0x14>
     b64:	2b01      	cmp	r3, #1
     b66:	f200 8088 	bhi.w	c7a <FIH_LABEL_FIH_CALL_END_2209+0x22>
     b6a:	f000 809f 	beq.w	cac <FIH_LABEL_FIH_CALL_END_2209+0x54>
            }
#endif /* !MCUBOOT_OVERWRITE_ONLY */
            break;

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     b6e:	23ff      	movs	r3, #255	; 0xff
     b70:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     b74:	e09a      	b.n	cac <FIH_LABEL_FIH_CALL_END_2209+0x54>
    if (boot_slots_compatible(state)) {
     b76:	4620      	mov	r0, r4
     b78:	f000 f9a4 	bl	ec4 <boot_slots_compatible>
     b7c:	2800      	cmp	r0, #0
     b7e:	d0de      	beq.n	b3e <context_boot_go+0x5e>
        boot_status_reset(bs);
     b80:	4668      	mov	r0, sp
     b82:	f005 f92a 	bl	5dda <boot_status_reset>
        rc = swap_read_status(state, bs);
     b86:	4669      	mov	r1, sp
     b88:	4620      	mov	r0, r4
     b8a:	f005 f9c5 	bl	5f18 <swap_read_status>
        if (rc != 0) {
     b8e:	b118      	cbz	r0, b98 <context_boot_go+0xb8>
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     b90:	4642      	mov	r2, r8
     b92:	2157      	movs	r1, #87	; 0x57
     b94:	4867      	ldr	r0, [pc, #412]	; (d34 <FIH_LABEL_FIH_CALL_END_2422+0x5a>)
     b96:	e7d0      	b.n	b3a <context_boot_go+0x5a>
        rc = boot_read_image_headers(state, !boot_status_is_reset(bs), bs);
     b98:	4668      	mov	r0, sp
     b9a:	f005 f927 	bl	5dec <boot_status_is_reset>
     b9e:	f080 0001 	eor.w	r0, r0, #1
     ba2:	466a      	mov	r2, sp
     ba4:	b2c1      	uxtb	r1, r0
     ba6:	4620      	mov	r0, r4
     ba8:	f005 f89c 	bl	5ce4 <boot_read_image_headers>
        if (rc != 0) {
     bac:	4602      	mov	r2, r0
     bae:	2800      	cmp	r0, #0
     bb0:	d1c0      	bne.n	b34 <context_boot_go+0x54>
        if (!boot_status_is_reset(bs)) {
     bb2:	4668      	mov	r0, sp
     bb4:	f005 f91a 	bl	5dec <boot_status_is_reset>
     bb8:	4680      	mov	r8, r0
     bba:	bb60      	cbnz	r0, c16 <context_boot_go+0x136>
    rc = boot_swap_image(state, bs);
     bbc:	4669      	mov	r1, sp
     bbe:	4620      	mov	r0, r4
     bc0:	f7ff ff0e 	bl	9e0 <boot_swap_image>
    BOOT_SWAP_TYPE(state) = bs->swap_type;
     bc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bc8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     bcc:	3b03      	subs	r3, #3
     bce:	2b01      	cmp	r3, #1
     bd0:	d806      	bhi.n	be0 <context_boot_go+0x100>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     bd2:	4640      	mov	r0, r8
     bd4:	f005 f9ef 	bl	5fb6 <swap_set_image_ok>
        if (rc != 0) {
     bd8:	b110      	cbz	r0, be0 <context_boot_go+0x100>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     bda:	23ff      	movs	r3, #255	; 0xff
     bdc:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     be0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     be4:	3b02      	subs	r3, #2
     be6:	2b02      	cmp	r3, #2
     be8:	d80b      	bhi.n	c02 <context_boot_go+0x122>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     bea:	2000      	movs	r0, #0
     bec:	f005 f9d1 	bl	5f92 <swap_set_copy_done>
        if (rc != 0) {
     bf0:	b138      	cbz	r0, c02 <context_boot_go+0x122>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     bf2:	23ff      	movs	r3, #255	; 0xff
     bf4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        BOOT_LOG_ERR("panic!");
     bf8:	2145      	movs	r1, #69	; 0x45
     bfa:	484f      	ldr	r0, [pc, #316]	; (d38 <FIH_LABEL_FIH_CALL_END_2422+0x5e>)
     bfc:	f005 fbbf 	bl	637e <z_log_minimal_printk>
        while (1) {}
     c00:	e7fe      	b.n	c00 <context_boot_go+0x120>
    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     c02:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     c06:	2bff      	cmp	r3, #255	; 0xff
     c08:	d0f6      	beq.n	bf8 <context_boot_go+0x118>
            rc = boot_read_image_headers(state, false, bs);
     c0a:	466a      	mov	r2, sp
     c0c:	2100      	movs	r1, #0
     c0e:	4620      	mov	r0, r4
     c10:	f005 f868 	bl	5ce4 <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c14:	e793      	b.n	b3e <context_boot_go+0x5e>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     c16:	f89d 9007 	ldrb.w	r9, [sp, #7]
     c1a:	f1b9 0f01 	cmp.w	r9, #1
     c1e:	d117      	bne.n	c50 <FIH_LABEL_FIH_CALL_START_2189>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     c20:	4610      	mov	r0, r2
     c22:	f002 fcaf 	bl	3584 <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     c26:	1e83      	subs	r3, r0, #2
     c28:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     c2a:	4680      	mov	r8, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     c2c:	d80d      	bhi.n	c4a <FIH_LABEL_FIH_CALL_END_2124+0x14>

00000c2e <FIH_LABEL_FIH_CALL_START_2100>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     c2e:	4649      	mov	r1, r9
     c30:	4620      	mov	r0, r4
     c32:	f7ff fe53 	bl	8dc <boot_validate_slot.isra.0>

00000c36 <FIH_LABEL_FIH_CALL_END_2124>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     c36:	4b41      	ldr	r3, [pc, #260]	; (d3c <FIH_LABEL_FIH_CALL_END_2422+0x62>)
     c38:	681b      	ldr	r3, [r3, #0]
     c3a:	4298      	cmp	r0, r3
     c3c:	d005      	beq.n	c4a <FIH_LABEL_FIH_CALL_END_2124+0x14>
                swap_type = BOOT_SWAP_TYPE_FAIL;
     c3e:	2801      	cmp	r0, #1
     c40:	bf0c      	ite	eq
     c42:	f04f 0801 	moveq.w	r8, #1
     c46:	f04f 0805 	movne.w	r8, #5
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     c4a:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
     c4e:	e782      	b.n	b56 <context_boot_go+0x76>

00000c50 <FIH_LABEL_FIH_CALL_START_2189>:
                FIH_CALL(boot_validate_slot, fih_rc,
     c50:	2101      	movs	r1, #1
     c52:	4620      	mov	r0, r4
     c54:	f7ff fe42 	bl	8dc <boot_validate_slot.isra.0>

00000c58 <FIH_LABEL_FIH_CALL_END_2209>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     c58:	4b38      	ldr	r3, [pc, #224]	; (d3c <FIH_LABEL_FIH_CALL_END_2422+0x62>)
     c5a:	681b      	ldr	r3, [r3, #0]
     c5c:	4298      	cmp	r0, r3
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     c5e:	bf14      	ite	ne
     c60:	2305      	movne	r3, #5
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     c62:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c66:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     c6a:	e774      	b.n	b56 <context_boot_go+0x76>
        switch (BOOT_SWAP_TYPE(state)) {
     c6c:	2b05      	cmp	r3, #5
     c6e:	f47f af7e 	bne.w	b6e <context_boot_go+0x8e>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     c72:	2000      	movs	r0, #0
     c74:	f005 f99f 	bl	5fb6 <swap_set_image_ok>
     c78:	e013      	b.n	ca2 <FIH_LABEL_FIH_CALL_END_2209+0x4a>
        rc = boot_swap_image(state, bs);
     c7a:	4669      	mov	r1, sp
     c7c:	4620      	mov	r0, r4
     c7e:	f7ff feaf 	bl	9e0 <boot_swap_image>
    swap_type = BOOT_SWAP_TYPE(state);
     c82:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
        rc = boot_swap_image(state, bs);
     c86:	4605      	mov	r5, r0
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     c88:	1eda      	subs	r2, r3, #3
     c8a:	2a01      	cmp	r2, #1
     c8c:	d80c      	bhi.n	ca8 <FIH_LABEL_FIH_CALL_END_2209+0x50>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     c8e:	2000      	movs	r0, #0
     c90:	f005 f991 	bl	5fb6 <swap_set_image_ok>
        if (rc != 0) {
     c94:	4605      	mov	r5, r0
     c96:	2800      	cmp	r0, #0
     c98:	f47f af69 	bne.w	b6e <context_boot_go+0x8e>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     c9c:	2000      	movs	r0, #0
     c9e:	f005 f978 	bl	5f92 <swap_set_copy_done>
            if (rc != 0) {
     ca2:	4605      	mov	r5, r0
     ca4:	b110      	cbz	r0, cac <FIH_LABEL_FIH_CALL_END_2209+0x54>
     ca6:	e762      	b.n	b6e <context_boot_go+0x8e>
    if (BOOT_IS_UPGRADE(swap_type)) {
     ca8:	2b02      	cmp	r3, #2
     caa:	d0f7      	beq.n	c9c <FIH_LABEL_FIH_CALL_END_2209+0x44>
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     cac:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     cb0:	2bff      	cmp	r3, #255	; 0xff
     cb2:	d104      	bne.n	cbe <FIH_LABEL_FIH_CALL_END_2209+0x66>
            BOOT_LOG_ERR("panic!");
     cb4:	2145      	movs	r1, #69	; 0x45
     cb6:	4820      	ldr	r0, [pc, #128]	; (d38 <FIH_LABEL_FIH_CALL_END_2422+0x5e>)
     cb8:	f005 fb61 	bl	637e <z_log_minimal_printk>
            assert(0);

            /* Loop forever... */
            FIH_PANIC;
     cbc:	e7fe      	b.n	cbc <FIH_LABEL_FIH_CALL_END_2209+0x64>
#if BOOT_IMAGE_NUMBER > 1
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
            continue;
        }
#endif
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
     cbe:	2b01      	cmp	r3, #1
     cc0:	d006      	beq.n	cd0 <FIH_LABEL_FIH_CALL_START_2406>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
     cc2:	466a      	mov	r2, sp
     cc4:	2100      	movs	r1, #0
     cc6:	4620      	mov	r0, r4
     cc8:	f005 f80c 	bl	5ce4 <boot_read_image_headers>
            if (rc != 0) {
     ccc:	4605      	mov	r5, r0
     cce:	b9d0      	cbnz	r0, d06 <FIH_LABEL_FIH_CALL_END_2422+0x2c>

00000cd0 <FIH_LABEL_FIH_CALL_START_2406>:
	 * primary.
	 */
	if (BOOT_CURR_IMG(state) == 0)
#endif
	{
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
     cd0:	2100      	movs	r1, #0
     cd2:	4620      	mov	r0, r4
     cd4:	f7ff fe02 	bl	8dc <boot_validate_slot.isra.0>
     cd8:	4606      	mov	r6, r0

00000cda <FIH_LABEL_FIH_CALL_END_2422>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     cda:	f8df 8060 	ldr.w	r8, [pc, #96]	; d3c <FIH_LABEL_FIH_CALL_END_2422+0x62>
     cde:	f8d8 3000 	ldr.w	r3, [r8]
     ce2:	4298      	cmp	r0, r3
     ce4:	d10f      	bne.n	d06 <FIH_LABEL_FIH_CALL_END_2422+0x2c>
    /*
     * Since the boot_status struct stores plaintext encryption keys, reset
     * them here to avoid the possibility of jumping into an image that could
     * easily recover them.
     */
    memset(&bs, 0, sizeof(struct boot_status));
     ce6:	2210      	movs	r2, #16
     ce8:	2100      	movs	r1, #0
     cea:	4668      	mov	r0, sp
     cec:	f005 fc21 	bl	6532 <memset>
    rsp->br_flash_dev_id = flash_area_get_device_id(BOOT_IMG_AREA(state, active_slot));
     cf0:	6a20      	ldr	r0, [r4, #32]
     cf2:	f004 fefe 	bl	5af2 <flash_area_get_device_id>
        rc = boot_add_shared_data(state, BOOT_PRIMARY_SLOT);
     cf6:	2500      	movs	r5, #0
    rsp->br_flash_dev_id = flash_area_get_device_id(BOOT_IMG_AREA(state, active_slot));
     cf8:	7138      	strb	r0, [r7, #4]
 */
int flash_area_sector_from_off(off_t off, struct flash_sector *sector);

static inline uint32_t flash_area_get_off(const struct flash_area *fa)
{
	return (uint32_t)fa->fa_off;
     cfa:	6a23      	ldr	r3, [r4, #32]

    fill_rsp(state, rsp);

    fih_rc = FIH_SUCCESS;
     cfc:	f8d8 6000 	ldr.w	r6, [r8]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     d00:	685b      	ldr	r3, [r3, #4]
    rsp->br_hdr = boot_img_hdr(state, active_slot);
     d02:	603c      	str	r4, [r7, #0]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     d04:	60bb      	str	r3, [r7, #8]
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     d06:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     d08:	f005 fb46 	bl	6398 <flash_area_close>
     d0c:	6a20      	ldr	r0, [r4, #32]
     d0e:	f005 fb43 	bl	6398 <flash_area_close>
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     d12:	2d00      	cmp	r5, #0
     d14:	bf14      	ite	ne
     d16:	4628      	movne	r0, r5
     d18:	4630      	moveq	r0, r6
     d1a:	b005      	add	sp, #20
     d1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     d20:	2000c500 	.word	0x2000c500
     d24:	2000cb30 	.word	0x2000cb30
     d28:	2000cf30 	.word	0x2000cf30
     d2c:	00007536 	.word	0x00007536
     d30:	000074f4 	.word	0x000074f4
     d34:	00007562 	.word	0x00007562
     d38:	0000758c 	.word	0x0000758c
     d3c:	2000c6cc 	.word	0x2000c6cc

00000d40 <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
     d40:	b538      	push	{r3, r4, r5, lr}
void boot_state_clear(struct boot_loader_state *state)
{
    if (state != NULL) {
        memset(state, 0, sizeof(struct boot_loader_state));
    } else {
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     d42:	4d06      	ldr	r5, [pc, #24]	; (d5c <FIH_LABEL_FIH_CALL_END_3108+0x4>)
{
     d44:	4604      	mov	r4, r0
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     d46:	2260      	movs	r2, #96	; 0x60
     d48:	2100      	movs	r1, #0
     d4a:	4628      	mov	r0, r5
     d4c:	f005 fbf1 	bl	6532 <memset>

00000d50 <FIH_LABEL_FIH_CALL_START_3093>:
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
     d50:	4621      	mov	r1, r4
     d52:	4628      	mov	r0, r5
     d54:	f7ff fec4 	bl	ae0 <context_boot_go>

00000d58 <FIH_LABEL_FIH_CALL_END_3108>:
}
     d58:	bd38      	pop	{r3, r4, r5, pc}
     d5a:	bf00      	nop
     d5c:	2000c6d0 	.word	0x2000c6d0

00000d60 <boot_read_image_header>:
static uint32_t g_last_idx = UINT32_MAX;

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
     d60:	b573      	push	{r0, r1, r4, r5, r6, lr}
     d62:	4616      	mov	r6, r2
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    off = 0;
    if (bs) {
     d64:	461c      	mov	r4, r3
     d66:	b333      	cbz	r3, db6 <boot_read_image_header+0x56>
	return fs->fs_off;
}

static inline uint32_t flash_sector_get_size(const struct flash_sector *fs)
{
	return fs->fs_size;
     d68:	6a43      	ldr	r3, [r0, #36]	; 0x24
     d6a:	685d      	ldr	r5, [r3, #4]
        sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
        if (bs->op == BOOT_STATUS_OP_MOVE) {
     d6c:	7963      	ldrb	r3, [r4, #5]
     d6e:	2b01      	cmp	r3, #1
     d70:	d115      	bne.n	d9e <boot_read_image_header+0x3e>
            if (slot == 0 && bs->idx > g_last_idx) {
     d72:	bb01      	cbnz	r1, db6 <boot_read_image_header+0x56>
     d74:	4b1f      	ldr	r3, [pc, #124]	; (df4 <boot_read_image_header+0x94>)
     d76:	6822      	ldr	r2, [r4, #0]
     d78:	681b      	ldr	r3, [r3, #0]
    off = 0;
     d7a:	429a      	cmp	r2, r3
     d7c:	bf98      	it	ls
     d7e:	2500      	movls	r5, #0
                }
            }
        }
    }

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     d80:	2000      	movs	r0, #0
     d82:	f004 fead 	bl	5ae0 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     d86:	a901      	add	r1, sp, #4
     d88:	b2c0      	uxtb	r0, r0
     d8a:	f000 fe77 	bl	1a7c <flash_area_open>
    if (rc != 0) {
     d8e:	b1f0      	cbz	r0, dce <boot_read_image_header+0x6e>
        rc = BOOT_EFLASH;
     d90:	2501      	movs	r5, #1
    }

    rc = 0;

done:
    flash_area_close(fap);
     d92:	9801      	ldr	r0, [sp, #4]
     d94:	f005 fb00 	bl	6398 <flash_area_close>
    return rc;
}
     d98:	4628      	mov	r0, r5
     d9a:	b002      	add	sp, #8
     d9c:	bd70      	pop	{r4, r5, r6, pc}
        } else if (bs->op == BOOT_STATUS_OP_SWAP) {
     d9e:	2b02      	cmp	r3, #2
     da0:	d109      	bne.n	db6 <boot_read_image_header+0x56>
            if (bs->idx > 1 && bs->idx <= g_last_idx) {
     da2:	6823      	ldr	r3, [r4, #0]
     da4:	2b01      	cmp	r3, #1
     da6:	d908      	bls.n	dba <boot_read_image_header+0x5a>
     da8:	4a12      	ldr	r2, [pc, #72]	; (df4 <boot_read_image_header+0x94>)
     daa:	6812      	ldr	r2, [r2, #0]
     dac:	4293      	cmp	r3, r2
     dae:	d802      	bhi.n	db6 <boot_read_image_header+0x56>
                if (slot == 0) {
     db0:	fab1 f181 	clz	r1, r1
     db4:	0949      	lsrs	r1, r1, #5
    off = 0;
     db6:	2500      	movs	r5, #0
     db8:	e7e2      	b.n	d80 <boot_read_image_header+0x20>
            } else if (bs->idx == 1) {
     dba:	d1fc      	bne.n	db6 <boot_read_image_header+0x56>
                if (slot == 0) {
     dbc:	2900      	cmp	r1, #0
     dbe:	d0df      	beq.n	d80 <boot_read_image_header+0x20>
                if (slot == 1 && bs->state == 2) {
     dc0:	2901      	cmp	r1, #1
     dc2:	d1f8      	bne.n	db6 <boot_read_image_header+0x56>
     dc4:	7921      	ldrb	r1, [r4, #4]
     dc6:	3902      	subs	r1, #2
     dc8:	bf18      	it	ne
     dca:	2101      	movne	r1, #1
     dcc:	e7f3      	b.n	db6 <boot_read_image_header+0x56>
    rc = flash_area_read(fap, off, out_hdr, sizeof *out_hdr);
     dce:	4629      	mov	r1, r5
     dd0:	2320      	movs	r3, #32
     dd2:	4632      	mov	r2, r6
     dd4:	9801      	ldr	r0, [sp, #4]
     dd6:	f005 fae0 	bl	639a <flash_area_read>
    if (rc != 0) {
     dda:	4605      	mov	r5, r0
     ddc:	2800      	cmp	r0, #0
     dde:	d1d7      	bne.n	d90 <boot_read_image_header+0x30>
    if (bs != NULL && out_hdr->ih_magic != IMAGE_MAGIC) {
     de0:	2c00      	cmp	r4, #0
     de2:	d0d6      	beq.n	d92 <boot_read_image_header+0x32>
     de4:	6835      	ldr	r5, [r6, #0]
     de6:	4804      	ldr	r0, [pc, #16]	; (df8 <boot_read_image_header+0x98>)
     de8:	1a2d      	subs	r5, r5, r0
     dea:	bf18      	it	ne
     dec:	f04f 35ff 	movne.w	r5, #4294967295
     df0:	e7cf      	b.n	d92 <boot_read_image_header+0x32>
     df2:	bf00      	nop
     df4:	2000c504 	.word	0x2000c504
     df8:	96f3b83d 	.word	0x96f3b83d

00000dfc <swap_read_status_bytes>:

int
swap_read_status_bytes(const struct flash_area *fap,
        struct boot_loader_state *state, struct boot_status *bs)
{
     dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e00:	4607      	mov	r7, r0
     e02:	460c      	mov	r4, r1
     e04:	b085      	sub	sp, #20
    int rc;
    int last_rc;
    int erased_sections;
    int i;

    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     e06:	4601      	mov	r1, r0
     e08:	2000      	movs	r0, #0
{
     e0a:	4616      	mov	r6, r2
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     e0c:	f004 ff3e 	bl	5c8c <boot_status_entries>
    if (max_entries < 0) {
     e10:	1e05      	subs	r5, r0, #0
     e12:	db51      	blt.n	eb8 <swap_read_status_bytes+0xbc>
    erased_sections = 0;
    found_idx = -1;
    /* skip erased sectors at the end */
    last_rc = 1;
    write_sz = BOOT_WRITE_SZ(state);
    off = boot_status_off(fap);
     e14:	4638      	mov	r0, r7
    write_sz = BOOT_WRITE_SZ(state);
     e16:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    off = boot_status_off(fap);
     e18:	f004 ff42 	bl	5ca0 <boot_status_off>
    for (i = max_entries; i > 0; i--) {
     e1c:	fa5f f984 	uxtb.w	r9, r4
    erased_sections = 0;
     e20:	f04f 0a00 	mov.w	sl, #0
    last_rc = 1;
     e24:	f04f 0b01 	mov.w	fp, #1
    found_idx = -1;
     e28:	f04f 34ff 	mov.w	r4, #4294967295
     e2c:	f105 38ff 	add.w	r8, r5, #4294967295
     e30:	fb09 0808 	mla	r8, r9, r8, r0
    for (i = max_entries; i > 0; i--) {
     e34:	b99d      	cbnz	r5, e5e <swap_read_status_bytes+0x62>
            }
        }
        last_rc = rc;
    }

    if (erased_sections > 1) {
     e36:	f1ba 0f01 	cmp.w	sl, #1
     e3a:	dd03      	ble.n	e44 <swap_read_status_bytes+0x48>
        /* This means there was an error writing status on the last
         * swap. Tell user and move on to validation!
         */
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Detected inconsistent status!");
     e3c:	2145      	movs	r1, #69	; 0x45
     e3e:	4820      	ldr	r0, [pc, #128]	; (ec0 <swap_read_status_bytes+0xc4>)
     e40:	f005 fa9d 	bl	637e <z_log_minimal_printk>
        assert(0);
#endif
    }

    move_entries = BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT;
    if (found_idx == -1) {
     e44:	1c63      	adds	r3, r4, #1
     e46:	d006      	beq.n	e56 <swap_read_status_bytes+0x5a>
        /* no swap status found; nothing to do */
    } else if (found_idx < move_entries) {
     e48:	2c7f      	cmp	r4, #127	; 0x7f
     e4a:	dc2a      	bgt.n	ea2 <swap_read_status_bytes+0xa6>
        bs->op = BOOT_STATUS_OP_MOVE;
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     e4c:	f240 1301 	movw	r3, #257	; 0x101
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
     e50:	3401      	adds	r4, #1
     e52:	6034      	str	r4, [r6, #0]
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     e54:	80b3      	strh	r3, [r6, #4]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    }

    return 0;
}
     e56:	4628      	mov	r0, r5
     e58:	b005      	add	sp, #20
     e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_read(fap, off + (i - 1) * write_sz, &status, 1);
     e5e:	1e6b      	subs	r3, r5, #1
     e60:	9300      	str	r3, [sp, #0]
     e62:	4641      	mov	r1, r8
     e64:	2301      	movs	r3, #1
     e66:	4638      	mov	r0, r7
     e68:	f10d 020f 	add.w	r2, sp, #15
     e6c:	f005 fa95 	bl	639a <flash_area_read>
        if (rc < 0) {
     e70:	1e03      	subs	r3, r0, #0
     e72:	9301      	str	r3, [sp, #4]
     e74:	db22      	blt.n	ebc <swap_read_status_bytes+0xc0>
        if (bootutil_buffer_is_erased(fap, &status, 1)) {
     e76:	2201      	movs	r2, #1
     e78:	4638      	mov	r0, r7
     e7a:	f10d 010f 	add.w	r1, sp, #15
     e7e:	f005 fd4f 	bl	6920 <bootutil_buffer_is_erased>
     e82:	9b01      	ldr	r3, [sp, #4]
     e84:	b140      	cbz	r0, e98 <swap_read_status_bytes+0x9c>
            if (rc != last_rc) {
     e86:	455b      	cmp	r3, fp
     e88:	d001      	beq.n	e8e <swap_read_status_bytes+0x92>
                erased_sections++;
     e8a:	f10a 0a01 	add.w	sl, sl, #1
            if (found_idx == -1) {
     e8e:	469b      	mov	fp, r3
     e90:	9d00      	ldr	r5, [sp, #0]
     e92:	eba8 0809 	sub.w	r8, r8, r9
     e96:	e7cd      	b.n	e34 <swap_read_status_bytes+0x38>
     e98:	f1b4 3fff 	cmp.w	r4, #4294967295
     e9c:	bf08      	it	eq
     e9e:	462c      	moveq	r4, r5
     ea0:	e7f5      	b.n	e8e <swap_read_status_bytes+0x92>
        bs->op = BOOT_STATUS_OP_SWAP;
     ea2:	2302      	movs	r3, #2
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     ea4:	3c80      	subs	r4, #128	; 0x80
        bs->op = BOOT_STATUS_OP_SWAP;
     ea6:	7173      	strb	r3, [r6, #5]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     ea8:	1063      	asrs	r3, r4, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     eaa:	f004 0401 	and.w	r4, r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     eae:	3301      	adds	r3, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     eb0:	3401      	adds	r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     eb2:	6033      	str	r3, [r6, #0]
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     eb4:	7134      	strb	r4, [r6, #4]
     eb6:	e7ce      	b.n	e56 <swap_read_status_bytes+0x5a>
        return BOOT_EBADARGS;
     eb8:	2507      	movs	r5, #7
     eba:	e7cc      	b.n	e56 <swap_read_status_bytes+0x5a>
            return BOOT_EFLASH;
     ebc:	2501      	movs	r5, #1
     ebe:	e7ca      	b.n	e56 <swap_read_status_bytes+0x5a>
     ec0:	00007598 	.word	0x00007598

00000ec4 <boot_slots_compatible>:
}

static inline size_t
boot_img_num_sectors(const struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).num_sectors;
     ec4:	6a81      	ldr	r1, [r0, #40]	; 0x28
     ec6:	6d42      	ldr	r2, [r0, #84]	; 0x54
    return off;
}

int
boot_slots_compatible(struct boot_loader_state *state)
{
     ec8:	b538      	push	{r3, r4, r5, lr}
    size_t sector_sz_sec = 0;
    size_t i;

    num_sectors_pri = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT);
    num_sectors_sec = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT);
    if ((num_sectors_pri != num_sectors_sec) &&
     eca:	4291      	cmp	r1, r2
     ecc:	d008      	beq.n	ee0 <boot_slots_compatible+0x1c>
            (num_sectors_pri != (num_sectors_sec + 1))) {
     ece:	1c53      	adds	r3, r2, #1
    if ((num_sectors_pri != num_sectors_sec) &&
     ed0:	428b      	cmp	r3, r1
     ed2:	d005      	beq.n	ee0 <boot_slots_compatible+0x1c>
        BOOT_LOG_WRN("Cannot upgrade: not a compatible amount of sectors");
     ed4:	2157      	movs	r1, #87	; 0x57
     ed6:	4813      	ldr	r0, [pc, #76]	; (f24 <boot_slots_compatible+0x60>)

    for (i = 0; i < num_sectors_sec; i++) {
        sector_sz_pri = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
        sector_sz_sec = boot_img_sector_size(state, BOOT_SECONDARY_SLOT, i);
        if (sector_sz_pri != sector_sz_sec) {
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
     ed8:	f005 fa51 	bl	637e <z_log_minimal_printk>
            return 0;
     edc:	2000      	movs	r0, #0
        }
    }

    return 1;
#endif /* PM_S1_ADDRESS */
}
     ede:	bd38      	pop	{r3, r4, r5, pc}
    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
     ee0:	2980      	cmp	r1, #128	; 0x80
     ee2:	d91c      	bls.n	f1e <boot_slots_compatible+0x5a>
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
     ee4:	2157      	movs	r1, #87	; 0x57
     ee6:	4810      	ldr	r0, [pc, #64]	; (f28 <boot_slots_compatible+0x64>)
     ee8:	e7f6      	b.n	ed8 <boot_slots_compatible+0x14>
     eea:	6a44      	ldr	r4, [r0, #36]	; 0x24
     eec:	6d05      	ldr	r5, [r0, #80]	; 0x50
     eee:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
     ef2:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
     ef6:	6864      	ldr	r4, [r4, #4]
        if (sector_sz_pri != sector_sz_sec) {
     ef8:	686d      	ldr	r5, [r5, #4]
     efa:	42ac      	cmp	r4, r5
     efc:	d002      	beq.n	f04 <boot_slots_compatible+0x40>
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
     efe:	2157      	movs	r1, #87	; 0x57
     f00:	480a      	ldr	r0, [pc, #40]	; (f2c <boot_slots_compatible+0x68>)
     f02:	e7e9      	b.n	ed8 <boot_slots_compatible+0x14>
    for (i = 0; i < num_sectors_sec; i++) {
     f04:	3301      	adds	r3, #1
     f06:	429a      	cmp	r2, r3
     f08:	d1ef      	bne.n	eea <boot_slots_compatible+0x26>
    if (num_sectors_pri > num_sectors_sec) {
     f0a:	4291      	cmp	r1, r2
     f0c:	d905      	bls.n	f1a <boot_slots_compatible+0x56>
     f0e:	6a43      	ldr	r3, [r0, #36]	; 0x24
     f10:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        if (sector_sz_pri != boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i)) {
     f14:	6853      	ldr	r3, [r2, #4]
     f16:	42a3      	cmp	r3, r4
     f18:	d1f1      	bne.n	efe <boot_slots_compatible+0x3a>
    return 1;
     f1a:	2001      	movs	r0, #1
     f1c:	e7df      	b.n	ede <boot_slots_compatible+0x1a>
    for (i = 0; i < num_sectors_sec; i++) {
     f1e:	2300      	movs	r3, #0
    size_t sector_sz_pri = 0;
     f20:	461c      	mov	r4, r3
     f22:	e7f0      	b.n	f06 <boot_slots_compatible+0x42>
     f24:	000075bb 	.word	0x000075bb
     f28:	000075f3 	.word	0x000075f3
     f2c:	00007622 	.word	0x00007622

00000f30 <swap_status_source>:
                 (state)->copy_done,                                \
                 (state)->image_ok)

int
swap_status_source(struct boot_loader_state *state)
{
     f30:	b500      	push	{lr}
     f32:	b089      	sub	sp, #36	; 0x24
    (void)state;
#endif

    image_index = BOOT_CURR_IMG(state);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
     f34:	2003      	movs	r0, #3
     f36:	a904      	add	r1, sp, #16
     f38:	f005 fd58 	bl	69ec <boot_read_swap_state_by_id>
            &state_primary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
     f3c:	f89d 2010 	ldrb.w	r2, [sp, #16]
     f40:	2a01      	cmp	r2, #1
     f42:	d041      	beq.n	fc8 <swap_status_source+0x98>
     f44:	4b25      	ldr	r3, [pc, #148]	; (fdc <swap_status_source+0xac>)
     f46:	4926      	ldr	r1, [pc, #152]	; (fe0 <swap_status_source+0xb0>)
     f48:	2a03      	cmp	r2, #3
     f4a:	bf18      	it	ne
     f4c:	460b      	movne	r3, r1
     f4e:	f89d 2013 	ldrb.w	r2, [sp, #19]
     f52:	2149      	movs	r1, #73	; 0x49
     f54:	9202      	str	r2, [sp, #8]
     f56:	f89d 2012 	ldrb.w	r2, [sp, #18]
     f5a:	4822      	ldr	r0, [pc, #136]	; (fe4 <swap_status_source+0xb4>)
     f5c:	9201      	str	r2, [sp, #4]
     f5e:	f89d 2011 	ldrb.w	r2, [sp, #17]
     f62:	9200      	str	r2, [sp, #0]
     f64:	4a20      	ldr	r2, [pc, #128]	; (fe8 <swap_status_source+0xb8>)
     f66:	f005 fa0a 	bl	637e <z_log_minimal_printk>

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
     f6a:	2007      	movs	r0, #7
     f6c:	a906      	add	r1, sp, #24
     f6e:	f005 fd3d 	bl	69ec <boot_read_swap_state_by_id>
            &state_secondary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
     f72:	f89d 2018 	ldrb.w	r2, [sp, #24]
     f76:	2a01      	cmp	r2, #1
     f78:	d028      	beq.n	fcc <swap_status_source+0x9c>
     f7a:	4b18      	ldr	r3, [pc, #96]	; (fdc <swap_status_source+0xac>)
     f7c:	4918      	ldr	r1, [pc, #96]	; (fe0 <swap_status_source+0xb0>)
     f7e:	2a03      	cmp	r2, #3
     f80:	bf18      	it	ne
     f82:	460b      	movne	r3, r1
     f84:	f89d 201b 	ldrb.w	r2, [sp, #27]
     f88:	2149      	movs	r1, #73	; 0x49
     f8a:	9202      	str	r2, [sp, #8]
     f8c:	f89d 201a 	ldrb.w	r2, [sp, #26]
     f90:	4814      	ldr	r0, [pc, #80]	; (fe4 <swap_status_source+0xb4>)
     f92:	9201      	str	r2, [sp, #4]
     f94:	f89d 2019 	ldrb.w	r2, [sp, #25]
     f98:	9200      	str	r2, [sp, #0]
     f9a:	4a14      	ldr	r2, [pc, #80]	; (fec <swap_status_source+0xbc>)
     f9c:	f005 f9ef 	bl	637e <z_log_minimal_printk>

    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
     fa0:	f89d 3010 	ldrb.w	r3, [sp, #16]
     fa4:	2b01      	cmp	r3, #1
     fa6:	d113      	bne.n	fd0 <swap_status_source+0xa0>
     fa8:	f89d 3012 	ldrb.w	r3, [sp, #18]
     fac:	2b03      	cmp	r3, #3
     fae:	d10f      	bne.n	fd0 <swap_status_source+0xa0>
            state_primary_slot.copy_done == BOOT_FLAG_UNSET &&
     fb0:	f89d 3018 	ldrb.w	r3, [sp, #24]
     fb4:	2b01      	cmp	r3, #1
     fb6:	d00b      	beq.n	fd0 <swap_status_source+0xa0>
            state_secondary_slot.magic != BOOT_MAGIC_GOOD) {

        source = BOOT_STATUS_SOURCE_PRIMARY_SLOT;

        BOOT_LOG_INF("Boot source: primary slot");
     fb8:	480d      	ldr	r0, [pc, #52]	; (ff0 <swap_status_source+0xc0>)
     fba:	2149      	movs	r1, #73	; 0x49
     fbc:	f005 f9df 	bl	637e <z_log_minimal_printk>
        return source;
     fc0:	2002      	movs	r0, #2
    }

    BOOT_LOG_INF("Boot source: none");
    return BOOT_STATUS_SOURCE_NONE;
}
     fc2:	b009      	add	sp, #36	; 0x24
     fc4:	f85d fb04 	ldr.w	pc, [sp], #4
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
     fc8:	4b0a      	ldr	r3, [pc, #40]	; (ff4 <swap_status_source+0xc4>)
     fca:	e7c0      	b.n	f4e <swap_status_source+0x1e>
    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
     fcc:	4b09      	ldr	r3, [pc, #36]	; (ff4 <swap_status_source+0xc4>)
     fce:	e7d9      	b.n	f84 <swap_status_source+0x54>
    BOOT_LOG_INF("Boot source: none");
     fd0:	4809      	ldr	r0, [pc, #36]	; (ff8 <swap_status_source+0xc8>)
     fd2:	2149      	movs	r1, #73	; 0x49
     fd4:	f005 f9d3 	bl	637e <z_log_minimal_printk>
    return BOOT_STATUS_SOURCE_NONE;
     fd8:	2000      	movs	r0, #0
     fda:	e7f2      	b.n	fc2 <swap_status_source+0x92>
     fdc:	00007653 	.word	0x00007653
     fe0:	00007659 	.word	0x00007659
     fe4:	0000766b 	.word	0x0000766b
     fe8:	0000765d 	.word	0x0000765d
     fec:	000076ac 	.word	0x000076ac
     ff0:	000076bc 	.word	0x000076bc
     ff4:	0000764e 	.word	0x0000764e
     ff8:	000076db 	.word	0x000076db

00000ffc <fixup_revert>:
 * upgrade (by initializing the secondary slot).
 */
void
fixup_revert(const struct boot_loader_state *state, struct boot_status *bs,
        const struct flash_area *fap_sec)
{
     ffc:	b570      	push	{r4, r5, r6, lr}
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    /* No fixup required */
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
     ffe:	684b      	ldr	r3, [r1, #4]
{
    1000:	4614      	mov	r4, r2
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    1002:	4a1e      	ldr	r2, [pc, #120]	; (107c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x7c>)
    1004:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
    1008:	4293      	cmp	r3, r2
{
    100a:	4606      	mov	r6, r0
    100c:	460d      	mov	r5, r1
    100e:	b086      	sub	sp, #24
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    1010:	d12f      	bne.n	1072 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x72>
        bs->op != BOOT_STATUS_OP_MOVE ||
    1012:	680b      	ldr	r3, [r1, #0]
    1014:	2b01      	cmp	r3, #1
    1016:	d12c      	bne.n	1072 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x72>
        bs->idx != BOOT_STATUS_IDX_0) {
        return;
    }

    rc = boot_read_swap_state(fap_sec, &swap_state);
    1018:	4620      	mov	r0, r4
    101a:	a904      	add	r1, sp, #16
    101c:	f002 fa5e 	bl	34dc <boot_read_swap_state>
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    1020:	f89d 2010 	ldrb.w	r2, [sp, #16]
    1024:	2a01      	cmp	r2, #1
    1026:	d026      	beq.n	1076 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x76>
    1028:	4b15      	ldr	r3, [pc, #84]	; (1080 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x80>)
    102a:	4916      	ldr	r1, [pc, #88]	; (1084 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x84>)
    102c:	2a03      	cmp	r2, #3
    102e:	bf18      	it	ne
    1030:	460b      	movne	r3, r1
    1032:	f89d 2013 	ldrb.w	r2, [sp, #19]
    1036:	2149      	movs	r1, #73	; 0x49
    1038:	9202      	str	r2, [sp, #8]
    103a:	f89d 2012 	ldrb.w	r2, [sp, #18]
    103e:	4812      	ldr	r0, [pc, #72]	; (1088 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x88>)
    1040:	9201      	str	r2, [sp, #4]
    1042:	f89d 2011 	ldrb.w	r2, [sp, #17]
    1046:	9200      	str	r2, [sp, #0]
    1048:	4a10      	ldr	r2, [pc, #64]	; (108c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x8c>)
    104a:	f005 f998 	bl	637e <z_log_minimal_printk>

    if (swap_state.magic == BOOT_MAGIC_UNSET) {
    104e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1052:	2b03      	cmp	r3, #3
    1054:	d10d      	bne.n	1072 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x72>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    1056:	4621      	mov	r1, r4
    1058:	4630      	mov	r0, r6
    105a:	f004 ff08 	bl	5e6e <swap_erase_trailer_sectors>
        assert(rc == 0);

        rc = boot_write_image_ok(fap_sec);
    105e:	4620      	mov	r0, r4
    1060:	f005 fcb7 	bl	69d2 <boot_write_image_ok>
        assert(rc == 0);

        rc = boot_write_swap_size(fap_sec, bs->swap_size);
    1064:	4620      	mov	r0, r4
    1066:	68a9      	ldr	r1, [r5, #8]
    1068:	f004 fe2d 	bl	5cc6 <boot_write_swap_size>
        assert(rc == 0);

        rc = boot_write_magic(fap_sec);
    106c:	4620      	mov	r0, r4
    106e:	f002 fa15 	bl	349c <boot_write_magic>
        assert(rc == 0);
    }
}
    1072:	b006      	add	sp, #24
    1074:	bd70      	pop	{r4, r5, r6, pc}
    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    1076:	4b06      	ldr	r3, [pc, #24]	; (1090 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x90>)
    1078:	e7db      	b.n	1032 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x32>
    107a:	bf00      	nop
    107c:	04000100 	.word	0x04000100
    1080:	00007653 	.word	0x00007653
    1084:	00007659 	.word	0x00007659
    1088:	0000766b 	.word	0x0000766b
    108c:	000076ac 	.word	0x000076ac
    1090:	0000764e 	.word	0x0000764e

00001094 <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    1094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1098:	ed2d 8b02 	vpush	{d8}
    109c:	4605      	mov	r5, r0
    109e:	460c      	mov	r4, r1
    uint8_t image_index;
    const struct flash_area *fap_pri;
    const struct flash_area *fap_sec;
    int rc;

    BOOT_LOG_INF("Starting swap using move algorithm.");
    10a0:	4885      	ldr	r0, [pc, #532]	; (12b8 <swap_run+0x224>)
    10a2:	2149      	movs	r1, #73	; 0x49
{
    10a4:	b089      	sub	sp, #36	; 0x24
    10a6:	4617      	mov	r7, r2
    BOOT_LOG_INF("Starting swap using move algorithm.");
    10a8:	f005 f969 	bl	637e <z_log_minimal_printk>
    10ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    10ae:	2201      	movs	r2, #1
    10b0:	685e      	ldr	r6, [r3, #4]

    sz = 0;
    10b2:	2300      	movs	r3, #0
    g_last_idx = 0;

    sector_sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
    while (1) {
        sz += sector_sz;
    10b4:	4433      	add	r3, r6
        /* Skip to next sector because all sectors will be moved up. */
        g_last_idx++;
        if (sz >= copy_size) {
    10b6:	429f      	cmp	r7, r3
    10b8:	4611      	mov	r1, r2
    10ba:	f102 0201 	add.w	r2, r2, #1
    10be:	d8f9      	bhi.n	10b4 <swap_run+0x20>
    10c0:	f8df b200 	ldr.w	fp, [pc, #512]	; 12c4 <swap_run+0x230>
    }

    /*
     * When starting a new swap upgrade, check that there is enough space.
     */
    if (boot_status_is_reset(bs)) {
    10c4:	4620      	mov	r0, r4
    10c6:	f8cb 1000 	str.w	r1, [fp]
    10ca:	f004 fe8f 	bl	5dec <boot_status_is_reset>
    10ce:	b318      	cbz	r0, 1118 <swap_run+0x84>
        sz = 0;
        trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    10d0:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    10d2:	f004 fdd6 	bl	5c82 <boot_trailer_sz>
        sz = 0;
    10d6:	2300      	movs	r3, #0
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    10d8:	6aaf      	ldr	r7, [r5, #40]	; 0x28
    10da:	3f01      	subs	r7, #1

        while (1) {
            sz += sector_sz;
    10dc:	4433      	add	r3, r6
            if  (sz >= trailer_sz) {
    10de:	4283      	cmp	r3, r0
    10e0:	d201      	bcs.n	10e6 <swap_run+0x52>
                break;
            }
            first_trailer_idx--;
    10e2:	3f01      	subs	r7, #1
            sz += sector_sz;
    10e4:	e7fa      	b.n	10dc <swap_run+0x48>
        }

        if (g_last_idx >= first_trailer_idx) {
    10e6:	f8db 3000 	ldr.w	r3, [fp]
    10ea:	42bb      	cmp	r3, r7
    10ec:	d314      	bcc.n	1118 <swap_run+0x84>
            BOOT_LOG_WRN("Not enough free space to run swap upgrade");
    10ee:	2157      	movs	r1, #87	; 0x57
    10f0:	4872      	ldr	r0, [pc, #456]	; (12bc <swap_run+0x228>)
    10f2:	f005 f944 	bl	637e <z_log_minimal_printk>
            BOOT_LOG_WRN("required %d bytes but only %d are available",
    10f6:	f8db 2000 	ldr.w	r2, [fp]
    10fa:	fb07 f306 	mul.w	r3, r7, r6
    10fe:	2157      	movs	r1, #87	; 0x57
    1100:	fb02 6206 	mla	r2, r2, r6, r6
    1104:	486e      	ldr	r0, [pc, #440]	; (12c0 <swap_run+0x22c>)
    1106:	f005 f93a 	bl	637e <z_log_minimal_printk>
                         (g_last_idx + 1) * sector_sz ,
                         first_trailer_idx * sector_sz);
            bs->swap_type = BOOT_SWAP_TYPE_NONE;
    110a:	2301      	movs	r3, #1
    110c:	71e3      	strb	r3, [r4, #7]
        idx++;
    }

    flash_area_close(fap_pri);
    flash_area_close(fap_sec);
}
    110e:	b009      	add	sp, #36	; 0x24
    1110:	ecbd 8b02 	vpop	{d8}
    1114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap_pri);
    1118:	a906      	add	r1, sp, #24
    111a:	2003      	movs	r0, #3
    111c:	f000 fcae 	bl	1a7c <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap_sec);
    1120:	a907      	add	r1, sp, #28
    1122:	2007      	movs	r0, #7
    1124:	f000 fcaa 	bl	1a7c <flash_area_open>
    fixup_revert(state, bs, fap_sec);
    1128:	4621      	mov	r1, r4
    112a:	4628      	mov	r0, r5
    112c:	9a07      	ldr	r2, [sp, #28]
    112e:	f7ff ff65 	bl	ffc <fixup_revert>
    if (bs->op == BOOT_STATUS_OP_MOVE) {
    1132:	7963      	ldrb	r3, [r4, #5]
    1134:	2b01      	cmp	r3, #1
    1136:	d108      	bne.n	114a <swap_run+0xb6>
        idx = g_last_idx;
    1138:	f8db 7000 	ldr.w	r7, [fp]
    BOOT_STATUS_ASSERT(rc == 0);
    113c:	f8df a188 	ldr.w	sl, [pc, #392]	; 12c8 <swap_run+0x234>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    1140:	f8db 3000 	ldr.w	r3, [fp]
        while (idx > 0) {
    1144:	b9a7      	cbnz	r7, 1170 <swap_run+0xdc>
        bs->idx = BOOT_STATUS_IDX_0;
    1146:	2301      	movs	r3, #1
    1148:	6023      	str	r3, [r4, #0]
    bs->op = BOOT_STATUS_OP_SWAP;
    114a:	f04f 0302 	mov.w	r3, #2
    idx = 1;
    114e:	2701      	movs	r7, #1
        BOOT_STATUS_ASSERT(rc == 0);
    1150:	f8df 8174 	ldr.w	r8, [pc, #372]	; 12c8 <swap_run+0x234>
    bs->op = BOOT_STATUS_OP_SWAP;
    1154:	7163      	strb	r3, [r4, #5]
    while (idx <= g_last_idx) {
    1156:	f8db 3000 	ldr.w	r3, [fp]
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    115a:	f8dd 9018 	ldr.w	r9, [sp, #24]
    while (idx <= g_last_idx) {
    115e:	429f      	cmp	r7, r3
    1160:	d94d      	bls.n	11fe <swap_run+0x16a>
    flash_area_close(fap_pri);
    1162:	4648      	mov	r0, r9
    1164:	f005 f918 	bl	6398 <flash_area_close>
    flash_area_close(fap_sec);
    1168:	9807      	ldr	r0, [sp, #28]
    116a:	f005 f915 	bl	6398 <flash_area_close>
    116e:	e7ce      	b.n	110e <swap_run+0x7a>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    1170:	6822      	ldr	r2, [r4, #0]
    1172:	3301      	adds	r3, #1
    1174:	1a9b      	subs	r3, r3, r2
    1176:	429f      	cmp	r7, r3
    1178:	d83f      	bhi.n	11fa <swap_run+0x166>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    117a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    if (bs->idx == BOOT_STATUS_IDX_0) {
    117c:	2a01      	cmp	r2, #1
	return fs->fs_off;
    117e:	6819      	ldr	r1, [r3, #0]
    1180:	f853 0037 	ldr.w	r0, [r3, r7, lsl #3]
    1184:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    1188:	f853 3c08 	ldr.w	r3, [r3, #-8]
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    118c:	f8dd 8018 	ldr.w	r8, [sp, #24]
    1190:	eba3 0301 	sub.w	r3, r3, r1
    1194:	ee08 3a10 	vmov	s16, r3
    1198:	eba0 0901 	sub.w	r9, r0, r1
    if (bs->idx == BOOT_STATUS_IDX_0) {
    119c:	d112      	bne.n	11c4 <swap_run+0x130>
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    119e:	68e2      	ldr	r2, [r4, #12]
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    11a0:	9b07      	ldr	r3, [sp, #28]
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    11a2:	2a02      	cmp	r2, #2
    11a4:	d00a      	beq.n	11bc <swap_run+0x128>
            rc = swap_erase_trailer_sectors(state, fap_pri);
    11a6:	4641      	mov	r1, r8
    11a8:	4628      	mov	r0, r5
    11aa:	9302      	str	r3, [sp, #8]
    11ac:	f004 fe5f 	bl	5e6e <swap_erase_trailer_sectors>
            rc = swap_status_init(state, fap_pri, bs);
    11b0:	4622      	mov	r2, r4
    11b2:	4641      	mov	r1, r8
    11b4:	4628      	mov	r0, r5
    11b6:	f004 fe90 	bl	5eda <swap_status_init>
    11ba:	9b02      	ldr	r3, [sp, #8]
        rc = swap_erase_trailer_sectors(state, fap_sec);
    11bc:	4619      	mov	r1, r3
    11be:	4628      	mov	r0, r5
    11c0:	f004 fe55 	bl	5e6e <swap_erase_trailer_sectors>
    rc = boot_erase_region(fap_pri, new_off, sz);
    11c4:	4632      	mov	r2, r6
    11c6:	4649      	mov	r1, r9
    11c8:	4640      	mov	r0, r8
    11ca:	f004 fe4e 	bl	5e6a <boot_erase_region>
    rc = boot_copy_region(state, fap_pri, fap_pri, old_off, new_off, sz);
    11ce:	ee18 3a10 	vmov	r3, s16
    11d2:	4642      	mov	r2, r8
    11d4:	4641      	mov	r1, r8
    11d6:	4628      	mov	r0, r5
    11d8:	e9cd 9600 	strd	r9, r6, [sp]
    11dc:	f7ff fc3e 	bl	a5c <boot_copy_region>
    rc = boot_write_status(state, bs);
    11e0:	4621      	mov	r1, r4
    11e2:	4628      	mov	r0, r5
    11e4:	f004 fe0f 	bl	5e06 <boot_write_status>
    bs->idx++;
    11e8:	6823      	ldr	r3, [r4, #0]
    11ea:	3301      	adds	r3, #1
    11ec:	6023      	str	r3, [r4, #0]
    BOOT_STATUS_ASSERT(rc == 0);
    11ee:	b120      	cbz	r0, 11fa <swap_run+0x166>
    11f0:	f8da 3000 	ldr.w	r3, [sl]
    11f4:	3301      	adds	r3, #1
    11f6:	f8ca 3000 	str.w	r3, [sl]
            idx--;
    11fa:	3f01      	subs	r7, #1
    11fc:	e7a0      	b.n	1140 <swap_run+0xac>
        if (idx >= bs->idx) {
    11fe:	6823      	ldr	r3, [r4, #0]
    1200:	429f      	cmp	r7, r3
    1202:	d357      	bcc.n	12b4 <swap_run+0x220>
    1204:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1206:	6d28      	ldr	r0, [r5, #80]	; 0x50
    1208:	f851 3037 	ldr.w	r3, [r1, r7, lsl #3]
    120c:	00fa      	lsls	r2, r7, #3
    120e:	9303      	str	r3, [sp, #12]
    1210:	680b      	ldr	r3, [r1, #0]
    1212:	3a08      	subs	r2, #8
    1214:	f850 c002 	ldr.w	ip, [r0, r2]
    1218:	9302      	str	r3, [sp, #8]
    121a:	6803      	ldr	r3, [r0, #0]
    if (bs->state == BOOT_STATUS_STATE_0) {
    121c:	7920      	ldrb	r0, [r4, #4]
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    121e:	f8dd a01c 	ldr.w	sl, [sp, #28]
    if (bs->state == BOOT_STATUS_STATE_0) {
    1222:	2801      	cmp	r0, #1
    1224:	ebac 0303 	sub.w	r3, ip, r3
    1228:	d142      	bne.n	12b0 <swap_run+0x21c>
    122a:	5889      	ldr	r1, [r1, r2]
    122c:	9305      	str	r3, [sp, #20]
    122e:	9b02      	ldr	r3, [sp, #8]
        rc = boot_erase_region(fap_pri, pri_off, sz);
    1230:	4632      	mov	r2, r6
    1232:	1ac9      	subs	r1, r1, r3
    1234:	4648      	mov	r0, r9
    1236:	9104      	str	r1, [sp, #16]
    1238:	f004 fe17 	bl	5e6a <boot_erase_region>
        rc = boot_copy_region(state, fap_sec, fap_pri, sec_off, pri_off, sz);
    123c:	9904      	ldr	r1, [sp, #16]
    123e:	9b05      	ldr	r3, [sp, #20]
    1240:	464a      	mov	r2, r9
    1242:	9100      	str	r1, [sp, #0]
    1244:	4628      	mov	r0, r5
    1246:	4651      	mov	r1, sl
    1248:	9601      	str	r6, [sp, #4]
    124a:	9304      	str	r3, [sp, #16]
    124c:	f7ff fc06 	bl	a5c <boot_copy_region>
        rc = boot_write_status(state, bs);
    1250:	4621      	mov	r1, r4
    1252:	4628      	mov	r0, r5
    1254:	f004 fdd7 	bl	5e06 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    1258:	f04f 0302 	mov.w	r3, #2
    125c:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    125e:	9b04      	ldr	r3, [sp, #16]
    1260:	b120      	cbz	r0, 126c <swap_run+0x1d8>
    1262:	f8d8 2000 	ldr.w	r2, [r8]
    1266:	3201      	adds	r2, #1
    1268:	f8c8 2000 	str.w	r2, [r8]
        rc = boot_erase_region(fap_sec, sec_off, sz);
    126c:	4619      	mov	r1, r3
    126e:	4632      	mov	r2, r6
    1270:	4650      	mov	r0, sl
    1272:	9304      	str	r3, [sp, #16]
    1274:	f004 fdf9 	bl	5e6a <boot_erase_region>
        rc = boot_copy_region(state, fap_pri, fap_sec, pri_up_off, sec_off, sz);
    1278:	9b04      	ldr	r3, [sp, #16]
    127a:	4649      	mov	r1, r9
    127c:	9300      	str	r3, [sp, #0]
    127e:	4628      	mov	r0, r5
    1280:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1284:	9601      	str	r6, [sp, #4]
    1286:	1a9b      	subs	r3, r3, r2
    1288:	4652      	mov	r2, sl
    128a:	f7ff fbe7 	bl	a5c <boot_copy_region>
        rc = boot_write_status(state, bs);
    128e:	4621      	mov	r1, r4
    1290:	4628      	mov	r0, r5
    1292:	f004 fdb8 	bl	5e06 <boot_write_status>
        bs->idx++;
    1296:	6823      	ldr	r3, [r4, #0]
    1298:	3301      	adds	r3, #1
    129a:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    129c:	f04f 0301 	mov.w	r3, #1
    12a0:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    12a2:	b138      	cbz	r0, 12b4 <swap_run+0x220>
    12a4:	f8d8 3000 	ldr.w	r3, [r8]
    12a8:	3301      	adds	r3, #1
    12aa:	f8c8 3000 	str.w	r3, [r8]
    12ae:	e001      	b.n	12b4 <swap_run+0x220>
    if (bs->state == BOOT_STATUS_STATE_1) {
    12b0:	2802      	cmp	r0, #2
    12b2:	d0db      	beq.n	126c <swap_run+0x1d8>
        idx++;
    12b4:	3701      	adds	r7, #1
    12b6:	e74e      	b.n	1156 <swap_run+0xc2>
    12b8:	000076f2 	.word	0x000076f2
    12bc:	0000771b 	.word	0x0000771b
    12c0:	0000774a 	.word	0x0000774a
    12c4:	2000c504 	.word	0x2000c504
    12c8:	2000d330 	.word	0x2000d330

000012cc <cc310_init>:
 */

#include "cc310_glue.h"

int cc310_init(void)
{
    12cc:	b570      	push	{r4, r5, r6, lr}
    /* Only initialize once */
    static bool initialized;

    if (!initialized) {
    12ce:	4d09      	ldr	r5, [pc, #36]	; (12f4 <cc310_init+0x28>)
    12d0:	782b      	ldrb	r3, [r5, #0]
    12d2:	b953      	cbnz	r3, 12ea <cc310_init+0x1e>
    NRF_CRYPTOCELL->ENABLE=1;
    12d4:	2601      	movs	r6, #1
    12d6:	4c08      	ldr	r4, [pc, #32]	; (12f8 <cc310_init+0x2c>)
    12d8:	f8c4 6500 	str.w	r6, [r4, #1280]	; 0x500
        nrf_cc310_enable();
        if (nrf_cc310_bl_init() != 0) {
    12dc:	f003 fbdc 	bl	4a98 <nrf_cc310_bl_init>
    12e0:	b928      	cbnz	r0, 12ee <cc310_init+0x22>
            return -1;
        }
        initialized = true;
    12e2:	702e      	strb	r6, [r5, #0]
    NRF_CRYPTOCELL->ENABLE=0;
    12e4:	f8c4 0500 	str.w	r0, [r4, #1280]	; 0x500
        nrf_cc310_disable();
    }

    return 0;
}
    12e8:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
    12ea:	2000      	movs	r0, #0
    12ec:	e7fc      	b.n	12e8 <cc310_init+0x1c>
            return -1;
    12ee:	f04f 30ff 	mov.w	r0, #4294967295
    12f2:	e7f9      	b.n	12e8 <cc310_init+0x1c>
    12f4:	2000d4e4 	.word	0x2000d4e4
    12f8:	50840000 	.word	0x50840000

000012fc <cc310_ecdsa_verify_secp256r1>:

int cc310_ecdsa_verify_secp256r1(uint8_t *hash,
                                 uint8_t *public_key,
                                 uint8_t *signature,
                                 size_t hash_len)
{
    12fc:	b570      	push	{r4, r5, r6, lr}
    12fe:	b0ae      	sub	sp, #184	; 0xb8
    1300:	461d      	mov	r5, r3
    1302:	4604      	mov	r4, r0
    1304:	e9cd 2102 	strd	r2, r1, [sp, #8]
        int rc;
        nrf_cc310_bl_ecdsa_verify_context_secp256r1_t ctx;
        cc310_init();
    1308:	f7ff ffe0 	bl	12cc <cc310_init>
        nrf_cc310_enable();
        rc = nrf_cc310_bl_ecdsa_verify_secp256r1(&ctx,
    130c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    NRF_CRYPTOCELL->ENABLE=1;
    1310:	2301      	movs	r3, #1
    1312:	4e06      	ldr	r6, [pc, #24]	; (132c <cc310_ecdsa_verify_secp256r1+0x30>)
    1314:	a805      	add	r0, sp, #20
    1316:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
    131a:	4623      	mov	r3, r4
    131c:	9500      	str	r5, [sp, #0]
    131e:	f005 fc5d 	bl	6bdc <nrf_cc310_bl_ecdsa_verify_secp256r1>
    NRF_CRYPTOCELL->ENABLE=0;
    1322:	2300      	movs	r3, #0
    1324:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
                                                 (nrf_cc310_bl_ecc_signature_secp256r1_t  *) signature,
                                                 hash,
                                                 hash_len);
        nrf_cc310_disable();
        return rc;
}
    1328:	b02e      	add	sp, #184	; 0xb8
    132a:	bd70      	pop	{r4, r5, r6, pc}
    132c:	50840000 	.word	0x50840000

00001330 <nrf_cleanup_peripheral>:
{
    nrf_clock_int_disable(NRF_CLOCK, 0xFFFFFFFF);
}

void nrf_cleanup_peripheral(void)
{
    1330:	b510      	push	{r4, lr}
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1332:	2201      	movs	r2, #1
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    1334:	f04f 34ff 	mov.w	r4, #4294967295
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1338:	2100      	movs	r1, #0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    133a:	4b19      	ldr	r3, [pc, #100]	; (13a0 <nrf_cleanup_peripheral+0x70>)
#if defined(NRF_UARTE0)
    nrf_uarte_disable(NRF_UARTE0);
    nrf_uarte_int_disable(NRF_UARTE0, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    133c:	4819      	ldr	r0, [pc, #100]	; (13a4 <nrf_cleanup_peripheral+0x74>)
    133e:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    1340:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1344:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    134c:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    134e:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1352:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    1356:	f5a3 4350 	sub.w	r3, r3, #53248	; 0xd000
    135a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    135e:	2280      	movs	r2, #128	; 0x80
    p_reg->INTENCLR = mask;
    1360:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    1364:	f005 f8e5 	bl	6532 <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    1368:	2280      	movs	r2, #128	; 0x80
    136a:	2100      	movs	r1, #0
    136c:	480e      	ldr	r0, [pc, #56]	; (13a8 <nrf_cleanup_peripheral+0x78>)
    136e:	f005 f8e0 	bl	6532 <memset>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1372:	2100      	movs	r1, #0
    1374:	4b0d      	ldr	r3, [pc, #52]	; (13ac <nrf_cleanup_peripheral+0x7c>)
#if defined(NRF_UARTE1)
    nrf_uarte_disable(NRF_UARTE1);
    nrf_uarte_int_disable(NRF_UARTE1, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    1376:	2280      	movs	r2, #128	; 0x80
    1378:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    137c:	480c      	ldr	r0, [pc, #48]	; (13b0 <nrf_cleanup_peripheral+0x80>)
    p_reg->INTENCLR = mask;
    137e:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    1382:	f005 f8d6 	bl	6532 <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    1386:	2280      	movs	r2, #128	; 0x80
    1388:	2100      	movs	r1, #0
    138a:	480a      	ldr	r0, [pc, #40]	; (13b4 <nrf_cleanup_peripheral+0x84>)
    138c:	f005 f8d1 	bl	6532 <memset>
    return ((p_reg->CHEN & (DPPIC_CHEN_CH0_Enabled << (DPPIC_CHEN_CH0_Pos + channel))) != 0);
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable_all(NRF_DPPIC_Type * p_reg)
{
    p_reg->CHENCLR = 0xFFFFFFFFuL;
    1390:	4b09      	ldr	r3, [pc, #36]	; (13b8 <nrf_cleanup_peripheral+0x88>)
    1392:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    1396:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    139a:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
#endif
#if defined(NRF_DPPIC)
    nrf_dppi_channels_disable_all(NRF_DPPIC);
#endif
    nrf_cleanup_clock();
}
    139e:	bd10      	pop	{r4, pc}
    13a0:	50014000 	.word	0x50014000
    13a4:	50008080 	.word	0x50008080
    13a8:	50008180 	.word	0x50008180
    13ac:	50009000 	.word	0x50009000
    13b0:	50009080 	.word	0x50009080
    13b4:	50009180 	.word	0x50009180
    13b8:	50017000 	.word	0x50017000

000013bc <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    13bc:	680b      	ldr	r3, [r1, #0]
    13be:	3301      	adds	r3, #1
    13c0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    13c2:	4b01      	ldr	r3, [pc, #4]	; (13c8 <char_out+0xc>)
    13c4:	681b      	ldr	r3, [r3, #0]
    13c6:	4718      	bx	r3
    13c8:	2000c508 	.word	0x2000c508

000013cc <__printk_hook_install>:
	_char_out = fn;
    13cc:	4b01      	ldr	r3, [pc, #4]	; (13d4 <__printk_hook_install+0x8>)
    13ce:	6018      	str	r0, [r3, #0]
}
    13d0:	4770      	bx	lr
    13d2:	bf00      	nop
    13d4:	2000c508 	.word	0x2000c508

000013d8 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    13d8:	b507      	push	{r0, r1, r2, lr}
    13da:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
    13dc:	2100      	movs	r1, #0
{
    13de:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
    13e0:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
    13e2:	4803      	ldr	r0, [pc, #12]	; (13f0 <vprintk+0x18>)
    13e4:	a901      	add	r1, sp, #4
    13e6:	f000 f8e9 	bl	15bc <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    13ea:	b003      	add	sp, #12
    13ec:	f85d fb04 	ldr.w	pc, [sp], #4
    13f0:	000013bd 	.word	0x000013bd

000013f4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    13f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    13f8:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
    13fc:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    13fe:	f019 0808 	ands.w	r8, r9, #8
{
    1402:	4693      	mov	fp, r2
	if (processing) {
    1404:	d00e      	beq.n	1424 <process_event+0x30>
		if (evt == EVT_COMPLETE) {
    1406:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1408:	bf0c      	ite	eq
    140a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    140e:	f049 0920 	orrne.w	r9, r9, #32
    1412:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1416:	f38b 8811 	msr	BASEPRI, fp
    141a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    141e:	b003      	add	sp, #12
    1420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				transit(mgr, transition_complete);
    1424:	f8df a190 	ldr.w	sl, [pc, #400]	; 15b8 <process_event+0x1c4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1428:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    142c:	2902      	cmp	r1, #2
    142e:	d107      	bne.n	1440 <process_event+0x4c>
			evt = process_recheck(mgr);
    1430:	4620      	mov	r0, r4
    1432:	f004 fef7 	bl	6224 <process_recheck>
		if (evt == EVT_NOP) {
    1436:	2800      	cmp	r0, #0
    1438:	d0ed      	beq.n	1416 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    143a:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    143c:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    143e:	d14b      	bne.n	14d8 <process_event+0xe4>
			res = mgr->last_res;
    1440:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1442:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1444:	2f00      	cmp	r7, #0
    1446:	da15      	bge.n	1474 <process_event+0x80>
		*clients = mgr->clients;
    1448:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    144a:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    144e:	e9c4 8800 	strd	r8, r8, [r4]
    1452:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1456:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    1458:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    145a:	8b21      	ldrh	r1, [r4, #24]
    145c:	f001 0207 	and.w	r2, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1460:	454a      	cmp	r2, r9
    1462:	d002      	beq.n	146a <process_event+0x76>
		if (do_monitors
    1464:	68a3      	ldr	r3, [r4, #8]
    1466:	2b00      	cmp	r3, #0
    1468:	d157      	bne.n	151a <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    146a:	b90d      	cbnz	r5, 1470 <process_event+0x7c>
		    || (transit != NULL)) {
    146c:	2e00      	cmp	r6, #0
    146e:	d06f      	beq.n	1550 <process_event+0x15c>
    1470:	2300      	movs	r3, #0
    1472:	e053      	b.n	151c <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1474:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1478:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    147a:	2a01      	cmp	r2, #1
    147c:	d81d      	bhi.n	14ba <process_event+0xc6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    147e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1482:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1484:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1486:	b289      	uxth	r1, r1
    1488:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    148c:	d10a      	bne.n	14a4 <process_event+0xb0>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    148e:	b13d      	cbz	r5, 14a0 <process_event+0xac>
    1490:	462a      	mov	r2, r5
    1492:	8b63      	ldrh	r3, [r4, #26]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    1494:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    1496:	3301      	adds	r3, #1
    1498:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    149a:	2a00      	cmp	r2, #0
    149c:	d1fa      	bne.n	1494 <process_event+0xa0>
    149e:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14a0:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    14a4:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    14a6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    14a8:	f004 febc 	bl	6224 <process_recheck>
    14ac:	2800      	cmp	r0, #0
    14ae:	d0d3      	beq.n	1458 <process_event+0x64>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    14b0:	8b23      	ldrh	r3, [r4, #24]
    14b2:	f043 0320 	orr.w	r3, r3, #32
    14b6:	8323      	strh	r3, [r4, #24]
    14b8:	e7ce      	b.n	1458 <process_event+0x64>
	} else if (state == ONOFF_STATE_TO_OFF) {
    14ba:	2b04      	cmp	r3, #4
    14bc:	d10a      	bne.n	14d4 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14be:	f021 0107 	bic.w	r1, r1, #7
    14c2:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    14c4:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    14c6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    14c8:	f004 feac 	bl	6224 <process_recheck>
    14cc:	b110      	cbz	r0, 14d4 <process_event+0xe0>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    14ce:	f041 0120 	orr.w	r1, r1, #32
    14d2:	8321      	strh	r1, [r4, #24]
    14d4:	2500      	movs	r5, #0
    14d6:	e7bf      	b.n	1458 <process_event+0x64>
		} else if (evt == EVT_START) {
    14d8:	2803      	cmp	r0, #3
    14da:	d109      	bne.n	14f0 <process_event+0xfc>
			transit = mgr->transitions->start;
    14dc:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14de:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    14e2:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14e4:	f043 0306 	orr.w	r3, r3, #6
}
    14e8:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    14ea:	8323      	strh	r3, [r4, #24]
		res = 0;
    14ec:	462f      	mov	r7, r5
    14ee:	e7b4      	b.n	145a <process_event+0x66>
		} else if (evt == EVT_STOP) {
    14f0:	2804      	cmp	r0, #4
    14f2:	d106      	bne.n	1502 <process_event+0x10e>
			transit = mgr->transitions->stop;
    14f4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14f6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    14fa:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14fc:	f043 0304 	orr.w	r3, r3, #4
    1500:	e7f2      	b.n	14e8 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    1502:	2805      	cmp	r0, #5
    1504:	d106      	bne.n	1514 <process_event+0x120>
			transit = mgr->transitions->reset;
    1506:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1508:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    150c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    150e:	f043 0305 	orr.w	r3, r3, #5
    1512:	e7e9      	b.n	14e8 <process_event+0xf4>
    1514:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    1516:	462e      	mov	r6, r5
    1518:	e7e8      	b.n	14ec <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    151a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    151c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1520:	8321      	strh	r1, [r4, #24]
    1522:	f38b 8811 	msr	BASEPRI, fp
    1526:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    152a:	bb03      	cbnz	r3, 156e <process_event+0x17a>
	while (!sys_slist_is_empty(list)) {
    152c:	2d00      	cmp	r5, #0
    152e:	d131      	bne.n	1594 <process_event+0x1a0>
			if (transit != NULL) {
    1530:	b116      	cbz	r6, 1538 <process_event+0x144>
				transit(mgr, transition_complete);
    1532:	4651      	mov	r1, sl
    1534:	4620      	mov	r0, r4
    1536:	47b0      	blx	r6
	__asm__ volatile(
    1538:	f04f 0320 	mov.w	r3, #32
    153c:	f3ef 8b11 	mrs	fp, BASEPRI
    1540:	f383 8812 	msr	BASEPRI_MAX, r3
    1544:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1548:	8b23      	ldrh	r3, [r4, #24]
    154a:	f023 0308 	bic.w	r3, r3, #8
    154e:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1550:	8b23      	ldrh	r3, [r4, #24]
    1552:	06da      	lsls	r2, r3, #27
    1554:	d527      	bpl.n	15a6 <process_event+0x1b2>
			evt = EVT_COMPLETE;
    1556:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1558:	f023 0310 	bic.w	r3, r3, #16
    155c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    155e:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    1562:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    1566:	2900      	cmp	r1, #0
    1568:	f47f af60 	bne.w	142c <process_event+0x38>
out:
    156c:	e753      	b.n	1416 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    156e:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1570:	2900      	cmp	r1, #0
    1572:	d0db      	beq.n	152c <process_event+0x138>
	return node->next;
    1574:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    1578:	463b      	mov	r3, r7
    157a:	4620      	mov	r0, r4
    157c:	f8d1 b004 	ldr.w	fp, [r1, #4]
    1580:	9201      	str	r2, [sp, #4]
    1582:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1584:	9a01      	ldr	r2, [sp, #4]
    1586:	f1b9 0f00 	cmp.w	r9, #0
    158a:	d0cf      	beq.n	152c <process_event+0x138>
    158c:	4649      	mov	r1, r9
    158e:	f8d9 9000 	ldr.w	r9, [r9]
    1592:	e7f1      	b.n	1578 <process_event+0x184>
    1594:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    1596:	463b      	mov	r3, r7
    1598:	4620      	mov	r0, r4
    159a:	9201      	str	r2, [sp, #4]
    159c:	682d      	ldr	r5, [r5, #0]
    159e:	f004 fe5d 	bl	625c <notify_one>
	while (!sys_slist_is_empty(list)) {
    15a2:	9a01      	ldr	r2, [sp, #4]
    15a4:	e7c2      	b.n	152c <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    15a6:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    15aa:	bf1e      	ittt	ne
    15ac:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    15b0:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    15b2:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    15b4:	e7d3      	b.n	155e <process_event+0x16a>
    15b6:	bf00      	nop
    15b8:	00006289 	.word	0x00006289

000015bc <cbvprintf>:
 * @param ap Variable parameters
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int cbvprintf(cbprintf_cb out, void *ctx, const char *fmt, va_list ap)
{
    15bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15c0:	468a      	mov	sl, r1
	size_t count = 0;
    15c2:	f04f 0900 	mov.w	r9, #0
{
    15c6:	b08f      	sub	sp, #60	; 0x3c
    15c8:	461d      	mov	r5, r3
	char *prefix, *data;
	int min_width, precision, data_len;
	char padding_mode, length_mod, special;

	/* we pre-increment in the loop  afterwards */
	fmt--;
    15ca:	1e53      	subs	r3, r2, #1
{
    15cc:	9001      	str	r0, [sp, #4]
	fmt--;
    15ce:	9302      	str	r3, [sp, #8]

start:
	while (*++fmt != '%') {
    15d0:	9b02      	ldr	r3, [sp, #8]
    15d2:	7858      	ldrb	r0, [r3, #1]
    15d4:	1c5c      	adds	r4, r3, #1
    15d6:	2825      	cmp	r0, #37	; 0x25
    15d8:	d121      	bne.n	161e <cbvprintf+0x62>
	min_width = -1;
	precision = -1;
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;
    15da:	f04f 0c00 	mov.w	ip, #0
	precision = -1;
    15de:	f04f 37ff 	mov.w	r7, #4294967295

	for (fmt++ ; ; fmt++) {
    15e2:	4618      	mov	r0, r3
	length_mod = 0;
    15e4:	4661      	mov	r1, ip
	min_width = -1;
    15e6:	463c      	mov	r4, r7
				precision = 10 * precision + *fmt - '0';
			} else {
				if (min_width < 0) {
					min_width = 0;
				}
				min_width = 10 * min_width + *fmt - '0';
    15e8:	260a      	movs	r6, #10
	for (fmt++ ; ; fmt++) {
    15ea:	3002      	adds	r0, #2
	padding_mode = 0;
    15ec:	f8cd c00c 	str.w	ip, [sp, #12]
		switch (*fmt) {
    15f0:	7802      	ldrb	r2, [r0, #0]
    15f2:	9002      	str	r0, [sp, #8]
    15f4:	2a39      	cmp	r2, #57	; 0x39
    15f6:	f100 0001 	add.w	r0, r0, #1
    15fa:	d859      	bhi.n	16b0 <cbvprintf+0xf4>
    15fc:	2a1f      	cmp	r2, #31
    15fe:	d818      	bhi.n	1632 <cbvprintf+0x76>
    1600:	2a00      	cmp	r2, #0
    1602:	f000 81f7 	beq.w	19f4 <cbvprintf+0x438>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
    1606:	4651      	mov	r1, sl
    1608:	9b01      	ldr	r3, [sp, #4]
    160a:	2025      	movs	r0, #37	; 0x25
    160c:	4798      	blx	r3
			OUTC(*fmt);
    160e:	9b02      	ldr	r3, [sp, #8]
    1610:	4651      	mov	r1, sl
    1612:	7818      	ldrb	r0, [r3, #0]
    1614:	9b01      	ldr	r3, [sp, #4]
    1616:	4798      	blx	r3
    1618:	f109 0902 	add.w	r9, r9, #2
			goto start;
    161c:	e7d8      	b.n	15d0 <cbvprintf+0x14>
		if (*fmt == '\0') {
    161e:	2800      	cmp	r0, #0
    1620:	f000 81e8 	beq.w	19f4 <cbvprintf+0x438>
		OUTC(*fmt);
    1624:	4651      	mov	r1, sl
    1626:	9b01      	ldr	r3, [sp, #4]
    1628:	4798      	blx	r3
    162a:	f109 0901 	add.w	r9, r9, #1
	while (*++fmt != '%') {
    162e:	9402      	str	r4, [sp, #8]
    1630:	e7ce      	b.n	15d0 <cbvprintf+0x14>
		switch (*fmt) {
    1632:	f1a2 0320 	sub.w	r3, r2, #32
    1636:	2b19      	cmp	r3, #25
    1638:	d8e5      	bhi.n	1606 <cbvprintf+0x4a>
    163a:	f20f 0e08 	addw	lr, pc, #8
    163e:	f85e f023 	ldr.w	pc, [lr, r3, lsl #2]
    1642:	bf00      	nop
    1644:	000016ad 	.word	0x000016ad
    1648:	00001607 	.word	0x00001607
    164c:	00001607 	.word	0x00001607
    1650:	000016ad 	.word	0x000016ad
    1654:	00001607 	.word	0x00001607
    1658:	00001731 	.word	0x00001731
    165c:	00001607 	.word	0x00001607
    1660:	00001607 	.word	0x00001607
    1664:	00001607 	.word	0x00001607
    1668:	00001607 	.word	0x00001607
    166c:	00001773 	.word	0x00001773
    1670:	000016ad 	.word	0x000016ad
    1674:	00001607 	.word	0x00001607
    1678:	00001787 	.word	0x00001787
    167c:	0000173f 	.word	0x0000173f
    1680:	00001607 	.word	0x00001607
    1684:	0000174b 	.word	0x0000174b
    1688:	00001767 	.word	0x00001767
    168c:	00001767 	.word	0x00001767
    1690:	00001767 	.word	0x00001767
    1694:	00001767 	.word	0x00001767
    1698:	00001767 	.word	0x00001767
    169c:	00001767 	.word	0x00001767
    16a0:	00001767 	.word	0x00001767
    16a4:	00001767 	.word	0x00001767
    16a8:	00001767 	.word	0x00001767
    16ac:	4694      	mov	ip, r2
    16ae:	e79f      	b.n	15f0 <cbvprintf+0x34>
    16b0:	2a58      	cmp	r2, #88	; 0x58
    16b2:	f000 811b 	beq.w	18ec <cbvprintf+0x330>
    16b6:	f1a2 0363 	sub.w	r3, r2, #99	; 0x63
    16ba:	fa5f fe83 	uxtb.w	lr, r3
    16be:	f1be 0f17 	cmp.w	lr, #23
    16c2:	d8a0      	bhi.n	1606 <cbvprintf+0x4a>
    16c4:	2b17      	cmp	r3, #23
    16c6:	d89e      	bhi.n	1606 <cbvprintf+0x4a>
    16c8:	f20f 0e04 	addw	lr, pc, #4
    16cc:	f85e f023 	ldr.w	pc, [lr, r3, lsl #2]
    16d0:	0000194f 	.word	0x0000194f
    16d4:	000017ad 	.word	0x000017ad
    16d8:	00001607 	.word	0x00001607
    16dc:	00001607 	.word	0x00001607
    16e0:	00001607 	.word	0x00001607
    16e4:	0000178d 	.word	0x0000178d
    16e8:	000017ad 	.word	0x000017ad
    16ec:	00001607 	.word	0x00001607
    16f0:	00001607 	.word	0x00001607
    16f4:	0000178d 	.word	0x0000178d
    16f8:	00001607 	.word	0x00001607
    16fc:	00001607 	.word	0x00001607
    1700:	00001607 	.word	0x00001607
    1704:	00001897 	.word	0x00001897
    1708:	00001607 	.word	0x00001607
    170c:	00001607 	.word	0x00001607
    1710:	0000192f 	.word	0x0000192f
    1714:	00001607 	.word	0x00001607
    1718:	000017ad 	.word	0x000017ad
    171c:	00001607 	.word	0x00001607
    1720:	00001607 	.word	0x00001607
    1724:	00001897 	.word	0x00001897
    1728:	00001607 	.word	0x00001607
    172c:	0000178d 	.word	0x0000178d
			OUTC('%');
    1730:	4651      	mov	r1, sl
    1732:	2025      	movs	r0, #37	; 0x25
    1734:	9b01      	ldr	r3, [sp, #4]
    1736:	4798      	blx	r3
    1738:	f109 0901 	add.w	r9, r9, #1
			goto start;
    173c:	e748      	b.n	15d0 <cbvprintf+0x14>
			padding_mode &= (char)~PAD_ZERO;
    173e:	9b03      	ldr	r3, [sp, #12]
			precision = 0;
    1740:	2700      	movs	r7, #0
			padding_mode &= (char)~PAD_ZERO;
    1742:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1746:	9303      	str	r3, [sp, #12]
			continue;
    1748:	e752      	b.n	15f0 <cbvprintf+0x34>
			if (min_width < 0 && precision < 0 && !padding_mode) {
    174a:	2c00      	cmp	r4, #0
    174c:	da0b      	bge.n	1766 <cbvprintf+0x1aa>
    174e:	2f00      	cmp	r7, #0
    1750:	da0b      	bge.n	176a <cbvprintf+0x1ae>
    1752:	9b03      	ldr	r3, [sp, #12]
    1754:	2b00      	cmp	r3, #0
    1756:	f000 8149 	beq.w	19ec <cbvprintf+0x430>
				min_width = 10 * min_width + *fmt - '0';
    175a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    175e:	fb06 2404 	mla	r4, r6, r4, r2
    1762:	3c30      	subs	r4, #48	; 0x30
    1764:	e744      	b.n	15f0 <cbvprintf+0x34>
			if (precision >= 0) {
    1766:	2f00      	cmp	r7, #0
    1768:	dbf7      	blt.n	175a <cbvprintf+0x19e>
				precision = 10 * precision + *fmt - '0';
    176a:	fb06 2707 	mla	r7, r6, r7, r2
    176e:	3f30      	subs	r7, #48	; 0x30
    1770:	e73e      	b.n	15f0 <cbvprintf+0x34>
			if (precision >= 0) {
    1772:	2f00      	cmp	r7, #0
    1774:	f855 3b04 	ldr.w	r3, [r5], #4
    1778:	db01      	blt.n	177e <cbvprintf+0x1c2>
				precision = va_arg(ap, int);
    177a:	461f      	mov	r7, r3
    177c:	e738      	b.n	15f0 <cbvprintf+0x34>
				if (min_width < 0) {
    177e:	1e1c      	subs	r4, r3, #0
    1780:	f6bf af36 	bge.w	15f0 <cbvprintf+0x34>
					min_width = -min_width;
    1784:	4264      	negs	r4, r4
		switch (*fmt) {
    1786:	2302      	movs	r3, #2
				padding_mode = PAD_ZERO;
    1788:	9303      	str	r3, [sp, #12]
    178a:	e731      	b.n	15f0 <cbvprintf+0x34>
			if (*fmt == 'h' && length_mod == 'h') {
    178c:	2a68      	cmp	r2, #104	; 0x68
    178e:	d103      	bne.n	1798 <cbvprintf+0x1dc>
    1790:	2968      	cmp	r1, #104	; 0x68
    1792:	d106      	bne.n	17a2 <cbvprintf+0x1e6>
				length_mod = 'H';
    1794:	2148      	movs	r1, #72	; 0x48
    1796:	e72b      	b.n	15f0 <cbvprintf+0x34>
			} else if (*fmt == 'l' && length_mod == 'l') {
    1798:	2a6c      	cmp	r2, #108	; 0x6c
    179a:	d102      	bne.n	17a2 <cbvprintf+0x1e6>
    179c:	296c      	cmp	r1, #108	; 0x6c
    179e:	f000 8127 	beq.w	19f0 <cbvprintf+0x434>
			} else if (length_mod == '\0') {
    17a2:	2900      	cmp	r1, #0
    17a4:	f47f af2f 	bne.w	1606 <cbvprintf+0x4a>
    17a8:	4611      	mov	r1, r2
		switch (*fmt) {
    17aa:	e721      	b.n	15f0 <cbvprintf+0x34>
			if (length_mod == 'z') {
    17ac:	297a      	cmp	r1, #122	; 0x7a
    17ae:	d107      	bne.n	17c0 <cbvprintf+0x204>
			} else if (*fmt == 'u') {
    17b0:	2a75      	cmp	r2, #117	; 0x75
				precision = va_arg(ap, int);
    17b2:	f105 0604 	add.w	r6, r5, #4
				d = va_arg(ap, unsigned int);
    17b6:	682d      	ldr	r5, [r5, #0]
			} else if (*fmt == 'u') {
    17b8:	d162      	bne.n	1880 <cbvprintf+0x2c4>
				d = va_arg(ap, unsigned int);
    17ba:	f04f 0800 	mov.w	r8, #0
    17be:	e00d      	b.n	17dc <cbvprintf+0x220>
			} else if (length_mod == 'l') {
    17c0:	296c      	cmp	r1, #108	; 0x6c
    17c2:	d0f5      	beq.n	17b0 <cbvprintf+0x1f4>
			} else if (length_mod == 'L') {
    17c4:	294c      	cmp	r1, #76	; 0x4c
    17c6:	d1f3      	bne.n	17b0 <cbvprintf+0x1f4>
					unsigned long long llu =
    17c8:	1deb      	adds	r3, r5, #7
    17ca:	f023 0307 	bic.w	r3, r3, #7
    17ce:	461e      	mov	r6, r3
				if (*fmt == 'u') {
    17d0:	2a75      	cmp	r2, #117	; 0x75
					unsigned long long llu =
    17d2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
				if (*fmt == 'u') {
    17d6:	d107      	bne.n	17e8 <cbvprintf+0x22c>
					unsigned long long llu =
    17d8:	e9d3 5800 	ldrd	r5, r8, [r3]
			} else if (special == ' ') {
    17dc:	f1bc 0f20 	cmp.w	ip, #32
    17e0:	d151      	bne.n	1886 <cbvprintf+0x2ca>
				prefix = " ";
    17e2:	4b86      	ldr	r3, [pc, #536]	; (19fc <cbvprintf+0x440>)
				min_width--;
    17e4:	3c01      	subs	r4, #1
    17e6:	e009      	b.n	17fc <cbvprintf+0x240>
					d = (int_value_type) lld;
    17e8:	4605      	mov	r5, r0
    17ea:	4688      	mov	r8, r1
			if (*fmt != 'u' && (int_value_type)d < 0) {
    17ec:	f1b8 0f00 	cmp.w	r8, #0
    17f0:	daf4      	bge.n	17dc <cbvprintf+0x220>
				d = -d;
    17f2:	426d      	negs	r5, r5
				prefix = "-";
    17f4:	4b82      	ldr	r3, [pc, #520]	; (1a00 <cbvprintf+0x444>)
				d = -d;
    17f6:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
				min_width--;
    17fa:	3c01      	subs	r4, #1
	int i = 0;
    17fc:	f04f 0b00 	mov.w	fp, #0
	prefix = "";
    1800:	9300      	str	r3, [sp, #0]
	int i = 0;
    1802:	ab0d      	add	r3, sp, #52	; 0x34
    1804:	9305      	str	r3, [sp, #20]
		unsigned int c = num % base;
    1806:	4628      	mov	r0, r5
    1808:	4641      	mov	r1, r8
    180a:	220a      	movs	r2, #10
    180c:	2300      	movs	r3, #0
    180e:	f8cd b010 	str.w	fp, [sp, #16]
    1812:	f7fe fc97 	bl	144 <__aeabi_uldivmod>
		buftop[--i] = c + '0';
    1816:	9b05      	ldr	r3, [sp, #20]
    1818:	3230      	adds	r2, #48	; 0x30
    181a:	f803 2901 	strb.w	r2, [r3], #-1
    181e:	e9cd 3505 	strd	r3, r5, [sp, #20]
		num /= base;
    1822:	4628      	mov	r0, r5
    1824:	2300      	movs	r3, #0
    1826:	4641      	mov	r1, r8
    1828:	220a      	movs	r2, #10
    182a:	f8cd 801c 	str.w	r8, [sp, #28]
    182e:	f7fe fc89 	bl	144 <__aeabi_uldivmod>
	} while (num);
    1832:	9b06      	ldr	r3, [sp, #24]
		num /= base;
    1834:	4605      	mov	r5, r0
	} while (num);
    1836:	2b0a      	cmp	r3, #10
    1838:	9b07      	ldr	r3, [sp, #28]
		num /= base;
    183a:	4688      	mov	r8, r1
	} while (num);
    183c:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
    1840:	f10b 3bff 	add.w	fp, fp, #4294967295
	} while (num);
    1844:	d2df      	bcs.n	1806 <cbvprintf+0x24a>
	return -i;
    1846:	9b04      	ldr	r3, [sp, #16]
			data = buf + sizeof(buf) - data_len;
    1848:	9a04      	ldr	r2, [sp, #16]
	return -i;
    184a:	f1c3 0b01 	rsb	fp, r3, #1
			data = buf + sizeof(buf) - data_len;
    184e:	ab0e      	add	r3, sp, #56	; 0x38
    1850:	189d      	adds	r5, r3, r2
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1852:	2f00      	cmp	r7, #0
			data = buf + sizeof(buf) - data_len;
    1854:	f1a5 0504 	sub.w	r5, r5, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1858:	da04      	bge.n	1864 <cbvprintf+0x2a8>
    185a:	9b03      	ldr	r3, [sp, #12]
    185c:	f013 0f01 	tst.w	r3, #1
    1860:	bf18      	it	ne
    1862:	4627      	movne	r7, r4
		precision -= data_len;
		if (precision > 0) {
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
    1864:	9b03      	ldr	r3, [sp, #12]
		precision -= data_len;
    1866:	eba7 080b 	sub.w	r8, r7, fp
		if (precision > 0) {
    186a:	f1b8 0f00 	cmp.w	r8, #0
		min_width -= data_len;
    186e:	bfd4      	ite	le
    1870:	eba4 040b 	suble.w	r4, r4, fp
			min_width -= precision;
    1874:	1be4      	subgt	r4, r4, r7
		if (!(padding_mode & PAD_TAIL)) {
    1876:	079b      	lsls	r3, r3, #30
    1878:	f100 8081 	bmi.w	197e <cbvprintf+0x3c2>
    187c:	4627      	mov	r7, r4
    187e:	e077      	b.n	1970 <cbvprintf+0x3b4>
				d = va_arg(ap, int);
    1880:	ea4f 78e5 	mov.w	r8, r5, asr #31
    1884:	e7b2      	b.n	17ec <cbvprintf+0x230>
			} else if (special == '+') {
    1886:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
				prefix = "+";
    188a:	bf0a      	itet	eq
    188c:	4b5d      	ldreq	r3, [pc, #372]	; (1a04 <cbvprintf+0x448>)
	prefix = "";
    188e:	4b5e      	ldrne	r3, [pc, #376]	; (1a08 <cbvprintf+0x44c>)
				min_width--;
    1890:	f104 34ff 	addeq.w	r4, r4, #4294967295
    1894:	e7b2      	b.n	17fc <cbvprintf+0x240>
			if (*fmt == 'p') {
    1896:	2a70      	cmp	r2, #112	; 0x70
    1898:	d128      	bne.n	18ec <cbvprintf+0x330>
				x = (uintptr_t)va_arg(ap, void *);
    189a:	462e      	mov	r6, r5
    189c:	f856 1b04 	ldr.w	r1, [r6], #4
    18a0:	2300      	movs	r3, #0
				if (x == (uint_value_type)0) {
    18a2:	2900      	cmp	r1, #0
    18a4:	d05c      	beq.n	1960 <cbvprintf+0x3a4>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    18a6:	4859      	ldr	r0, [pc, #356]	; (1a0c <cbvprintf+0x450>)
    18a8:	9000      	str	r0, [sp, #0]
				min_width -= 2;
    18aa:	3c02      	subs	r4, #2
	int i = 0;
    18ac:	2500      	movs	r5, #0
			data_len = convert_value(x, 16, ALPHA(*fmt),
    18ae:	f002 0260 	and.w	r2, r2, #96	; 0x60
    18b2:	f1a2 0839 	sub.w	r8, r2, #57	; 0x39
	int i = 0;
    18b6:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
		unsigned int c = num % base;
    18ba:	f001 020f 	and.w	r2, r1, #15
		if (c >= 10) {
    18be:	2a09      	cmp	r2, #9
			c += alpha;
    18c0:	bf88      	it	hi
    18c2:	4442      	addhi	r2, r8
		buftop[--i] = c + '0';
    18c4:	3230      	adds	r2, #48	; 0x30
    18c6:	f80e 2901 	strb.w	r2, [lr], #-1
	} while (num);
    18ca:	2910      	cmp	r1, #16
		num /= base;
    18cc:	ea4f 1211 	mov.w	r2, r1, lsr #4
    18d0:	ea42 7203 	orr.w	r2, r2, r3, lsl #28
    18d4:	ea4f 1013 	mov.w	r0, r3, lsr #4
	} while (num);
    18d8:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
    18dc:	f105 3cff 	add.w	ip, r5, #4294967295
	} while (num);
    18e0:	d221      	bcs.n	1926 <cbvprintf+0x36a>
			data = buf + sizeof(buf) - data_len;
    18e2:	ab0e      	add	r3, sp, #56	; 0x38
	return -i;
    18e4:	f1c5 0b01 	rsb	fp, r5, #1
			data = buf + sizeof(buf) - data_len;
    18e8:	441d      	add	r5, r3
    18ea:	e7b2      	b.n	1852 <cbvprintf+0x296>
			} else if (length_mod == 'l') {
    18ec:	296c      	cmp	r1, #108	; 0x6c
    18ee:	d104      	bne.n	18fa <cbvprintf+0x33e>
				x = va_arg(ap, unsigned int);
    18f0:	462e      	mov	r6, r5
    18f2:	2300      	movs	r3, #0
    18f4:	f856 1b04 	ldr.w	r1, [r6], #4
    18f8:	e008      	b.n	190c <cbvprintf+0x350>
			} else if (length_mod == 'L') {
    18fa:	294c      	cmp	r1, #76	; 0x4c
    18fc:	d1f8      	bne.n	18f0 <cbvprintf+0x334>
				unsigned long long llx =
    18fe:	3507      	adds	r5, #7
    1900:	f025 0507 	bic.w	r5, r5, #7
    1904:	462e      	mov	r6, r5
    1906:	686b      	ldr	r3, [r5, #4]
    1908:	f856 1b08 	ldr.w	r1, [r6], #8
			if (special == '#') {
    190c:	f1bc 0f23 	cmp.w	ip, #35	; 0x23
    1910:	d106      	bne.n	1920 <cbvprintf+0x364>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1912:	4d3f      	ldr	r5, [pc, #252]	; (1a10 <cbvprintf+0x454>)
    1914:	f012 0f20 	tst.w	r2, #32
    1918:	483c      	ldr	r0, [pc, #240]	; (1a0c <cbvprintf+0x450>)
    191a:	bf08      	it	eq
    191c:	4628      	moveq	r0, r5
    191e:	e7c3      	b.n	18a8 <cbvprintf+0x2ec>
	prefix = "";
    1920:	4839      	ldr	r0, [pc, #228]	; (1a08 <cbvprintf+0x44c>)
    1922:	9000      	str	r0, [sp, #0]
    1924:	e7c2      	b.n	18ac <cbvprintf+0x2f0>
		buftop[--i] = c + '0';
    1926:	4665      	mov	r5, ip
		num /= base;
    1928:	4611      	mov	r1, r2
    192a:	4603      	mov	r3, r0
    192c:	e7c5      	b.n	18ba <cbvprintf+0x2fe>
			data = va_arg(ap, char *);
    192e:	462e      	mov	r6, r5
    1930:	f856 5b04 	ldr.w	r5, [r6], #4
			data_len = strlen(data);
    1934:	4628      	mov	r0, r5
    1936:	f004 fdcd 	bl	64d4 <strlen>
			if (precision >= 0 && data_len > precision) {
    193a:	2f00      	cmp	r7, #0
			data_len = strlen(data);
    193c:	4683      	mov	fp, r0
			if (precision >= 0 && data_len > precision) {
    193e:	db02      	blt.n	1946 <cbvprintf+0x38a>
    1940:	42b8      	cmp	r0, r7
    1942:	bfa8      	it	ge
    1944:	46bb      	movge	fp, r7
    1946:	4b30      	ldr	r3, [pc, #192]	; (1a08 <cbvprintf+0x44c>)
    1948:	2700      	movs	r7, #0
    194a:	9300      	str	r3, [sp, #0]
    194c:	e78a      	b.n	1864 <cbvprintf+0x2a8>
			int c = va_arg(ap, int);
    194e:	462e      	mov	r6, r5
			buf[0] = c;
    1950:	f856 3b04 	ldr.w	r3, [r6], #4
			data_len = 1;
    1954:	f04f 0b01 	mov.w	fp, #1
			buf[0] = c;
    1958:	f88d 3020 	strb.w	r3, [sp, #32]
			data = buf;
    195c:	ad08      	add	r5, sp, #32
    195e:	e7f2      	b.n	1946 <cbvprintf+0x38a>
					data_len = 5;
    1960:	f04f 0b05 	mov.w	fp, #5
					data = "(nil)";
    1964:	4d2b      	ldr	r5, [pc, #172]	; (1a14 <cbvprintf+0x458>)
    1966:	e7ee      	b.n	1946 <cbvprintf+0x38a>
			while (--min_width >= 0) {
				OUTC(' ');
    1968:	4651      	mov	r1, sl
    196a:	2020      	movs	r0, #32
    196c:	9b01      	ldr	r3, [sp, #4]
    196e:	4798      	blx	r3
			while (--min_width >= 0) {
    1970:	3f01      	subs	r7, #1
    1972:	d5f9      	bpl.n	1968 <cbvprintf+0x3ac>
    1974:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
    1978:	3c01      	subs	r4, #1
    197a:	4499      	add	r9, r3
    197c:	1ae4      	subs	r4, r4, r3
    197e:	9b00      	ldr	r3, [sp, #0]
    1980:	eba9 0903 	sub.w	r9, r9, r3
    1984:	e004      	b.n	1990 <cbvprintf+0x3d4>
    1986:	9300      	str	r3, [sp, #0]
			}
		}
		while (*prefix) {
			OUTC(*prefix++);
    1988:	4651      	mov	r1, sl
    198a:	9b01      	ldr	r3, [sp, #4]
    198c:	4798      	blx	r3
    198e:	9b00      	ldr	r3, [sp, #0]
    1990:	eb09 0703 	add.w	r7, r9, r3
		while (*prefix) {
    1994:	f813 0b01 	ldrb.w	r0, [r3], #1
    1998:	2800      	cmp	r0, #0
    199a:	d1f4      	bne.n	1986 <cbvprintf+0x3ca>
		precision -= data_len;
    199c:	46c1      	mov	r9, r8
		}
		while (--precision >= 0) {
    199e:	f1b9 0901 	subs.w	r9, r9, #1
    19a2:	d513      	bpl.n	19cc <cbvprintf+0x410>
    19a4:	46d9      	mov	r9, fp
    19a6:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
			OUTC('0');
		}
		while (--data_len >= 0) {
    19aa:	f1b9 0901 	subs.w	r9, r9, #1
    19ae:	d512      	bpl.n	19d6 <cbvprintf+0x41a>
    19b0:	f1bb 0f00 	cmp.w	fp, #0
    19b4:	bfa8      	it	ge
    19b6:	44d8      	addge	r8, fp
    19b8:	4625      	mov	r5, r4
			OUTC(*data++);
		}
		while (--min_width >= 0) {
    19ba:	3d01      	subs	r5, #1
    19bc:	d511      	bpl.n	19e2 <cbvprintf+0x426>
    19be:	2c00      	cmp	r4, #0
    19c0:	bfa8      	it	ge
    19c2:	44a0      	addge	r8, r4
    19c4:	4635      	mov	r5, r6
    19c6:	eb08 0907 	add.w	r9, r8, r7
    19ca:	e601      	b.n	15d0 <cbvprintf+0x14>
			OUTC('0');
    19cc:	4651      	mov	r1, sl
    19ce:	9b01      	ldr	r3, [sp, #4]
    19d0:	2030      	movs	r0, #48	; 0x30
    19d2:	4798      	blx	r3
    19d4:	e7e3      	b.n	199e <cbvprintf+0x3e2>
			OUTC(*data++);
    19d6:	4651      	mov	r1, sl
    19d8:	f815 0b01 	ldrb.w	r0, [r5], #1
    19dc:	9b01      	ldr	r3, [sp, #4]
    19de:	4798      	blx	r3
    19e0:	e7e3      	b.n	19aa <cbvprintf+0x3ee>
			OUTC(' ');
    19e2:	4651      	mov	r1, sl
    19e4:	9b01      	ldr	r3, [sp, #4]
    19e6:	2020      	movs	r0, #32
    19e8:	4798      	blx	r3
    19ea:	e7e6      	b.n	19ba <cbvprintf+0x3fe>
				padding_mode = PAD_ZERO;
    19ec:	2301      	movs	r3, #1
    19ee:	e6cb      	b.n	1788 <cbvprintf+0x1cc>
				length_mod = 'L';
    19f0:	214c      	movs	r1, #76	; 0x4c
    19f2:	e5fd      	b.n	15f0 <cbvprintf+0x34>
		}

		goto start;
	}
}
    19f4:	4648      	mov	r0, r9
    19f6:	b00f      	add	sp, #60	; 0x3c
    19f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    19fc:	00007bae 	.word	0x00007bae
    1a00:	000077d6 	.word	0x000077d6
    1a04:	000077d8 	.word	0x000077d8
    1a08:	00007f4f 	.word	0x00007f4f
    1a0c:	000077dd 	.word	0x000077dd
    1a10:	000077da 	.word	0x000077da
    1a14:	000077e0 	.word	0x000077e0

00001a18 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1a18:	b508      	push	{r3, lr}
    1a1a:	f04f 0220 	mov.w	r2, #32
    1a1e:	f3ef 8311 	mrs	r3, BASEPRI
    1a22:	f382 8812 	msr	BASEPRI_MAX, r2
    1a26:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1a2a:	f000 fb99 	bl	2160 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1a2e:	4803      	ldr	r0, [pc, #12]	; (1a3c <sys_reboot+0x24>)
    1a30:	f004 fbeb 	bl	620a <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1a34:	f000 f880 	bl	1b38 <arch_cpu_idle>
    1a38:	e7fc      	b.n	1a34 <sys_reboot+0x1c>
    1a3a:	bf00      	nop
    1a3c:	000077e6 	.word	0x000077e6

00001a40 <nordicsemi_nrf91_init>:
    1a40:	f04f 0220 	mov.w	r2, #32
    1a44:	f3ef 8311 	mrs	r3, BASEPRI
    1a48:	f382 8812 	msr	BASEPRI_MAX, r2
    1a4c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1a50:	2101      	movs	r1, #1
    1a52:	4a04      	ldr	r2, [pc, #16]	; (1a64 <nordicsemi_nrf91_init+0x24>)
    1a54:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    1a58:	f383 8811 	msr	BASEPRI, r3
    1a5c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1a60:	2000      	movs	r0, #0
    1a62:	4770      	bx	lr
    1a64:	50039000 	.word	0x50039000

00001a68 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1a68:	b120      	cbz	r0, 1a74 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1a6a:	4b03      	ldr	r3, [pc, #12]	; (1a78 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1a6c:	0180      	lsls	r0, r0, #6
    1a6e:	f043 0301 	orr.w	r3, r3, #1
    1a72:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1a74:	4770      	bx	lr
    1a76:	bf00      	nop
    1a78:	00006f80 	.word	0x00006f80

00001a7c <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    1a7c:	4b0c      	ldr	r3, [pc, #48]	; (1ab0 <flash_area_open+0x34>)
{
    1a7e:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
    1a80:	681b      	ldr	r3, [r3, #0]
    1a82:	b173      	cbz	r3, 1aa2 <flash_area_open+0x26>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    1a84:	4a0b      	ldr	r2, [pc, #44]	; (1ab4 <flash_area_open+0x38>)
    1a86:	6815      	ldr	r5, [r2, #0]
    1a88:	2200      	movs	r2, #0
    1a8a:	42aa      	cmp	r2, r5
    1a8c:	db02      	blt.n	1a94 <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    1a8e:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;
	return 0;
}
    1a92:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    1a94:	461c      	mov	r4, r3
    1a96:	f813 6b10 	ldrb.w	r6, [r3], #16
    1a9a:	4286      	cmp	r6, r0
    1a9c:	d004      	beq.n	1aa8 <flash_area_open+0x2c>
	for (int i = 0; i < flash_map_entries; i++) {
    1a9e:	3201      	adds	r2, #1
    1aa0:	e7f3      	b.n	1a8a <flash_area_open+0xe>
		return -EACCES;
    1aa2:	f06f 000c 	mvn.w	r0, #12
    1aa6:	e7f4      	b.n	1a92 <flash_area_open+0x16>
	return 0;
    1aa8:	2000      	movs	r0, #0
	*fap = area;
    1aaa:	600c      	str	r4, [r1, #0]
	return 0;
    1aac:	e7f1      	b.n	1a92 <flash_area_open+0x16>
    1aae:	bf00      	nop
    1ab0:	2000c50c 	.word	0x2000c50c
    1ab4:	00007048 	.word	0x00007048

00001ab8 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    1ab8:	b570      	push	{r4, r5, r6, lr}
    1aba:	b088      	sub	sp, #32
    1abc:	4605      	mov	r5, r0
    1abe:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    1ac0:	b2c0      	uxtb	r0, r0
    1ac2:	4669      	mov	r1, sp
{
    1ac4:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    1ac6:	f7ff ffd9 	bl	1a7c <flash_area_open>
	if (rc < 0 || fa == NULL) {
    1aca:	2800      	cmp	r0, #0
    1acc:	db1f      	blt.n	1b0e <flash_area_get_sectors+0x56>
    1ace:	9b00      	ldr	r3, [sp, #0]
    1ad0:	b1eb      	cbz	r3, 1b0e <flash_area_get_sectors+0x56>
	cb_data->area_off = fa->fa_off;
    1ad2:	685a      	ldr	r2, [r3, #4]
	cb_data->ret_len = *cnt;
    1ad4:	6821      	ldr	r1, [r4, #0]
	cb_data->area_off = fa->fa_off;
    1ad6:	9202      	str	r2, [sp, #8]
	cb_data->area_len = fa->fa_size;
    1ad8:	689a      	ldr	r2, [r3, #8]
	flash_dev = device_get_binding(fa->fa_dev_name);
    1ada:	68d8      	ldr	r0, [r3, #12]
	cb_data->ret = ret;
    1adc:	e9cd 2603 	strd	r2, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    1ae0:	2200      	movs	r2, #0
	cb_data->area_idx = idx;
    1ae2:	9501      	str	r5, [sp, #4]
	cb_data->status = 0;
    1ae4:	e9cd 1206 	strd	r1, r2, [sp, #24]
	cb_data->ret_idx = 0U;
    1ae8:	9205      	str	r2, [sp, #20]
    1aea:	f002 fabb 	bl	4064 <z_impl_device_get_binding>
    1aee:	4605      	mov	r5, r0
	flash_area_close(fa);
    1af0:	9800      	ldr	r0, [sp, #0]
    1af2:	f004 fc51 	bl	6398 <flash_area_close>
	if (flash_dev == NULL) {
    1af6:	b16d      	cbz	r5, 1b14 <flash_area_get_sectors+0x5c>
	flash_page_foreach(flash_dev, cb, cb_data);
    1af8:	4628      	mov	r0, r5
    1afa:	4908      	ldr	r1, [pc, #32]	; (1b1c <flash_area_get_sectors+0x64>)
    1afc:	aa01      	add	r2, sp, #4
    1afe:	f004 fe11 	bl	6724 <flash_page_foreach>
	if (cb_data->status == 0) {
    1b02:	9807      	ldr	r0, [sp, #28]
    1b04:	b908      	cbnz	r0, 1b0a <flash_area_get_sectors+0x52>
		*cnt = cb_data->ret_idx;
    1b06:	9b05      	ldr	r3, [sp, #20]
    1b08:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    1b0a:	b008      	add	sp, #32
    1b0c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    1b0e:	f06f 0015 	mvn.w	r0, #21
    1b12:	e7fa      	b.n	1b0a <flash_area_get_sectors+0x52>
		return -ENODEV;
    1b14:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1b18:	e7f7      	b.n	1b0a <flash_area_get_sectors+0x52>
    1b1a:	bf00      	nop
    1b1c:	0000645d 	.word	0x0000645d

00001b20 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1b20:	4801      	ldr	r0, [pc, #4]	; (1b28 <nrf_cc3xx_platform_abort_init+0x8>)
    1b22:	f002 bc6d 	b.w	4400 <nrf_cc3xx_platform_set_abort>
    1b26:	bf00      	nop
    1b28:	0000704c 	.word	0x0000704c

00001b2c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1b2c:	4901      	ldr	r1, [pc, #4]	; (1b34 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1b2e:	2210      	movs	r2, #16
	str	r2, [r1]
    1b30:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1b32:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1b34:	e000ed10 	.word	0xe000ed10

00001b38 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1b38:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1b3a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1b3c:	f380 8811 	msr	BASEPRI, r0
	isb
    1b40:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1b44:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1b48:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1b4a:	b662      	cpsie	i
	isb
    1b4c:	f3bf 8f6f 	isb	sy

	bx	lr
    1b50:	4770      	bx	lr
    1b52:	bf00      	nop

00001b54 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1b54:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1b56:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1b58:	f381 8811 	msr	BASEPRI, r1

	wfe
    1b5c:	bf20      	wfe

	msr	BASEPRI, r0
    1b5e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1b62:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1b64:	4770      	bx	lr
    1b66:	bf00      	nop

00001b68 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    1b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1b6a:	4605      	mov	r5, r0

	if (esf != NULL) {
    1b6c:	460c      	mov	r4, r1
    1b6e:	b1c9      	cbz	r1, 1ba4 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    1b70:	688b      	ldr	r3, [r1, #8]
    1b72:	4810      	ldr	r0, [pc, #64]	; (1bb4 <z_arm_fatal_error+0x4c>)
    1b74:	9300      	str	r3, [sp, #0]
    1b76:	e9d1 2300 	ldrd	r2, r3, [r1]
    1b7a:	2145      	movs	r1, #69	; 0x45
    1b7c:	f004 fbff 	bl	637e <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    1b80:	6963      	ldr	r3, [r4, #20]
    1b82:	2145      	movs	r1, #69	; 0x45
    1b84:	9300      	str	r3, [sp, #0]
    1b86:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    1b8a:	480b      	ldr	r0, [pc, #44]	; (1bb8 <z_arm_fatal_error+0x50>)
    1b8c:	f004 fbf7 	bl	637e <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    1b90:	2145      	movs	r1, #69	; 0x45
    1b92:	69e2      	ldr	r2, [r4, #28]
    1b94:	4809      	ldr	r0, [pc, #36]	; (1bbc <z_arm_fatal_error+0x54>)
    1b96:	f004 fbf2 	bl	637e <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    1b9a:	2145      	movs	r1, #69	; 0x45
    1b9c:	69a2      	ldr	r2, [r4, #24]
    1b9e:	4808      	ldr	r0, [pc, #32]	; (1bc0 <z_arm_fatal_error+0x58>)
    1ba0:	f004 fbed 	bl	637e <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    1ba4:	4621      	mov	r1, r4
    1ba6:	4628      	mov	r0, r5
}
    1ba8:	b003      	add	sp, #12
    1baa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    1bae:	f002 ba83 	b.w	40b8 <z_fatal_error>
    1bb2:	bf00      	nop
    1bb4:	00007813 	.word	0x00007813
    1bb8:	00007847 	.word	0x00007847
    1bbc:	0000787b 	.word	0x0000787b
    1bc0:	0000788f 	.word	0x0000788f

00001bc4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1bc4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1bc6:	2b00      	cmp	r3, #0
    1bc8:	db08      	blt.n	1bdc <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bca:	2201      	movs	r2, #1
    1bcc:	f000 001f 	and.w	r0, r0, #31
    1bd0:	fa02 f000 	lsl.w	r0, r2, r0
    1bd4:	4a02      	ldr	r2, [pc, #8]	; (1be0 <arch_irq_enable+0x1c>)
    1bd6:	095b      	lsrs	r3, r3, #5
    1bd8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1bdc:	4770      	bx	lr
    1bde:	bf00      	nop
    1be0:	e000e100 	.word	0xe000e100

00001be4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1be4:	4b05      	ldr	r3, [pc, #20]	; (1bfc <arch_irq_is_enabled+0x18>)
    1be6:	0942      	lsrs	r2, r0, #5
    1be8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1bec:	2301      	movs	r3, #1
    1bee:	f000 001f 	and.w	r0, r0, #31
    1bf2:	fa03 f000 	lsl.w	r0, r3, r0
}
    1bf6:	4010      	ands	r0, r2
    1bf8:	4770      	bx	lr
    1bfa:	bf00      	nop
    1bfc:	e000e100 	.word	0xe000e100

00001c00 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1c00:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1c02:	2b00      	cmp	r3, #0
		prio += _IRQ_PRIO_OFFSET;
    1c04:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c08:	bfac      	ite	ge
    1c0a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c0e:	4b06      	ldrlt	r3, [pc, #24]	; (1c28 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c10:	ea4f 1141 	mov.w	r1, r1, lsl #5
    1c14:	b2c9      	uxtb	r1, r1
    1c16:	bfab      	itete	ge
    1c18:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c1c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c20:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c24:	5419      	strblt	r1, [r3, r0]
}
    1c26:	4770      	bx	lr
    1c28:	e000ed14 	.word	0xe000ed14

00001c2c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1c2c:	bf30      	wfi
    b z_SysNmiOnReset
    1c2e:	f7ff bffd 	b.w	1c2c <z_SysNmiOnReset>
    1c32:	bf00      	nop

00001c34 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1c34:	4a14      	ldr	r2, [pc, #80]	; (1c88 <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1c36:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1c38:	4b14      	ldr	r3, [pc, #80]	; (1c8c <z_arm_prep_c+0x58>)
    1c3a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1c3e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1c40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c44:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1c48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1c4c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1c50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    1c54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1c58:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    1c5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    1c60:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    1c64:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    1c68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c6c:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
    1c70:	2300      	movs	r3, #0
    1c72:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1c76:	f002 fa75 	bl	4164 <z_bss_zero>
	z_data_copy();
    1c7a:	f002 fab9 	bl	41f0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1c7e:	f000 fa33 	bl	20e8 <z_arm_interrupt_init>
	z_cstart();
    1c82:	f002 fa7b 	bl	417c <z_cstart>
    1c86:	bf00      	nop
    1c88:	00000000 	.word	0x00000000
    1c8c:	e000ed00 	.word	0xe000ed00

00001c90 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1c90:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1c94:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1c96:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1c9a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1c9e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1ca0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1ca4:	2902      	cmp	r1, #2
    beq _oops
    1ca6:	d0ff      	beq.n	1ca8 <_oops>

00001ca8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1ca8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1caa:	f004 fbfa 	bl	64a2 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1cae:	bd01      	pop	{r0, pc}

00001cb0 <z_arm_switch_to_main_no_multithreading>:

#if !defined(CONFIG_MULTITHREADING) && defined(CONFIG_CPU_CORTEX_M)

FUNC_NORETURN void z_arm_switch_to_main_no_multithreading(
	k_thread_entry_t main_entry, void *p1, void *p2, void *p3)
{
    1cb0:	4604      	mov	r4, r0
    1cb2:	4608      	mov	r0, r1
    1cb4:	4611      	mov	r1, r2
    1cb6:	461a      	mov	r2, r3
    1cb8:	2300      	movs	r3, #0
    1cba:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    1cbe:	f383 880b 	msr	PSPLIM, r3
	 */
	register void *p1_inreg __asm__("r0") = p1;
	register void *p2_inreg __asm__("r1") = p2;
	register void *p3_inreg __asm__("r2") = p3;

	__asm__ volatile (
    1cc2:	4b0a      	ldr	r3, [pc, #40]	; (1cec <loop+0x2>)
    1cc4:	2520      	movs	r5, #32
    1cc6:	f5a3 5620 	sub.w	r6, r3, #10240	; 0x2800
    1cca:	f386 880b 	msr	PSPLIM, r6
    1cce:	f383 8809 	msr	PSP, r3
    1cd2:	b663      	cpsie	if
    1cd4:	f04f 0300 	mov.w	r3, #0
    1cd8:	f383 8811 	msr	BASEPRI, r3
    1cdc:	f3bf 8f6f 	isb	sy
    1ce0:	47a0      	blx	r4
    1ce2:	f385 8811 	msr	BASEPRI, r5
    1ce6:	f3bf 8f6f 	isb	sy

00001cea <loop>:
    1cea:	e7fe      	b.n	1cea <loop>
	, [_psplim]"r" (psplim)
#endif
	:
	);

	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    1cec:	2000fce8 	.word	0x2000fce8

00001cf0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1cf0:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1cf2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1cf6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1cfa:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1cfe:	4904      	ldr	r1, [pc, #16]	; (1d10 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1d00:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1d02:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1d04:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1d06:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1d0a:	4902      	ldr	r1, [pc, #8]	; (1d14 <_isr_wrapper+0x24>)
	bx r1
    1d0c:	4708      	bx	r1
    1d0e:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    1d10:	00006d08 	.word	0x00006d08
	ldr r1, =z_arm_int_exit
    1d14:	00001d19 	.word	0x00001d19

00001d18 <z_arm_exc_exit>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1d18:	4770      	bx	lr
    1d1a:	bf00      	nop

00001d1c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    1d1c:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1d1e:	4c21      	ldr	r4, [pc, #132]	; (1da4 <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    1d20:	2145      	movs	r1, #69	; 0x45
    1d22:	4821      	ldr	r0, [pc, #132]	; (1da8 <usage_fault.constprop.0+0x8c>)
    1d24:	f004 fb2b 	bl	637e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1d28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d2a:	019d      	lsls	r5, r3, #6
    1d2c:	d503      	bpl.n	1d36 <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    1d2e:	2145      	movs	r1, #69	; 0x45
    1d30:	481e      	ldr	r0, [pc, #120]	; (1dac <usage_fault.constprop.0+0x90>)
    1d32:	f004 fb24 	bl	637e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1d36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d38:	01dc      	lsls	r4, r3, #7
    1d3a:	d503      	bpl.n	1d44 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    1d3c:	2145      	movs	r1, #69	; 0x45
    1d3e:	481c      	ldr	r0, [pc, #112]	; (1db0 <usage_fault.constprop.0+0x94>)
    1d40:	f004 fb1d 	bl	637e <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    1d44:	4d17      	ldr	r5, [pc, #92]	; (1da4 <usage_fault.constprop.0+0x88>)
    1d46:	6aac      	ldr	r4, [r5, #40]	; 0x28
    1d48:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    1d4c:	d004      	beq.n	1d58 <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    1d4e:	2145      	movs	r1, #69	; 0x45
    1d50:	4818      	ldr	r0, [pc, #96]	; (1db4 <usage_fault.constprop.0+0x98>)
    1d52:	f004 fb14 	bl	637e <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    1d56:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1d58:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1d5a:	0318      	lsls	r0, r3, #12
    1d5c:	d503      	bpl.n	1d66 <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    1d5e:	2145      	movs	r1, #69	; 0x45
    1d60:	4815      	ldr	r0, [pc, #84]	; (1db8 <usage_fault.constprop.0+0x9c>)
    1d62:	f004 fb0c 	bl	637e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1d66:	4d0f      	ldr	r5, [pc, #60]	; (1da4 <usage_fault.constprop.0+0x88>)
    1d68:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1d6a:	0359      	lsls	r1, r3, #13
    1d6c:	d503      	bpl.n	1d76 <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    1d6e:	2145      	movs	r1, #69	; 0x45
    1d70:	4812      	ldr	r0, [pc, #72]	; (1dbc <usage_fault.constprop.0+0xa0>)
    1d72:	f004 fb04 	bl	637e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1d76:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1d78:	039a      	lsls	r2, r3, #14
    1d7a:	d503      	bpl.n	1d84 <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    1d7c:	2145      	movs	r1, #69	; 0x45
    1d7e:	4810      	ldr	r0, [pc, #64]	; (1dc0 <usage_fault.constprop.0+0xa4>)
    1d80:	f004 fafd 	bl	637e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1d84:	4d07      	ldr	r5, [pc, #28]	; (1da4 <usage_fault.constprop.0+0x88>)
    1d86:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1d88:	03db      	lsls	r3, r3, #15
    1d8a:	d503      	bpl.n	1d94 <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    1d8c:	2145      	movs	r1, #69	; 0x45
    1d8e:	480d      	ldr	r0, [pc, #52]	; (1dc4 <usage_fault.constprop.0+0xa8>)
    1d90:	f004 faf5 	bl	637e <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1d94:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    1d96:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1d98:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    1d9c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    1da0:	62ab      	str	r3, [r5, #40]	; 0x28
}
    1da2:	bd38      	pop	{r3, r4, r5, pc}
    1da4:	e000ed00 	.word	0xe000ed00
    1da8:	000078c2 	.word	0x000078c2
    1dac:	000078df 	.word	0x000078df
    1db0:	000078f7 	.word	0x000078f7
    1db4:	00007916 	.word	0x00007916
    1db8:	00007945 	.word	0x00007945
    1dbc:	00007968 	.word	0x00007968
    1dc0:	00007992 	.word	0x00007992
    1dc4:	000079b1 	.word	0x000079b1

00001dc8 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1dc8:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1dca:	4c23      	ldr	r4, [pc, #140]	; (1e58 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1dcc:	4606      	mov	r6, r0
    1dce:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    1dd0:	4822      	ldr	r0, [pc, #136]	; (1e5c <bus_fault.constprop.0+0x94>)
    1dd2:	2145      	movs	r1, #69	; 0x45
    1dd4:	f004 fad3 	bl	637e <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1dd8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1dda:	04d9      	lsls	r1, r3, #19
    1ddc:	d503      	bpl.n	1de6 <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    1dde:	2145      	movs	r1, #69	; 0x45
    1de0:	481f      	ldr	r0, [pc, #124]	; (1e60 <bus_fault.constprop.0+0x98>)
    1de2:	f004 facc 	bl	637e <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1de6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1de8:	051a      	lsls	r2, r3, #20
    1dea:	d503      	bpl.n	1df4 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    1dec:	2145      	movs	r1, #69	; 0x45
    1dee:	481d      	ldr	r0, [pc, #116]	; (1e64 <bus_fault.constprop.0+0x9c>)
    1df0:	f004 fac5 	bl	637e <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1df4:	4c18      	ldr	r4, [pc, #96]	; (1e58 <bus_fault.constprop.0+0x90>)
    1df6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1df8:	059b      	lsls	r3, r3, #22
    1dfa:	d510      	bpl.n	1e1e <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    1dfc:	481a      	ldr	r0, [pc, #104]	; (1e68 <bus_fault.constprop.0+0xa0>)
    1dfe:	2145      	movs	r1, #69	; 0x45
    1e00:	f004 fabd 	bl	637e <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1e04:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1e06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e08:	0418      	lsls	r0, r3, #16
    1e0a:	d508      	bpl.n	1e1e <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    1e0c:	2145      	movs	r1, #69	; 0x45
    1e0e:	4817      	ldr	r0, [pc, #92]	; (1e6c <bus_fault.constprop.0+0xa4>)
    1e10:	f004 fab5 	bl	637e <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    1e14:	b11e      	cbz	r6, 1e1e <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1e16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1e1c:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1e1e:	4c0e      	ldr	r4, [pc, #56]	; (1e58 <bus_fault.constprop.0+0x90>)
    1e20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e22:	0559      	lsls	r1, r3, #21
    1e24:	d503      	bpl.n	1e2e <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    1e26:	2145      	movs	r1, #69	; 0x45
    1e28:	4811      	ldr	r0, [pc, #68]	; (1e70 <bus_fault.constprop.0+0xa8>)
    1e2a:	f004 faa8 	bl	637e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1e2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e30:	05da      	lsls	r2, r3, #23
    1e32:	d50b      	bpl.n	1e4c <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    1e34:	2145      	movs	r1, #69	; 0x45
    1e36:	480f      	ldr	r0, [pc, #60]	; (1e74 <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1e38:	f004 faa1 	bl	637e <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
    1e3c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1e3e:	4a06      	ldr	r2, [pc, #24]	; (1e58 <bus_fault.constprop.0+0x90>)
    1e40:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1e42:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1e46:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1e48:	7028      	strb	r0, [r5, #0]
}
    1e4a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1e4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e4e:	049b      	lsls	r3, r3, #18
    1e50:	d5f4      	bpl.n	1e3c <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1e52:	2145      	movs	r1, #69	; 0x45
    1e54:	4808      	ldr	r0, [pc, #32]	; (1e78 <bus_fault.constprop.0+0xb0>)
    1e56:	e7ef      	b.n	1e38 <bus_fault.constprop.0+0x70>
    1e58:	e000ed00 	.word	0xe000ed00
    1e5c:	000079e1 	.word	0x000079e1
    1e60:	000079fc 	.word	0x000079fc
    1e64:	00007a12 	.word	0x00007a12
    1e68:	00007a2a 	.word	0x00007a2a
    1e6c:	00007a48 	.word	0x00007a48
    1e70:	00007a62 	.word	0x00007a62
    1e74:	00007a82 	.word	0x00007a82
    1e78:	00007a9f 	.word	0x00007a9f

00001e7c <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1e7c:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1e7e:	4c26      	ldr	r4, [pc, #152]	; (1f18 <mem_manage_fault.constprop.0+0x9c>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1e80:	4606      	mov	r6, r0
    1e82:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    1e84:	4825      	ldr	r0, [pc, #148]	; (1f1c <mem_manage_fault.constprop.0+0xa0>)
    1e86:	2145      	movs	r1, #69	; 0x45
    1e88:	f004 fa79 	bl	637e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1e8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e8e:	06d8      	lsls	r0, r3, #27
    1e90:	d503      	bpl.n	1e9a <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    1e92:	2145      	movs	r1, #69	; 0x45
    1e94:	4822      	ldr	r0, [pc, #136]	; (1f20 <mem_manage_fault.constprop.0+0xa4>)
    1e96:	f004 fa72 	bl	637e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1e9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e9c:	0719      	lsls	r1, r3, #28
    1e9e:	d503      	bpl.n	1ea8 <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    1ea0:	2145      	movs	r1, #69	; 0x45
    1ea2:	4820      	ldr	r0, [pc, #128]	; (1f24 <mem_manage_fault.constprop.0+0xa8>)
    1ea4:	f004 fa6b 	bl	637e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1ea8:	4c1b      	ldr	r4, [pc, #108]	; (1f18 <mem_manage_fault.constprop.0+0x9c>)
    1eaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1eac:	079a      	lsls	r2, r3, #30
    1eae:	d510      	bpl.n	1ed2 <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    1eb0:	2145      	movs	r1, #69	; 0x45
    1eb2:	481d      	ldr	r0, [pc, #116]	; (1f28 <mem_manage_fault.constprop.0+0xac>)
    1eb4:	f004 fa63 	bl	637e <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
    1eb8:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1eba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ebc:	061b      	lsls	r3, r3, #24
    1ebe:	d508      	bpl.n	1ed2 <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    1ec0:	2145      	movs	r1, #69	; 0x45
    1ec2:	481a      	ldr	r0, [pc, #104]	; (1f2c <mem_manage_fault.constprop.0+0xb0>)
    1ec4:	f004 fa5b 	bl	637e <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    1ec8:	b11e      	cbz	r6, 1ed2 <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1eca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1ed0:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1ed2:	4c11      	ldr	r4, [pc, #68]	; (1f18 <mem_manage_fault.constprop.0+0x9c>)
    1ed4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ed6:	07de      	lsls	r6, r3, #31
    1ed8:	d503      	bpl.n	1ee2 <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    1eda:	2145      	movs	r1, #69	; 0x45
    1edc:	4814      	ldr	r0, [pc, #80]	; (1f30 <mem_manage_fault.constprop.0+0xb4>)
    1ede:	f004 fa4e 	bl	637e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1ee2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ee4:	0698      	lsls	r0, r3, #26
    1ee6:	d503      	bpl.n	1ef0 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
    1ee8:	2145      	movs	r1, #69	; 0x45
    1eea:	4812      	ldr	r0, [pc, #72]	; (1f34 <mem_manage_fault.constprop.0+0xb8>)
    1eec:	f004 fa47 	bl	637e <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
    1ef0:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1ef2:	4b09      	ldr	r3, [pc, #36]	; (1f18 <mem_manage_fault.constprop.0+0x9c>)
    1ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1ef6:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1ef8:	bf58      	it	pl
    1efa:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1efe:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1f00:	bf42      	ittt	mi
    1f02:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    1f04:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    1f08:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1f0a:	4a03      	ldr	r2, [pc, #12]	; (1f18 <mem_manage_fault.constprop.0+0x9c>)
    1f0c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1f0e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1f12:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1f14:	7028      	strb	r0, [r5, #0]
}
    1f16:	bd70      	pop	{r4, r5, r6, pc}
    1f18:	e000ed00 	.word	0xe000ed00
    1f1c:	00007ad3 	.word	0x00007ad3
    1f20:	00007aee 	.word	0x00007aee
    1f24:	00007a12 	.word	0x00007a12
    1f28:	00007b26 	.word	0x00007b26
    1f2c:	00007b43 	.word	0x00007b43
    1f30:	00007b5e 	.word	0x00007b5e
    1f34:	00007a9f 	.word	0x00007a9f

00001f38 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1f3c:	4b54      	ldr	r3, [pc, #336]	; (2090 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x90>)
    1f3e:	2500      	movs	r5, #0
    1f40:	685e      	ldr	r6, [r3, #4]
{
    1f42:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1f44:	f3c6 0408 	ubfx	r4, r6, #0, #9
    1f48:	f385 8811 	msr	BASEPRI, r5
    1f4c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1f50:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1f54:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1f58:	d107      	bne.n	1f6a <z_arm_fault+0x32>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1f5a:	f002 030c 	and.w	r3, r2, #12
    1f5e:	2b08      	cmp	r3, #8
    1f60:	d105      	bne.n	1f6e <z_arm_fault+0x36>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    1f62:	2145      	movs	r1, #69	; 0x45
    1f64:	484b      	ldr	r0, [pc, #300]	; (2094 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x94>)
    1f66:	f004 fa0a 	bl	637e <z_log_minimal_printk>
		return NULL;
    1f6a:	462f      	mov	r7, r5
    1f6c:	e004      	b.n	1f78 <z_arm_fault+0x40>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1f6e:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    1f70:	bf4e      	itee	mi
    1f72:	460f      	movmi	r7, r1
			ptr_esf = (z_arch_esf_t *)msp;
    1f74:	4607      	movpl	r7, r0
			*nested_exc = true;
    1f76:	2501      	movpl	r5, #1
	*recoverable = false;
    1f78:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
    1f7c:	1ee3      	subs	r3, r4, #3
	*recoverable = false;
    1f7e:	f88d 8007 	strb.w	r8, [sp, #7]
	switch (fault) {
    1f82:	2b09      	cmp	r3, #9
    1f84:	d872      	bhi.n	206c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6c>
    1f86:	e8df f003 	tbb	[pc, r3]
    1f8a:	6605      	.short	0x6605
    1f8c:	7171636a 	.word	0x7171636a
    1f90:	6e717171 	.word	0x6e717171
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1f94:	4e3e      	ldr	r6, [pc, #248]	; (2090 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x90>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    1f96:	2145      	movs	r1, #69	; 0x45
    1f98:	483f      	ldr	r0, [pc, #252]	; (2098 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x98>)
    1f9a:	f004 f9f0 	bl	637e <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1f9e:	6af4      	ldr	r4, [r6, #44]	; 0x2c
	*recoverable = false;
    1fa0:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1fa4:	f014 0402 	ands.w	r4, r4, #2
    1fa8:	d005      	beq.n	1fb6 <z_arm_fault+0x7e>
		PR_EXC("  Bus fault on vector table read");
    1faa:	2145      	movs	r1, #69	; 0x45
    1fac:	483b      	ldr	r0, [pc, #236]	; (209c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x9c>)
	PR_FAULT_INFO(
    1fae:	f004 f9e6 	bl	637e <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1fb2:	2400      	movs	r4, #0
}
    1fb4:	e006      	b.n	1fc4 <z_arm_fault+0x8c>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1fb6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1fb8:	2b00      	cmp	r3, #0
    1fba:	da1d      	bge.n	1ff8 <z_arm_fault+0xc0>
		PR_EXC("  Debug event");
    1fbc:	2145      	movs	r1, #69	; 0x45
    1fbe:	4838      	ldr	r0, [pc, #224]	; (20a0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xa0>)
    1fc0:	f004 f9dd 	bl	637e <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1fc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1fc8:	b99b      	cbnz	r3, 1ff2 <z_arm_fault+0xba>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1fca:	2220      	movs	r2, #32
    1fcc:	4639      	mov	r1, r7
    1fce:	a802      	add	r0, sp, #8
    1fd0:	f004 faa4 	bl	651c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1fd6:	2d00      	cmp	r5, #0
    1fd8:	d055      	beq.n	2086 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x86>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1fda:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1fde:	b922      	cbnz	r2, 1fea <z_arm_fault+0xb2>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1fe0:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1fe4:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1fe8:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1fea:	4620      	mov	r0, r4
    1fec:	a902      	add	r1, sp, #8
    1fee:	f7ff fdbb 	bl	1b68 <z_arm_fatal_error>
}
    1ff2:	b00a      	add	sp, #40	; 0x28
    1ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1ff8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1ffa:	005b      	lsls	r3, r3, #1
    1ffc:	d5e2      	bpl.n	1fc4 <z_arm_fault+0x8c>
		PR_EXC("  Fault escalation (see below)");
    1ffe:	2145      	movs	r1, #69	; 0x45
    2000:	4828      	ldr	r0, [pc, #160]	; (20a4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xa4>)
    2002:	f004 f9bc 	bl	637e <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
    2006:	69bb      	ldr	r3, [r7, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2008:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    200c:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2010:	429a      	cmp	r2, r3
    2012:	d009      	beq.n	2028 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x28>
		} else if (SCB_MMFSR != 0) {
    2014:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    2018:	b16b      	cbz	r3, 2036 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x36>
			reason = mem_manage_fault(esf, 1, recoverable);
    201a:	2001      	movs	r0, #1
    201c:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    2020:	f7ff ff2c 	bl	1e7c <mem_manage_fault.constprop.0>
    2024:	4604      	mov	r4, r0
		break;
    2026:	e7cd      	b.n	1fc4 <z_arm_fault+0x8c>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    2028:	2145      	movs	r1, #69	; 0x45
    202a:	683a      	ldr	r2, [r7, #0]
    202c:	481e      	ldr	r0, [pc, #120]	; (20a8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xa8>)
    202e:	f004 f9a6 	bl	637e <z_log_minimal_printk>
			reason = esf->basic.r0;
    2032:	683c      	ldr	r4, [r7, #0]
    2034:	e7c6      	b.n	1fc4 <z_arm_fault+0x8c>
		} else if (SCB_BFSR != 0) {
    2036:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
    203a:	b12b      	cbz	r3, 2048 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x48>
			reason = bus_fault(esf, 1, recoverable);
    203c:	2001      	movs	r0, #1
    203e:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    2042:	f7ff fec1 	bl	1dc8 <bus_fault.constprop.0>
    2046:	e7ed      	b.n	2024 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x24>
		} else if (SCB_UFSR != 0) {
    2048:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
    204a:	b29b      	uxth	r3, r3
    204c:	2b00      	cmp	r3, #0
    204e:	d0b9      	beq.n	1fc4 <z_arm_fault+0x8c>
		reason = usage_fault(esf);
    2050:	f7ff fe64 	bl	1d1c <usage_fault.constprop.0>
    2054:	e7e6      	b.n	2024 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x24>
		reason = mem_manage_fault(esf, 0, recoverable);
    2056:	2000      	movs	r0, #0
    2058:	f10d 0107 	add.w	r1, sp, #7
    205c:	e7e0      	b.n	2020 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x20>
		reason = bus_fault(esf, 0, recoverable);
    205e:	2000      	movs	r0, #0
    2060:	f10d 0107 	add.w	r1, sp, #7
    2064:	e7ed      	b.n	2042 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x42>
	PR_FAULT_INFO(
    2066:	2145      	movs	r1, #69	; 0x45
    2068:	4810      	ldr	r0, [pc, #64]	; (20ac <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xac>)
    206a:	e7a0      	b.n	1fae <z_arm_fault+0x76>
	PR_FAULT_INFO("***** %s %d) *****",
    206c:	4910      	ldr	r1, [pc, #64]	; (20b0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xb0>)
    206e:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    2072:	4a10      	ldr	r2, [pc, #64]	; (20b4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xb4>)
    2074:	4810      	ldr	r0, [pc, #64]	; (20b8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xb8>)
    2076:	bf08      	it	eq
    2078:	460a      	moveq	r2, r1
    207a:	f1a4 0310 	sub.w	r3, r4, #16
    207e:	2145      	movs	r1, #69	; 0x45
    2080:	f004 f97d 	bl	637e <z_log_minimal_printk>
    2084:	e795      	b.n	1fb2 <z_arm_fault+0x7a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2086:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    208a:	f023 0301 	bic.w	r3, r3, #1
    208e:	e7ab      	b.n	1fe8 <z_arm_fault+0xb0>
    2090:	e000ed00 	.word	0xe000ed00
    2094:	00007bb0 	.word	0x00007bb0
    2098:	00007be0 	.word	0x00007be0
    209c:	00007bfc 	.word	0x00007bfc
    20a0:	00007c22 	.word	0x00007c22
    20a4:	00007c35 	.word	0x00007c35
    20a8:	00007c59 	.word	0x00007c59
    20ac:	00007c7a 	.word	0x00007c7a
    20b0:	00007b82 	.word	0x00007b82
    20b4:	00007b97 	.word	0x00007b97
    20b8:	00007ca3 	.word	0x00007ca3

000020bc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    20bc:	4b04      	ldr	r3, [pc, #16]	; (20d0 <z_arm_fault_init+0x14>)
    20be:	695a      	ldr	r2, [r3, #20]
    20c0:	f042 0210 	orr.w	r2, r2, #16
    20c4:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    20c6:	695a      	ldr	r2, [r3, #20]
    20c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    20cc:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    20ce:	4770      	bx	lr
    20d0:	e000ed00 	.word	0xe000ed00

000020d4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    20d4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    20d8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    20dc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    20de:	4672      	mov	r2, lr
	bl z_arm_fault
    20e0:	f7ff ff2a 	bl	1f38 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    20e4:	bd01      	pop	{r0, pc}
    20e6:	bf00      	nop

000020e8 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    20e8:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    20ea:	2120      	movs	r1, #32
    20ec:	4803      	ldr	r0, [pc, #12]	; (20fc <z_arm_interrupt_init+0x14>)
    20ee:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    20f0:	3301      	adds	r3, #1
    20f2:	2b41      	cmp	r3, #65	; 0x41
    20f4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    20f8:	d1f9      	bne.n	20ee <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    20fa:	4770      	bx	lr
    20fc:	e000e100 	.word	0xe000e100

00002100 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2100:	2000      	movs	r0, #0
    msr CONTROL, r0
    2102:	f380 8814 	msr	CONTROL, r0
    isb
    2106:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    210a:	2000      	movs	r0, #0
    msr MSPLIM, r0
    210c:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    2110:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2114:	f004 fd8e 	bl	6c34 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2118:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    211a:	490e      	ldr	r1, [pc, #56]	; (2154 <__start+0x54>)
    str r0, [r1]
    211c:	6008      	str	r0, [r1, #0]
    dsb
    211e:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2122:	480d      	ldr	r0, [pc, #52]	; (2158 <__start+0x58>)
    msr msp, r0
    2124:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2128:	f000 f83e 	bl	21a8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    212c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    212e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2132:	480a      	ldr	r0, [pc, #40]	; (215c <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2134:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    2138:	1840      	adds	r0, r0, r1
    msr PSP, r0
    213a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    213e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2142:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2144:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2146:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    214a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    214e:	f7ff fd71 	bl	1c34 <z_arm_prep_c>
    2152:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    2154:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2158:	2000fce8 	.word	0x2000fce8
    ldr r0, =z_interrupt_stacks
    215c:	2000fce8 	.word	0x2000fce8

00002160 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    2160:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2164:	4905      	ldr	r1, [pc, #20]	; (217c <sys_arch_reboot+0x1c>)
    2166:	4b06      	ldr	r3, [pc, #24]	; (2180 <sys_arch_reboot+0x20>)
    2168:	68ca      	ldr	r2, [r1, #12]
    216a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    216e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2170:	60cb      	str	r3, [r1, #12]
    2172:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2176:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2178:	e7fd      	b.n	2176 <sys_arch_reboot+0x16>
    217a:	bf00      	nop
    217c:	e000ed00 	.word	0xe000ed00
    2180:	05fa0004 	.word	0x05fa0004

00002184 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    2184:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    2186:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2188:	4906      	ldr	r1, [pc, #24]	; (21a4 <z_arm_clear_arm_mpu_config+0x20>)
    218a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    218e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    2192:	4293      	cmp	r3, r2
    2194:	d100      	bne.n	2198 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    2196:	4770      	bx	lr
  mpu->RNR = rnr;
    2198:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    219c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    21a0:	3301      	adds	r3, #1
    21a2:	e7f6      	b.n	2192 <z_arm_clear_arm_mpu_config+0xe>
    21a4:	e000ed00 	.word	0xe000ed00

000021a8 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    21a8:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    21aa:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    21ac:	2400      	movs	r4, #0
    21ae:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    21b2:	f7ff ffe7 	bl	2184 <z_arm_clear_arm_mpu_config>
    21b6:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    21b8:	f04f 30ff 	mov.w	r0, #4294967295
    21bc:	4a0b      	ldr	r2, [pc, #44]	; (21ec <z_arm_init_arch_hw_at_boot+0x44>)
    21be:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    21c2:	3301      	adds	r3, #1
    21c4:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    21c6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    21ca:	d1f8      	bne.n	21be <z_arm_init_arch_hw_at_boot+0x16>
    21cc:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    21ce:	f04f 30ff 	mov.w	r0, #4294967295
    21d2:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    21d6:	3301      	adds	r3, #1
    21d8:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    21da:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    21de:	d1f8      	bne.n	21d2 <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
    21e0:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    21e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    21e6:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    21ea:	bd10      	pop	{r4, pc}
    21ec:	e000e100 	.word	0xe000e100

000021f0 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    21f0:	2101      	movs	r1, #1
    21f2:	4b02      	ldr	r3, [pc, #8]	; (21fc <z_arm_configure_static_mpu_regions+0xc>)
    21f4:	4a02      	ldr	r2, [pc, #8]	; (2200 <z_arm_configure_static_mpu_regions+0x10>)
    21f6:	4803      	ldr	r0, [pc, #12]	; (2204 <z_arm_configure_static_mpu_regions+0x14>)
    21f8:	f000 b91e 	b.w	2438 <arm_core_mpu_configure_static_mpu_regions>
    21fc:	20040000 	.word	0x20040000
    2200:	2000c500 	.word	0x2000c500
    2204:	00007054 	.word	0x00007054

00002208 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    2208:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    220a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    220c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    220e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    2212:	f004 031f 	and.w	r3, r4, #31
    2216:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2218:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    221a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    221c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    2220:	4905      	ldr	r1, [pc, #20]	; (2238 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    2222:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    2226:	f043 0301 	orr.w	r3, r3, #1
    222a:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
    222e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
    2232:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    2236:	bd10      	pop	{r4, pc}
    2238:	e000ed00 	.word	0xe000ed00

0000223c <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    223c:	b530      	push	{r4, r5, lr}
	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	region_conf.size = size_to_mpu_rasr_size(new_region->size);
#endif
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    223e:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    2240:	680c      	ldr	r4, [r1, #0]
{
    2242:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    2244:	890a      	ldrh	r2, [r1, #8]
    2246:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
    2248:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    224a:	3b01      	subs	r3, #1
    224c:	f024 041f 	bic.w	r4, r4, #31
    2250:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    2252:	f002 021f 	and.w	r2, r2, #31
    2256:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    225a:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    225e:	280f      	cmp	r0, #15
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2260:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    2262:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2266:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
    2268:	d909      	bls.n	227e <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    226a:	4602      	mov	r2, r0
    226c:	2145      	movs	r1, #69	; 0x45
    226e:	4806      	ldr	r0, [pc, #24]	; (2288 <mpu_configure_region+0x4c>)
    2270:	f004 f885 	bl	637e <z_log_minimal_printk>
    2274:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    2278:	4620      	mov	r0, r4
    227a:	b005      	add	sp, #20
    227c:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    227e:	4669      	mov	r1, sp
    2280:	f7ff ffc2 	bl	2208 <region_init>
	return region_allocate_and_init(index,
    2284:	e7f8      	b.n	2278 <mpu_configure_region+0x3c>
    2286:	bf00      	nop
    2288:	00007cbf 	.word	0x00007cbf

0000228c <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    228c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2290:	4689      	mov	r9, r1
    2292:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2294:	4606      	mov	r6, r0
    2296:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    229a:	4d58      	ldr	r5, [pc, #352]	; (23fc <mpu_configure_regions_and_partition.constprop.0+0x170>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    229c:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    229e:	45c8      	cmp	r8, r9
    22a0:	da27      	bge.n	22f2 <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
    22a2:	f8d6 a004 	ldr.w	sl, [r6, #4]
    22a6:	f1ba 0f00 	cmp.w	sl, #0
    22aa:	d044      	beq.n	2336 <mpu_configure_regions_and_partition.constprop.0+0xaa>
		&&
    22ac:	f1ba 0f1f 	cmp.w	sl, #31
    22b0:	d918      	bls.n	22e4 <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
    22b2:	f01a 0f1f 	tst.w	sl, #31
    22b6:	d115      	bne.n	22e4 <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
    22b8:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    22bc:	f01b 0f1f 	tst.w	fp, #31
    22c0:	d110      	bne.n	22e4 <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    22c2:	4658      	mov	r0, fp
    22c4:	f004 f8fc 	bl	64c0 <arm_cmse_mpu_region_get>
    22c8:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    22ca:	eb0a 000b 	add.w	r0, sl, fp
    22ce:	3801      	subs	r0, #1
    22d0:	f004 f8f6 	bl	64c0 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    22d4:	4287      	cmp	r7, r0
    22d6:	d010      	beq.n	22fa <mpu_configure_regions_and_partition.constprop.0+0x6e>
	return -EINVAL;
    22d8:	f06f 0715 	mvn.w	r7, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    22dc:	463a      	mov	r2, r7
    22de:	2145      	movs	r1, #69	; 0x45
    22e0:	4847      	ldr	r0, [pc, #284]	; (2400 <mpu_configure_regions_and_partition.constprop.0+0x174>)
    22e2:	e002      	b.n	22ea <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    22e4:	4642      	mov	r2, r8
    22e6:	2145      	movs	r1, #69	; 0x45
    22e8:	4846      	ldr	r0, [pc, #280]	; (2404 <mpu_configure_regions_and_partition.constprop.0+0x178>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    22ea:	f004 f848 	bl	637e <z_log_minimal_printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    22ee:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    22f2:	4620      	mov	r0, r4
    22f4:	b005      	add	sp, #20
    22f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    22fa:	f117 0f16 	cmn.w	r7, #22
    22fe:	d0ed      	beq.n	22dc <mpu_configure_regions_and_partition.constprop.0+0x50>
    2300:	42bc      	cmp	r4, r7
    2302:	ddeb      	ble.n	22dc <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
    2304:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    2308:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
    230c:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    2310:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    2314:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    2318:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    231c:	e9d6 3200 	ldrd	r3, r2, [r6]
    2320:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    2322:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    2324:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    2328:	d11d      	bne.n	2366 <mpu_configure_regions_and_partition.constprop.0+0xda>
    232a:	45d3      	cmp	fp, sl
    232c:	d107      	bne.n	233e <mpu_configure_regions_and_partition.constprop.0+0xb2>
			mpu_configure_region(u_reg_index, &regions[i]);
    232e:	4631      	mov	r1, r6
    2330:	b2f8      	uxtb	r0, r7
    2332:	f7ff ff83 	bl	223c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    2336:	f108 0801 	add.w	r8, r8, #1
    233a:	360c      	adds	r6, #12
    233c:	e7af      	b.n	229e <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    233e:	4631      	mov	r1, r6
	MPU->RNR = index;
    2340:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2344:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
    2348:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    234c:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    2350:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2352:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    2356:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    2358:	f7ff ff70 	bl	223c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    235c:	f110 0f16 	cmn.w	r0, #22
    2360:	d0c5      	beq.n	22ee <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
    2362:	1c44      	adds	r4, r0, #1
    2364:	e7e7      	b.n	2336 <mpu_configure_regions_and_partition.constprop.0+0xaa>
				regions[i].start - 1);
    2366:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
    2368:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
    236a:	b2e0      	uxtb	r0, r4
		| (limit & MPU_RLAR_LIMIT_Msk);
    236c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    2370:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    2374:	d108      	bne.n	2388 <mpu_configure_regions_and_partition.constprop.0+0xfc>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2376:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    237a:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    237c:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    2380:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2382:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    2386:	e7e7      	b.n	2358 <mpu_configure_regions_and_partition.constprop.0+0xcc>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2388:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
    238c:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    2390:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2392:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    2396:	4631      	mov	r1, r6
    2398:	f7ff ff50 	bl	223c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    239c:	f110 0f16 	cmn.w	r0, #22
    23a0:	d0a5      	beq.n	22ee <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = index;
    23a2:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    23a6:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
    23aa:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    23ae:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
    23b2:	f362 0304 	bfi	r3, r2, #0, #5
    23b6:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    23ba:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    23be:	f89d 2008 	ldrb.w	r2, [sp, #8]
    23c2:	085b      	lsrs	r3, r3, #1
    23c4:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
    23c8:	e9d6 3100 	ldrd	r3, r1, [r6]
    23cc:	440b      	add	r3, r1
    23ce:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    23d0:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    23d4:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    23d6:	445b      	add	r3, fp
    23d8:	eba3 030a 	sub.w	r3, r3, sl
    23dc:	b2c0      	uxtb	r0, r0
    23de:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    23e2:	280f      	cmp	r0, #15
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    23e4:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
    23e8:	9303      	str	r3, [sp, #12]
    23ea:	d903      	bls.n	23f4 <mpu_configure_regions_and_partition.constprop.0+0x168>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    23ec:	4602      	mov	r2, r0
    23ee:	2145      	movs	r1, #69	; 0x45
    23f0:	4805      	ldr	r0, [pc, #20]	; (2408 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
    23f2:	e77a      	b.n	22ea <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
    23f4:	4669      	mov	r1, sp
    23f6:	f7ff ff07 	bl	2208 <region_init>
    23fa:	e7b2      	b.n	2362 <mpu_configure_regions_and_partition.constprop.0+0xd6>
    23fc:	e000ed00 	.word	0xe000ed00
    2400:	00007d12 	.word	0x00007d12
    2404:	00007cea 	.word	0x00007cea
    2408:	00007cbf 	.word	0x00007cbf

0000240c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    240c:	2205      	movs	r2, #5
    240e:	4b04      	ldr	r3, [pc, #16]	; (2420 <arm_core_mpu_enable+0x14>)
    2410:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    2414:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2418:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    241c:	4770      	bx	lr
    241e:	bf00      	nop
    2420:	e000ed00 	.word	0xe000ed00

00002424 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2424:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2428:	2200      	movs	r2, #0
    242a:	4b02      	ldr	r3, [pc, #8]	; (2434 <arm_core_mpu_disable+0x10>)
    242c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    2430:	4770      	bx	lr
    2432:	bf00      	nop
    2434:	e000ed00 	.word	0xe000ed00

00002438 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2438:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    243a:	4c03      	ldr	r4, [pc, #12]	; (2448 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    243c:	7822      	ldrb	r2, [r4, #0]
    243e:	f7ff ff25 	bl	228c <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2442:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    2444:	bd10      	pop	{r4, pc}
    2446:	bf00      	nop
    2448:	2000d4e5 	.word	0x2000d4e5

0000244c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    244c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    244e:	4d0e      	ldr	r5, [pc, #56]	; (2488 <z_arm_mpu_init+0x3c>)
    2450:	682c      	ldr	r4, [r5, #0]
    2452:	2c10      	cmp	r4, #16
    2454:	d815      	bhi.n	2482 <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2456:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    2458:	f7ff ffe4 	bl	2424 <arm_core_mpu_disable>
	MPU->MAIR0 =
    245c:	4b0b      	ldr	r3, [pc, #44]	; (248c <z_arm_mpu_init+0x40>)
    245e:	4a0c      	ldr	r2, [pc, #48]	; (2490 <z_arm_mpu_init+0x44>)
    2460:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2464:	4284      	cmp	r4, r0
    2466:	d105      	bne.n	2474 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2468:	4b0a      	ldr	r3, [pc, #40]	; (2494 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    246a:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    246c:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    246e:	f7ff ffcd 	bl	240c <arm_core_mpu_enable>
}
    2472:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    2474:	6869      	ldr	r1, [r5, #4]
    2476:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    247a:	f7ff fec5 	bl	2208 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    247e:	3001      	adds	r0, #1
    2480:	e7f0      	b.n	2464 <z_arm_mpu_init+0x18>
		return -1;
    2482:	f04f 30ff 	mov.w	r0, #4294967295
    2486:	e7f4      	b.n	2472 <z_arm_mpu_init+0x26>
    2488:	00007060 	.word	0x00007060
    248c:	e000ed00 	.word	0xe000ed00
    2490:	0044ffaa 	.word	0x0044ffaa
    2494:	2000d4e5 	.word	0x2000d4e5

00002498 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2498:	4b01      	ldr	r3, [pc, #4]	; (24a0 <__stdout_hook_install+0x8>)
    249a:	6018      	str	r0, [r3, #0]
}
    249c:	4770      	bx	lr
    249e:	bf00      	nop
    24a0:	2000c510 	.word	0x2000c510

000024a4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    24a4:	4b08      	ldr	r3, [pc, #32]	; (24c8 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    24a6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    24a8:	1ac3      	subs	r3, r0, r3
{
    24aa:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    24ac:	4907      	ldr	r1, [pc, #28]	; (24cc <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    24ae:	109b      	asrs	r3, r3, #2
{
    24b0:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    24b2:	4359      	muls	r1, r3
    24b4:	2240      	movs	r2, #64	; 0x40
    24b6:	4806      	ldr	r0, [pc, #24]	; (24d0 <onoff_stop+0x2c>)
    24b8:	f004 f863 	bl	6582 <stop>
	notify(mgr, res);
    24bc:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    24be:	4601      	mov	r1, r0
	notify(mgr, res);
    24c0:	4620      	mov	r0, r4
}
    24c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    24c6:	4718      	bx	r3
    24c8:	2000d344 	.word	0x2000d344
    24cc:	b6db6db7 	.word	0xb6db6db7
    24d0:	00006c90 	.word	0x00006c90

000024d4 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    24d4:	2340      	movs	r3, #64	; 0x40
{
    24d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    24d8:	4c0b      	ldr	r4, [pc, #44]	; (2508 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    24da:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    24dc:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    24de:	460b      	mov	r3, r1
{
    24e0:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    24e2:	490a      	ldr	r1, [pc, #40]	; (250c <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    24e4:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    24e6:	4361      	muls	r1, r4
{
    24e8:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    24ea:	4a09      	ldr	r2, [pc, #36]	; (2510 <onoff_start+0x3c>)
    24ec:	4809      	ldr	r0, [pc, #36]	; (2514 <onoff_start+0x40>)
    24ee:	f004 f875 	bl	65dc <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    24f2:	1e01      	subs	r1, r0, #0
    24f4:	da05      	bge.n	2502 <onoff_start+0x2e>
		notify(mgr, err);
    24f6:	4630      	mov	r0, r6
    24f8:	462b      	mov	r3, r5
	}
}
    24fa:	b002      	add	sp, #8
    24fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    2500:	4718      	bx	r3
}
    2502:	b002      	add	sp, #8
    2504:	bd70      	pop	{r4, r5, r6, pc}
    2506:	bf00      	nop
    2508:	2000d344 	.word	0x2000d344
    250c:	b6db6db7 	.word	0xb6db6db7
    2510:	0000664f 	.word	0x0000664f
    2514:	00006c90 	.word	0x00006c90

00002518 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    2518:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    251a:	2200      	movs	r2, #0
    251c:	2101      	movs	r1, #1
{
    251e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2520:	2005      	movs	r0, #5
    2522:	f7ff fb6d 	bl	1c00 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2526:	480f      	ldr	r0, [pc, #60]	; (2564 <clk_init+0x4c>)
    2528:	f001 f9b6 	bl	3898 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    252c:	4b0e      	ldr	r3, [pc, #56]	; (2568 <clk_init+0x50>)
    252e:	4298      	cmp	r0, r3
    2530:	d115      	bne.n	255e <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2532:	f004 fadf 	bl	6af4 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    2536:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2538:	490c      	ldr	r1, [pc, #48]	; (256c <clk_init+0x54>)
    253a:	4630      	mov	r0, r6
    253c:	f003 fec2 	bl	62c4 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2540:	2800      	cmp	r0, #0
    2542:	db0b      	blt.n	255c <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2544:	2501      	movs	r5, #1
	struct nrf_clock_control_data *data = dev->data;
    2546:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2548:	4908      	ldr	r1, [pc, #32]	; (256c <clk_init+0x54>)
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    254a:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    254c:	f104 001c 	add.w	r0, r4, #28
    2550:	f003 feb8 	bl	62c4 <onoff_manager_init>
		if (err < 0) {
    2554:	2800      	cmp	r0, #0
    2556:	db01      	blt.n	255c <clk_init+0x44>
	}

	return 0;
    2558:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    255a:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    255c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    255e:	f06f 0004 	mvn.w	r0, #4
    2562:	e7fb      	b.n	255c <clk_init+0x44>
    2564:	000025ad 	.word	0x000025ad
    2568:	0bad0000 	.word	0x0bad0000
    256c:	000070b8 	.word	0x000070b8

00002570 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2570:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    2572:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
    2574:	4601      	mov	r1, r0
	sub_data->cb = NULL;
    2576:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
    2578:	434b      	muls	r3, r1
    257a:	480a      	ldr	r0, [pc, #40]	; (25a4 <clkstarted_handle.constprop.0+0x34>)
    257c:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    257e:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
    2580:	e9d4 520e 	ldrd	r5, r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    2584:	4418      	add	r0, r3
	sub_data->cb = NULL;
    2586:	63a6      	str	r6, [r4, #56]	; 0x38
	void *user_data = sub_data->user_data;
    2588:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
    258a:	f003 ffe7 	bl	655c <set_on_state>
	if (callback) {
    258e:	b135      	cbz	r5, 259e <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
    2590:	462b      	mov	r3, r5
    2592:	9a01      	ldr	r2, [sp, #4]
    2594:	4804      	ldr	r0, [pc, #16]	; (25a8 <clkstarted_handle.constprop.0+0x38>)
}
    2596:	b002      	add	sp, #8
    2598:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    259c:	4718      	bx	r3
}
    259e:	b002      	add	sp, #8
    25a0:	bd70      	pop	{r4, r5, r6, pc}
    25a2:	bf00      	nop
    25a4:	2000d344 	.word	0x2000d344
    25a8:	00006c90 	.word	0x00006c90

000025ac <clock_event_handler>:
	switch (event) {
    25ac:	b110      	cbz	r0, 25b4 <clock_event_handler+0x8>
    25ae:	2801      	cmp	r0, #1
    25b0:	d004      	beq.n	25bc <clock_event_handler+0x10>
    25b2:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    25b4:	4b03      	ldr	r3, [pc, #12]	; (25c4 <clock_event_handler+0x18>)
    25b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    25b8:	075b      	lsls	r3, r3, #29
    25ba:	d101      	bne.n	25c0 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    25bc:	f7ff bfd8 	b.w	2570 <clkstarted_handle.constprop.0>
}
    25c0:	4770      	bx	lr
    25c2:	bf00      	nop
    25c4:	2000d344 	.word	0x2000d344

000025c8 <generic_hfclk_start>:
{
    25c8:	b508      	push	{r3, lr}
	__asm__ volatile(
    25ca:	f04f 0320 	mov.w	r3, #32
    25ce:	f3ef 8111 	mrs	r1, BASEPRI
    25d2:	f383 8812 	msr	BASEPRI_MAX, r3
    25d6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    25da:	4a12      	ldr	r2, [pc, #72]	; (2624 <generic_hfclk_start+0x5c>)
    25dc:	6813      	ldr	r3, [r2, #0]
    25de:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    25e2:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    25e6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    25e8:	d00c      	beq.n	2604 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    25ea:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    25ee:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    25f2:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    25f6:	f013 0301 	ands.w	r3, r3, #1
    25fa:	d003      	beq.n	2604 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    25fc:	480a      	ldr	r0, [pc, #40]	; (2628 <generic_hfclk_start+0x60>)
    25fe:	f003 ffad 	bl	655c <set_on_state>
			already_started = true;
    2602:	2301      	movs	r3, #1
	__asm__ volatile(
    2604:	f381 8811 	msr	BASEPRI, r1
    2608:	f3bf 8f6f 	isb	sy
	if (already_started) {
    260c:	b123      	cbz	r3, 2618 <generic_hfclk_start+0x50>
}
    260e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    2612:	2000      	movs	r0, #0
    2614:	f7ff bfac 	b.w	2570 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2618:	2001      	movs	r0, #1
}
    261a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    261e:	f004 ba77 	b.w	6b10 <nrfx_clock_start>
    2622:	bf00      	nop
    2624:	2000d394 	.word	0x2000d394
    2628:	2000d384 	.word	0x2000d384

0000262c <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    262c:	4b07      	ldr	r3, [pc, #28]	; (264c <generic_hfclk_stop+0x20>)
    262e:	e8d3 2fef 	ldaex	r2, [r3]
    2632:	f022 0102 	bic.w	r1, r2, #2
    2636:	e8c3 1fe0 	stlex	r0, r1, [r3]
    263a:	2800      	cmp	r0, #0
    263c:	d1f7      	bne.n	262e <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    263e:	07d3      	lsls	r3, r2, #31
    2640:	d402      	bmi.n	2648 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    2642:	2001      	movs	r0, #1
    2644:	f004 baa5 	b.w	6b92 <nrfx_clock_stop>
}
    2648:	4770      	bx	lr
    264a:	bf00      	nop
    264c:	2000d394 	.word	0x2000d394

00002650 <z_nrf_clock_control_lf_on>:
{
    2650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2654:	2201      	movs	r2, #1
    2656:	4607      	mov	r7, r0
    2658:	4935      	ldr	r1, [pc, #212]	; (2730 <z_nrf_clock_control_lf_on+0xe0>)
    265a:	e8d1 3fef 	ldaex	r3, [r1]
    265e:	e8c1 2fe0 	stlex	r0, r2, [r1]
    2662:	2800      	cmp	r0, #0
    2664:	d1f9      	bne.n	265a <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    2666:	b933      	cbnz	r3, 2676 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2668:	4932      	ldr	r1, [pc, #200]	; (2734 <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
    266a:	4833      	ldr	r0, [pc, #204]	; (2738 <z_nrf_clock_control_lf_on+0xe8>)
    266c:	604b      	str	r3, [r1, #4]
    266e:	60cb      	str	r3, [r1, #12]
    2670:	608a      	str	r2, [r1, #8]
    2672:	f003 fe3a 	bl	62ea <onoff_request>
	switch (start_mode) {
    2676:	1e7b      	subs	r3, r7, #1
    2678:	2b01      	cmp	r3, #1
    267a:	d831      	bhi.n	26e0 <z_nrf_clock_control_lf_on+0x90>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    267c:	2f01      	cmp	r7, #1
    267e:	d107      	bne.n	2690 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2680:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2684:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2688:	f003 0303 	and.w	r3, r3, #3
    268c:	2b02      	cmp	r3, #2
    268e:	d027      	beq.n	26e0 <z_nrf_clock_control_lf_on+0x90>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2690:	f004 fa99 	bl	6bc6 <k_is_in_isr>
    2694:	4604      	mov	r4, r0
    2696:	b918      	cbnz	r0, 26a0 <z_nrf_clock_control_lf_on+0x50>
	return !z_sys_post_kernel;
    2698:	4b28      	ldr	r3, [pc, #160]	; (273c <z_nrf_clock_control_lf_on+0xec>)
	int key = isr_mode ? irq_lock() : 0;
    269a:	781b      	ldrb	r3, [r3, #0]
    269c:	2b00      	cmp	r3, #0
    269e:	d13f      	bne.n	2720 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    26a0:	f04f 0320 	mov.w	r3, #32
    26a4:	f3ef 8611 	mrs	r6, BASEPRI
    26a8:	f383 8812 	msr	BASEPRI_MAX, r3
    26ac:	f3bf 8f6f 	isb	sy
    26b0:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    26b2:	f04f 2550 	mov.w	r5, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    26b6:	f04f 0800 	mov.w	r8, #0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    26ba:	f8df 9084 	ldr.w	r9, [pc, #132]	; 2740 <z_nrf_clock_control_lf_on+0xf0>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    26be:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    26c2:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    26c6:	03d2      	lsls	r2, r2, #15
    26c8:	d50c      	bpl.n	26e4 <z_nrf_clock_control_lf_on+0x94>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    26ca:	f003 0303 	and.w	r3, r3, #3
    26ce:	2b02      	cmp	r3, #2
    26d0:	d001      	beq.n	26d6 <z_nrf_clock_control_lf_on+0x86>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    26d2:	2f01      	cmp	r7, #1
    26d4:	d106      	bne.n	26e4 <z_nrf_clock_control_lf_on+0x94>
	if (isr_mode) {
    26d6:	b1ec      	cbz	r4, 2714 <z_nrf_clock_control_lf_on+0xc4>
	__asm__ volatile(
    26d8:	f386 8811 	msr	BASEPRI, r6
    26dc:	f3bf 8f6f 	isb	sy
}
    26e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    26e4:	4630      	mov	r0, r6
    26e6:	f7ff fa35 	bl	1b54 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    26ea:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    26ee:	b2db      	uxtb	r3, r3
    26f0:	2b01      	cmp	r3, #1
    26f2:	d1e4      	bne.n	26be <z_nrf_clock_control_lf_on+0x6e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    26f4:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    26f8:	2a00      	cmp	r2, #0
    26fa:	d0e0      	beq.n	26be <z_nrf_clock_control_lf_on+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    26fc:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2700:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    2704:	2202      	movs	r2, #2
    2706:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    270a:	2220      	movs	r2, #32
    270c:	f8c9 2180 	str.w	r2, [r9, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2710:	60ab      	str	r3, [r5, #8]
}
    2712:	e7d4      	b.n	26be <z_nrf_clock_control_lf_on+0x6e>
    p_reg->INTENSET = mask;
    2714:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2718:	2202      	movs	r2, #2
    271a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    271e:	e7df      	b.n	26e0 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    2720:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2724:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    2726:	4606      	mov	r6, r0
    2728:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    272c:	e7c1      	b.n	26b2 <z_nrf_clock_control_lf_on+0x62>
    272e:	bf00      	nop
    2730:	2000d398 	.word	0x2000d398
    2734:	2000d334 	.word	0x2000d334
    2738:	2000d360 	.word	0x2000d360
    273c:	2000d4e6 	.word	0x2000d4e6
    2740:	e000e100 	.word	0xe000e100

00002744 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2744:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2746:	4808      	ldr	r0, [pc, #32]	; (2768 <uart_console_init+0x24>)
    2748:	4b08      	ldr	r3, [pc, #32]	; (276c <uart_console_init+0x28>)
    274a:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    274c:	f004 fa2d 	bl	6baa <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    2750:	b138      	cbz	r0, 2762 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    2752:	4807      	ldr	r0, [pc, #28]	; (2770 <uart_console_init+0x2c>)
    2754:	f7ff fea0 	bl	2498 <__stdout_hook_install>
	__printk_hook_install(console_out);
    2758:	4805      	ldr	r0, [pc, #20]	; (2770 <uart_console_init+0x2c>)
    275a:	f7fe fe37 	bl	13cc <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    275e:	2000      	movs	r0, #0
}
    2760:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2762:	f06f 0012 	mvn.w	r0, #18
    2766:	e7fb      	b.n	2760 <uart_console_init+0x1c>
    2768:	00006cd8 	.word	0x00006cd8
    276c:	2000d39c 	.word	0x2000d39c
    2770:	00002775 	.word	0x00002775

00002774 <console_out>:
	if ('\n' == c) {
    2774:	280a      	cmp	r0, #10
{
    2776:	b538      	push	{r3, r4, r5, lr}
    2778:	4604      	mov	r4, r0
    277a:	4d07      	ldr	r5, [pc, #28]	; (2798 <console_out+0x24>)
	if ('\n' == c) {
    277c:	d104      	bne.n	2788 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    277e:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2780:	6883      	ldr	r3, [r0, #8]
    2782:	210d      	movs	r1, #13
    2784:	685b      	ldr	r3, [r3, #4]
    2786:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    2788:	6828      	ldr	r0, [r5, #0]
    278a:	6883      	ldr	r3, [r0, #8]
    278c:	b2e1      	uxtb	r1, r4
    278e:	685b      	ldr	r3, [r3, #4]
    2790:	4798      	blx	r3
}
    2792:	4620      	mov	r0, r4
    2794:	bd38      	pop	{r3, r4, r5, pc}
    2796:	bf00      	nop
    2798:	2000d39c 	.word	0x2000d39c

0000279c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    279c:	b530      	push	{r4, r5, lr}
	return port->config;
    279e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    27a0:	f001 051f 	and.w	r5, r1, #31
    27a4:	7b04      	ldrb	r4, [r0, #12]
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    27a6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    27aa:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    27ae:	b085      	sub	sp, #20
    27b0:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    27b4:	d104      	bne.n	27c0 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    27b6:	4628      	mov	r0, r5
    27b8:	f001 fafc 	bl	3db4 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    27bc:	2000      	movs	r0, #0
    27be:	e02c      	b.n	281a <CONFIG_MAIN_STACK_SIZE+0x1a>
	if (mode == GPIO_INT_MODE_LEVEL) {
    27c0:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    27c4:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    27c8:	d129      	bne.n	281e <CONFIG_MAIN_STACK_SIZE+0x1e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    27ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    27ce:	bf0c      	ite	eq
    27d0:	2304      	moveq	r3, #4
    27d2:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    27d4:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    27d8:	6883      	ldr	r3, [r0, #8]
    27da:	fa23 f101 	lsr.w	r1, r3, r1
    27de:	07c9      	lsls	r1, r1, #31
    27e0:	d429      	bmi.n	2836 <CONFIG_MAIN_STACK_SIZE+0x36>
    27e2:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    27e6:	d126      	bne.n	2836 <CONFIG_MAIN_STACK_SIZE+0x36>

NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    27e8:	4a1b      	ldr	r2, [pc, #108]	; (2858 <CONFIG_MAIN_STACK_SIZE+0x58>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    27ea:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    27ee:	3380      	adds	r3, #128	; 0x80
    27f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    27f4:	07db      	lsls	r3, r3, #31
    27f6:	d41e      	bmi.n	2836 <CONFIG_MAIN_STACK_SIZE+0x36>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    27f8:	f10d 0407 	add.w	r4, sp, #7
    27fc:	4621      	mov	r1, r4
    27fe:	4628      	mov	r0, r5
    2800:	f001 fa40 	bl	3c84 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2804:	4b15      	ldr	r3, [pc, #84]	; (285c <CONFIG_MAIN_STACK_SIZE+0x5c>)
    2806:	4298      	cmp	r0, r3
    2808:	d114      	bne.n	2834 <CONFIG_MAIN_STACK_SIZE+0x34>
			err = nrfx_gpiote_channel_alloc(&ch);
    280a:	4620      	mov	r0, r4
    280c:	f001 fa88 	bl	3d20 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2810:	4b13      	ldr	r3, [pc, #76]	; (2860 <CONFIG_MAIN_STACK_SIZE+0x60>)
    2812:	4298      	cmp	r0, r3
    2814:	d00e      	beq.n	2834 <CONFIG_MAIN_STACK_SIZE+0x34>
				return -ENOMEM;
    2816:	f06f 000b 	mvn.w	r0, #11
}
    281a:	b005      	add	sp, #20
    281c:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    281e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    2822:	d005      	beq.n	2830 <CONFIG_MAIN_STACK_SIZE+0x30>
    2824:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    2828:	bf0c      	ite	eq
    282a:	2302      	moveq	r3, #2
    282c:	2301      	movne	r3, #1
    282e:	e7d1      	b.n	27d4 <gpio_nrfx_pin_interrupt_configure+0x38>
    2830:	2303      	movs	r3, #3
    2832:	e7cf      	b.n	27d4 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    2834:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2836:	2300      	movs	r3, #0
    2838:	4628      	mov	r0, r5
    283a:	4619      	mov	r1, r3
    283c:	aa02      	add	r2, sp, #8
    283e:	f001 f8f7 	bl	3a30 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2842:	4b07      	ldr	r3, [pc, #28]	; (2860 <CONFIG_MAIN_STACK_SIZE+0x60>)
    2844:	4298      	cmp	r0, r3
    2846:	d104      	bne.n	2852 <CONFIG_MAIN_STACK_SIZE+0x52>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2848:	2101      	movs	r1, #1
    284a:	4628      	mov	r0, r5
    284c:	f001 fa6e 	bl	3d2c <nrfx_gpiote_trigger_enable>
    2850:	e7b4      	b.n	27bc <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    2852:	f06f 0004 	mvn.w	r0, #4
    2856:	e7e0      	b.n	281a <CONFIG_MAIN_STACK_SIZE+0x1a>
    2858:	50842500 	.word	0x50842500
    285c:	0bad0004 	.word	0x0bad0004
    2860:	0bad0000 	.word	0x0bad0000

00002864 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2864:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2866:	f001 fa4b 	bl	3d00 <nrfx_gpiote_is_init>
    286a:	4604      	mov	r4, r0
    286c:	b968      	cbnz	r0, 288a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    286e:	f001 fa1f 	bl	3cb0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2872:	4b08      	ldr	r3, [pc, #32]	; (2894 <gpio_nrfx_init+0x30>)
    2874:	4298      	cmp	r0, r3
    2876:	d10a      	bne.n	288e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2878:	4621      	mov	r1, r4
    287a:	4807      	ldr	r0, [pc, #28]	; (2898 <gpio_nrfx_init+0x34>)
    287c:	f001 f9fc 	bl	3c78 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2880:	4622      	mov	r2, r4
    2882:	2105      	movs	r1, #5
    2884:	200d      	movs	r0, #13
    2886:	f7ff f9bb 	bl	1c00 <z_arm_irq_priority_set>
		return 0;
    288a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    288c:	bd10      	pop	{r4, pc}
		return -EIO;
    288e:	f06f 0004 	mvn.w	r0, #4
    2892:	e7fb      	b.n	288c <gpio_nrfx_init+0x28>
    2894:	0bad0000 	.word	0x0bad0000
    2898:	0000289d 	.word	0x0000289d

0000289c <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    289c:	0943      	lsrs	r3, r0, #5
{
    289e:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    28a0:	d111      	bne.n	28c6 <nrfx_gpio_handler+0x2a>
	return list->head;
    28a2:	4b09      	ldr	r3, [pc, #36]	; (28c8 <nrfx_gpio_handler+0x2c>)
    28a4:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    28a6:	b171      	cbz	r1, 28c6 <nrfx_gpio_handler+0x2a>
	gpio_fire_callbacks(list, port, BIT(pin));
    28a8:	2301      	movs	r3, #1
	return node->next;
    28aa:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    28ac:	4e07      	ldr	r6, [pc, #28]	; (28cc <nrfx_gpio_handler+0x30>)
    28ae:	fa03 f500 	lsl.w	r5, r3, r0
		if (cb->pin_mask & pins) {
    28b2:	688a      	ldr	r2, [r1, #8]
    28b4:	402a      	ands	r2, r5
    28b6:	d002      	beq.n	28be <nrfx_gpio_handler+0x22>
			cb->handler(port, cb, cb->pin_mask & pins);
    28b8:	4630      	mov	r0, r6
    28ba:	684b      	ldr	r3, [r1, #4]
    28bc:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    28be:	b114      	cbz	r4, 28c6 <nrfx_gpio_handler+0x2a>
    28c0:	4621      	mov	r1, r4
    28c2:	6824      	ldr	r4, [r4, #0]
    28c4:	e7f5      	b.n	28b2 <nrfx_gpio_handler+0x16>
}
    28c6:	bd70      	pop	{r4, r5, r6, pc}
    28c8:	2000d3a0 	.word	0x2000d3a0
    28cc:	00006ca8 	.word	0x00006ca8

000028d0 <gpio_nrfx_pin_configure>:
{
    28d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    28d4:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    28d6:	f001 051f 	and.w	r5, r1, #31
    28da:	7b3b      	ldrb	r3, [r7, #12]
{
    28dc:	460e      	mov	r6, r1
	if (flags == GPIO_DISCONNECTED) {
    28de:	4614      	mov	r4, r2
{
    28e0:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    28e2:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    28e6:	b9ca      	cbnz	r2, 291c <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    28e8:	a902      	add	r1, sp, #8
    28ea:	4628      	mov	r0, r5
    28ec:	f001 f9ca 	bl	3c84 <nrfx_gpiote_channel_get>
    28f0:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    28f2:	4628      	mov	r0, r5
    28f4:	f001 fa86 	bl	3e04 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    28f8:	4b49      	ldr	r3, [pc, #292]	; (2a20 <gpio_nrfx_pin_configure+0x150>)
    28fa:	4298      	cmp	r0, r3
    28fc:	d004      	beq.n	2908 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    28fe:	f06f 0004 	mvn.w	r0, #4
}
    2902:	b005      	add	sp, #20
    2904:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    2908:	4284      	cmp	r4, r0
    290a:	d105      	bne.n	2918 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    290c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2910:	f001 fa00 	bl	3d14 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2914:	42a0      	cmp	r0, r4
    2916:	d1f2      	bne.n	28fe <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2918:	2000      	movs	r0, #0
    291a:	e7f2      	b.n	2902 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    291c:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    2920:	f10d 0103 	add.w	r1, sp, #3
    2924:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    2926:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    292a:	f001 f9ab 	bl	3c84 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    292e:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    2930:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2932:	4649      	mov	r1, r9
    2934:	4628      	mov	r0, r5
    2936:	aa02      	add	r2, sp, #8
    2938:	f001 f87a 	bl	3a30 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    293c:	4b38      	ldr	r3, [pc, #224]	; (2a20 <gpio_nrfx_pin_configure+0x150>)
    293e:	4298      	cmp	r0, r3
    2940:	d002      	beq.n	2948 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    2942:	f06f 0015 	mvn.w	r0, #21
    2946:	e7dc      	b.n	2902 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    2948:	4580      	cmp	r8, r0
    294a:	d103      	bne.n	2954 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    294c:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2950:	f001 f9e0 	bl	3d14 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    2954:	03a3      	lsls	r3, r4, #14
    2956:	d54f      	bpl.n	29f8 <gpio_nrfx_pin_configure+0x128>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    2958:	f240 6306 	movw	r3, #1542	; 0x606
    295c:	f240 2206 	movw	r2, #518	; 0x206
    2960:	4023      	ands	r3, r4
    2962:	4293      	cmp	r3, r2
    2964:	d03a      	beq.n	29dc <gpio_nrfx_pin_configure+0x10c>
    2966:	d80c      	bhi.n	2982 <gpio_nrfx_pin_configure+0xb2>
    2968:	2b06      	cmp	r3, #6
    296a:	d015      	beq.n	2998 <gpio_nrfx_pin_configure+0xc8>
    296c:	d804      	bhi.n	2978 <gpio_nrfx_pin_configure+0xa8>
    296e:	b19b      	cbz	r3, 2998 <gpio_nrfx_pin_configure+0xc8>
    2970:	2b02      	cmp	r3, #2
    2972:	d1e6      	bne.n	2942 <gpio_nrfx_pin_configure+0x72>
    2974:	2304      	movs	r3, #4
    2976:	e00f      	b.n	2998 <gpio_nrfx_pin_configure+0xc8>
    2978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    297c:	d1e1      	bne.n	2942 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    297e:	2301      	movs	r3, #1
    2980:	e00a      	b.n	2998 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    2982:	f240 4202 	movw	r2, #1026	; 0x402
    2986:	4293      	cmp	r3, r2
    2988:	d02a      	beq.n	29e0 <gpio_nrfx_pin_configure+0x110>
    298a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    298e:	d029      	beq.n	29e4 <gpio_nrfx_pin_configure+0x114>
    2990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2994:	d1d5      	bne.n	2942 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    2996:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    2998:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    299c:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    29a0:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    29a4:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    29a6:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    29aa:	bf4c      	ite	mi
    29ac:	2303      	movmi	r3, #3
		return NRF_GPIO_PIN_PULLDOWN;
    29ae:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    29b2:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    29b4:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    29b8:	d516      	bpl.n	29e8 <gpio_nrfx_pin_configure+0x118>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    29ba:	2101      	movs	r1, #1
    29bc:	687b      	ldr	r3, [r7, #4]
    29be:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    29c2:	609e      	str	r6, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    29c4:	2200      	movs	r2, #0
    29c6:	4628      	mov	r0, r5
    29c8:	a901      	add	r1, sp, #4
    29ca:	f001 f8db 	bl	3b84 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    29ce:	4b14      	ldr	r3, [pc, #80]	; (2a20 <gpio_nrfx_pin_configure+0x150>)
    29d0:	4298      	cmp	r0, r3
    29d2:	bf14      	ite	ne
    29d4:	f06f 0015 	mvnne.w	r0, #21
    29d8:	2000      	moveq	r0, #0
    29da:	e792      	b.n	2902 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    29dc:	2307      	movs	r3, #7
    29de:	e7db      	b.n	2998 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    29e0:	2305      	movs	r3, #5
    29e2:	e7d9      	b.n	2998 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    29e4:	2303      	movs	r3, #3
    29e6:	e7d7      	b.n	2998 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    29e8:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    29ea:	bf41      	itttt	mi
    29ec:	2101      	movmi	r1, #1
    29ee:	687b      	ldrmi	r3, [r7, #4]
    29f0:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    29f4:	60de      	strmi	r6, [r3, #12]
}
    29f6:	e7e5      	b.n	29c4 <gpio_nrfx_pin_configure+0xf4>
	if (flags & GPIO_PULL_UP) {
    29f8:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    29fa:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    29fe:	bf4c      	ite	mi
    2a00:	2403      	movmi	r4, #3
    2a02:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2a06:	461a      	mov	r2, r3
    2a08:	4628      	mov	r0, r5
    2a0a:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    2a0c:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2a10:	f001 f80e 	bl	3a30 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2a14:	4b02      	ldr	r3, [pc, #8]	; (2a20 <gpio_nrfx_pin_configure+0x150>)
    2a16:	4298      	cmp	r0, r3
    2a18:	f43f af7e 	beq.w	2918 <gpio_nrfx_pin_configure+0x48>
    2a1c:	e791      	b.n	2942 <gpio_nrfx_pin_configure+0x72>
    2a1e:	bf00      	nop
    2a20:	0bad0000 	.word	0x0bad0000

00002a24 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    2a24:	4b02      	ldr	r3, [pc, #8]	; (2a30 <flash_nrf_pages_layout+0xc>)
    2a26:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    2a28:	2301      	movs	r3, #1
    2a2a:	6013      	str	r3, [r2, #0]
}
    2a2c:	4770      	bx	lr
    2a2e:	bf00      	nop
    2a30:	2000d3ac 	.word	0x2000d3ac

00002a34 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    2a34:	4800      	ldr	r0, [pc, #0]	; (2a38 <flash_nrf_get_parameters+0x4>)
    2a36:	4770      	bx	lr
    2a38:	0000710c 	.word	0x0000710c

00002a3c <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    2a3c:	b510      	push	{r4, lr}
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    2a3e:	f004 f8b0 	bl	6ba2 <nrfx_nvmc_flash_page_count_get>
    2a42:	4c03      	ldr	r4, [pc, #12]	; (2a50 <nrf_flash_init+0x14>)
    2a44:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    2a46:	f004 f8a9 	bl	6b9c <nrfx_nvmc_flash_page_size_get>
    2a4a:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    2a4c:	2000      	movs	r0, #0
    2a4e:	bd10      	pop	{r4, pc}
    2a50:	2000d3ac 	.word	0x2000d3ac

00002a54 <flash_nrf_erase>:
{
    2a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a56:	460e      	mov	r6, r1
    2a58:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    2a5a:	f004 f89f 	bl	6b9c <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    2a5e:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    2a60:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
    2a62:	4630      	mov	r0, r6
    2a64:	f003 fe4d 	bl	6702 <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    2a68:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
    2a6a:	b1f8      	cbz	r0, 2aac <flash_nrf_erase+0x58>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    2a6c:	fbb6 f3f5 	udiv	r3, r6, r5
    2a70:	fb05 6313 	mls	r3, r5, r3, r6
    2a74:	b923      	cbnz	r3, 2a80 <flash_nrf_erase+0x2c>
    2a76:	fbb4 f3f5 	udiv	r3, r4, r5
    2a7a:	fb05 4013 	mls	r0, r5, r3, r4
    2a7e:	b140      	cbz	r0, 2a92 <flash_nrf_erase+0x3e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    2a80:	4623      	mov	r3, r4
    2a82:	4632      	mov	r2, r6
    2a84:	2145      	movs	r1, #69	; 0x45
    2a86:	480c      	ldr	r0, [pc, #48]	; (2ab8 <flash_nrf_erase+0x64>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
    2a88:	f003 fc79 	bl	637e <z_log_minimal_printk>
		return -EINVAL;
    2a8c:	f06f 0015 	mvn.w	r0, #21
    2a90:	e00b      	b.n	2aaa <flash_nrf_erase+0x56>
		if (!n_pages) {
    2a92:	42a5      	cmp	r5, r4
    2a94:	d809      	bhi.n	2aaa <flash_nrf_erase+0x56>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    2a96:	f004 f881 	bl	6b9c <nrfx_nvmc_flash_page_size_get>
    2a9a:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    2a9c:	4638      	mov	r0, r7
    2a9e:	f001 fa93 	bl	3fc8 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
    2aa2:	1b64      	subs	r4, r4, r5
    2aa4:	442f      	add	r7, r5
    2aa6:	d1f9      	bne.n	2a9c <flash_nrf_erase+0x48>
	return ret;
    2aa8:	4620      	mov	r0, r4
}
    2aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("invalid address: 0x%08lx:%zu",
    2aac:	4623      	mov	r3, r4
    2aae:	4632      	mov	r2, r6
    2ab0:	2145      	movs	r1, #69	; 0x45
    2ab2:	4802      	ldr	r0, [pc, #8]	; (2abc <flash_nrf_erase+0x68>)
    2ab4:	e7e8      	b.n	2a88 <flash_nrf_erase+0x34>
    2ab6:	bf00      	nop
    2ab8:	00007d70 	.word	0x00007d70
    2abc:	00007d94 	.word	0x00007d94

00002ac0 <flash_nrf_write>:
{
    2ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ac2:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    2ac4:	4619      	mov	r1, r3
    2ac6:	4630      	mov	r0, r6
{
    2ac8:	4617      	mov	r7, r2
    2aca:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    2acc:	f003 fe19 	bl	6702 <is_regular_addr_valid>
    2ad0:	b940      	cbnz	r0, 2ae4 <flash_nrf_write+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    2ad2:	4623      	mov	r3, r4
    2ad4:	4632      	mov	r2, r6
    2ad6:	2145      	movs	r1, #69	; 0x45
    2ad8:	4812      	ldr	r0, [pc, #72]	; (2b24 <flash_nrf_write+0x64>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    2ada:	f003 fc50 	bl	637e <z_log_minimal_printk>
		return -EINVAL;
    2ade:	f06f 0015 	mvn.w	r0, #21
}
    2ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (data & 0x3) ? false : true;
    2ae4:	ea44 0506 	orr.w	r5, r4, r6
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    2ae8:	f015 0503 	ands.w	r5, r5, #3
    2aec:	d004      	beq.n	2af8 <flash_nrf_write+0x38>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    2aee:	4623      	mov	r3, r4
    2af0:	4632      	mov	r2, r6
    2af2:	2145      	movs	r1, #69	; 0x45
    2af4:	480c      	ldr	r0, [pc, #48]	; (2b28 <flash_nrf_write+0x68>)
    2af6:	e7f0      	b.n	2ada <flash_nrf_write+0x1a>
	if (!len) {
    2af8:	b18c      	cbz	r4, 2b1e <flash_nrf_write+0x5e>
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    2afa:	f024 0403 	bic.w	r4, r4, #3
    2afe:	42ac      	cmp	r4, r5
    2b00:	eb05 0006 	add.w	r0, r5, r6
    2b04:	d106      	bne.n	2b14 <flash_nrf_write+0x54>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    2b06:	4a09      	ldr	r2, [pc, #36]	; (2b2c <flash_nrf_write+0x6c>)
    2b08:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    2b0c:	07db      	lsls	r3, r3, #31
    2b0e:	d5fb      	bpl.n	2b08 <flash_nrf_write+0x48>
	return ret;
    2b10:	2000      	movs	r0, #0
    2b12:	e7e6      	b.n	2ae2 <flash_nrf_write+0x22>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
    2b14:	5979      	ldr	r1, [r7, r5]
    2b16:	f001 fa75 	bl	4004 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    2b1a:	3504      	adds	r5, #4
}
    2b1c:	e7ef      	b.n	2afe <flash_nrf_write+0x3e>
		return 0;
    2b1e:	4620      	mov	r0, r4
    2b20:	e7df      	b.n	2ae2 <flash_nrf_write+0x22>
    2b22:	bf00      	nop
    2b24:	00007d94 	.word	0x00007d94
    2b28:	00007db6 	.word	0x00007db6
    2b2c:	50039000 	.word	0x50039000

00002b30 <flash_nrf_read>:
{
    2b30:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2b32:	460c      	mov	r4, r1
	if (is_regular_addr_valid(addr, len)) {
    2b34:	4619      	mov	r1, r3
    2b36:	4620      	mov	r0, r4
    2b38:	9301      	str	r3, [sp, #4]
{
    2b3a:	4615      	mov	r5, r2
	if (is_regular_addr_valid(addr, len)) {
    2b3c:	f003 fde1 	bl	6702 <is_regular_addr_valid>
    2b40:	9b01      	ldr	r3, [sp, #4]
    2b42:	b940      	cbnz	r0, 2b56 <flash_nrf_read+0x26>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    2b44:	4809      	ldr	r0, [pc, #36]	; (2b6c <flash_nrf_read+0x3c>)
    2b46:	4622      	mov	r2, r4
    2b48:	2145      	movs	r1, #69	; 0x45
    2b4a:	f003 fc18 	bl	637e <z_log_minimal_printk>
    2b4e:	f06f 0015 	mvn.w	r0, #21
}
    2b52:	b003      	add	sp, #12
    2b54:	bd30      	pop	{r4, r5, pc}
	if (!len) {
    2b56:	b133      	cbz	r3, 2b66 <flash_nrf_read+0x36>
	memcpy(data, (void *)addr, len);
    2b58:	461a      	mov	r2, r3
    2b5a:	4621      	mov	r1, r4
    2b5c:	4628      	mov	r0, r5
    2b5e:	f003 fcdd 	bl	651c <memcpy>
	return 0;
    2b62:	2000      	movs	r0, #0
    2b64:	e7f5      	b.n	2b52 <flash_nrf_read+0x22>
		return 0;
    2b66:	4618      	mov	r0, r3
    2b68:	e7f3      	b.n	2b52 <flash_nrf_read+0x22>
    2b6a:	bf00      	nop
    2b6c:	00007d94 	.word	0x00007d94

00002b70 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    2b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b72:	4605      	mov	r5, r0
    2b74:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
    2b76:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2b78:	f004 f825 	bl	6bc6 <k_is_in_isr>
    2b7c:	b910      	cbnz	r0, 2b84 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    2b7e:	4b29      	ldr	r3, [pc, #164]	; (2c24 <uarte_nrfx_poll_out+0xb4>)
	int key;

	if (isr_mode) {
    2b80:	781b      	ldrb	r3, [r3, #0]
    2b82:	b9a3      	cbnz	r3, 2bae <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    2b84:	f04f 0320 	mov.w	r3, #32
    2b88:	f3ef 8411 	mrs	r4, BASEPRI
    2b8c:	f383 8812 	msr	BASEPRI_MAX, r3
    2b90:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    2b94:	6868      	ldr	r0, [r5, #4]
    2b96:	f003 fe13 	bl	67c0 <is_tx_ready.isra.0>
    2b9a:	bb00      	cbnz	r0, 2bde <uarte_nrfx_poll_out+0x6e>
	__asm__ volatile(
    2b9c:	f384 8811 	msr	BASEPRI, r4
    2ba0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2ba4:	e7ee      	b.n	2b84 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    2ba6:	f384 8811 	msr	BASEPRI, r4
    2baa:	f3bf 8f6f 	isb	sy
{
    2bae:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2bb0:	6868      	ldr	r0, [r5, #4]
    2bb2:	f003 fe05 	bl	67c0 <is_tx_ready.isra.0>
    2bb6:	b928      	cbnz	r0, 2bc4 <uarte_nrfx_poll_out+0x54>
    2bb8:	2001      	movs	r0, #1
    2bba:	f003 ff4d 	bl	6a58 <nrfx_busy_wait>
    2bbe:	3c01      	subs	r4, #1
    2bc0:	d1f6      	bne.n	2bb0 <uarte_nrfx_poll_out+0x40>
    2bc2:	e7f4      	b.n	2bae <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    2bc4:	f04f 0320 	mov.w	r3, #32
    2bc8:	f3ef 8411 	mrs	r4, BASEPRI
    2bcc:	f383 8812 	msr	BASEPRI_MAX, r3
    2bd0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2bd4:	6868      	ldr	r0, [r5, #4]
    2bd6:	f003 fdf3 	bl	67c0 <is_tx_ready.isra.0>
    2bda:	2800      	cmp	r0, #0
    2bdc:	d0e3      	beq.n	2ba6 <uarte_nrfx_poll_out+0x36>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    2bde:	2201      	movs	r2, #1
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    2be0:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    2be4:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    2be6:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2be8:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2bec:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2bf0:	2200      	movs	r2, #0
    2bf2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    2bf6:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    2bfa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    2bfe:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2c02:	684a      	ldr	r2, [r1, #4]
    2c04:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2c06:	bf41      	itttt	mi
    2c08:	2208      	movmi	r2, #8
    2c0a:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    2c0e:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    2c12:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2c16:	2201      	movs	r2, #1
    2c18:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    2c1a:	f384 8811 	msr	BASEPRI, r4
    2c1e:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    2c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c24:	2000d4e6 	.word	0x2000d4e6

00002c28 <uarte_nrfx_configure>:
{
    2c28:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
    2c2a:	794b      	ldrb	r3, [r1, #5]
    2c2c:	2b01      	cmp	r3, #1
    2c2e:	d026      	beq.n	2c7e <uarte_nrfx_configure+0x56>
    2c30:	2b03      	cmp	r3, #3
    2c32:	d121      	bne.n	2c78 <uarte_nrfx_configure+0x50>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2c34:	2610      	movs	r6, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2c36:	798b      	ldrb	r3, [r1, #6]
    2c38:	2b03      	cmp	r3, #3
    2c3a:	d11d      	bne.n	2c78 <uarte_nrfx_configure+0x50>
	switch (cfg->flow_ctrl) {
    2c3c:	79cc      	ldrb	r4, [r1, #7]
    2c3e:	b10c      	cbz	r4, 2c44 <uarte_nrfx_configure+0x1c>
    2c40:	2c01      	cmp	r4, #1
    2c42:	d119      	bne.n	2c78 <uarte_nrfx_configure+0x50>
	switch (cfg->parity) {
    2c44:	790a      	ldrb	r2, [r1, #4]
    2c46:	b112      	cbz	r2, 2c4e <uarte_nrfx_configure+0x26>
    2c48:	2a02      	cmp	r2, #2
    2c4a:	d115      	bne.n	2c78 <uarte_nrfx_configure+0x50>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2c4c:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2c4e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2c50:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    2c52:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2c56:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    2c58:	d065      	beq.n	2d26 <uarte_nrfx_configure+0xfe>
    2c5a:	d82d      	bhi.n	2cb8 <uarte_nrfx_configure+0x90>
    2c5c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2c60:	d064      	beq.n	2d2c <uarte_nrfx_configure+0x104>
    2c62:	d816      	bhi.n	2c92 <uarte_nrfx_configure+0x6a>
    2c64:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2c68:	d062      	beq.n	2d30 <uarte_nrfx_configure+0x108>
    2c6a:	d80a      	bhi.n	2c82 <uarte_nrfx_configure+0x5a>
    2c6c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2c70:	d061      	beq.n	2d36 <uarte_nrfx_configure+0x10e>
    2c72:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2c76:	d061      	beq.n	2d3c <uarte_nrfx_configure+0x114>
    2c78:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2c7c:	e052      	b.n	2d24 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    2c7e:	2600      	movs	r6, #0
    2c80:	e7d9      	b.n	2c36 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    2c82:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2c86:	d05c      	beq.n	2d42 <uarte_nrfx_configure+0x11a>
    2c88:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2c8c:	d1f4      	bne.n	2c78 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2c8e:	4b37      	ldr	r3, [pc, #220]	; (2d6c <uarte_nrfx_configure+0x144>)
    2c90:	e03c      	b.n	2d0c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2c92:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2c96:	d057      	beq.n	2d48 <uarte_nrfx_configure+0x120>
    2c98:	d807      	bhi.n	2caa <uarte_nrfx_configure+0x82>
    2c9a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2c9e:	d055      	beq.n	2d4c <uarte_nrfx_configure+0x124>
    2ca0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2ca4:	d1e8      	bne.n	2c78 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2ca6:	4b32      	ldr	r3, [pc, #200]	; (2d70 <uarte_nrfx_configure+0x148>)
    2ca8:	e030      	b.n	2d0c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2caa:	f647 2712 	movw	r7, #31250	; 0x7a12
    2cae:	42bb      	cmp	r3, r7
    2cb0:	d1e2      	bne.n	2c78 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2cb2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2cb6:	e029      	b.n	2d0c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2cb8:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2cbc:	d048      	beq.n	2d50 <uarte_nrfx_configure+0x128>
    2cbe:	d813      	bhi.n	2ce8 <uarte_nrfx_configure+0xc0>
    2cc0:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2cc4:	d047      	beq.n	2d56 <uarte_nrfx_configure+0x12e>
    2cc6:	d809      	bhi.n	2cdc <uarte_nrfx_configure+0xb4>
    2cc8:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    2ccc:	42bb      	cmp	r3, r7
    2cce:	d044      	beq.n	2d5a <uarte_nrfx_configure+0x132>
    2cd0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2cd4:	d1d0      	bne.n	2c78 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2cd6:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2cda:	e017      	b.n	2d0c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2cdc:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2ce0:	d1ca      	bne.n	2c78 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2ce2:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2ce6:	e011      	b.n	2d0c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2ce8:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2cec:	d038      	beq.n	2d60 <uarte_nrfx_configure+0x138>
    2cee:	d808      	bhi.n	2d02 <uarte_nrfx_configure+0xda>
    2cf0:	4f20      	ldr	r7, [pc, #128]	; (2d74 <uarte_nrfx_configure+0x14c>)
    2cf2:	42bb      	cmp	r3, r7
    2cf4:	d037      	beq.n	2d66 <uarte_nrfx_configure+0x13e>
    2cf6:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2cfa:	d1bd      	bne.n	2c78 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2cfc:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2d00:	e004      	b.n	2d0c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2d02:	4f1d      	ldr	r7, [pc, #116]	; (2d78 <uarte_nrfx_configure+0x150>)
    2d04:	42bb      	cmp	r3, r7
    2d06:	d1b7      	bne.n	2c78 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2d08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    2d0c:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
    2d0e:	4334      	orrs	r4, r6
    p_reg->BAUDRATE = baudrate;
    2d10:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
    2d14:	4322      	orrs	r2, r4
	data->uart_config = *cfg;
    2d16:	1d03      	adds	r3, r0, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2d18:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    2d1c:	c903      	ldmia	r1, {r0, r1}
    2d1e:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    2d22:	2000      	movs	r0, #0
}
    2d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2d26:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2d2a:	e7ef      	b.n	2d0c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2d2c:	4b13      	ldr	r3, [pc, #76]	; (2d7c <uarte_nrfx_configure+0x154>)
    2d2e:	e7ed      	b.n	2d0c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2d30:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2d34:	e7ea      	b.n	2d0c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    2d36:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2d3a:	e7e7      	b.n	2d0c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2d3c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2d40:	e7e4      	b.n	2d0c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2d42:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2d46:	e7e1      	b.n	2d0c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2d48:	4b0d      	ldr	r3, [pc, #52]	; (2d80 <uarte_nrfx_configure+0x158>)
    2d4a:	e7df      	b.n	2d0c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2d4c:	4b0d      	ldr	r3, [pc, #52]	; (2d84 <uarte_nrfx_configure+0x15c>)
    2d4e:	e7dd      	b.n	2d0c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2d50:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2d54:	e7da      	b.n	2d0c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2d56:	4b0c      	ldr	r3, [pc, #48]	; (2d88 <uarte_nrfx_configure+0x160>)
    2d58:	e7d8      	b.n	2d0c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2d5a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2d5e:	e7d5      	b.n	2d0c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2d60:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2d64:	e7d2      	b.n	2d0c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2d66:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2d6a:	e7cf      	b.n	2d0c <uarte_nrfx_configure+0xe4>
    2d6c:	0013b000 	.word	0x0013b000
    2d70:	004ea000 	.word	0x004ea000
    2d74:	0003d090 	.word	0x0003d090
    2d78:	000f4240 	.word	0x000f4240
    2d7c:	00275000 	.word	0x00275000
    2d80:	0075c000 	.word	0x0075c000
    2d84:	003af000 	.word	0x003af000
    2d88:	013a9000 	.word	0x013a9000

00002d8c <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    2d8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    2d90:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
    2d92:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    2d96:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    2d98:	f8d8 4000 	ldr.w	r4, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    2d9c:	f8d8 900c 	ldr.w	r9, [r8, #12]
    2da0:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
    2da4:	4607      	mov	r7, r0
	data->dev = dev;
    2da6:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    2da8:	aa01      	add	r2, sp, #4
    2daa:	4648      	mov	r0, r9
    2dac:	f003 fd70 	bl	6890 <pinctrl_lookup_state>
	if (ret < 0) {
    2db0:	1e05      	subs	r5, r0, #0
    2db2:	db1f      	blt.n	2df4 <uarte_instance_init.constprop.0+0x68>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    2db4:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    2db6:	f8d9 2000 	ldr.w	r2, [r9]
    2dba:	7919      	ldrb	r1, [r3, #4]
    2dbc:	6818      	ldr	r0, [r3, #0]
    2dbe:	f000 fabb 	bl	3338 <pinctrl_configure_pins>
	if (err < 0) {
    2dc2:	1e05      	subs	r5, r0, #0
    2dc4:	db16      	blt.n	2df4 <uarte_instance_init.constprop.0+0x68>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    2dc6:	4638      	mov	r0, r7
    2dc8:	1d31      	adds	r1, r6, #4
    2dca:	f7ff ff2d 	bl	2c28 <uarte_nrfx_configure>
	if (err) {
    2dce:	4605      	mov	r5, r0
    2dd0:	b980      	cbnz	r0, 2df4 <uarte_instance_init.constprop.0+0x68>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    2dd2:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    2dd6:	0799      	lsls	r1, r3, #30
    2dd8:	d51c      	bpl.n	2e14 <uarte_instance_init.constprop.0+0x88>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2dda:	f106 0012 	add.w	r0, r6, #18
    2dde:	f000 fd9f 	bl	3920 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2de2:	4b21      	ldr	r3, [pc, #132]	; (2e68 <uarte_instance_init.constprop.0+0xdc>)
    2de4:	4298      	cmp	r0, r3
    2de6:	d009      	beq.n	2dfc <uarte_instance_init.constprop.0+0x70>
		LOG_ERR("Failed to allocate PPI Channel");
    2de8:	2145      	movs	r1, #69	; 0x45
    2dea:	4820      	ldr	r0, [pc, #128]	; (2e6c <uarte_instance_init.constprop.0+0xe0>)
    2dec:	f003 fac7 	bl	637e <z_log_minimal_printk>
		return -EIO;
    2df0:	f06f 0504 	mvn.w	r5, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    2df4:	4628      	mov	r0, r5
    2df6:	b003      	add	sp, #12
    2df8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    2dfc:	7cb2      	ldrb	r2, [r6, #18]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    2dfe:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
    2e02:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    2e06:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2e0a:	2301      	movs	r3, #1
    2e0c:	4093      	lsls	r3, r2
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    2e0e:	4a18      	ldr	r2, [pc, #96]	; (2e70 <uarte_instance_init.constprop.0+0xe4>)
    2e10:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2e14:	2308      	movs	r3, #8
    2e16:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    2e1a:	f898 3008 	ldrb.w	r3, [r8, #8]
    2e1e:	b95b      	cbnz	r3, 2e38 <uarte_instance_init.constprop.0+0xac>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e20:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2e24:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    2e28:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2e2c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    2e30:	2301      	movs	r3, #1
    2e32:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2e36:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    2e38:	f8d8 3004 	ldr.w	r3, [r8, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    2e3c:	3610      	adds	r6, #16
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    2e3e:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    2e40:	bf5c      	itt	pl
    2e42:	f44f 7280 	movpl.w	r2, #256	; 0x100
    2e46:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2e4a:	06db      	lsls	r3, r3, #27
    2e4c:	bf44      	itt	mi
    2e4e:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    2e52:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    2e56:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2e58:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2e5c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2e60:	2301      	movs	r3, #1
    2e62:	60a3      	str	r3, [r4, #8]
    2e64:	60e3      	str	r3, [r4, #12]
	return 0;
    2e66:	e7c5      	b.n	2df4 <uarte_instance_init.constprop.0+0x68>
    2e68:	0bad0000 	.word	0x0bad0000
    2e6c:	00007de3 	.word	0x00007de3
    2e70:	50017000 	.word	0x50017000

00002e74 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    2e74:	2301      	movs	r3, #1
    2e76:	4083      	lsls	r3, r0
{
    2e78:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    2e7a:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2e7c:	4a0d      	ldr	r2, [pc, #52]	; (2eb4 <compare_int_lock+0x40>)
    2e7e:	e8d2 1fef 	ldaex	r1, [r2]
    2e82:	ea01 0c04 	and.w	ip, r1, r4
    2e86:	e8c2 cfee 	stlex	lr, ip, [r2]
    2e8a:	f1be 0f00 	cmp.w	lr, #0
    2e8e:	d1f6      	bne.n	2e7e <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2e90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2e94:	fa02 f000 	lsl.w	r0, r2, r0
    2e98:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
    2e9c:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    2ea0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2ea4:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    2ea8:	420b      	tst	r3, r1
}
    2eaa:	bf14      	ite	ne
    2eac:	2001      	movne	r0, #1
    2eae:	2000      	moveq	r0, #0
    2eb0:	bd10      	pop	{r4, pc}
    2eb2:	bf00      	nop
    2eb4:	2000d3b8 	.word	0x2000d3b8

00002eb8 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2eb8:	4919      	ldr	r1, [pc, #100]	; (2f20 <sys_clock_timeout_handler+0x68>)
{
    2eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ebc:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    2ebe:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2ec2:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    2ec4:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2ec8:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2ecc:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    2ece:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2ed2:	d222      	bcs.n	2f1a <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2ed4:	4b13      	ldr	r3, [pc, #76]	; (2f24 <sys_clock_timeout_handler+0x6c>)
    2ed6:	681b      	ldr	r3, [r3, #0]
    2ed8:	0a1a      	lsrs	r2, r3, #8
    2eda:	061b      	lsls	r3, r3, #24
    2edc:	195e      	adds	r6, r3, r5
    2ede:	4b12      	ldr	r3, [pc, #72]	; (2f28 <sys_clock_timeout_handler+0x70>)
    2ee0:	f142 0700 	adc.w	r7, r2, #0
    2ee4:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    2ee8:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2eea:	f001 f9dd 	bl	42a8 <sys_clock_announce>
    return p_reg->CC[ch];
    2eee:	00a3      	lsls	r3, r4, #2
    2ef0:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    2ef4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    2ef8:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    2efc:	42aa      	cmp	r2, r5
    2efe:	d10b      	bne.n	2f18 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    2f00:	b91e      	cbnz	r6, 2f0a <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    2f02:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    2f06:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2f0a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    p_reg->EVTENSET = mask;
    2f0e:	4b07      	ldr	r3, [pc, #28]	; (2f2c <sys_clock_timeout_handler+0x74>)
    2f10:	fa00 f404 	lsl.w	r4, r0, r4
    2f14:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    2f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    2f1a:	2600      	movs	r6, #0
    2f1c:	e7e5      	b.n	2eea <sys_clock_timeout_handler+0x32>
    2f1e:	bf00      	nop
    2f20:	2000c638 	.word	0x2000c638
    2f24:	2000d3bc 	.word	0x2000d3bc
    2f28:	2000c620 	.word	0x2000c620
    2f2c:	50015000 	.word	0x50015000

00002f30 <compare_int_unlock>:
	if (key) {
    2f30:	b1e1      	cbz	r1, 2f6c <compare_int_unlock+0x3c>
		atomic_or(&int_mask, BIT(chan));
    2f32:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2f34:	4a0e      	ldr	r2, [pc, #56]	; (2f70 <compare_int_unlock+0x40>)
    2f36:	4083      	lsls	r3, r0
    2f38:	e8d2 1fef 	ldaex	r1, [r2]
    2f3c:	4319      	orrs	r1, r3
    2f3e:	e8c2 1fec 	stlex	ip, r1, [r2]
    2f42:	f1bc 0f00 	cmp.w	ip, #0
    2f46:	d1f7      	bne.n	2f38 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2f48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    2f4c:	4a09      	ldr	r2, [pc, #36]	; (2f74 <compare_int_unlock+0x44>)
    2f4e:	4083      	lsls	r3, r0
    2f50:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2f54:	4b08      	ldr	r3, [pc, #32]	; (2f78 <compare_int_unlock+0x48>)
    2f56:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    2f5a:	fa23 f000 	lsr.w	r0, r3, r0
    2f5e:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f60:	bf42      	ittt	mi
    2f62:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    2f66:	4b05      	ldrmi	r3, [pc, #20]	; (2f7c <compare_int_unlock+0x4c>)
    2f68:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    2f6c:	4770      	bx	lr
    2f6e:	bf00      	nop
    2f70:	2000d3b8 	.word	0x2000d3b8
    2f74:	50015000 	.word	0x50015000
    2f78:	2000d3b4 	.word	0x2000d3b4
    2f7c:	e000e100 	.word	0xe000e100

00002f80 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    2f80:	4b0d      	ldr	r3, [pc, #52]	; (2fb8 <z_nrf_rtc_timer_read+0x38>)
    2f82:	6818      	ldr	r0, [r3, #0]
    2f84:	0a01      	lsrs	r1, r0, #8
    2f86:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    2f88:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    2f8c:	4b0b      	ldr	r3, [pc, #44]	; (2fbc <z_nrf_rtc_timer_read+0x3c>)
    2f8e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    2f92:	1818      	adds	r0, r3, r0
    2f94:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    2f98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2f9c:	d20a      	bcs.n	2fb4 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    2f9e:	4b08      	ldr	r3, [pc, #32]	; (2fc0 <z_nrf_rtc_timer_read+0x40>)
    2fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
    2fa4:	4290      	cmp	r0, r2
    2fa6:	eb71 0303 	sbcs.w	r3, r1, r3
    2faa:	d203      	bcs.n	2fb4 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    2fac:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    2fb0:	f141 0100 	adc.w	r1, r1, #0
}
    2fb4:	4770      	bx	lr
    2fb6:	bf00      	nop
    2fb8:	2000d3bc 	.word	0x2000d3bc
    2fbc:	50015000 	.word	0x50015000
    2fc0:	2000c620 	.word	0x2000c620

00002fc4 <compare_set>:
{
    2fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2fc8:	ed2d 8b02 	vpush	{d8}
    2fcc:	b085      	sub	sp, #20
    2fce:	4616      	mov	r6, r2
    2fd0:	4698      	mov	r8, r3
    2fd2:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    2fd4:	f7ff ff4e 	bl	2e74 <compare_int_lock>
    2fd8:	ee08 0a10 	vmov	s16, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    2fdc:	f7ff ffd0 	bl	2f80 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    2fe0:	42b0      	cmp	r0, r6
    2fe2:	eb71 0308 	sbcs.w	r3, r1, r8
    2fe6:	d279      	bcs.n	30dc <compare_set+0x118>
		if (target_time - curr_time > COUNTER_SPAN) {
    2fe8:	4b44      	ldr	r3, [pc, #272]	; (30fc <compare_set+0x138>)
    2fea:	1a30      	subs	r0, r6, r0
    2fec:	eb68 0101 	sbc.w	r1, r8, r1
    2ff0:	4298      	cmp	r0, r3
    2ff2:	f171 0300 	sbcs.w	r3, r1, #0
    2ff6:	d27e      	bcs.n	30f6 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    2ff8:	4b41      	ldr	r3, [pc, #260]	; (3100 <compare_set+0x13c>)
    2ffa:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    2ffe:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    3002:	45d8      	cmp	r8, fp
    3004:	bf08      	it	eq
    3006:	4556      	cmpeq	r6, sl
    3008:	d050      	beq.n	30ac <compare_set+0xe8>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    300a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
    300e:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3012:	4614      	mov	r4, r2
    3014:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3018:	f105 0750 	add.w	r7, r5, #80	; 0x50
    301c:	f109 2950 	add.w	r9, r9, #1342197760	; 0x50005000
    3020:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3022:	40ab      	lsls	r3, r5
    3024:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3028:	b2bf      	uxth	r7, r7
    302a:	f107 2750 	add.w	r7, r7, #1342197760	; 0x50005000
    302e:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    3030:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3034:	4b33      	ldr	r3, [pc, #204]	; (3104 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3036:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
     return p_reg->COUNTER;
    303a:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    303e:	1a40      	subs	r0, r0, r1
    3040:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3044:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3048:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    304a:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    304e:	d107      	bne.n	3060 <compare_set+0x9c>
    3050:	e9cd 2102 	strd	r2, r1, [sp, #8]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    3054:	2013      	movs	r0, #19
    3056:	f003 fdbc 	bl	6bd2 <z_impl_k_busy_wait>
    305a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    305e:	4b29      	ldr	r3, [pc, #164]	; (3104 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3060:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    3064:	eba4 000c 	sub.w	r0, r4, ip
    3068:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    306c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3070:	bf88      	it	hi
    3072:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3074:	2000      	movs	r0, #0
    3076:	6038      	str	r0, [r7, #0]
    3078:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    307a:	9801      	ldr	r0, [sp, #4]
    307c:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3080:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    3084:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3088:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    308c:	4281      	cmp	r1, r0
    308e:	d006      	beq.n	309e <compare_set+0xda>
	return (a - b) & COUNTER_MAX;
    3090:	1a20      	subs	r0, r4, r0
    3092:	3802      	subs	r0, #2
    3094:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3098:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    309c:	d81c      	bhi.n	30d8 <compare_set+0x114>
	return (a - b) & COUNTER_MAX;
    309e:	1aa4      	subs	r4, r4, r2
    30a0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    30a4:	eb14 0a06 	adds.w	sl, r4, r6
    30a8:	f148 0b00 	adc.w	fp, r8, #0
	return ret;
    30ac:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
    30ae:	4914      	ldr	r1, [pc, #80]	; (3100 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    30b0:	9810      	ldr	r0, [sp, #64]	; 0x40
	cc_data[chan].target_time = target_time;
    30b2:	012b      	lsls	r3, r5, #4
    30b4:	eb01 1205 	add.w	r2, r1, r5, lsl #4
	cc_data[chan].callback = handler;
    30b8:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
    30ba:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].user_context = user_data;
    30be:	9b11      	ldr	r3, [sp, #68]	; 0x44
    30c0:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    30c2:	4628      	mov	r0, r5
    30c4:	ee18 1a10 	vmov	r1, s16
    30c8:	f7ff ff32 	bl	2f30 <compare_int_unlock>
}
    30cc:	4620      	mov	r0, r4
    30ce:	b005      	add	sp, #20
    30d0:	ecbd 8b02 	vpop	{d8}
    30d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    30d8:	4620      	mov	r0, r4
    30da:	e7ae      	b.n	303a <compare_set+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    30dc:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    30de:	4a0a      	ldr	r2, [pc, #40]	; (3108 <compare_set+0x144>)
    30e0:	40ab      	lsls	r3, r5
    30e2:	e8d2 1fef 	ldaex	r1, [r2]
    30e6:	4319      	orrs	r1, r3
    30e8:	e8c2 1fe0 	stlex	r0, r1, [r2]
    30ec:	2800      	cmp	r0, #0
    30ee:	d1f8      	bne.n	30e2 <compare_set+0x11e>
    30f0:	46b2      	mov	sl, r6
    30f2:	46c3      	mov	fp, r8
    30f4:	e7da      	b.n	30ac <compare_set+0xe8>
			return -EINVAL;
    30f6:	f06f 0415 	mvn.w	r4, #21
    30fa:	e7e2      	b.n	30c2 <compare_set+0xfe>
    30fc:	01000001 	.word	0x01000001
    3100:	2000c628 	.word	0x2000c628
    3104:	50015000 	.word	0x50015000
    3108:	2000d3b4 	.word	0x2000d3b4

0000310c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    310c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    310e:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    3110:	f04f 30ff 	mov.w	r0, #4294967295
    3114:	f04f 31ff 	mov.w	r1, #4294967295
    3118:	4d16      	ldr	r5, [pc, #88]	; (3174 <sys_clock_driver_init+0x68>)
    311a:	4b17      	ldr	r3, [pc, #92]	; (3178 <sys_clock_driver_init+0x6c>)
    311c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    3120:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3124:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3128:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    312a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    312e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    3132:	4b12      	ldr	r3, [pc, #72]	; (317c <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3134:	2101      	movs	r1, #1
    3136:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    313a:	2015      	movs	r0, #21
    313c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3140:	4622      	mov	r2, r4
    3142:	f7fe fd5d 	bl	1c00 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3146:	2015      	movs	r0, #21
    3148:	f7fe fd3c 	bl	1bc4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    314c:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    314e:	4a0c      	ldr	r2, [pc, #48]	; (3180 <sys_clock_driver_init+0x74>)
    3150:	60ab      	str	r3, [r5, #8]
    3152:	602b      	str	r3, [r5, #0]
    3154:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3156:	4b0b      	ldr	r3, [pc, #44]	; (3184 <sys_clock_driver_init+0x78>)
    3158:	4a0b      	ldr	r2, [pc, #44]	; (3188 <sys_clock_driver_init+0x7c>)
    315a:	9300      	str	r3, [sp, #0]
    315c:	4620      	mov	r0, r4
    315e:	2300      	movs	r3, #0
    3160:	9401      	str	r4, [sp, #4]
    3162:	f7ff ff2f 	bl	2fc4 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3166:	4630      	mov	r0, r6
    3168:	f7ff fa72 	bl	2650 <z_nrf_clock_control_lf_on>

	return 0;
}
    316c:	4620      	mov	r0, r4
    316e:	b002      	add	sp, #8
    3170:	bd70      	pop	{r4, r5, r6, pc}
    3172:	bf00      	nop
    3174:	50015000 	.word	0x50015000
    3178:	2000c628 	.word	0x2000c628
    317c:	e000e100 	.word	0xe000e100
    3180:	2000d3b8 	.word	0x2000d3b8
    3184:	00002eb9 	.word	0x00002eb9
    3188:	007fffff 	.word	0x007fffff

0000318c <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
    318c:	4b35      	ldr	r3, [pc, #212]	; (3264 <rtc_nrf_isr+0xd8>)
{
    318e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    3192:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3196:	0791      	lsls	r1, r2, #30
    3198:	d50b      	bpl.n	31b2 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    319a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    319e:	b142      	cbz	r2, 31b2 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    31a0:	2200      	movs	r2, #0
    31a2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    31a6:	4a30      	ldr	r2, [pc, #192]	; (3268 <rtc_nrf_isr+0xdc>)
    31a8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    31ac:	6813      	ldr	r3, [r2, #0]
    31ae:	3301      	adds	r3, #1
    31b0:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    31b2:	f04f 0320 	mov.w	r3, #32
    31b6:	f3ef 8111 	mrs	r1, BASEPRI
    31ba:	f383 8812 	msr	BASEPRI_MAX, r3
    31be:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    31c2:	4b28      	ldr	r3, [pc, #160]	; (3264 <rtc_nrf_isr+0xd8>)
    31c4:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    31c8:	03d2      	lsls	r2, r2, #15
    31ca:	d50d      	bpl.n	31e8 <rtc_nrf_isr+0x5c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    31cc:	4a27      	ldr	r2, [pc, #156]	; (326c <rtc_nrf_isr+0xe0>)
    31ce:	e8d2 0fef 	ldaex	r0, [r2]
    31d2:	f020 0401 	bic.w	r4, r0, #1
    31d6:	e8c2 4fe5 	stlex	r5, r4, [r2]
    31da:	2d00      	cmp	r5, #0
    31dc:	d1f7      	bne.n	31ce <rtc_nrf_isr+0x42>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    31de:	2800      	cmp	r0, #0
    31e0:	d136      	bne.n	3250 <rtc_nrf_isr+0xc4>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    31e2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
		if (result) {
    31e6:	bb9a      	cbnz	r2, 3250 <rtc_nrf_isr+0xc4>
{
    31e8:	2300      	movs	r3, #0
	__asm__ volatile(
    31ea:	f381 8811 	msr	BASEPRI, r1
    31ee:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    31f2:	b353      	cbz	r3, 324a <rtc_nrf_isr+0xbe>
		curr_time = z_nrf_rtc_timer_read();
    31f4:	f7ff fec4 	bl	2f80 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    31f8:	f04f 0320 	mov.w	r3, #32
    31fc:	f3ef 8711 	mrs	r7, BASEPRI
    3200:	f383 8812 	msr	BASEPRI_MAX, r3
    3204:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3208:	4b19      	ldr	r3, [pc, #100]	; (3270 <rtc_nrf_isr+0xe4>)
    320a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
		if (curr_time >= expire_time) {
    320e:	42a0      	cmp	r0, r4
    3210:	eb71 0205 	sbcs.w	r2, r1, r5
    3214:	f04f 0200 	mov.w	r2, #0
    3218:	d321      	bcc.n	325e <rtc_nrf_isr+0xd2>
			user_context = cc_data[chan].user_context;
    321a:	e9d3 1600 	ldrd	r1, r6, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    321e:	f04f 38ff 	mov.w	r8, #4294967295
    3222:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
    3226:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
    3228:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    322c:	e9c3 8902 	strd	r8, r9, [r3, #8]
    3230:	4b0c      	ldr	r3, [pc, #48]	; (3264 <rtc_nrf_isr+0xd8>)
    3232:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	__asm__ volatile(
    3236:	f387 8811 	msr	BASEPRI, r7
    323a:	f3bf 8f6f 	isb	sy
		if (handler) {
    323e:	b121      	cbz	r1, 324a <rtc_nrf_isr+0xbe>
			handler(chan, expire_time, user_context);
    3240:	4622      	mov	r2, r4
    3242:	462b      	mov	r3, r5
    3244:	2000      	movs	r0, #0
    3246:	9600      	str	r6, [sp, #0]
    3248:	4788      	blx	r1
}
    324a:	b003      	add	sp, #12
    324c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3250:	2200      	movs	r2, #0
    3252:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    3256:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    325a:	2301      	movs	r3, #1
}
    325c:	e7c5      	b.n	31ea <rtc_nrf_isr+0x5e>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    325e:	4611      	mov	r1, r2
    3260:	e7e9      	b.n	3236 <rtc_nrf_isr+0xaa>
    3262:	bf00      	nop
    3264:	50015000 	.word	0x50015000
    3268:	2000d3bc 	.word	0x2000d3bc
    326c:	2000d3b4 	.word	0x2000d3b4
    3270:	2000c628 	.word	0x2000c628

00003274 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3274:	1c43      	adds	r3, r0, #1
{
    3276:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3278:	d020      	beq.n	32bc <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    327a:	2801      	cmp	r0, #1
    327c:	dd20      	ble.n	32c0 <sys_clock_set_timeout+0x4c>
    327e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3282:	da1f      	bge.n	32c4 <sys_clock_set_timeout+0x50>
    3284:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3286:	f7ff fe7b 	bl	2f80 <z_nrf_rtc_timer_read>
    328a:	4b0f      	ldr	r3, [pc, #60]	; (32c8 <sys_clock_set_timeout+0x54>)
    328c:	e9d3 1300 	ldrd	r1, r3, [r3]
    3290:	1a40      	subs	r0, r0, r1
		ticks = 0;
    3292:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3296:	bf28      	it	cs
    3298:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    329a:	3001      	adds	r0, #1
    329c:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    329e:	480b      	ldr	r0, [pc, #44]	; (32cc <sys_clock_set_timeout+0x58>)
    32a0:	4282      	cmp	r2, r0
    32a2:	bf28      	it	cs
    32a4:	4602      	movcs	r2, r0
    32a6:	2000      	movs	r0, #0
    32a8:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    32aa:	4909      	ldr	r1, [pc, #36]	; (32d0 <sys_clock_set_timeout+0x5c>)
    32ac:	9001      	str	r0, [sp, #4]
    32ae:	9100      	str	r1, [sp, #0]
    32b0:	f143 0300 	adc.w	r3, r3, #0
    32b4:	f7ff fe86 	bl	2fc4 <compare_set>
}
    32b8:	b002      	add	sp, #8
    32ba:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    32bc:	4803      	ldr	r0, [pc, #12]	; (32cc <sys_clock_set_timeout+0x58>)
    32be:	e7e1      	b.n	3284 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    32c0:	2400      	movs	r4, #0
    32c2:	e7e0      	b.n	3286 <sys_clock_set_timeout+0x12>
    32c4:	4c01      	ldr	r4, [pc, #4]	; (32cc <sys_clock_set_timeout+0x58>)
    32c6:	e7de      	b.n	3286 <sys_clock_set_timeout+0x12>
    32c8:	2000c638 	.word	0x2000c638
    32cc:	007fffff 	.word	0x007fffff
    32d0:	00002eb9 	.word	0x00002eb9

000032d4 <sys_clock_elapsed>:
{
    32d4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    32d6:	f7ff fe53 	bl	2f80 <z_nrf_rtc_timer_read>
    32da:	4b02      	ldr	r3, [pc, #8]	; (32e4 <sys_clock_elapsed+0x10>)
    32dc:	681b      	ldr	r3, [r3, #0]
}
    32de:	1ac0      	subs	r0, r0, r3
    32e0:	bd08      	pop	{r3, pc}
    32e2:	bf00      	nop
    32e4:	2000c638 	.word	0x2000c638

000032e8 <nrf_gpio_pin_write>:
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    32e8:	2301      	movs	r3, #1
    *p_pin = pin_number & 0x1F;
    32ea:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    32ee:	fa03 f000 	lsl.w	r0, r3, r0
    32f2:	4b03      	ldr	r3, [pc, #12]	; (3300 <nrf_gpio_pin_write+0x18>)
    if (value == 0)
    32f4:	b909      	cbnz	r1, 32fa <nrf_gpio_pin_write+0x12>
    p_reg->OUTCLR = clr_mask;
    32f6:	60d8      	str	r0, [r3, #12]
}
    32f8:	4770      	bx	lr
    p_reg->OUTSET = set_mask;
    32fa:	6098      	str	r0, [r3, #8]
}
    32fc:	4770      	bx	lr
    32fe:	bf00      	nop
    3300:	50842500 	.word	0x50842500

00003304 <nrf_pin_configure>:
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    3304:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    3308:	2b00      	cmp	r3, #0
    330a:	bf1c      	itt	ne
    330c:	2100      	movne	r1, #0
    330e:	2201      	movne	r2, #1
{
    3310:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
    3312:	f000 031f 	and.w	r3, r0, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3316:	f3c0 1481 	ubfx	r4, r0, #6, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    331a:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    331e:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
    3322:	4308      	orrs	r0, r1
    reg->PIN_CNF[pin_number] = cnf;
    3324:	4903      	ldr	r1, [pc, #12]	; (3334 <nrf_pin_configure+0x30>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3326:	ea40 0242 	orr.w	r2, r0, r2, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    332a:	3380      	adds	r3, #128	; 0x80
    332c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    3330:	bd10      	pop	{r4, pc}
    3332:	bf00      	nop
    3334:	50842500 	.word	0x50842500

00003338 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    3338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    333c:	4614      	mov	r4, r2
    333e:	4680      	mov	r8, r0
			break;
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    3340:	2501      	movs	r5, #1
    p_reg->OUTCLR = clr_mask;
    3342:	4e41      	ldr	r6, [pc, #260]	; (3448 <pinctrl_configure_pins+0x110>)
    3344:	eb00 0781 	add.w	r7, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    3348:	45b8      	cmp	r8, r7
    334a:	d102      	bne.n	3352 <pinctrl_configure_pins+0x1a>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    334c:	2000      	movs	r0, #0
}
    334e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch (NRF_GET_FUN(pins[i])) {
    3352:	f8d8 3000 	ldr.w	r3, [r8]
    3356:	0c1a      	lsrs	r2, r3, #16
    3358:	2a19      	cmp	r2, #25
    335a:	d872      	bhi.n	3442 <pinctrl_configure_pins+0x10a>
    335c:	e8df f002 	tbb	[pc, r2]
    3360:	46211a0d 	.word	0x46211a0d
    3364:	71463a26 	.word	0x71463a26
    3368:	4b717171 	.word	0x4b717171
    336c:	71717150 	.word	0x71717150
    3370:	71717171 	.word	0x71717171
    3374:	62557171 	.word	0x62557171
    3378:	6c67      	.short	0x6c67
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    337a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    337e:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    3382:	f8d8 3000 	ldr.w	r3, [r8]
    3386:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    338a:	fa05 f303 	lsl.w	r3, r5, r3
    p_reg->OUTSET = set_mask;
    338e:	60b3      	str	r3, [r6, #8]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    3390:	2201      	movs	r2, #1
    3392:	e004      	b.n	339e <pinctrl_configure_pins+0x66>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    3394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3398:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    339c:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    339e:	4611      	mov	r1, r2
    33a0:	e011      	b.n	33c6 <pinctrl_configure_pins+0x8e>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    33a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    33a6:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    33aa:	e7ea      	b.n	3382 <pinctrl_configure_pins+0x4a>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    33ac:	2200      	movs	r2, #0
    33ae:	2101      	movs	r1, #1
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    33b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    33b4:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    33b8:	f8d8 3000 	ldr.w	r3, [r8]
    33bc:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    33c0:	fa05 f303 	lsl.w	r3, r5, r3
    p_reg->OUTCLR = clr_mask;
    33c4:	60f3      	str	r3, [r6, #12]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    33c6:	f8d8 0000 	ldr.w	r0, [r8]
    33ca:	f7ff ff9b 	bl	3304 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    33ce:	f108 0804 	add.w	r8, r8, #4
    33d2:	e7b9      	b.n	3348 <pinctrl_configure_pins+0x10>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    33d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    33d8:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    33dc:	f8d8 3000 	ldr.w	r3, [r8]
    33e0:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    33e4:	fa05 f303 	lsl.w	r3, r5, r3
    p_reg->OUTCLR = clr_mask;
    33e8:	60f3      	str	r3, [r6, #12]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    33ea:	e7d1      	b.n	3390 <pinctrl_configure_pins+0x58>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    33ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    33f0:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    33f4:	e7d2      	b.n	339c <pinctrl_configure_pins+0x64>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    33f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    33fa:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    33fe:	e7cd      	b.n	339c <pinctrl_configure_pins+0x64>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    3400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3404:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    3408:	e7c8      	b.n	339c <pinctrl_configure_pins+0x64>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    340a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    340e:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    3412:	f8d8 0000 	ldr.w	r0, [r8]
    3416:	f3c0 3140 	ubfx	r1, r0, #13, #1
    341a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    341e:	f7ff ff63 	bl	32e8 <nrf_gpio_pin_write>
    3422:	e7b5      	b.n	3390 <pinctrl_configure_pins+0x58>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    3424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3428:	f8c4 3564 	str.w	r3, [r4, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    342c:	e7f1      	b.n	3412 <pinctrl_configure_pins+0xda>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    342e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3432:	f8c4 3568 	str.w	r3, [r4, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    3436:	e7ec      	b.n	3412 <pinctrl_configure_pins+0xda>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    3438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    343c:	f8c4 356c 	str.w	r3, [r4, #1388]	; 0x56c
    3440:	e7e7      	b.n	3412 <pinctrl_configure_pins+0xda>
		switch (NRF_GET_FUN(pins[i])) {
    3442:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3446:	e782      	b.n	334e <pinctrl_configure_pins+0x16>
    3448:	50842500 	.word	0x50842500

0000344c <fprotect_area>:

#define SPU_BLOCK_SIZE CONFIG_FPROTECT_BLOCK_SIZE

int fprotect_area(uint32_t start, size_t length)
{
	if (start % SPU_BLOCK_SIZE != 0 ||
    344c:	ea40 0301 	orr.w	r3, r0, r1
    3450:	f3c3 030e 	ubfx	r3, r3, #0, #15
{
    3454:	b530      	push	{r4, r5, lr}
	if (start % SPU_BLOCK_SIZE != 0 ||
    3456:	b98b      	cbnz	r3, 347c <fprotect_area+0x30>
                                               uint32_t       permissions,
                                               bool           lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHREGION[region_id].PERM & SPU_FLASHREGION_PERM_LOCK_Msk));

    p_reg->FLASHREGION[region_id].PERM = permissions         |
    3458:	f240 1515 	movw	r5, #277	; 0x115
    345c:	4c09      	ldr	r4, [pc, #36]	; (3484 <fprotect_area+0x38>)
		length % SPU_BLOCK_SIZE != 0) {
		return -EINVAL;
	}

	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    345e:	0bc9      	lsrs	r1, r1, #15
		nrf_spu_flashregion_set(NRF_SPU_S,
    3460:	f3c0 30c7 	ubfx	r0, r0, #15, #8
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    3464:	4299      	cmp	r1, r3
    3466:	d101      	bne.n	346c <fprotect_area+0x20>
				NRF_SPU_MEM_PERM_EXECUTE |
				NRF_SPU_MEM_PERM_READ,
				true);
	}

	return 0;
    3468:	2000      	movs	r0, #0
}
    346a:	bd30      	pop	{r4, r5, pc}
		nrf_spu_flashregion_set(NRF_SPU_S,
    346c:	18c2      	adds	r2, r0, r3
    346e:	b2d2      	uxtb	r2, r2
    3470:	f502 72c0 	add.w	r2, r2, #384	; 0x180
    3474:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    3478:	3301      	adds	r3, #1
    347a:	e7f3      	b.n	3464 <fprotect_area+0x18>
		return -EINVAL;
    347c:	f06f 0015 	mvn.w	r0, #21
    3480:	e7f3      	b.n	346a <fprotect_area+0x1e>
    3482:	bf00      	nop
    3484:	50003000 	.word	0x50003000

00003488 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    3488:	4803      	ldr	r0, [pc, #12]	; (3498 <k_sys_fatal_error_handler+0x10>)
    348a:	2145      	movs	r1, #69	; 0x45
{
    348c:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    348e:	f002 ff76 	bl	637e <z_log_minimal_printk>
		sys_arch_reboot(0);
    3492:	2000      	movs	r0, #0
    3494:	f7fe fe64 	bl	2160 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    3498:	00007e25 	.word	0x00007e25

0000349c <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
    349c:	b530      	push	{r4, r5, lr}
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    349e:	6881      	ldr	r1, [r0, #8]
{
    34a0:	b085      	sub	sp, #20
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    34a2:	3910      	subs	r1, #16
     * returned by boot_magic_off() is the start of magic which is not the
     * start of the flash write boundary and thus writes to the magic will fail.
     * To account for this change, write to magic is first padded with 0xFF
     * before writing to the trailer.
     */
    pad_off = ALIGN_DOWN(off, BOOT_MAX_ALIGN);
    34a4:	f021 0407 	bic.w	r4, r1, #7
{
    34a8:	4605      	mov	r5, r0

    erased_val = flash_area_erased_val(fap);
    34aa:	f002 ffce 	bl	644a <flash_area_erased_val>

    memset(&magic[0], erased_val, sizeof(magic));
    34ae:	2210      	movs	r2, #16
    erased_val = flash_area_erased_val(fap);
    34b0:	4601      	mov	r1, r0
    memset(&magic[0], erased_val, sizeof(magic));
    34b2:	4668      	mov	r0, sp
    34b4:	f003 f83d 	bl	6532 <memset>
    memcpy(&magic[BOOT_MAGIC_ALIGN_SIZE - BOOT_MAGIC_SZ], BOOT_IMG_MAGIC, BOOT_MAGIC_SZ);
    34b8:	2210      	movs	r2, #16
    34ba:	4668      	mov	r0, sp
    34bc:	4906      	ldr	r1, [pc, #24]	; (34d8 <boot_write_magic+0x3c>)
    34be:	f003 f82d 	bl	651c <memcpy>

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, pad_off, &magic[0], BOOT_MAGIC_ALIGN_SIZE);
    34c2:	2310      	movs	r3, #16
    34c4:	466a      	mov	r2, sp
    34c6:	4621      	mov	r1, r4
    34c8:	4628      	mov	r0, r5
    34ca:	f002 ff82 	bl	63d2 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    34ce:	3800      	subs	r0, #0
    34d0:	bf18      	it	ne
    34d2:	2001      	movne	r0, #1
    34d4:	b005      	add	sp, #20
    34d6:	bd30      	pop	{r4, r5, pc}
    34d8:	0000732c 	.word	0x0000732c

000034dc <boot_read_swap_state>:
{
    34dc:	b530      	push	{r4, r5, lr}
    34de:	460c      	mov	r4, r1
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    34e0:	6881      	ldr	r1, [r0, #8]
{
    34e2:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    34e4:	2310      	movs	r3, #16
    34e6:	aa02      	add	r2, sp, #8
    34e8:	3910      	subs	r1, #16
{
    34ea:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    34ec:	f002 ff55 	bl	639a <flash_area_read>
    if (rc < 0) {
    34f0:	2800      	cmp	r0, #0
    34f2:	da02      	bge.n	34fa <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
    34f4:	2001      	movs	r0, #1
}
    34f6:	b007      	add	sp, #28
    34f8:	bd30      	pop	{r4, r5, pc}
    if (buffer == NULL || len == 0) {
    34fa:	2210      	movs	r2, #16
    34fc:	4628      	mov	r0, r5
    34fe:	a902      	add	r1, sp, #8
    3500:	f003 f9e9 	bl	68d6 <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    3504:	b390      	cbz	r0, 356c <boot_read_swap_state+0x90>
        state->magic = BOOT_MAGIC_UNSET;
    3506:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
    3508:	7023      	strb	r3, [r4, #0]
    off = boot_swap_info_off(fap);
    350a:	4628      	mov	r0, r5
    350c:	f003 f9f4 	bl	68f8 <boot_swap_info_off>
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    3510:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
    3512:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    3514:	f10d 0207 	add.w	r2, sp, #7
    3518:	4628      	mov	r0, r5
    351a:	f002 ff3e 	bl	639a <flash_area_read>
    if (rc < 0) {
    351e:	2800      	cmp	r0, #0
    3520:	dbe8      	blt.n	34f4 <boot_read_swap_state+0x18>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    3522:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3526:	4628      	mov	r0, r5
    3528:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    352c:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    352e:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    3530:	7123      	strb	r3, [r4, #4]
    if (buffer == NULL || len == 0) {
    3532:	2201      	movs	r2, #1
    3534:	f10d 0107 	add.w	r1, sp, #7
    3538:	f003 f9cd 	bl	68d6 <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    353c:	b910      	cbnz	r0, 3544 <boot_read_swap_state+0x68>
    353e:	7863      	ldrb	r3, [r4, #1]
    3540:	2b04      	cmp	r3, #4
    3542:	d903      	bls.n	354c <boot_read_swap_state+0x70>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    3544:	2301      	movs	r3, #1
    3546:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
    3548:	2300      	movs	r3, #0
    354a:	7123      	strb	r3, [r4, #4]
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    354c:	68aa      	ldr	r2, [r5, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    354e:	4628      	mov	r0, r5
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    3550:	3a18      	subs	r2, #24
    3552:	f022 0207 	bic.w	r2, r2, #7
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    3556:	3a08      	subs	r2, #8
    3558:	1ca1      	adds	r1, r4, #2
    355a:	f003 f9e7 	bl	692c <boot_read_flag>
    if (rc) {
    355e:	2800      	cmp	r0, #0
    3560:	d1c8      	bne.n	34f4 <boot_read_swap_state+0x18>
    return boot_read_image_ok(fap, &state->image_ok);
    3562:	4628      	mov	r0, r5
    3564:	1ce1      	adds	r1, r4, #3
    3566:	f003 fa3b 	bl	69e0 <boot_read_image_ok>
    356a:	e7c4      	b.n	34f6 <boot_read_swap_state+0x1a>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
    356c:	2210      	movs	r2, #16
    356e:	4904      	ldr	r1, [pc, #16]	; (3580 <boot_read_swap_state+0xa4>)
    3570:	a802      	add	r0, sp, #8
    3572:	f002 ffc2 	bl	64fa <memcmp>
        return BOOT_MAGIC_GOOD;
    3576:	2800      	cmp	r0, #0
    3578:	bf14      	ite	ne
    357a:	2302      	movne	r3, #2
    357c:	2301      	moveq	r3, #1
    357e:	e7c3      	b.n	3508 <boot_read_swap_state+0x2c>
    3580:	0000732c 	.word	0x0000732c

00003584 <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    3584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3588:	b085      	sub	sp, #20
    358a:	4606      	mov	r6, r0

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    358c:	4669      	mov	r1, sp
    358e:	2003      	movs	r0, #3
    3590:	f003 fa2c 	bl	69ec <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
    3594:	4605      	mov	r5, r0
    3596:	b118      	cbz	r0, 35a0 <boot_swap_type_multi+0x1c>
        return BOOT_SWAP_TYPE_PANIC;
    3598:	20ff      	movs	r0, #255	; 0xff
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    359a:	b005      	add	sp, #20
    359c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    35a0:	2007      	movs	r0, #7
    35a2:	a902      	add	r1, sp, #8
    35a4:	f003 fa22 	bl	69ec <boot_read_swap_state_by_id>
    if (rc == BOOT_EFLASH) {
    35a8:	2801      	cmp	r0, #1
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    35aa:	4604      	mov	r4, r0
    if (rc == BOOT_EFLASH) {
    35ac:	d13f      	bne.n	362e <boot_swap_type_multi+0xaa>
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
    35ae:	4632      	mov	r2, r6
    35b0:	2149      	movs	r1, #73	; 0x49
    35b2:	482c      	ldr	r0, [pc, #176]	; (3664 <boot_swap_type_multi+0xe0>)
    35b4:	f002 fee3 	bl	637e <z_log_minimal_printk>
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    35b8:	2303      	movs	r3, #3
        secondary_slot.swap_type = BOOT_SWAP_TYPE_NONE;
    35ba:	f88d 4009 	strb.w	r4, [sp, #9]
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    35be:	f88d 3008 	strb.w	r3, [sp, #8]
        secondary_slot.copy_done = BOOT_FLAG_UNSET;
    35c2:	f88d 300a 	strb.w	r3, [sp, #10]
        secondary_slot.image_ok = BOOT_FLAG_UNSET;
    35c6:	f88d 300b 	strb.w	r3, [sp, #11]
        secondary_slot.image_num = 0;
    35ca:	f88d 500c 	strb.w	r5, [sp, #12]
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    35ce:	2200      	movs	r2, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    35d0:	f89d 5000 	ldrb.w	r5, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
    35d4:	f89d 6008 	ldrb.w	r6, [sp, #8]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    35d8:	f89d 7003 	ldrb.w	r7, [sp, #3]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    35dc:	f89d 800b 	ldrb.w	r8, [sp, #11]
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    35e0:	f89d 9002 	ldrb.w	r9, [sp, #2]
    35e4:	4c20      	ldr	r4, [pc, #128]	; (3668 <boot_swap_type_multi+0xe4>)
        if (boot_magic_compatible_check(table->magic_primary_slot,
    35e6:	4629      	mov	r1, r5
    35e8:	7820      	ldrb	r0, [r4, #0]
    35ea:	f003 f98b 	bl	6904 <boot_magic_compatible_check>
    35ee:	b318      	cbz	r0, 3638 <boot_swap_type_multi+0xb4>
            boot_magic_compatible_check(table->magic_secondary_slot,
    35f0:	4631      	mov	r1, r6
    35f2:	7860      	ldrb	r0, [r4, #1]
    35f4:	f003 f986 	bl	6904 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    35f8:	b1f0      	cbz	r0, 3638 <boot_swap_type_multi+0xb4>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    35fa:	78a3      	ldrb	r3, [r4, #2]
                                        secondary_slot.magic) &&
    35fc:	2b04      	cmp	r3, #4
    35fe:	d001      	beq.n	3604 <boot_swap_type_multi+0x80>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    3600:	42bb      	cmp	r3, r7
    3602:	d119      	bne.n	3638 <boot_swap_type_multi+0xb4>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    3604:	78e3      	ldrb	r3, [r4, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    3606:	2b04      	cmp	r3, #4
    3608:	d001      	beq.n	360e <boot_swap_type_multi+0x8a>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    360a:	4543      	cmp	r3, r8
    360c:	d114      	bne.n	3638 <boot_swap_type_multi+0xb4>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    360e:	7923      	ldrb	r3, [r4, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    3610:	2b04      	cmp	r3, #4
    3612:	d10f      	bne.n	3634 <boot_swap_type_multi+0xb0>
            BOOT_LOG_INF("Swap type: %s",
    3614:	7963      	ldrb	r3, [r4, #5]
    3616:	2b02      	cmp	r3, #2
    3618:	d119      	bne.n	364e <boot_swap_type_multi+0xca>
    361a:	4a14      	ldr	r2, [pc, #80]	; (366c <boot_swap_type_multi+0xe8>)
    361c:	4814      	ldr	r0, [pc, #80]	; (3670 <boot_swap_type_multi+0xec>)
    361e:	2149      	movs	r1, #73	; 0x49
    3620:	f002 fead 	bl	637e <z_log_minimal_printk>
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    3624:	7960      	ldrb	r0, [r4, #5]
    3626:	1e83      	subs	r3, r0, #2
    3628:	2b02      	cmp	r3, #2
    362a:	d9b6      	bls.n	359a <boot_swap_type_multi+0x16>
    362c:	e7b4      	b.n	3598 <boot_swap_type_multi+0x14>
    } else if (rc) {
    362e:	2800      	cmp	r0, #0
    3630:	d0cd      	beq.n	35ce <boot_swap_type_multi+0x4a>
    3632:	e7b1      	b.n	3598 <boot_swap_type_multi+0x14>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    3634:	454b      	cmp	r3, r9
    3636:	d0ed      	beq.n	3614 <boot_swap_type_multi+0x90>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    3638:	3201      	adds	r2, #1
    363a:	2a03      	cmp	r2, #3
    363c:	f104 0406 	add.w	r4, r4, #6
    3640:	d1d1      	bne.n	35e6 <boot_swap_type_multi+0x62>
    BOOT_LOG_INF("Swap type: none");
    3642:	480c      	ldr	r0, [pc, #48]	; (3674 <boot_swap_type_multi+0xf0>)
    3644:	2149      	movs	r1, #73	; 0x49
    3646:	f002 fe9a 	bl	637e <z_log_minimal_printk>
    return BOOT_SWAP_TYPE_NONE;
    364a:	2001      	movs	r0, #1
    364c:	e7a5      	b.n	359a <boot_swap_type_multi+0x16>
            BOOT_LOG_INF("Swap type: %s",
    364e:	2b03      	cmp	r3, #3
    3650:	d005      	beq.n	365e <boot_swap_type_multi+0xda>
    3652:	4a09      	ldr	r2, [pc, #36]	; (3678 <boot_swap_type_multi+0xf4>)
    3654:	4909      	ldr	r1, [pc, #36]	; (367c <boot_swap_type_multi+0xf8>)
    3656:	2b04      	cmp	r3, #4
    3658:	bf18      	it	ne
    365a:	460a      	movne	r2, r1
    365c:	e7de      	b.n	361c <boot_swap_type_multi+0x98>
    365e:	4a08      	ldr	r2, [pc, #32]	; (3680 <boot_swap_type_multi+0xfc>)
    3660:	e7dc      	b.n	361c <boot_swap_type_multi+0x98>
    3662:	bf00      	nop
    3664:	00007e6a 	.word	0x00007e6a
    3668:	00007edd 	.word	0x00007edd
    366c:	00007e4e 	.word	0x00007e4e
    3670:	00007eb5 	.word	0x00007eb5
    3674:	00007ec8 	.word	0x00007ec8
    3678:	00007e47 	.word	0x00007e47
    367c:	00007e58 	.word	0x00007e58
    3680:	00007e53 	.word	0x00007e53

00003684 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK;
}

void SystemInit(void)
{
    3684:	b508      	push	{r3, lr}
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    3686:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    368a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    368e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
  __ASM volatile ("dsb 0xF":::"memory");
    3692:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    3696:	2a09      	cmp	r2, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    3698:	bf01      	itttt	eq
    369a:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    369e:	2200      	moveq	r2, #0
    36a0:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    36a4:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    36a8:	f003 f9c5 	bl	6a36 <nrf91_errata_14>
    36ac:	b128      	cbz	r0, 36ba <SystemInit+0x36>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    36ae:	2201      	movs	r2, #1
    36b0:	4b51      	ldr	r3, [pc, #324]	; (37f8 <SystemInit+0x174>)
    36b2:	f8c3 2a38 	str.w	r2, [r3, #2616]	; 0xa38
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    36b6:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    36ba:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    36be:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    36c2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    36c6:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    36ca:	2a09      	cmp	r2, #9
    36cc:	d105      	bne.n	36da <SystemInit+0x56>
            {
                switch(var2)
    36ce:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    36d0:	bf1e      	ittt	ne
    36d2:	2201      	movne	r2, #1
    36d4:	4b48      	ldrne	r3, [pc, #288]	; (37f8 <SystemInit+0x174>)
    36d6:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    36da:	f003 f9ac 	bl	6a36 <nrf91_errata_14>
    36de:	b118      	cbz	r0, 36e8 <SystemInit+0x64>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    36e0:	220e      	movs	r2, #14
    36e2:	4b46      	ldr	r3, [pc, #280]	; (37fc <SystemInit+0x178>)
    36e4:	f8c3 2ee4 	str.w	r2, [r3, #3812]	; 0xee4
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    36e8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    36ec:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    36f0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    36f4:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    36f8:	2a09      	cmp	r2, #9
    36fa:	d106      	bne.n	370a <SystemInit+0x86>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    36fc:	2200      	movs	r2, #0
    36fe:	4b3e      	ldr	r3, [pc, #248]	; (37f8 <SystemInit+0x174>)
    3700:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    3704:	2201      	movs	r2, #1
    3706:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
{
    370a:	2200      	movs	r2, #0
    370c:	00d3      	lsls	r3, r2, #3
    370e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        return false;
    }
    
    bool is_empty_word(uint32_t const volatile * word)
    {
        uint32_t val = *word;
    3712:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    3716:	f3bf 8f4f 	dsb	sy
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    371a:	3101      	adds	r1, #1
    371c:	d008      	beq.n	3730 <SystemInit+0xac>
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    371e:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    3722:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    3724:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    3728:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    372c:	600b      	str	r3, [r1, #0]
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    372e:	d1ed      	bne.n	370c <SystemInit+0x88>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    3730:	4b33      	ldr	r3, [pc, #204]	; (3800 <SystemInit+0x17c>)
    3732:	69da      	ldr	r2, [r3, #28]
    3734:	f3bf 8f4f 	dsb	sy
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    3738:	07d1      	lsls	r1, r2, #31
    373a:	d543      	bpl.n	37c4 <SystemInit+0x140>
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    373c:	4b31      	ldr	r3, [pc, #196]	; (3804 <SystemInit+0x180>)
    373e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3742:	2a01      	cmp	r2, #1
    3744:	d1fb      	bne.n	373e <SystemInit+0xba>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    3746:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    374a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    374e:	2a01      	cmp	r2, #1
    3750:	d1fb      	bne.n	374a <SystemInit+0xc6>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    3752:	4b2b      	ldr	r3, [pc, #172]	; (3800 <SystemInit+0x17c>)
    3754:	69da      	ldr	r2, [r3, #28]
    3756:	f3bf 8f4f 	dsb	sy
              if (uicr_HFXOSRC_erased()){
    375a:	07d2      	lsls	r2, r2, #31
    375c:	d50a      	bpl.n	3774 <SystemInit+0xf0>
                    uicr_erased_value = NRF_UICR_S->HFXOSRC;
    375e:	69da      	ldr	r2, [r3, #28]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    3760:	f022 0201 	bic.w	r2, r2, #1
                    NRF_UICR_S->HFXOSRC = uicr_new_value;
    3764:	61da      	str	r2, [r3, #28]
    3766:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    376a:	4a26      	ldr	r2, [pc, #152]	; (3804 <SystemInit+0x180>)
    376c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    3770:	2b01      	cmp	r3, #1
    3772:	d1fb      	bne.n	376c <SystemInit+0xe8>
        uint32_t val = *word;
    3774:	4a22      	ldr	r2, [pc, #136]	; (3800 <SystemInit+0x17c>)
    3776:	6a13      	ldr	r3, [r2, #32]
    3778:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    377c:	3301      	adds	r3, #1
    377e:	d10c      	bne.n	379a <SystemInit+0x116>
                    uicr_erased_value = NRF_UICR_S->HFXOCNT;
    3780:	6a13      	ldr	r3, [r2, #32]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    3782:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    3786:	f043 0320 	orr.w	r3, r3, #32
                    NRF_UICR_S->HFXOCNT = uicr_new_value;
    378a:	6213      	str	r3, [r2, #32]
    378c:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3790:	4a1c      	ldr	r2, [pc, #112]	; (3804 <SystemInit+0x180>)
    3792:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    3796:	2b01      	cmp	r3, #1
    3798:	d1fb      	bne.n	3792 <SystemInit+0x10e>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    379a:	2200      	movs	r2, #0
    379c:	4b19      	ldr	r3, [pc, #100]	; (3804 <SystemInit+0x180>)
    379e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    37a2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    37a6:	2a01      	cmp	r2, #1
    37a8:	d1fb      	bne.n	37a2 <SystemInit+0x11e>
    37aa:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    37ae:	4916      	ldr	r1, [pc, #88]	; (3808 <SystemInit+0x184>)
    37b0:	4b16      	ldr	r3, [pc, #88]	; (380c <SystemInit+0x188>)
    37b2:	68ca      	ldr	r2, [r1, #12]
    37b4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    37b8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    37ba:	60cb      	str	r3, [r1, #12]
    37bc:	f3bf 8f4f 	dsb	sy
    __NOP();
    37c0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    37c2:	e7fd      	b.n	37c0 <SystemInit+0x13c>
        uint32_t val = *word;
    37c4:	6a1b      	ldr	r3, [r3, #32]
    37c6:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    37ca:	3301      	adds	r3, #1
    37cc:	d0b6      	beq.n	373c <SystemInit+0xb8>
        SCB->NSACR |= (3UL << 10);
    37ce:	4b0e      	ldr	r3, [pc, #56]	; (3808 <SystemInit+0x184>)
    37d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    37d4:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
    37d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
    37dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    37e0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    37e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    37e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    37ec:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
    37f0:	4b07      	ldr	r3, [pc, #28]	; (3810 <SystemInit+0x18c>)
    37f2:	4a08      	ldr	r2, [pc, #32]	; (3814 <SystemInit+0x190>)
    37f4:	601a      	str	r2, [r3, #0]
}
    37f6:	bd08      	pop	{r3, pc}
    37f8:	50004000 	.word	0x50004000
    37fc:	5003a000 	.word	0x5003a000
    3800:	00ff8000 	.word	0x00ff8000
    3804:	50039000 	.word	0x50039000
    3808:	e000ed00 	.word	0xe000ed00
    380c:	05fa0004 	.word	0x05fa0004
    3810:	2000c53c 	.word	0x2000c53c
    3814:	03d09000 	.word	0x03d09000

00003818 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    3818:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    381a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    381c:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    381e:	fab2 f382 	clz	r3, r2
    3822:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    3826:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    3828:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    382a:	d010      	beq.n	384e <nrfx_flag32_alloc+0x36>
        new_mask = prev_mask & ~NRFX_BIT(idx);
    382c:	fa05 f303 	lsl.w	r3, r5, r3
    3830:	ea22 0303 	bic.w	r3, r2, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3834:	e8d0 6fef 	ldaex	r6, [r0]
    3838:	4296      	cmp	r6, r2
    383a:	d104      	bne.n	3846 <nrfx_flag32_alloc+0x2e>
    383c:	e8c0 3fec 	stlex	ip, r3, [r0]
    3840:	f1bc 0f00 	cmp.w	ip, #0
    3844:	d1f6      	bne.n	3834 <nrfx_flag32_alloc+0x1c>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3846:	d1e9      	bne.n	381c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    3848:	4802      	ldr	r0, [pc, #8]	; (3854 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    384a:	700c      	strb	r4, [r1, #0]
}
    384c:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    384e:	4802      	ldr	r0, [pc, #8]	; (3858 <nrfx_flag32_alloc+0x40>)
    3850:	e7fc      	b.n	384c <nrfx_flag32_alloc+0x34>
    3852:	bf00      	nop
    3854:	0bad0000 	.word	0x0bad0000
    3858:	0bad0002 	.word	0x0bad0002

0000385c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    385c:	6803      	ldr	r3, [r0, #0]
{
    385e:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    3860:	40cb      	lsrs	r3, r1
    3862:	07db      	lsls	r3, r3, #31
    3864:	d411      	bmi.n	388a <nrfx_flag32_free+0x2e>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    3866:	2301      	movs	r3, #1
    3868:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    386c:	6803      	ldr	r3, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    386e:	ea41 0203 	orr.w	r2, r1, r3
    3872:	e8d0 4fef 	ldaex	r4, [r0]
    3876:	429c      	cmp	r4, r3
    3878:	d104      	bne.n	3884 <nrfx_flag32_free+0x28>
    387a:	e8c0 2fec 	stlex	ip, r2, [r0]
    387e:	f1bc 0f00 	cmp.w	ip, #0
    3882:	d1f6      	bne.n	3872 <nrfx_flag32_free+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3884:	d1f2      	bne.n	386c <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    3886:	4802      	ldr	r0, [pc, #8]	; (3890 <nrfx_flag32_free+0x34>)
}
    3888:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    388a:	4802      	ldr	r0, [pc, #8]	; (3894 <nrfx_flag32_free+0x38>)
    388c:	e7fc      	b.n	3888 <nrfx_flag32_free+0x2c>
    388e:	bf00      	nop
    3890:	0bad0000 	.word	0x0bad0000
    3894:	0bad0004 	.word	0x0bad0004

00003898 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3898:	4b04      	ldr	r3, [pc, #16]	; (38ac <nrfx_clock_init+0x14>)
    389a:	791a      	ldrb	r2, [r3, #4]
    389c:	b922      	cbnz	r2, 38a8 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    389e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    38a0:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    38a2:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    38a4:	4802      	ldr	r0, [pc, #8]	; (38b0 <nrfx_clock_init+0x18>)
    38a6:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    38a8:	4802      	ldr	r0, [pc, #8]	; (38b4 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    38aa:	4770      	bx	lr
    38ac:	2000d3c0 	.word	0x2000d3c0
    38b0:	0bad0000 	.word	0x0bad0000
    38b4:	0bad000c 	.word	0x0bad000c

000038b8 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    38b8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    38bc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    38c0:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    38c2:	b152      	cbz	r2, 38da <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    38c4:	2000      	movs	r0, #0
    38c6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    38ca:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    38ce:	2201      	movs	r2, #1
    38d0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    38d4:	4b11      	ldr	r3, [pc, #68]	; (391c <nrfx_power_clock_irq_handler+0x64>)
    38d6:	681b      	ldr	r3, [r3, #0]
    38d8:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    38da:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    38de:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    38e2:	b18a      	cbz	r2, 3908 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    38e4:	2200      	movs	r2, #0
    38e6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    38ea:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    38ee:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    38f2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    38f6:	f002 0203 	and.w	r2, r2, #3
    38fa:	2a01      	cmp	r2, #1
    38fc:	f04f 0102 	mov.w	r1, #2
    3900:	d103      	bne.n	390a <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3902:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3906:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3908:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    390a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    390e:	4b03      	ldr	r3, [pc, #12]	; (391c <nrfx_power_clock_irq_handler+0x64>)
    3910:	2001      	movs	r0, #1
}
    3912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3916:	681b      	ldr	r3, [r3, #0]
    3918:	4718      	bx	r3
    391a:	bf00      	nop
    391c:	2000d3c0 	.word	0x2000d3c0

00003920 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    3920:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    3922:	4801      	ldr	r0, [pc, #4]	; (3928 <nrfx_dppi_channel_alloc+0x8>)
    3924:	f7ff bf78 	b.w	3818 <nrfx_flag32_alloc>
    3928:	2000c540 	.word	0x2000c540

0000392c <nrf_gpio_cfg_sense_set>:
    uint32_t cnf = reg->PIN_CNF[pin_number];
    392c:	4a06      	ldr	r2, [pc, #24]	; (3948 <nrf_gpio_cfg_sense_set+0x1c>)
    *p_pin = pin_number & 0x1F;
    392e:	f000 001f 	and.w	r0, r0, #31
    3932:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3936:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    cnf &= ~to_update;
    393a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    393e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    3942:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
    3946:	4770      	bx	lr
    3948:	50842500 	.word	0x50842500

0000394c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    394c:	4b03      	ldr	r3, [pc, #12]	; (395c <pin_in_use_by_te+0x10>)
    394e:	3008      	adds	r0, #8
    3950:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3954:	f3c0 1040 	ubfx	r0, r0, #5, #1
    3958:	4770      	bx	lr
    395a:	bf00      	nop
    395c:	2000c544 	.word	0x2000c544

00003960 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    3960:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3962:	4c0d      	ldr	r4, [pc, #52]	; (3998 <call_handler+0x38>)
    3964:	f100 0308 	add.w	r3, r0, #8
    3968:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    396c:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    396e:	05da      	lsls	r2, r3, #23
{
    3970:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3972:	d507      	bpl.n	3984 <call_handler+0x24>
    3974:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    3978:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    397c:	6852      	ldr	r2, [r2, #4]
    397e:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    3982:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    3984:	68a3      	ldr	r3, [r4, #8]
    3986:	b12b      	cbz	r3, 3994 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3988:	4631      	mov	r1, r6
    398a:	4628      	mov	r0, r5
    398c:	68e2      	ldr	r2, [r4, #12]
    }
}
    398e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3992:	4718      	bx	r3
}
    3994:	bd70      	pop	{r4, r5, r6, pc}
    3996:	bf00      	nop
    3998:	2000c544 	.word	0x2000c544

0000399c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    399c:	4a13      	ldr	r2, [pc, #76]	; (39ec <release_handler+0x50>)
    399e:	3008      	adds	r0, #8
    39a0:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
{
    39a4:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    39a6:	05d9      	lsls	r1, r3, #23
    39a8:	d51c      	bpl.n	39e4 <release_handler+0x48>
    39aa:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    39ae:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    39b2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    39b6:	2000      	movs	r0, #0
    39b8:	f102 0410 	add.w	r4, r2, #16
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    39bc:	f834 3b02 	ldrh.w	r3, [r4], #2
    39c0:	f413 7f80 	tst.w	r3, #256	; 0x100
    39c4:	d003      	beq.n	39ce <release_handler+0x32>
    39c6:	f3c3 2343 	ubfx	r3, r3, #9, #4
    39ca:	4299      	cmp	r1, r3
    39cc:	d00a      	beq.n	39e4 <release_handler+0x48>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    39ce:	3001      	adds	r0, #1
    39d0:	2820      	cmp	r0, #32
    39d2:	d1f3      	bne.n	39bc <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    39d4:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    39d6:	4806      	ldr	r0, [pc, #24]	; (39f0 <release_handler+0x54>)
}
    39d8:	f85d 4b04 	ldr.w	r4, [sp], #4
        m_cb.handlers[handler_id].handler = NULL;
    39dc:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    39e0:	f7ff bf3c 	b.w	385c <nrfx_flag32_free>
}
    39e4:	f85d 4b04 	ldr.w	r4, [sp], #4
    39e8:	4770      	bx	lr
    39ea:	bf00      	nop
    39ec:	2000c544 	.word	0x2000c544
    39f0:	2000c598 	.word	0x2000c598

000039f4 <pin_handler_trigger_uninit>:
{
    39f4:	b538      	push	{r3, r4, r5, lr}
    39f6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    39f8:	f7ff ffa8 	bl	394c <pin_in_use_by_te>
    39fc:	4c0b      	ldr	r4, [pc, #44]	; (3a2c <pin_handler_trigger_uninit+0x38>)
    39fe:	f102 0508 	add.w	r5, r2, #8
    3a02:	b160      	cbz	r0, 3a1e <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    3a04:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3a06:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    3a0a:	0b5b      	lsrs	r3, r3, #13
    3a0c:	009b      	lsls	r3, r3, #2
    3a0e:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    3a12:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    3a16:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    3a1a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    3a1e:	4610      	mov	r0, r2
    3a20:	f7ff ffbc 	bl	399c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    3a24:	2300      	movs	r3, #0
    3a26:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    3a2a:	bd38      	pop	{r3, r4, r5, pc}
    3a2c:	2000c544 	.word	0x2000c544

00003a30 <nrfx_gpiote_input_configure>:
{
    3a30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3a34:	4604      	mov	r4, r0
    3a36:	461d      	mov	r5, r3
    if (p_input_config)
    3a38:	b309      	cbz	r1, 3a7e <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3a3a:	4f4d      	ldr	r7, [pc, #308]	; (3b70 <nrfx_gpiote_input_configure+0x140>)
    3a3c:	f100 0808 	add.w	r8, r0, #8
    3a40:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    3a44:	07b3      	lsls	r3, r6, #30
    3a46:	d506      	bpl.n	3a56 <nrfx_gpiote_input_configure+0x26>
    3a48:	f7ff ff80 	bl	394c <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    3a4c:	b118      	cbz	r0, 3a56 <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    3a4e:	4849      	ldr	r0, [pc, #292]	; (3b74 <nrfx_gpiote_input_configure+0x144>)
}
    3a50:	b002      	add	sp, #8
    3a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3a56:	4b48      	ldr	r3, [pc, #288]	; (3b78 <nrfx_gpiote_input_configure+0x148>)
    *p_pin = pin_number & 0x1F;
    3a58:	f004 001f 	and.w	r0, r4, #31
    3a5c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3a60:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3a64:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    3a66:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    3a6a:	f026 0602 	bic.w	r6, r6, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3a6e:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3a72:	f046 0601 	orr.w	r6, r6, #1
    reg->PIN_CNF[pin_number] = cnf;
    3a76:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    3a7a:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_trigger_config)
    3a7e:	b192      	cbz	r2, 3aa6 <nrfx_gpiote_input_configure+0x76>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3a80:	4b3b      	ldr	r3, [pc, #236]	; (3b70 <nrfx_gpiote_input_configure+0x140>)
    3a82:	f104 0608 	add.w	r6, r4, #8
    3a86:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    3a8a:	7810      	ldrb	r0, [r2, #0]
        if (pin_is_output(pin))
    3a8c:	078f      	lsls	r7, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    3a8e:	6852      	ldr	r2, [r2, #4]
        if (pin_is_output(pin))
    3a90:	d50c      	bpl.n	3aac <nrfx_gpiote_input_configure+0x7c>
            if (use_evt)
    3a92:	2a00      	cmp	r2, #0
    3a94:	d1db      	bne.n	3a4e <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    3a96:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    3a9a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3a9e:	ea42 0080 	orr.w	r0, r2, r0, lsl #2
    3aa2:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
    if (p_handler_config)
    3aa6:	bbcd      	cbnz	r5, 3b1c <nrfx_gpiote_input_configure+0xec>
    return NRFX_SUCCESS;
    3aa8:	4834      	ldr	r0, [pc, #208]	; (3b7c <nrfx_gpiote_input_configure+0x14c>)
    3aaa:	e7d1      	b.n	3a50 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3aac:	f021 0120 	bic.w	r1, r1, #32
    3ab0:	04c9      	lsls	r1, r1, #19
    3ab2:	0cc9      	lsrs	r1, r1, #19
    3ab4:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
    3ab8:	2a00      	cmp	r2, #0
    3aba:	d0ec      	beq.n	3a96 <nrfx_gpiote_input_configure+0x66>
                if (!edge)
    3abc:	2803      	cmp	r0, #3
    3abe:	d8c6      	bhi.n	3a4e <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3ac0:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3ac4:	4662      	mov	r2, ip
    3ac6:	0092      	lsls	r2, r2, #2
    3ac8:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    3acc:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    3ad0:	b920      	cbnz	r0, 3adc <nrfx_gpiote_input_configure+0xac>
    p_reg->CONFIG[idx] = 0;
    3ad2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    3ad6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
#endif
}
    3ada:	e7dc      	b.n	3a96 <nrfx_gpiote_input_configure+0x66>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3adc:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3ae0:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    3ae4:	f027 0703 	bic.w	r7, r7, #3
    3ae8:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3aec:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
    3af0:	f041 0120 	orr.w	r1, r1, #32
    3af4:	f427 3747 	bic.w	r7, r7, #203776	; 0x31c00
    3af8:	f427 7740 	bic.w	r7, r7, #768	; 0x300
    3afc:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3b00:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    3b04:	0227      	lsls	r7, r4, #8
    3b06:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
    3b0a:	ea4e 4e00 	orr.w	lr, lr, r0, lsl #16
    3b0e:	ea47 070e 	orr.w	r7, r7, lr
    3b12:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
    3b16:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    3b1a:	e7bc      	b.n	3a96 <nrfx_gpiote_input_configure+0x66>
    release_handler(pin);
    3b1c:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3b1e:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    3b22:	f7ff ff3b 	bl	399c <release_handler>
    if (!handler)
    3b26:	2e00      	cmp	r6, #0
    3b28:	d0be      	beq.n	3aa8 <nrfx_gpiote_input_configure+0x78>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3b2a:	4d11      	ldr	r5, [pc, #68]	; (3b70 <nrfx_gpiote_input_configure+0x140>)
    3b2c:	682b      	ldr	r3, [r5, #0]
    3b2e:	429e      	cmp	r6, r3
    3b30:	d104      	bne.n	3b3c <nrfx_gpiote_input_configure+0x10c>
    3b32:	686b      	ldr	r3, [r5, #4]
    3b34:	429f      	cmp	r7, r3
    3b36:	d101      	bne.n	3b3c <nrfx_gpiote_input_configure+0x10c>
    3b38:	2200      	movs	r2, #0
    3b3a:	e009      	b.n	3b50 <nrfx_gpiote_input_configure+0x120>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3b3c:	4810      	ldr	r0, [pc, #64]	; (3b80 <nrfx_gpiote_input_configure+0x150>)
    3b3e:	f10d 0107 	add.w	r1, sp, #7
    3b42:	f7ff fe69 	bl	3818 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    3b46:	4b0d      	ldr	r3, [pc, #52]	; (3b7c <nrfx_gpiote_input_configure+0x14c>)
    3b48:	4298      	cmp	r0, r3
    3b4a:	d181      	bne.n	3a50 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    3b4c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].p_context = p_context;
    3b50:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3b54:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    3b56:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3b58:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    3b5c:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3b60:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    3b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3b68:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    3b6c:	e79c      	b.n	3aa8 <nrfx_gpiote_input_configure+0x78>
    3b6e:	bf00      	nop
    3b70:	2000c544 	.word	0x2000c544
    3b74:	0bad0004 	.word	0x0bad0004
    3b78:	50842500 	.word	0x50842500
    3b7c:	0bad0000 	.word	0x0bad0000
    3b80:	2000c598 	.word	0x2000c598

00003b84 <nrfx_gpiote_output_configure>:
{
    3b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b86:	4604      	mov	r4, r0
    if (p_config)
    3b88:	b369      	cbz	r1, 3be6 <nrfx_gpiote_output_configure+0x62>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3b8a:	4e37      	ldr	r6, [pc, #220]	; (3c68 <nrfx_gpiote_output_configure+0xe4>)
    3b8c:	f100 0708 	add.w	r7, r0, #8
    3b90:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3b94:	07ab      	lsls	r3, r5, #30
    3b96:	d404      	bmi.n	3ba2 <nrfx_gpiote_output_configure+0x1e>
    3b98:	f7ff fed8 	bl	394c <pin_in_use_by_te>
    3b9c:	b108      	cbz	r0, 3ba2 <nrfx_gpiote_output_configure+0x1e>
    return NRFX_SUCCESS;
    3b9e:	4833      	ldr	r0, [pc, #204]	; (3c6c <nrfx_gpiote_output_configure+0xe8>)
}
    3ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3ba2:	f015 0f1c 	tst.w	r5, #28
    3ba6:	784b      	ldrb	r3, [r1, #1]
    3ba8:	d001      	beq.n	3bae <nrfx_gpiote_output_configure+0x2a>
    3baa:	2b01      	cmp	r3, #1
    3bac:	d0f7      	beq.n	3b9e <nrfx_gpiote_output_configure+0x1a>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3bae:	4830      	ldr	r0, [pc, #192]	; (3c70 <nrfx_gpiote_output_configure+0xec>)
    *p_pin = pin_number & 0x1F;
    3bb0:	f004 0c1f 	and.w	ip, r4, #31
    3bb4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3bb8:	f8dc 0200 	ldr.w	r0, [ip, #512]	; 0x200
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    3bbc:	f891 e000 	ldrb.w	lr, [r1]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3bc0:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
    3bc2:	f420 60e1 	bic.w	r0, r0, #1800	; 0x708
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3bc6:	7889      	ldrb	r1, [r1, #2]
    3bc8:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
    cnf &= ~to_update;
    3bcc:	f020 0007 	bic.w	r0, r0, #7
    3bd0:	4303      	orrs	r3, r0
    3bd2:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3bd6:	f043 0301 	orr.w	r3, r3, #1
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3bda:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    3bde:	f8cc 3200 	str.w	r3, [ip, #512]	; 0x200
    3be2:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    3be6:	b90a      	cbnz	r2, 3bec <nrfx_gpiote_output_configure+0x68>
    return NRFX_SUCCESS;
    3be8:	4822      	ldr	r0, [pc, #136]	; (3c74 <nrfx_gpiote_output_configure+0xf0>)
    3bea:	e7d9      	b.n	3ba0 <nrfx_gpiote_output_configure+0x1c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3bec:	4e1e      	ldr	r6, [pc, #120]	; (3c68 <nrfx_gpiote_output_configure+0xe4>)
    3bee:	f104 0708 	add.w	r7, r4, #8
    3bf2:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    3bf6:	0783      	lsls	r3, r0, #30
    3bf8:	d5d1      	bpl.n	3b9e <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    3bfa:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    3bfe:	2300      	movs	r3, #0
    3c00:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3c02:	f020 0020 	bic.w	r0, r0, #32
    3c06:	0089      	lsls	r1, r1, #2
    3c08:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    3c0c:	04c0      	lsls	r0, r0, #19
    3c0e:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    3c12:	0cc0      	lsrs	r0, r0, #19
    3c14:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    3c18:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    3c1c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3c20:	7855      	ldrb	r5, [r2, #1]
    3c22:	2d00      	cmp	r5, #0
    3c24:	d0e0      	beq.n	3be8 <nrfx_gpiote_output_configure+0x64>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    3c26:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    3c2a:	7892      	ldrb	r2, [r2, #2]
    3c2c:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    3c30:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3c34:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3c38:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    3c3c:	0223      	lsls	r3, r4, #8
    3c3e:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3c42:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3c44:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3c48:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3c4c:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3c4e:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3c50:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3c54:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3c58:	4313      	orrs	r3, r2
    3c5a:	f040 0020 	orr.w	r0, r0, #32
    3c5e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    3c62:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3c66:	e7bf      	b.n	3be8 <nrfx_gpiote_output_configure+0x64>
    3c68:	2000c544 	.word	0x2000c544
    3c6c:	0bad0004 	.word	0x0bad0004
    3c70:	50842500 	.word	0x50842500
    3c74:	0bad0000 	.word	0x0bad0000

00003c78 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    3c78:	4b01      	ldr	r3, [pc, #4]	; (3c80 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    3c7a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    3c7e:	4770      	bx	lr
    3c80:	2000c544 	.word	0x2000c544

00003c84 <nrfx_gpiote_channel_get>:
{
    3c84:	b508      	push	{r3, lr}
    3c86:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    3c88:	f7ff fe60 	bl	394c <pin_in_use_by_te>
    3c8c:	b138      	cbz	r0, 3c9e <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3c8e:	4b05      	ldr	r3, [pc, #20]	; (3ca4 <nrfx_gpiote_channel_get+0x20>)
    3c90:	3208      	adds	r2, #8
    3c92:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    3c96:	4804      	ldr	r0, [pc, #16]	; (3ca8 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3c98:	0b5b      	lsrs	r3, r3, #13
    3c9a:	700b      	strb	r3, [r1, #0]
}
    3c9c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3c9e:	4803      	ldr	r0, [pc, #12]	; (3cac <nrfx_gpiote_channel_get+0x28>)
    3ca0:	e7fc      	b.n	3c9c <nrfx_gpiote_channel_get+0x18>
    3ca2:	bf00      	nop
    3ca4:	2000c544 	.word	0x2000c544
    3ca8:	0bad0000 	.word	0x0bad0000
    3cac:	0bad0004 	.word	0x0bad0004

00003cb0 <nrfx_gpiote_init>:
{
    3cb0:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3cb2:	4c0f      	ldr	r4, [pc, #60]	; (3cf0 <nrfx_gpiote_init+0x40>)
    3cb4:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    3cb8:	b9bd      	cbnz	r5, 3cea <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3cba:	2240      	movs	r2, #64	; 0x40
    3cbc:	4629      	mov	r1, r5
    3cbe:	f104 0010 	add.w	r0, r4, #16
    3cc2:	f002 fc36 	bl	6532 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3cc6:	200d      	movs	r0, #13
    3cc8:	f7fd ff7c 	bl	1bc4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3ccc:	4b09      	ldr	r3, [pc, #36]	; (3cf4 <nrfx_gpiote_init+0x44>)
    return err_code;
    3cce:	480a      	ldr	r0, [pc, #40]	; (3cf8 <nrfx_gpiote_init+0x48>)
    3cd0:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    3cd4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    3cd8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3cdc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3ce0:	2301      	movs	r3, #1
    3ce2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3ce6:	6563      	str	r3, [r4, #84]	; 0x54
}
    3ce8:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    3cea:	4804      	ldr	r0, [pc, #16]	; (3cfc <nrfx_gpiote_init+0x4c>)
    3cec:	e7fc      	b.n	3ce8 <nrfx_gpiote_init+0x38>
    3cee:	bf00      	nop
    3cf0:	2000c544 	.word	0x2000c544
    3cf4:	5000d000 	.word	0x5000d000
    3cf8:	0bad0000 	.word	0x0bad0000
    3cfc:	0bad0005 	.word	0x0bad0005

00003d00 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3d00:	4b03      	ldr	r3, [pc, #12]	; (3d10 <nrfx_gpiote_is_init+0x10>)
    3d02:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    3d06:	3800      	subs	r0, #0
    3d08:	bf18      	it	ne
    3d0a:	2001      	movne	r0, #1
    3d0c:	4770      	bx	lr
    3d0e:	bf00      	nop
    3d10:	2000c544 	.word	0x2000c544

00003d14 <nrfx_gpiote_channel_free>:
{
    3d14:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3d16:	4801      	ldr	r0, [pc, #4]	; (3d1c <nrfx_gpiote_channel_free+0x8>)
    3d18:	f7ff bda0 	b.w	385c <nrfx_flag32_free>
    3d1c:	2000c594 	.word	0x2000c594

00003d20 <nrfx_gpiote_channel_alloc>:
{
    3d20:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3d22:	4801      	ldr	r0, [pc, #4]	; (3d28 <nrfx_gpiote_channel_alloc+0x8>)
    3d24:	f7ff bd78 	b.w	3818 <nrfx_flag32_alloc>
    3d28:	2000c594 	.word	0x2000c594

00003d2c <nrfx_gpiote_trigger_enable>:
{
    3d2c:	4602      	mov	r2, r0
    3d2e:	b510      	push	{r4, lr}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3d30:	f7ff fe0c 	bl	394c <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3d34:	4b1c      	ldr	r3, [pc, #112]	; (3da8 <nrfx_gpiote_trigger_enable+0x7c>)
    3d36:	f102 0408 	add.w	r4, r2, #8
    3d3a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3d3e:	b1e0      	cbz	r0, 3d7a <nrfx_gpiote_trigger_enable+0x4e>
    3d40:	f013 0402 	ands.w	r4, r3, #2
    3d44:	d119      	bne.n	3d7a <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3d46:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    3d48:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    3d4a:	f102 40a0 	add.w	r0, r2, #1342177280	; 0x50000000
    3d4e:	f500 4051 	add.w	r0, r0, #53504	; 0xd100
    3d52:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3d56:	6004      	str	r4, [r0, #0]
    3d58:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    3d5c:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3d5e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3d62:	f040 0001 	orr.w	r0, r0, #1
    3d66:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    3d6a:	b129      	cbz	r1, 3d78 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3d6c:	2201      	movs	r2, #1
    3d6e:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    3d72:	4a0e      	ldr	r2, [pc, #56]	; (3dac <nrfx_gpiote_trigger_enable+0x80>)
    3d74:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    3d78:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3d7a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    3d7e:	2b04      	cmp	r3, #4
    3d80:	d00e      	beq.n	3da0 <nrfx_gpiote_trigger_enable+0x74>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    3d82:	2b05      	cmp	r3, #5
    3d84:	d00e      	beq.n	3da4 <nrfx_gpiote_trigger_enable+0x78>
    return p_reg->IN;
    3d86:	4b0a      	ldr	r3, [pc, #40]	; (3db0 <nrfx_gpiote_trigger_enable+0x84>)
    3d88:	6919      	ldr	r1, [r3, #16]
    *p_pin = pin_number & 0x1F;
    3d8a:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3d8e:	40d9      	lsrs	r1, r3
    3d90:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3d94:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3d96:	4610      	mov	r0, r2
}
    3d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3d9c:	f7ff bdc6 	b.w	392c <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3da0:	2103      	movs	r1, #3
    3da2:	e7f8      	b.n	3d96 <nrfx_gpiote_trigger_enable+0x6a>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    3da4:	2102      	movs	r1, #2
    3da6:	e7f6      	b.n	3d96 <nrfx_gpiote_trigger_enable+0x6a>
    3da8:	2000c544 	.word	0x2000c544
    3dac:	5000d000 	.word	0x5000d000
    3db0:	50842500 	.word	0x50842500

00003db4 <nrfx_gpiote_trigger_disable>:
{
    3db4:	b508      	push	{r3, lr}
    3db6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3db8:	f7ff fdc8 	bl	394c <pin_in_use_by_te>
    3dbc:	b1c0      	cbz	r0, 3df0 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3dbe:	4b0f      	ldr	r3, [pc, #60]	; (3dfc <nrfx_gpiote_trigger_disable+0x48>)
    3dc0:	f102 0108 	add.w	r1, r2, #8
    3dc4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3dc8:	0799      	lsls	r1, r3, #30
    3dca:	d411      	bmi.n	3df0 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3dcc:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3dce:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3dd0:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    3dd2:	490b      	ldr	r1, [pc, #44]	; (3e00 <nrfx_gpiote_trigger_disable+0x4c>)
    3dd4:	009b      	lsls	r3, r3, #2
    3dd6:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    3dda:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3dde:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    3de2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3de6:	f022 0203 	bic.w	r2, r2, #3
    3dea:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    3dee:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3df0:	2100      	movs	r1, #0
}
    3df2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3df6:	4610      	mov	r0, r2
    3df8:	f7ff bd98 	b.w	392c <nrf_gpio_cfg_sense_set>
    3dfc:	2000c544 	.word	0x2000c544
    3e00:	5000d000 	.word	0x5000d000

00003e04 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3e04:	4b0c      	ldr	r3, [pc, #48]	; (3e38 <nrfx_gpiote_pin_uninit+0x34>)
    3e06:	f100 0208 	add.w	r2, r0, #8
    3e0a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    3e0e:	b510      	push	{r4, lr}
    if (!pin_in_use(pin))
    3e10:	07db      	lsls	r3, r3, #31
{
    3e12:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    3e14:	d50d      	bpl.n	3e32 <nrfx_gpiote_pin_uninit+0x2e>
    nrfx_gpiote_trigger_disable(pin);
    3e16:	f7ff ffcd 	bl	3db4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    3e1a:	4620      	mov	r0, r4
    3e1c:	f7ff fdea 	bl	39f4 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    3e20:	2202      	movs	r2, #2
    3e22:	4b06      	ldr	r3, [pc, #24]	; (3e3c <nrfx_gpiote_pin_uninit+0x38>)
    *p_pin = pin_number & 0x1F;
    3e24:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
    3e28:	3480      	adds	r4, #128	; 0x80
    3e2a:	4805      	ldr	r0, [pc, #20]	; (3e40 <nrfx_gpiote_pin_uninit+0x3c>)
    3e2c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
    3e30:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3e32:	4804      	ldr	r0, [pc, #16]	; (3e44 <nrfx_gpiote_pin_uninit+0x40>)
    3e34:	e7fc      	b.n	3e30 <nrfx_gpiote_pin_uninit+0x2c>
    3e36:	bf00      	nop
    3e38:	2000c544 	.word	0x2000c544
    3e3c:	50842500 	.word	0x50842500
    3e40:	0bad0000 	.word	0x0bad0000
    3e44:	0bad0004 	.word	0x0bad0004

00003e48 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    3e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    3e4c:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3e4e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3e50:	462c      	mov	r4, r5
{
    3e52:	4b4d      	ldr	r3, [pc, #308]	; (3f88 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
    3e54:	484d      	ldr	r0, [pc, #308]	; (3f8c <nrfx_gpiote_irq_handler+0x144>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3e56:	494e      	ldr	r1, [pc, #312]	; (3f90 <nrfx_gpiote_irq_handler+0x148>)
{
    3e58:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3e5a:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    3e5c:	b136      	cbz	r6, 3e6c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    3e5e:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    3e62:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3e64:	bf1e      	ittt	ne
    3e66:	601c      	strne	r4, [r3, #0]
    3e68:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    3e6a:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3e6c:	3304      	adds	r3, #4
    3e6e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    3e70:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3e74:	d1f1      	bne.n	3e5a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3e76:	4f45      	ldr	r7, [pc, #276]	; (3f8c <nrfx_gpiote_irq_handler+0x144>)
    3e78:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    3e7c:	b193      	cbz	r3, 3ea4 <nrfx_gpiote_irq_handler+0x5c>
        *p_masks = gpio_regs[i]->LATCH;
    3e7e:	4e45      	ldr	r6, [pc, #276]	; (3f94 <nrfx_gpiote_irq_handler+0x14c>)
    3e80:	6a33      	ldr	r3, [r6, #32]
    3e82:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    3e84:	6233      	str	r3, [r6, #32]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    3e86:	f04f 0901 	mov.w	r9, #1
    3e8a:	f10d 080c 	add.w	r8, sp, #12
            while (latch[i])
    3e8e:	9803      	ldr	r0, [sp, #12]
    3e90:	b950      	cbnz	r0, 3ea8 <nrfx_gpiote_irq_handler+0x60>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3e92:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
    3e96:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    3e9a:	6a33      	ldr	r3, [r6, #32]
    3e9c:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    3e9e:	6233      	str	r3, [r6, #32]
        if (latch[port_idx])
    3ea0:	2b00      	cmp	r3, #0
    3ea2:	d1f0      	bne.n	3e86 <nrfx_gpiote_irq_handler+0x3e>
        mask &= ~NRFX_BIT(ch);
    3ea4:	2401      	movs	r4, #1
    3ea6:	e069      	b.n	3f7c <nrfx_gpiote_irq_handler+0x134>
                uint32_t pin = NRF_CTZ(latch[i]);
    3ea8:	fa90 faa0 	rbit	sl, r0
    3eac:	faba fa8a 	clz	sl, sl
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3eb0:	4a39      	ldr	r2, [pc, #228]	; (3f98 <nrfx_gpiote_irq_handler+0x150>)
    3eb2:	f10a 0308 	add.w	r3, sl, #8
    3eb6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    3eba:	ea4f 0cda 	mov.w	ip, sl, lsr #3
    bit = BITMASK_RELBIT_GET(bit);
    3ebe:	f00a 0307 	and.w	r3, sl, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3ec2:	fa09 f403 	lsl.w	r4, r9, r3
    3ec6:	f818 300c 	ldrb.w	r3, [r8, ip]
    3eca:	f3c1 0282 	ubfx	r2, r1, #2, #3
    3ece:	ea23 0304 	bic.w	r3, r3, r4
    3ed2:	f808 300c 	strb.w	r3, [r8, ip]
    3ed6:	eb06 038a 	add.w	r3, r6, sl, lsl #2
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3eda:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    if (is_level(trigger))
    3ede:	06c8      	lsls	r0, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3ee0:	4693      	mov	fp, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    3ee2:	f3c4 4401 	ubfx	r4, r4, #16, #2
    if (is_level(trigger))
    3ee6:	d518      	bpl.n	3f1a <nrfx_gpiote_irq_handler+0xd2>
        call_handler(pin, trigger);
    3ee8:	4611      	mov	r1, r2
    3eea:	4650      	mov	r0, sl
    3eec:	9301      	str	r3, [sp, #4]
    3eee:	f7ff fd37 	bl	3960 <call_handler>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3ef2:	9b01      	ldr	r3, [sp, #4]
    3ef4:	b2e4      	uxtb	r4, r4
    3ef6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        if (nrf_gpio_pin_sense_get(pin) == sense)
    3efa:	f3c3 4301 	ubfx	r3, r3, #16, #2
    3efe:	429c      	cmp	r4, r3
    3f00:	d107      	bne.n	3f12 <nrfx_gpiote_irq_handler+0xca>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3f02:	2100      	movs	r1, #0
    3f04:	4650      	mov	r0, sl
    3f06:	f7ff fd11 	bl	392c <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    3f0a:	4621      	mov	r1, r4
    3f0c:	4650      	mov	r0, sl
    3f0e:	f7ff fd0d 	bl	392c <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    3f12:	fa09 f00a 	lsl.w	r0, r9, sl
    3f16:	6230      	str	r0, [r6, #32]
}
    3f18:	e7b9      	b.n	3e8e <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3f1a:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    3f1c:	bf0c      	ite	eq
    3f1e:	2103      	moveq	r1, #3
    3f20:	2102      	movne	r1, #2
    3f22:	4650      	mov	r0, sl
    3f24:	9201      	str	r2, [sp, #4]
    3f26:	f7ff fd01 	bl	392c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3f2a:	9a01      	ldr	r2, [sp, #4]
    3f2c:	2a03      	cmp	r2, #3
    3f2e:	d004      	beq.n	3f3a <nrfx_gpiote_irq_handler+0xf2>
    3f30:	2c02      	cmp	r4, #2
    3f32:	d107      	bne.n	3f44 <nrfx_gpiote_irq_handler+0xfc>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3f34:	f1bb 0f01 	cmp.w	fp, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    3f38:	d1eb      	bne.n	3f12 <nrfx_gpiote_irq_handler+0xca>
            call_handler(pin, trigger);
    3f3a:	4659      	mov	r1, fp
    3f3c:	4650      	mov	r0, sl
    3f3e:	f7ff fd0f 	bl	3960 <call_handler>
    3f42:	e7e6      	b.n	3f12 <nrfx_gpiote_irq_handler+0xca>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3f44:	2c03      	cmp	r4, #3
    3f46:	d1e4      	bne.n	3f12 <nrfx_gpiote_irq_handler+0xca>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    3f48:	f1bb 0f02 	cmp.w	fp, #2
    3f4c:	e7f4      	b.n	3f38 <nrfx_gpiote_irq_handler+0xf0>
        uint32_t ch = NRF_CTZ(mask);
    3f4e:	fa95 f3a5 	rbit	r3, r5
    3f52:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    3f56:	fa04 f203 	lsl.w	r2, r4, r3
    3f5a:	009b      	lsls	r3, r3, #2
    3f5c:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    3f60:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3f64:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    3f68:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3f6c:	f3c0 2004 	ubfx	r0, r0, #8, #5
    3f70:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    3f74:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3f78:	f7ff fcf2 	bl	3960 <call_handler>
    while (mask)
    3f7c:	2d00      	cmp	r5, #0
    3f7e:	d1e6      	bne.n	3f4e <nrfx_gpiote_irq_handler+0x106>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    3f80:	b005      	add	sp, #20
    3f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3f86:	bf00      	nop
    3f88:	5000d100 	.word	0x5000d100
    3f8c:	5000d000 	.word	0x5000d000
    3f90:	5000d120 	.word	0x5000d120
    3f94:	50842500 	.word	0x50842500
    3f98:	2000c544 	.word	0x2000c544

00003f9c <nvmc_readonly_mode_set>:

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
    3f9c:	2200      	movs	r2, #0
    3f9e:	4b03      	ldr	r3, [pc, #12]	; (3fac <nvmc_readonly_mode_set+0x10>)
    3fa0:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    3fa4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    3fa8:	4770      	bx	lr
    3faa:	bf00      	nop
    3fac:	50039000 	.word	0x50039000

00003fb0 <nvmc_word_write>:
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
    3fb0:	4a04      	ldr	r2, [pc, #16]	; (3fc4 <nvmc_word_write+0x14>)
    3fb2:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    3fb6:	07db      	lsls	r3, r3, #31
    3fb8:	d5fb      	bpl.n	3fb2 <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
    3fba:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    3fbc:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    3fc0:	4770      	bx	lr
    3fc2:	bf00      	nop
    3fc4:	50039000 	.word	0x50039000

00003fc8 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    3fc8:	b508      	push	{r3, lr}
    return !(addr % flash_page_size_get());
    3fca:	f3c0 030b 	ubfx	r3, r0, #0, #12
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    3fce:	b983      	cbnz	r3, 3ff2 <nrfx_nvmc_page_erase+0x2a>
    p_reg->CONFIGNS = (uint32_t)mode;
    3fd0:	2202      	movs	r2, #2
    3fd2:	4b09      	ldr	r3, [pc, #36]	; (3ff8 <nrfx_nvmc_page_erase+0x30>)
    3fd4:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    3fd8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    3fdc:	f04f 32ff 	mov.w	r2, #4294967295
    3fe0:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    3fe2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    3fe6:	07d2      	lsls	r2, r2, #31
    3fe8:	d5fb      	bpl.n	3fe2 <nrfx_nvmc_page_erase+0x1a>
    {}
    nvmc_readonly_mode_set();
    3fea:	f7ff ffd7 	bl	3f9c <nvmc_readonly_mode_set>

    return NRFX_SUCCESS;
    3fee:	4803      	ldr	r0, [pc, #12]	; (3ffc <nrfx_nvmc_page_erase+0x34>)
}
    3ff0:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
    3ff2:	4803      	ldr	r0, [pc, #12]	; (4000 <nrfx_nvmc_page_erase+0x38>)
    3ff4:	e7fc      	b.n	3ff0 <nrfx_nvmc_page_erase+0x28>
    3ff6:	bf00      	nop
    3ff8:	50039000 	.word	0x50039000
    3ffc:	0bad0000 	.word	0x0bad0000
    4000:	0bad000a 	.word	0x0bad000a

00004004 <nrfx_nvmc_word_write>:
    p_reg->CONFIGNS = (uint32_t)mode;
    4004:	2201      	movs	r2, #1

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    4006:	b508      	push	{r3, lr}
    4008:	4b05      	ldr	r3, [pc, #20]	; (4020 <nrfx_nvmc_word_write+0x1c>)
    400a:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    400e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
    4012:	f7ff ffcd 	bl	3fb0 <nvmc_word_write>

    nvmc_readonly_mode_set();
}
    4016:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nvmc_readonly_mode_set();
    401a:	f7ff bfbf 	b.w	3f9c <nvmc_readonly_mode_set>
    401e:	bf00      	nop
    4020:	50039000 	.word	0x50039000

00004024 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4024:	4b0e      	ldr	r3, [pc, #56]	; (4060 <z_sys_init_run_level+0x3c>)
{
    4026:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4028:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    402c:	3001      	adds	r0, #1
    402e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4032:	42a6      	cmp	r6, r4
    4034:	d800      	bhi.n	4038 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    4036:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    4038:	e9d4 3500 	ldrd	r3, r5, [r4]
    403c:	4628      	mov	r0, r5
    403e:	4798      	blx	r3
		if (dev != NULL) {
    4040:	b165      	cbz	r5, 405c <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    4042:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    4044:	b130      	cbz	r0, 4054 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4046:	2800      	cmp	r0, #0
    4048:	bfb8      	it	lt
    404a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    404c:	28ff      	cmp	r0, #255	; 0xff
    404e:	bfa8      	it	ge
    4050:	20ff      	movge	r0, #255	; 0xff
    4052:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4054:	785a      	ldrb	r2, [r3, #1]
    4056:	f042 0201 	orr.w	r2, r2, #1
    405a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    405c:	3408      	adds	r4, #8
    405e:	e7e8      	b.n	4032 <z_sys_init_run_level+0xe>
    4060:	00007190 	.word	0x00007190

00004064 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    4064:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    4066:	4605      	mov	r5, r0
    4068:	b910      	cbnz	r0, 4070 <z_impl_device_get_binding+0xc>
		return NULL;
    406a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    406c:	4620      	mov	r0, r4
    406e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    4070:	7803      	ldrb	r3, [r0, #0]
    4072:	2b00      	cmp	r3, #0
    4074:	d0f9      	beq.n	406a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    4076:	4c0e      	ldr	r4, [pc, #56]	; (40b0 <z_impl_device_get_binding+0x4c>)
    4078:	4e0e      	ldr	r6, [pc, #56]	; (40b4 <z_impl_device_get_binding+0x50>)
    407a:	42b4      	cmp	r4, r6
    407c:	d108      	bne.n	4090 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    407e:	4c0c      	ldr	r4, [pc, #48]	; (40b0 <z_impl_device_get_binding+0x4c>)
    4080:	42b4      	cmp	r4, r6
    4082:	d0f2      	beq.n	406a <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4084:	4620      	mov	r0, r4
    4086:	f002 fd90 	bl	6baa <z_device_is_ready>
    408a:	b950      	cbnz	r0, 40a2 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    408c:	3418      	adds	r4, #24
    408e:	e7f7      	b.n	4080 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    4090:	4620      	mov	r0, r4
    4092:	f002 fd8a 	bl	6baa <z_device_is_ready>
    4096:	b110      	cbz	r0, 409e <z_impl_device_get_binding+0x3a>
    4098:	6823      	ldr	r3, [r4, #0]
    409a:	42ab      	cmp	r3, r5
    409c:	d0e6      	beq.n	406c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    409e:	3418      	adds	r4, #24
    40a0:	e7eb      	b.n	407a <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    40a2:	4628      	mov	r0, r5
    40a4:	6821      	ldr	r1, [r4, #0]
    40a6:	f002 fa1c 	bl	64e2 <strcmp>
    40aa:	2800      	cmp	r0, #0
    40ac:	d1ee      	bne.n	408c <z_impl_device_get_binding+0x28>
    40ae:	e7dd      	b.n	406c <z_impl_device_get_binding+0x8>
    40b0:	00006c90 	.word	0x00006c90
    40b4:	00006d08 	.word	0x00006d08

000040b8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    40b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    40ba:	4604      	mov	r4, r0
    40bc:	460d      	mov	r5, r1
	__asm__ volatile(
    40be:	f04f 0320 	mov.w	r3, #32
    40c2:	f3ef 8611 	mrs	r6, BASEPRI
    40c6:	f383 8812 	msr	BASEPRI_MAX, r3
    40ca:	f3bf 8f6f 	isb	sy
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    40ce:	2200      	movs	r2, #0
    40d0:	2804      	cmp	r0, #4
    40d2:	bf96      	itet	ls
    40d4:	4b11      	ldrls	r3, [pc, #68]	; (411c <z_fatal_error+0x64>)
    40d6:	4b12      	ldrhi	r3, [pc, #72]	; (4120 <z_fatal_error+0x68>)
	return 0;
    40d8:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    40dc:	9200      	str	r2, [sp, #0]
    40de:	2145      	movs	r1, #69	; 0x45
    40e0:	4602      	mov	r2, r0
    40e2:	4810      	ldr	r0, [pc, #64]	; (4124 <z_fatal_error+0x6c>)
    40e4:	f002 f94b 	bl	637e <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    40e8:	b13d      	cbz	r5, 40fa <z_fatal_error+0x42>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    40ea:	69eb      	ldr	r3, [r5, #28]
    40ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
    40f0:	b11b      	cbz	r3, 40fa <z_fatal_error+0x42>
		LOG_ERR("Fault during interrupt handling\n");
    40f2:	2145      	movs	r1, #69	; 0x45
    40f4:	480c      	ldr	r0, [pc, #48]	; (4128 <z_fatal_error+0x70>)
    40f6:	f002 f942 	bl	637e <z_log_minimal_printk>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    40fa:	2200      	movs	r2, #0
    40fc:	4b0b      	ldr	r3, [pc, #44]	; (412c <z_fatal_error+0x74>)
    40fe:	2145      	movs	r1, #69	; 0x45
    4100:	480b      	ldr	r0, [pc, #44]	; (4130 <z_fatal_error+0x78>)
    4102:	f002 f93c 	bl	637e <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    4106:	4629      	mov	r1, r5
    4108:	4620      	mov	r0, r4
    410a:	f7ff f9bd 	bl	3488 <k_sys_fatal_error_handler>
	__asm__ volatile(
    410e:	f386 8811 	msr	BASEPRI, r6
    4112:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4116:	b002      	add	sp, #8
    4118:	bd70      	pop	{r4, r5, r6, pc}
    411a:	bf00      	nop
    411c:	000071a4 	.word	0x000071a4
    4120:	00007eef 	.word	0x00007eef
    4124:	00007efd 	.word	0x00007efd
    4128:	00007f2a 	.word	0x00007f2a
    412c:	00007f50 	.word	0x00007f50
    4130:	00007f58 	.word	0x00007f58

00004134 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    4134:	2201      	movs	r2, #1
{
    4136:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    4138:	4b08      	ldr	r3, [pc, #32]	; (415c <bg_thread_main+0x28>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    413a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    413c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    413e:	f7ff ff71 	bl	4024 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    4142:	f000 f909 	bl	4358 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    4146:	2003      	movs	r0, #3
    4148:	f7ff ff6c 	bl	4024 <z_sys_init_run_level>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    414c:	f7fc f968 	bl	420 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4150:	4a03      	ldr	r2, [pc, #12]	; (4160 <bg_thread_main+0x2c>)
    4152:	7b13      	ldrb	r3, [r2, #12]
    4154:	f023 0301 	bic.w	r3, r3, #1
    4158:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    415a:	bd08      	pop	{r3, pc}
    415c:	2000d4e6 	.word	0x2000d4e6
    4160:	2000c640 	.word	0x2000c640

00004164 <z_bss_zero>:
{
    4164:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    4166:	4803      	ldr	r0, [pc, #12]	; (4174 <z_bss_zero+0x10>)
    4168:	4a03      	ldr	r2, [pc, #12]	; (4178 <z_bss_zero+0x14>)
    416a:	2100      	movs	r1, #0
    416c:	1a12      	subs	r2, r2, r0
    416e:	f002 fd26 	bl	6bbe <z_early_memset>
}
    4172:	bd08      	pop	{r3, pc}
    4174:	2000c620 	.word	0x2000c620
    4178:	2000d4e8 	.word	0x2000d4e8

0000417c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    417c:	b508      	push	{r3, lr}
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    417e:	4b19      	ldr	r3, [pc, #100]	; (41e4 <z_cstart+0x68>)
	uint32_t msp =
    4180:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4184:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    4188:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    418c:	2500      	movs	r5, #0
    418e:	23e0      	movs	r3, #224	; 0xe0
    4190:	4c15      	ldr	r4, [pc, #84]	; (41e8 <z_cstart+0x6c>)
    4192:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    4196:	77e5      	strb	r5, [r4, #31]
    4198:	7625      	strb	r5, [r4, #24]
    419a:	7665      	strb	r5, [r4, #25]
    419c:	76a5      	strb	r5, [r4, #26]
    419e:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    41a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    41a4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    41a8:	6263      	str	r3, [r4, #36]	; 0x24
    41aa:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    41ae:	f7fd ff85 	bl	20bc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    41b2:	f7fd fcbb 	bl	1b2c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    41b6:	f04f 33ff 	mov.w	r3, #4294967295
    41ba:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    41bc:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    41be:	f7fe f945 	bl	244c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    41c2:	f7fe f815 	bl	21f0 <z_arm_configure_static_mpu_regions>
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    41c6:	f002 fcef 	bl	6ba8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    41ca:	4628      	mov	r0, r5
    41cc:	f7ff ff2a 	bl	4024 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    41d0:	2001      	movs	r0, #1
    41d2:	f7ff ff27 	bl	4024 <z_sys_init_run_level>
#else
#ifdef ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING
	/* Custom ARCH-specific routine to switch to main()
	 * in the case of no multi-threading.
	 */
	ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING(bg_thread_main,
    41d6:	462b      	mov	r3, r5
    41d8:	462a      	mov	r2, r5
    41da:	4629      	mov	r1, r5
    41dc:	4803      	ldr	r0, [pc, #12]	; (41ec <z_cstart+0x70>)
    41de:	f7fd fd67 	bl	1cb0 <z_arm_switch_to_main_no_multithreading>
    41e2:	bf00      	nop
    41e4:	2000fce8 	.word	0x2000fce8
    41e8:	e000ed00 	.word	0xe000ed00
    41ec:	00004135 	.word	0x00004135

000041f0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    41f0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    41f2:	4806      	ldr	r0, [pc, #24]	; (420c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    41f4:	4a06      	ldr	r2, [pc, #24]	; (4210 <z_data_copy+0x20>)
    41f6:	4907      	ldr	r1, [pc, #28]	; (4214 <z_data_copy+0x24>)
    41f8:	1a12      	subs	r2, r2, r0
    41fa:	f002 fce2 	bl	6bc2 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    41fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    4202:	4a05      	ldr	r2, [pc, #20]	; (4218 <z_data_copy+0x28>)
    4204:	4905      	ldr	r1, [pc, #20]	; (421c <z_data_copy+0x2c>)
    4206:	4806      	ldr	r0, [pc, #24]	; (4220 <z_data_copy+0x30>)
    4208:	f002 bcdb 	b.w	6bc2 <z_early_memcpy>
    420c:	2000c500 	.word	0x2000c500
    4210:	2000c61c 	.word	0x2000c61c
    4214:	00008010 	.word	0x00008010
    4218:	00000000 	.word	0x00000000
    421c:	00007ff8 	.word	0x00007ff8
    4220:	2000c500 	.word	0x2000c500

00004224 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4224:	4b03      	ldr	r3, [pc, #12]	; (4234 <elapsed+0x10>)
    4226:	681b      	ldr	r3, [r3, #0]
    4228:	b90b      	cbnz	r3, 422e <elapsed+0xa>
    422a:	f7ff b853 	b.w	32d4 <sys_clock_elapsed>
}
    422e:	2000      	movs	r0, #0
    4230:	4770      	bx	lr
    4232:	bf00      	nop
    4234:	2000d3c8 	.word	0x2000d3c8

00004238 <next_timeout>:
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4238:	4b0d      	ldr	r3, [pc, #52]	; (4270 <next_timeout+0x38>)

static int32_t next_timeout(void)
{
    423a:	b510      	push	{r4, lr}
    423c:	681c      	ldr	r4, [r3, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    423e:	429c      	cmp	r4, r3
    4240:	bf08      	it	eq
    4242:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    4244:	f7ff ffee 	bl	4224 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    4248:	b174      	cbz	r4, 4268 <next_timeout+0x30>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    424a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    424e:	1a1b      	subs	r3, r3, r0
    4250:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    4254:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    4258:	f170 0200 	sbcs.w	r2, r0, #0
    425c:	da04      	bge.n	4268 <next_timeout+0x30>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    425e:	2800      	cmp	r0, #0
    4260:	bfac      	ite	ge
    4262:	4618      	movge	r0, r3
    4264:	2000      	movlt	r0, #0
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    4266:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    4268:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return ret;
    426c:	e7fb      	b.n	4266 <next_timeout+0x2e>
    426e:	bf00      	nop
    4270:	2000c5a0 	.word	0x2000c5a0

00004274 <remove_timeout>:
{
    4274:	b530      	push	{r4, r5, lr}
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    4276:	6803      	ldr	r3, [r0, #0]
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4278:	b168      	cbz	r0, 4296 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    427a:	4a0a      	ldr	r2, [pc, #40]	; (42a4 <remove_timeout+0x30>)
    427c:	6852      	ldr	r2, [r2, #4]
    427e:	4290      	cmp	r0, r2
    4280:	d009      	beq.n	4296 <remove_timeout+0x22>
	if (next(t) != NULL) {
    4282:	b143      	cbz	r3, 4296 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    4284:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    4288:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    428c:	1912      	adds	r2, r2, r4
    428e:	eb41 0105 	adc.w	r1, r1, r5
    4292:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    4296:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    4298:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    429a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    429c:	2300      	movs	r3, #0
	node->prev = NULL;
    429e:	e9c0 3300 	strd	r3, r3, [r0]
}
    42a2:	bd30      	pop	{r4, r5, pc}
    42a4:	2000c5a0 	.word	0x2000c5a0

000042a8 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    42a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	__asm__ volatile(
    42ac:	f04f 0320 	mov.w	r3, #32
    42b0:	f3ef 8411 	mrs	r4, BASEPRI
    42b4:	f383 8812 	msr	BASEPRI_MAX, r3
    42b8:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    42bc:	4e23      	ldr	r6, [pc, #140]	; (434c <sys_clock_announce+0xa4>)
	return list->head == list;
    42be:	f8df 8094 	ldr.w	r8, [pc, #148]	; 4354 <sys_clock_announce+0xac>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    42c2:	4d23      	ldr	r5, [pc, #140]	; (4350 <sys_clock_announce+0xa8>)
	announce_remaining = ticks;
    42c4:	6030      	str	r0, [r6, #0]
    42c6:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    42ca:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    42cc:	4540      	cmp	r0, r8
    42ce:	ea4f 77e2 	mov.w	r7, r2, asr #31
		curr_tick += dt;
    42d2:	e9d5 1e00 	ldrd	r1, lr, [r5]
    42d6:	d00b      	beq.n	42f0 <sys_clock_announce+0x48>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    42d8:	b150      	cbz	r0, 42f0 <sys_clock_announce+0x48>
    42da:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    42de:	429a      	cmp	r2, r3
    42e0:	eb77 090c 	sbcs.w	r9, r7, ip
    42e4:	da16      	bge.n	4314 <sys_clock_announce+0x6c>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    42e6:	1a9b      	subs	r3, r3, r2
    42e8:	eb6c 0c07 	sbc.w	ip, ip, r7
    42ec:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    42f0:	1852      	adds	r2, r2, r1
    42f2:	eb4e 0707 	adc.w	r7, lr, r7
    42f6:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    42fa:	2500      	movs	r5, #0
    42fc:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    42fe:	f7ff ff9b 	bl	4238 <next_timeout>
    4302:	4629      	mov	r1, r5
    4304:	f7fe ffb6 	bl	3274 <sys_clock_set_timeout>
	__asm__ volatile(
    4308:	f384 8811 	msr	BASEPRI, r4
    430c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    4310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    4314:	1859      	adds	r1, r3, r1
    4316:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    431a:	1ad3      	subs	r3, r2, r3
    431c:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    431e:	2200      	movs	r2, #0
    4320:	2300      	movs	r3, #0
    4322:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    4326:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    432a:	f7ff ffa3 	bl	4274 <remove_timeout>
    432e:	f384 8811 	msr	BASEPRI, r4
    4332:	f3bf 8f6f 	isb	sy
		t->fn(t);
    4336:	6883      	ldr	r3, [r0, #8]
    4338:	4798      	blx	r3
	__asm__ volatile(
    433a:	f04f 0320 	mov.w	r3, #32
    433e:	f3ef 8411 	mrs	r4, BASEPRI
    4342:	f383 8812 	msr	BASEPRI_MAX, r3
    4346:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    434a:	e7bc      	b.n	42c6 <sys_clock_announce+0x1e>
    434c:	2000d3c8 	.word	0x2000d3c8
    4350:	2000c6c0 	.word	0x2000c6c0
    4354:	2000c5a0 	.word	0x2000c5a0

00004358 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    4358:	4a02      	ldr	r2, [pc, #8]	; (4364 <boot_banner+0xc>)
    435a:	4903      	ldr	r1, [pc, #12]	; (4368 <boot_banner+0x10>)
    435c:	4803      	ldr	r0, [pc, #12]	; (436c <boot_banner+0x14>)
    435e:	f001 bf54 	b.w	620a <printk>
    4362:	bf00      	nop
    4364:	00007f4f 	.word	0x00007f4f
    4368:	00007fc2 	.word	0x00007fc2
    436c:	00007fcf 	.word	0x00007fcf

00004370 <nrf_cc3xx_platform_init_no_rng>:
    4370:	b510      	push	{r4, lr}
    4372:	4c0a      	ldr	r4, [pc, #40]	; (439c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    4374:	6823      	ldr	r3, [r4, #0]
    4376:	b11b      	cbz	r3, 4380 <nrf_cc3xx_platform_init_no_rng+0x10>
    4378:	2301      	movs	r3, #1
    437a:	2000      	movs	r0, #0
    437c:	6023      	str	r3, [r4, #0]
    437e:	bd10      	pop	{r4, pc}
    4380:	f000 f850 	bl	4424 <CC_LibInitNoRng>
    4384:	2800      	cmp	r0, #0
    4386:	d0f7      	beq.n	4378 <nrf_cc3xx_platform_init_no_rng+0x8>
    4388:	3801      	subs	r0, #1
    438a:	2806      	cmp	r0, #6
    438c:	d803      	bhi.n	4396 <nrf_cc3xx_platform_init_no_rng+0x26>
    438e:	4b04      	ldr	r3, [pc, #16]	; (43a0 <nrf_cc3xx_platform_init_no_rng+0x30>)
    4390:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4394:	bd10      	pop	{r4, pc}
    4396:	4803      	ldr	r0, [pc, #12]	; (43a4 <nrf_cc3xx_platform_init_no_rng+0x34>)
    4398:	bd10      	pop	{r4, pc}
    439a:	bf00      	nop
    439c:	2000d3cc 	.word	0x2000d3cc
    43a0:	000071b8 	.word	0x000071b8
    43a4:	ffff8ffe 	.word	0xffff8ffe

000043a8 <nrf_cc3xx_platform_abort>:
    43a8:	f3bf 8f4f 	dsb	sy
    43ac:	4905      	ldr	r1, [pc, #20]	; (43c4 <nrf_cc3xx_platform_abort+0x1c>)
    43ae:	4b06      	ldr	r3, [pc, #24]	; (43c8 <nrf_cc3xx_platform_abort+0x20>)
    43b0:	68ca      	ldr	r2, [r1, #12]
    43b2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    43b6:	4313      	orrs	r3, r2
    43b8:	60cb      	str	r3, [r1, #12]
    43ba:	f3bf 8f4f 	dsb	sy
    43be:	bf00      	nop
    43c0:	e7fd      	b.n	43be <nrf_cc3xx_platform_abort+0x16>
    43c2:	bf00      	nop
    43c4:	e000ed00 	.word	0xe000ed00
    43c8:	05fa0004 	.word	0x05fa0004

000043cc <CC_PalAbort>:
    43cc:	b430      	push	{r4, r5}
    43ce:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    43d2:	2500      	movs	r5, #0
    43d4:	4b07      	ldr	r3, [pc, #28]	; (43f4 <CC_PalAbort+0x28>)
    43d6:	4c08      	ldr	r4, [pc, #32]	; (43f8 <CC_PalAbort+0x2c>)
    43d8:	4908      	ldr	r1, [pc, #32]	; (43fc <CC_PalAbort+0x30>)
    43da:	6849      	ldr	r1, [r1, #4]
    43dc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    43e0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    43e4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    43e8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    43ec:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    43f0:	bc30      	pop	{r4, r5}
    43f2:	4708      	bx	r1
    43f4:	50841000 	.word	0x50841000
    43f8:	50840000 	.word	0x50840000
    43fc:	2000c5a8 	.word	0x2000c5a8

00004400 <nrf_cc3xx_platform_set_abort>:
    4400:	4b02      	ldr	r3, [pc, #8]	; (440c <nrf_cc3xx_platform_set_abort+0xc>)
    4402:	e9d0 1200 	ldrd	r1, r2, [r0]
    4406:	e9c3 1200 	strd	r1, r2, [r3]
    440a:	4770      	bx	lr
    440c:	2000c5a8 	.word	0x2000c5a8

00004410 <mbedtls_platform_zeroize>:
    4410:	b138      	cbz	r0, 4422 <mbedtls_platform_zeroize+0x12>
    4412:	b131      	cbz	r1, 4422 <mbedtls_platform_zeroize+0x12>
    4414:	2200      	movs	r2, #0
    4416:	4401      	add	r1, r0
    4418:	4603      	mov	r3, r0
    441a:	3001      	adds	r0, #1
    441c:	4288      	cmp	r0, r1
    441e:	701a      	strb	r2, [r3, #0]
    4420:	d1fa      	bne.n	4418 <mbedtls_platform_zeroize+0x8>
    4422:	4770      	bx	lr

00004424 <CC_LibInitNoRng>:
    4424:	b538      	push	{r3, r4, r5, lr}
    4426:	f000 f82f 	bl	4488 <CC_HalInit>
    442a:	b120      	cbz	r0, 4436 <CC_LibInitNoRng+0x12>
    442c:	2403      	movs	r4, #3
    442e:	f000 f863 	bl	44f8 <CC_PalTerminate>
    4432:	4620      	mov	r0, r4
    4434:	bd38      	pop	{r3, r4, r5, pc}
    4436:	f000 f831 	bl	449c <CC_PalInit>
    443a:	b998      	cbnz	r0, 4464 <CC_LibInitNoRng+0x40>
    443c:	f000 f8ac 	bl	4598 <CC_PalPowerSaveModeSelect>
    4440:	b998      	cbnz	r0, 446a <CC_LibInitNoRng+0x46>
    4442:	4d0f      	ldr	r5, [pc, #60]	; (4480 <CC_LibInitNoRng+0x5c>)
    4444:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    4448:	0e1b      	lsrs	r3, r3, #24
    444a:	2bf0      	cmp	r3, #240	; 0xf0
    444c:	d108      	bne.n	4460 <CC_LibInitNoRng+0x3c>
    444e:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    4452:	4b0c      	ldr	r3, [pc, #48]	; (4484 <CC_LibInitNoRng+0x60>)
    4454:	429a      	cmp	r2, r3
    4456:	d00a      	beq.n	446e <CC_LibInitNoRng+0x4a>
    4458:	2407      	movs	r4, #7
    445a:	f000 f817 	bl	448c <CC_HalTerminate>
    445e:	e7e6      	b.n	442e <CC_LibInitNoRng+0xa>
    4460:	2406      	movs	r4, #6
    4462:	e7fa      	b.n	445a <CC_LibInitNoRng+0x36>
    4464:	2404      	movs	r4, #4
    4466:	4620      	mov	r0, r4
    4468:	bd38      	pop	{r3, r4, r5, pc}
    446a:	2400      	movs	r4, #0
    446c:	e7f5      	b.n	445a <CC_LibInitNoRng+0x36>
    446e:	2001      	movs	r0, #1
    4470:	f000 f892 	bl	4598 <CC_PalPowerSaveModeSelect>
    4474:	4604      	mov	r4, r0
    4476:	2800      	cmp	r0, #0
    4478:	d1f7      	bne.n	446a <CC_LibInitNoRng+0x46>
    447a:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    447e:	e7d8      	b.n	4432 <CC_LibInitNoRng+0xe>
    4480:	50841000 	.word	0x50841000
    4484:	20e00000 	.word	0x20e00000

00004488 <CC_HalInit>:
    4488:	2000      	movs	r0, #0
    448a:	4770      	bx	lr

0000448c <CC_HalTerminate>:
    448c:	2000      	movs	r0, #0
    448e:	4770      	bx	lr

00004490 <CC_HalMaskInterrupt>:
    4490:	4b01      	ldr	r3, [pc, #4]	; (4498 <CC_HalMaskInterrupt+0x8>)
    4492:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    4496:	4770      	bx	lr
    4498:	50841000 	.word	0x50841000

0000449c <CC_PalInit>:
    449c:	b510      	push	{r4, lr}
    449e:	4811      	ldr	r0, [pc, #68]	; (44e4 <CC_PalInit+0x48>)
    44a0:	f000 f848 	bl	4534 <CC_PalMutexCreate>
    44a4:	b100      	cbz	r0, 44a8 <CC_PalInit+0xc>
    44a6:	bd10      	pop	{r4, pc}
    44a8:	480f      	ldr	r0, [pc, #60]	; (44e8 <CC_PalInit+0x4c>)
    44aa:	f000 f843 	bl	4534 <CC_PalMutexCreate>
    44ae:	2800      	cmp	r0, #0
    44b0:	d1f9      	bne.n	44a6 <CC_PalInit+0xa>
    44b2:	4c0e      	ldr	r4, [pc, #56]	; (44ec <CC_PalInit+0x50>)
    44b4:	4620      	mov	r0, r4
    44b6:	f000 f83d 	bl	4534 <CC_PalMutexCreate>
    44ba:	2800      	cmp	r0, #0
    44bc:	d1f3      	bne.n	44a6 <CC_PalInit+0xa>
    44be:	4b0c      	ldr	r3, [pc, #48]	; (44f0 <CC_PalInit+0x54>)
    44c0:	480c      	ldr	r0, [pc, #48]	; (44f4 <CC_PalInit+0x58>)
    44c2:	601c      	str	r4, [r3, #0]
    44c4:	f000 f836 	bl	4534 <CC_PalMutexCreate>
    44c8:	4601      	mov	r1, r0
    44ca:	2800      	cmp	r0, #0
    44cc:	d1eb      	bne.n	44a6 <CC_PalInit+0xa>
    44ce:	f000 f82d 	bl	452c <CC_PalDmaInit>
    44d2:	4604      	mov	r4, r0
    44d4:	b108      	cbz	r0, 44da <CC_PalInit+0x3e>
    44d6:	4620      	mov	r0, r4
    44d8:	bd10      	pop	{r4, pc}
    44da:	f000 f83f 	bl	455c <CC_PalPowerSaveModeInit>
    44de:	4620      	mov	r0, r4
    44e0:	e7fa      	b.n	44d8 <CC_PalInit+0x3c>
    44e2:	bf00      	nop
    44e4:	2000c5bc 	.word	0x2000c5bc
    44e8:	2000c5b0 	.word	0x2000c5b0
    44ec:	2000c5b8 	.word	0x2000c5b8
    44f0:	2000c5c0 	.word	0x2000c5c0
    44f4:	2000c5b4 	.word	0x2000c5b4

000044f8 <CC_PalTerminate>:
    44f8:	b508      	push	{r3, lr}
    44fa:	4808      	ldr	r0, [pc, #32]	; (451c <CC_PalTerminate+0x24>)
    44fc:	f000 f824 	bl	4548 <CC_PalMutexDestroy>
    4500:	4807      	ldr	r0, [pc, #28]	; (4520 <CC_PalTerminate+0x28>)
    4502:	f000 f821 	bl	4548 <CC_PalMutexDestroy>
    4506:	4807      	ldr	r0, [pc, #28]	; (4524 <CC_PalTerminate+0x2c>)
    4508:	f000 f81e 	bl	4548 <CC_PalMutexDestroy>
    450c:	4806      	ldr	r0, [pc, #24]	; (4528 <CC_PalTerminate+0x30>)
    450e:	f000 f81b 	bl	4548 <CC_PalMutexDestroy>
    4512:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4516:	f000 b80b 	b.w	4530 <CC_PalDmaTerminate>
    451a:	bf00      	nop
    451c:	2000c5bc 	.word	0x2000c5bc
    4520:	2000c5b0 	.word	0x2000c5b0
    4524:	2000c5b8 	.word	0x2000c5b8
    4528:	2000c5b4 	.word	0x2000c5b4

0000452c <CC_PalDmaInit>:
    452c:	2000      	movs	r0, #0
    452e:	4770      	bx	lr

00004530 <CC_PalDmaTerminate>:
    4530:	4770      	bx	lr
    4532:	bf00      	nop

00004534 <CC_PalMutexCreate>:
    4534:	b508      	push	{r3, lr}
    4536:	4b03      	ldr	r3, [pc, #12]	; (4544 <CC_PalMutexCreate+0x10>)
    4538:	6802      	ldr	r2, [r0, #0]
    453a:	681b      	ldr	r3, [r3, #0]
    453c:	6810      	ldr	r0, [r2, #0]
    453e:	4798      	blx	r3
    4540:	2000      	movs	r0, #0
    4542:	bd08      	pop	{r3, pc}
    4544:	2000c5cc 	.word	0x2000c5cc

00004548 <CC_PalMutexDestroy>:
    4548:	b508      	push	{r3, lr}
    454a:	4b03      	ldr	r3, [pc, #12]	; (4558 <CC_PalMutexDestroy+0x10>)
    454c:	6802      	ldr	r2, [r0, #0]
    454e:	685b      	ldr	r3, [r3, #4]
    4550:	6810      	ldr	r0, [r2, #0]
    4552:	4798      	blx	r3
    4554:	2000      	movs	r0, #0
    4556:	bd08      	pop	{r3, pc}
    4558:	2000c5cc 	.word	0x2000c5cc

0000455c <CC_PalPowerSaveModeInit>:
    455c:	b570      	push	{r4, r5, r6, lr}
    455e:	4c09      	ldr	r4, [pc, #36]	; (4584 <CC_PalPowerSaveModeInit+0x28>)
    4560:	4d09      	ldr	r5, [pc, #36]	; (4588 <CC_PalPowerSaveModeInit+0x2c>)
    4562:	6920      	ldr	r0, [r4, #16]
    4564:	68ab      	ldr	r3, [r5, #8]
    4566:	4798      	blx	r3
    4568:	b118      	cbz	r0, 4572 <CC_PalPowerSaveModeInit+0x16>
    456a:	4b08      	ldr	r3, [pc, #32]	; (458c <CC_PalPowerSaveModeInit+0x30>)
    456c:	4808      	ldr	r0, [pc, #32]	; (4590 <CC_PalPowerSaveModeInit+0x34>)
    456e:	685b      	ldr	r3, [r3, #4]
    4570:	4798      	blx	r3
    4572:	2100      	movs	r1, #0
    4574:	4a07      	ldr	r2, [pc, #28]	; (4594 <CC_PalPowerSaveModeInit+0x38>)
    4576:	68eb      	ldr	r3, [r5, #12]
    4578:	6011      	str	r1, [r2, #0]
    457a:	6920      	ldr	r0, [r4, #16]
    457c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4580:	4718      	bx	r3
    4582:	bf00      	nop
    4584:	2000c5dc 	.word	0x2000c5dc
    4588:	2000c5cc 	.word	0x2000c5cc
    458c:	2000c5a8 	.word	0x2000c5a8
    4590:	000071d4 	.word	0x000071d4
    4594:	2000d3d0 	.word	0x2000d3d0

00004598 <CC_PalPowerSaveModeSelect>:
    4598:	b570      	push	{r4, r5, r6, lr}
    459a:	4d1b      	ldr	r5, [pc, #108]	; (4608 <CC_PalPowerSaveModeSelect+0x70>)
    459c:	4e1b      	ldr	r6, [pc, #108]	; (460c <CC_PalPowerSaveModeSelect+0x74>)
    459e:	4604      	mov	r4, r0
    45a0:	68b2      	ldr	r2, [r6, #8]
    45a2:	6928      	ldr	r0, [r5, #16]
    45a4:	4790      	blx	r2
    45a6:	b9f8      	cbnz	r0, 45e8 <CC_PalPowerSaveModeSelect+0x50>
    45a8:	b15c      	cbz	r4, 45c2 <CC_PalPowerSaveModeSelect+0x2a>
    45aa:	4c19      	ldr	r4, [pc, #100]	; (4610 <CC_PalPowerSaveModeSelect+0x78>)
    45ac:	6823      	ldr	r3, [r4, #0]
    45ae:	b1b3      	cbz	r3, 45de <CC_PalPowerSaveModeSelect+0x46>
    45b0:	2b01      	cmp	r3, #1
    45b2:	d01b      	beq.n	45ec <CC_PalPowerSaveModeSelect+0x54>
    45b4:	3b01      	subs	r3, #1
    45b6:	6023      	str	r3, [r4, #0]
    45b8:	6928      	ldr	r0, [r5, #16]
    45ba:	68f3      	ldr	r3, [r6, #12]
    45bc:	4798      	blx	r3
    45be:	2000      	movs	r0, #0
    45c0:	bd70      	pop	{r4, r5, r6, pc}
    45c2:	4c13      	ldr	r4, [pc, #76]	; (4610 <CC_PalPowerSaveModeSelect+0x78>)
    45c4:	6821      	ldr	r1, [r4, #0]
    45c6:	b941      	cbnz	r1, 45da <CC_PalPowerSaveModeSelect+0x42>
    45c8:	2201      	movs	r2, #1
    45ca:	4b12      	ldr	r3, [pc, #72]	; (4614 <CC_PalPowerSaveModeSelect+0x7c>)
    45cc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    45d0:	4a11      	ldr	r2, [pc, #68]	; (4618 <CC_PalPowerSaveModeSelect+0x80>)
    45d2:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    45d6:	2b00      	cmp	r3, #0
    45d8:	d1fb      	bne.n	45d2 <CC_PalPowerSaveModeSelect+0x3a>
    45da:	3101      	adds	r1, #1
    45dc:	6021      	str	r1, [r4, #0]
    45de:	68f3      	ldr	r3, [r6, #12]
    45e0:	6928      	ldr	r0, [r5, #16]
    45e2:	4798      	blx	r3
    45e4:	2000      	movs	r0, #0
    45e6:	bd70      	pop	{r4, r5, r6, pc}
    45e8:	480c      	ldr	r0, [pc, #48]	; (461c <CC_PalPowerSaveModeSelect+0x84>)
    45ea:	bd70      	pop	{r4, r5, r6, pc}
    45ec:	4a0a      	ldr	r2, [pc, #40]	; (4618 <CC_PalPowerSaveModeSelect+0x80>)
    45ee:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    45f2:	2b00      	cmp	r3, #0
    45f4:	d1fb      	bne.n	45ee <CC_PalPowerSaveModeSelect+0x56>
    45f6:	4a07      	ldr	r2, [pc, #28]	; (4614 <CC_PalPowerSaveModeSelect+0x7c>)
    45f8:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    45fc:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    4600:	f7ff ff46 	bl	4490 <CC_HalMaskInterrupt>
    4604:	6823      	ldr	r3, [r4, #0]
    4606:	e7d5      	b.n	45b4 <CC_PalPowerSaveModeSelect+0x1c>
    4608:	2000c5dc 	.word	0x2000c5dc
    460c:	2000c5cc 	.word	0x2000c5cc
    4610:	2000d3d0 	.word	0x2000d3d0
    4614:	50840000 	.word	0x50840000
    4618:	50841000 	.word	0x50841000
    461c:	ffff8fe9 	.word	0xffff8fe9

00004620 <mutex_free>:
    4620:	b510      	push	{r4, lr}
    4622:	4604      	mov	r4, r0
    4624:	b130      	cbz	r0, 4634 <mutex_free+0x14>
    4626:	6863      	ldr	r3, [r4, #4]
    4628:	06db      	lsls	r3, r3, #27
    462a:	d502      	bpl.n	4632 <mutex_free+0x12>
    462c:	2300      	movs	r3, #0
    462e:	6023      	str	r3, [r4, #0]
    4630:	6063      	str	r3, [r4, #4]
    4632:	bd10      	pop	{r4, pc}
    4634:	4b02      	ldr	r3, [pc, #8]	; (4640 <mutex_free+0x20>)
    4636:	4803      	ldr	r0, [pc, #12]	; (4644 <mutex_free+0x24>)
    4638:	685b      	ldr	r3, [r3, #4]
    463a:	4798      	blx	r3
    463c:	e7f3      	b.n	4626 <mutex_free+0x6>
    463e:	bf00      	nop
    4640:	2000c5a8 	.word	0x2000c5a8
    4644:	000071f4 	.word	0x000071f4

00004648 <mutex_lock>:
    4648:	b1b0      	cbz	r0, 4678 <mutex_lock+0x30>
    464a:	6843      	ldr	r3, [r0, #4]
    464c:	b193      	cbz	r3, 4674 <mutex_lock+0x2c>
    464e:	06db      	lsls	r3, r3, #27
    4650:	d50e      	bpl.n	4670 <mutex_lock+0x28>
    4652:	2301      	movs	r3, #1
    4654:	e850 2f00 	ldrex	r2, [r0]
    4658:	4619      	mov	r1, r3
    465a:	e840 1c00 	strex	ip, r1, [r0]
    465e:	f09c 0f00 	teq	ip, #0
    4662:	d1f7      	bne.n	4654 <mutex_lock+0xc>
    4664:	2a01      	cmp	r2, #1
    4666:	d0f5      	beq.n	4654 <mutex_lock+0xc>
    4668:	f3bf 8f5f 	dmb	sy
    466c:	2000      	movs	r0, #0
    466e:	4770      	bx	lr
    4670:	4803      	ldr	r0, [pc, #12]	; (4680 <mutex_lock+0x38>)
    4672:	4770      	bx	lr
    4674:	4803      	ldr	r0, [pc, #12]	; (4684 <mutex_lock+0x3c>)
    4676:	4770      	bx	lr
    4678:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    467c:	4770      	bx	lr
    467e:	bf00      	nop
    4680:	ffff8fe9 	.word	0xffff8fe9
    4684:	ffff8fea 	.word	0xffff8fea

00004688 <mutex_unlock>:
    4688:	4603      	mov	r3, r0
    468a:	b168      	cbz	r0, 46a8 <mutex_unlock+0x20>
    468c:	6842      	ldr	r2, [r0, #4]
    468e:	b13a      	cbz	r2, 46a0 <mutex_unlock+0x18>
    4690:	06d2      	lsls	r2, r2, #27
    4692:	d507      	bpl.n	46a4 <mutex_unlock+0x1c>
    4694:	f3bf 8f5f 	dmb	sy
    4698:	2200      	movs	r2, #0
    469a:	4610      	mov	r0, r2
    469c:	601a      	str	r2, [r3, #0]
    469e:	4770      	bx	lr
    46a0:	4803      	ldr	r0, [pc, #12]	; (46b0 <mutex_unlock+0x28>)
    46a2:	4770      	bx	lr
    46a4:	4803      	ldr	r0, [pc, #12]	; (46b4 <mutex_unlock+0x2c>)
    46a6:	4770      	bx	lr
    46a8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    46ac:	4770      	bx	lr
    46ae:	bf00      	nop
    46b0:	ffff8fea 	.word	0xffff8fea
    46b4:	ffff8fe9 	.word	0xffff8fe9

000046b8 <mutex_init>:
    46b8:	b510      	push	{r4, lr}
    46ba:	4604      	mov	r4, r0
    46bc:	b120      	cbz	r0, 46c8 <mutex_init+0x10>
    46be:	2200      	movs	r2, #0
    46c0:	2311      	movs	r3, #17
    46c2:	6022      	str	r2, [r4, #0]
    46c4:	6063      	str	r3, [r4, #4]
    46c6:	bd10      	pop	{r4, pc}
    46c8:	4801      	ldr	r0, [pc, #4]	; (46d0 <mutex_init+0x18>)
    46ca:	f7ff fe7f 	bl	43cc <CC_PalAbort>
    46ce:	e7f6      	b.n	46be <mutex_init+0x6>
    46d0:	0000721c 	.word	0x0000721c

000046d4 <verify_context_ecdsa_verify_secp256r1>:
    46d4:	b130      	cbz	r0, 46e4 <verify_context_ecdsa_verify_secp256r1+0x10>
    46d6:	6802      	ldr	r2, [r0, #0]
    46d8:	4b03      	ldr	r3, [pc, #12]	; (46e8 <verify_context_ecdsa_verify_secp256r1+0x14>)
    46da:	4804      	ldr	r0, [pc, #16]	; (46ec <verify_context_ecdsa_verify_secp256r1+0x18>)
    46dc:	429a      	cmp	r2, r3
    46de:	bf08      	it	eq
    46e0:	2000      	moveq	r0, #0
    46e2:	4770      	bx	lr
    46e4:	4802      	ldr	r0, [pc, #8]	; (46f0 <verify_context_ecdsa_verify_secp256r1+0x1c>)
    46e6:	4770      	bx	lr
    46e8:	bbaa55dd 	.word	0xbbaa55dd
    46ec:	00f00882 	.word	0x00f00882
    46f0:	00f00871 	.word	0x00f00871

000046f4 <nrf_cc310_bl_ecdsa_verify_init_secp256r1>:
    46f4:	b538      	push	{r3, r4, r5, lr}
    46f6:	460d      	mov	r5, r1
    46f8:	4604      	mov	r4, r0
    46fa:	b1b0      	cbz	r0, 472a <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x36>
    46fc:	22a0      	movs	r2, #160	; 0xa0
    46fe:	2100      	movs	r1, #0
    4700:	3004      	adds	r0, #4
    4702:	f002 fa84 	bl	6c0e <SaSi_PalMemSet>
    4706:	b195      	cbz	r5, 472e <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x3a>
    4708:	2208      	movs	r2, #8
    470a:	4629      	mov	r1, r5
    470c:	f104 0064 	add.w	r0, r4, #100	; 0x64
    4710:	f002 fa83 	bl	6c1a <CRYS_COMMON_ReverseMemcpy32>
    4714:	2208      	movs	r2, #8
    4716:	f105 0120 	add.w	r1, r5, #32
    471a:	f104 0084 	add.w	r0, r4, #132	; 0x84
    471e:	f002 fa7c 	bl	6c1a <CRYS_COMMON_ReverseMemcpy32>
    4722:	2000      	movs	r0, #0
    4724:	4b03      	ldr	r3, [pc, #12]	; (4734 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x40>)
    4726:	6023      	str	r3, [r4, #0]
    4728:	bd38      	pop	{r3, r4, r5, pc}
    472a:	4803      	ldr	r0, [pc, #12]	; (4738 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x44>)
    472c:	e7fc      	b.n	4728 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x34>
    472e:	4803      	ldr	r0, [pc, #12]	; (473c <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x48>)
    4730:	e7fa      	b.n	4728 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x34>
    4732:	bf00      	nop
    4734:	bbaa55dd 	.word	0xbbaa55dd
    4738:	00f00871 	.word	0x00f00871
    473c:	00f00883 	.word	0x00f00883

00004740 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1>:
    4740:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4744:	4605      	mov	r5, r0
    4746:	460e      	mov	r6, r1
    4748:	4699      	mov	r9, r3
    474a:	4611      	mov	r1, r2
    474c:	f7ff ffc2 	bl	46d4 <verify_context_ecdsa_verify_secp256r1>
    4750:	4604      	mov	r4, r0
    4752:	2800      	cmp	r0, #0
    4754:	f040 8084 	bne.w	4860 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    4758:	2e00      	cmp	r6, #0
    475a:	f000 8085 	beq.w	4868 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x128>
    475e:	2900      	cmp	r1, #0
    4760:	f000 8084 	beq.w	486c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x12c>
    4764:	f1b9 0f20 	cmp.w	r9, #32
    4768:	f040 8082 	bne.w	4870 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x130>
    476c:	f105 0444 	add.w	r4, r5, #68	; 0x44
    4770:	2208      	movs	r2, #8
    4772:	f105 0804 	add.w	r8, r5, #4
    4776:	4620      	mov	r0, r4
    4778:	f002 fa4f 	bl	6c1a <CRYS_COMMON_ReverseMemcpy32>
    477c:	f105 0724 	add.w	r7, r5, #36	; 0x24
    4780:	2208      	movs	r2, #8
    4782:	4631      	mov	r1, r6
    4784:	4640      	mov	r0, r8
    4786:	f002 fa48 	bl	6c1a <CRYS_COMMON_ReverseMemcpy32>
    478a:	f106 0120 	add.w	r1, r6, #32
    478e:	2208      	movs	r2, #8
    4790:	4638      	mov	r0, r7
    4792:	f002 fa42 	bl	6c1a <CRYS_COMMON_ReverseMemcpy32>
    4796:	a902      	add	r1, sp, #8
    4798:	f841 9d04 	str.w	r9, [r1, #-4]!
    479c:	f44f 7080 	mov.w	r0, #256	; 0x100
    47a0:	f002 fa2f 	bl	6c02 <PkaInitAndMutexLock>
    47a4:	2800      	cmp	r0, #0
    47a6:	d165      	bne.n	4874 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x134>
    47a8:	f44f 7380 	mov.w	r3, #256	; 0x100
    47ac:	4a32      	ldr	r2, [pc, #200]	; (4878 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x138>)
    47ae:	2101      	movs	r1, #1
    47b0:	6013      	str	r3, [r2, #0]
    47b2:	6093      	str	r3, [r2, #8]
    47b4:	2308      	movs	r3, #8
    47b6:	4a31      	ldr	r2, [pc, #196]	; (487c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x13c>)
    47b8:	f000 fb34 	bl	4e24 <PkaCopyDataIntoPkaReg>
    47bc:	2101      	movs	r1, #1
    47be:	2305      	movs	r3, #5
    47c0:	4608      	mov	r0, r1
    47c2:	4a2f      	ldr	r2, [pc, #188]	; (4880 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x140>)
    47c4:	f000 fb2e 	bl	4e24 <PkaCopyDataIntoPkaReg>
    47c8:	2308      	movs	r3, #8
    47ca:	4642      	mov	r2, r8
    47cc:	2101      	movs	r1, #1
    47ce:	201c      	movs	r0, #28
    47d0:	f000 fb28 	bl	4e24 <PkaCopyDataIntoPkaReg>
    47d4:	2308      	movs	r3, #8
    47d6:	463a      	mov	r2, r7
    47d8:	2101      	movs	r1, #1
    47da:	2003      	movs	r0, #3
    47dc:	f000 fb22 	bl	4e24 <PkaCopyDataIntoPkaReg>
    47e0:	4622      	mov	r2, r4
    47e2:	2308      	movs	r3, #8
    47e4:	2101      	movs	r1, #1
    47e6:	2002      	movs	r0, #2
    47e8:	f000 fb1c 	bl	4e24 <PkaCopyDataIntoPkaReg>
    47ec:	2308      	movs	r3, #8
    47ee:	4a25      	ldr	r2, [pc, #148]	; (4884 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x144>)
    47f0:	2101      	movs	r1, #1
    47f2:	201a      	movs	r0, #26
    47f4:	f000 fb16 	bl	4e24 <PkaCopyDataIntoPkaReg>
    47f8:	2305      	movs	r3, #5
    47fa:	4a23      	ldr	r2, [pc, #140]	; (4888 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x148>)
    47fc:	2101      	movs	r1, #1
    47fe:	201b      	movs	r0, #27
    4800:	f000 fb10 	bl	4e24 <PkaCopyDataIntoPkaReg>
    4804:	2308      	movs	r3, #8
    4806:	4a21      	ldr	r2, [pc, #132]	; (488c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x14c>)
    4808:	2101      	movs	r1, #1
    480a:	2014      	movs	r0, #20
    480c:	f000 fb0a 	bl	4e24 <PkaCopyDataIntoPkaReg>
    4810:	2308      	movs	r3, #8
    4812:	4a1f      	ldr	r2, [pc, #124]	; (4890 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x150>)
    4814:	2101      	movs	r1, #1
    4816:	2015      	movs	r0, #21
    4818:	f000 fb04 	bl	4e24 <PkaCopyDataIntoPkaReg>
    481c:	2308      	movs	r3, #8
    481e:	f105 0264 	add.w	r2, r5, #100	; 0x64
    4822:	2101      	movs	r1, #1
    4824:	2016      	movs	r0, #22
    4826:	f000 fafd 	bl	4e24 <PkaCopyDataIntoPkaReg>
    482a:	2308      	movs	r3, #8
    482c:	f105 0284 	add.w	r2, r5, #132	; 0x84
    4830:	2101      	movs	r1, #1
    4832:	2017      	movs	r0, #23
    4834:	f000 faf6 	bl	4e24 <PkaCopyDataIntoPkaReg>
    4838:	2308      	movs	r3, #8
    483a:	4a16      	ldr	r2, [pc, #88]	; (4894 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x154>)
    483c:	2101      	movs	r1, #1
    483e:	200b      	movs	r0, #11
    4840:	f000 faf0 	bl	4e24 <PkaCopyDataIntoPkaReg>
    4844:	f000 fb4a 	bl	4edc <PkaEcdsaVerify>
    4848:	4604      	mov	r4, r0
    484a:	9801      	ldr	r0, [sp, #4]
    484c:	f000 fad8 	bl	4e00 <PkaFinishAndMutexUnlock>
    4850:	4b11      	ldr	r3, [pc, #68]	; (4898 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x158>)
    4852:	2c00      	cmp	r4, #0
    4854:	bf18      	it	ne
    4856:	461c      	movne	r4, r3
    4858:	21a4      	movs	r1, #164	; 0xa4
    485a:	4628      	mov	r0, r5
    485c:	f002 f9d9 	bl	6c12 <SaSi_PalMemSetZero>
    4860:	4620      	mov	r0, r4
    4862:	b003      	add	sp, #12
    4864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4868:	4c0c      	ldr	r4, [pc, #48]	; (489c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x15c>)
    486a:	e7f9      	b.n	4860 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    486c:	4c0c      	ldr	r4, [pc, #48]	; (48a0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x160>)
    486e:	e7f7      	b.n	4860 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    4870:	4c0c      	ldr	r4, [pc, #48]	; (48a4 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x164>)
    4872:	e7f5      	b.n	4860 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    4874:	4c08      	ldr	r4, [pc, #32]	; (4898 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x158>)
    4876:	e7ef      	b.n	4858 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x118>
    4878:	50841090 	.word	0x50841090
    487c:	00007280 	.word	0x00007280
    4880:	000072f8 	.word	0x000072f8
    4884:	00007240 	.word	0x00007240
    4888:	000072e4 	.word	0x000072e4
    488c:	000072a4 	.word	0x000072a4
    4890:	000072c4 	.word	0x000072c4
    4894:	00007260 	.word	0x00007260
    4898:	00f00884 	.word	0x00f00884
    489c:	00f00876 	.word	0x00f00876
    48a0:	00f00880 	.word	0x00f00880
    48a4:	00f00881 	.word	0x00f00881

000048a8 <set_digest_in_hw_sha256>:
    48a8:	69c2      	ldr	r2, [r0, #28]
    48aa:	4b0c      	ldr	r3, [pc, #48]	; (48dc <set_digest_in_hw_sha256+0x34>)
    48ac:	601a      	str	r2, [r3, #0]
    48ae:	6982      	ldr	r2, [r0, #24]
    48b0:	f843 2c04 	str.w	r2, [r3, #-4]
    48b4:	6942      	ldr	r2, [r0, #20]
    48b6:	f843 2c08 	str.w	r2, [r3, #-8]
    48ba:	6902      	ldr	r2, [r0, #16]
    48bc:	f843 2c0c 	str.w	r2, [r3, #-12]
    48c0:	68c2      	ldr	r2, [r0, #12]
    48c2:	f843 2c10 	str.w	r2, [r3, #-16]
    48c6:	6882      	ldr	r2, [r0, #8]
    48c8:	f843 2c14 	str.w	r2, [r3, #-20]
    48cc:	6842      	ldr	r2, [r0, #4]
    48ce:	f843 2c18 	str.w	r2, [r3, #-24]
    48d2:	6802      	ldr	r2, [r0, #0]
    48d4:	f843 2c1c 	str.w	r2, [r3, #-28]
    48d8:	4770      	bx	lr
    48da:	bf00      	nop
    48dc:	5084165c 	.word	0x5084165c

000048e0 <read_digest_in_hw_sha256>:
    48e0:	4b0c      	ldr	r3, [pc, #48]	; (4914 <read_digest_in_hw_sha256+0x34>)
    48e2:	681b      	ldr	r3, [r3, #0]
    48e4:	61c3      	str	r3, [r0, #28]
    48e6:	4b0c      	ldr	r3, [pc, #48]	; (4918 <read_digest_in_hw_sha256+0x38>)
    48e8:	681b      	ldr	r3, [r3, #0]
    48ea:	6183      	str	r3, [r0, #24]
    48ec:	4b0b      	ldr	r3, [pc, #44]	; (491c <read_digest_in_hw_sha256+0x3c>)
    48ee:	681b      	ldr	r3, [r3, #0]
    48f0:	6143      	str	r3, [r0, #20]
    48f2:	4b0b      	ldr	r3, [pc, #44]	; (4920 <read_digest_in_hw_sha256+0x40>)
    48f4:	681b      	ldr	r3, [r3, #0]
    48f6:	6103      	str	r3, [r0, #16]
    48f8:	4b0a      	ldr	r3, [pc, #40]	; (4924 <read_digest_in_hw_sha256+0x44>)
    48fa:	681b      	ldr	r3, [r3, #0]
    48fc:	60c3      	str	r3, [r0, #12]
    48fe:	4b0a      	ldr	r3, [pc, #40]	; (4928 <read_digest_in_hw_sha256+0x48>)
    4900:	681b      	ldr	r3, [r3, #0]
    4902:	6083      	str	r3, [r0, #8]
    4904:	4b09      	ldr	r3, [pc, #36]	; (492c <read_digest_in_hw_sha256+0x4c>)
    4906:	681b      	ldr	r3, [r3, #0]
    4908:	6043      	str	r3, [r0, #4]
    490a:	4b09      	ldr	r3, [pc, #36]	; (4930 <read_digest_in_hw_sha256+0x50>)
    490c:	681b      	ldr	r3, [r3, #0]
    490e:	6003      	str	r3, [r0, #0]
    4910:	4770      	bx	lr
    4912:	bf00      	nop
    4914:	5084165c 	.word	0x5084165c
    4918:	50841658 	.word	0x50841658
    491c:	50841654 	.word	0x50841654
    4920:	50841650 	.word	0x50841650
    4924:	5084164c 	.word	0x5084164c
    4928:	50841648 	.word	0x50841648
    492c:	50841644 	.word	0x50841644
    4930:	50841640 	.word	0x50841640

00004934 <verify_context_hash_sha256>:
    4934:	b130      	cbz	r0, 4944 <verify_context_hash_sha256+0x10>
    4936:	6802      	ldr	r2, [r0, #0]
    4938:	4b03      	ldr	r3, [pc, #12]	; (4948 <verify_context_hash_sha256+0x14>)
    493a:	4804      	ldr	r0, [pc, #16]	; (494c <verify_context_hash_sha256+0x18>)
    493c:	429a      	cmp	r2, r3
    493e:	bf08      	it	eq
    4940:	2000      	moveq	r0, #0
    4942:	4770      	bx	lr
    4944:	4802      	ldr	r0, [pc, #8]	; (4950 <verify_context_hash_sha256+0x1c>)
    4946:	4770      	bx	lr
    4948:	bbaa55dd 	.word	0xbbaa55dd
    494c:	00f00202 	.word	0x00f00202
    4950:	00f00200 	.word	0x00f00200

00004954 <nrf_cc310_bl_hash_sha256_init>:
    4954:	b538      	push	{r3, r4, r5, lr}
    4956:	4604      	mov	r4, r0
    4958:	b168      	cbz	r0, 4976 <nrf_cc310_bl_hash_sha256_init+0x22>
    495a:	1d05      	adds	r5, r0, #4
    495c:	2170      	movs	r1, #112	; 0x70
    495e:	4628      	mov	r0, r5
    4960:	f002 f957 	bl	6c12 <SaSi_PalMemSetZero>
    4964:	4628      	mov	r0, r5
    4966:	2220      	movs	r2, #32
    4968:	4904      	ldr	r1, [pc, #16]	; (497c <nrf_cc310_bl_hash_sha256_init+0x28>)
    496a:	f002 f94e 	bl	6c0a <SaSi_PalMemCopy>
    496e:	2000      	movs	r0, #0
    4970:	4b03      	ldr	r3, [pc, #12]	; (4980 <nrf_cc310_bl_hash_sha256_init+0x2c>)
    4972:	6023      	str	r3, [r4, #0]
    4974:	bd38      	pop	{r3, r4, r5, pc}
    4976:	4803      	ldr	r0, [pc, #12]	; (4984 <nrf_cc310_bl_hash_sha256_init+0x30>)
    4978:	e7fc      	b.n	4974 <nrf_cc310_bl_hash_sha256_init+0x20>
    497a:	bf00      	nop
    497c:	0000730c 	.word	0x0000730c
    4980:	bbaa55dd 	.word	0xbbaa55dd
    4984:	00f00200 	.word	0x00f00200

00004988 <nrf_cc310_bl_hash_sha256_update>:
    4988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    498c:	b085      	sub	sp, #20
    498e:	4615      	mov	r5, r2
    4990:	466f      	mov	r7, sp
    4992:	4b27      	ldr	r3, [pc, #156]	; (4a30 <nrf_cc310_bl_hash_sha256_update+0xa8>)
    4994:	4604      	mov	r4, r0
    4996:	460e      	mov	r6, r1
    4998:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    499a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    499e:	b92d      	cbnz	r5, 49ac <nrf_cc310_bl_hash_sha256_update+0x24>
    49a0:	f04f 0900 	mov.w	r9, #0
    49a4:	4648      	mov	r0, r9
    49a6:	b005      	add	sp, #20
    49a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    49ac:	4620      	mov	r0, r4
    49ae:	f7ff ffc1 	bl	4934 <verify_context_hash_sha256>
    49b2:	4681      	mov	r9, r0
    49b4:	2800      	cmp	r0, #0
    49b6:	d1f5      	bne.n	49a4 <nrf_cc310_bl_hash_sha256_update+0x1c>
    49b8:	1d23      	adds	r3, r4, #4
    49ba:	9301      	str	r3, [sp, #4]
    49bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    49be:	bba3      	cbnz	r3, 4a2a <nrf_cc310_bl_hash_sha256_update+0xa2>
    49c0:	6f23      	ldr	r3, [r4, #112]	; 0x70
    49c2:	b18b      	cbz	r3, 49e8 <nrf_cc310_bl_hash_sha256_update+0x60>
    49c4:	f1c3 0840 	rsb	r8, r3, #64	; 0x40
    49c8:	45a8      	cmp	r8, r5
    49ca:	bf28      	it	cs
    49cc:	46a8      	movcs	r8, r5
    49ce:	f104 0030 	add.w	r0, r4, #48	; 0x30
    49d2:	4631      	mov	r1, r6
    49d4:	4418      	add	r0, r3
    49d6:	4642      	mov	r2, r8
    49d8:	f002 f917 	bl	6c0a <SaSi_PalMemCopy>
    49dc:	6f23      	ldr	r3, [r4, #112]	; 0x70
    49de:	4446      	add	r6, r8
    49e0:	4443      	add	r3, r8
    49e2:	6723      	str	r3, [r4, #112]	; 0x70
    49e4:	eba5 0508 	sub.w	r5, r5, r8
    49e8:	6f22      	ldr	r2, [r4, #112]	; 0x70
    49ea:	2a40      	cmp	r2, #64	; 0x40
    49ec:	d106      	bne.n	49fc <nrf_cc310_bl_hash_sha256_update+0x74>
    49ee:	f104 0130 	add.w	r1, r4, #48	; 0x30
    49f2:	4638      	mov	r0, r7
    49f4:	f000 fbb4 	bl	5160 <nrf_cc310_bl_hash_update_internal>
    49f8:	2300      	movs	r3, #0
    49fa:	6723      	str	r3, [r4, #112]	; 0x70
    49fc:	f005 083f 	and.w	r8, r5, #63	; 0x3f
    4a00:	f035 053f 	bics.w	r5, r5, #63	; 0x3f
    4a04:	d005      	beq.n	4a12 <nrf_cc310_bl_hash_sha256_update+0x8a>
    4a06:	4631      	mov	r1, r6
    4a08:	462a      	mov	r2, r5
    4a0a:	4638      	mov	r0, r7
    4a0c:	f000 fba8 	bl	5160 <nrf_cc310_bl_hash_update_internal>
    4a10:	442e      	add	r6, r5
    4a12:	f1b8 0f00 	cmp.w	r8, #0
    4a16:	d0c3      	beq.n	49a0 <nrf_cc310_bl_hash_sha256_update+0x18>
    4a18:	4642      	mov	r2, r8
    4a1a:	4631      	mov	r1, r6
    4a1c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    4a20:	f002 f8f3 	bl	6c0a <SaSi_PalMemCopy>
    4a24:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
    4a28:	e7bc      	b.n	49a4 <nrf_cc310_bl_hash_sha256_update+0x1c>
    4a2a:	f8df 9008 	ldr.w	r9, [pc, #8]	; 4a34 <nrf_cc310_bl_hash_sha256_update+0xac>
    4a2e:	e7b9      	b.n	49a4 <nrf_cc310_bl_hash_sha256_update+0x1c>
    4a30:	00006f70 	.word	0x00006f70
    4a34:	00f0020c 	.word	0x00f0020c

00004a38 <nrf_cc310_bl_hash_sha256_finalize>:
    4a38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    4a3c:	4604      	mov	r4, r0
    4a3e:	466f      	mov	r7, sp
    4a40:	4b13      	ldr	r3, [pc, #76]	; (4a90 <nrf_cc310_bl_hash_sha256_finalize+0x58>)
    4a42:	460e      	mov	r6, r1
    4a44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    4a46:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    4a4a:	4620      	mov	r0, r4
    4a4c:	f7ff ff72 	bl	4934 <verify_context_hash_sha256>
    4a50:	4680      	mov	r8, r0
    4a52:	b9b0      	cbnz	r0, 4a82 <nrf_cc310_bl_hash_sha256_finalize+0x4a>
    4a54:	b1ce      	cbz	r6, 4a8a <nrf_cc310_bl_hash_sha256_finalize+0x52>
    4a56:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4a58:	1d25      	adds	r5, r4, #4
    4a5a:	9501      	str	r5, [sp, #4]
    4a5c:	b93b      	cbnz	r3, 4a6e <nrf_cc310_bl_hash_sha256_finalize+0x36>
    4a5e:	2301      	movs	r3, #1
    4a60:	6f22      	ldr	r2, [r4, #112]	; 0x70
    4a62:	6263      	str	r3, [r4, #36]	; 0x24
    4a64:	f104 0130 	add.w	r1, r4, #48	; 0x30
    4a68:	4638      	mov	r0, r7
    4a6a:	f000 fb79 	bl	5160 <nrf_cc310_bl_hash_update_internal>
    4a6e:	462b      	mov	r3, r5
    4a70:	3e04      	subs	r6, #4
    4a72:	3424      	adds	r4, #36	; 0x24
    4a74:	f853 2b04 	ldr.w	r2, [r3], #4
    4a78:	ba12      	rev	r2, r2
    4a7a:	42a3      	cmp	r3, r4
    4a7c:	f846 2f04 	str.w	r2, [r6, #4]!
    4a80:	d1f8      	bne.n	4a74 <nrf_cc310_bl_hash_sha256_finalize+0x3c>
    4a82:	4640      	mov	r0, r8
    4a84:	b004      	add	sp, #16
    4a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a8a:	f8df 8008 	ldr.w	r8, [pc, #8]	; 4a94 <nrf_cc310_bl_hash_sha256_finalize+0x5c>
    4a8e:	e7f8      	b.n	4a82 <nrf_cc310_bl_hash_sha256_finalize+0x4a>
    4a90:	00006f70 	.word	0x00006f70
    4a94:	00f00205 	.word	0x00f00205

00004a98 <nrf_cc310_bl_init>:
    4a98:	4b08      	ldr	r3, [pc, #32]	; (4abc <nrf_cc310_bl_init+0x24>)
    4a9a:	681b      	ldr	r3, [r3, #0]
    4a9c:	0e1b      	lsrs	r3, r3, #24
    4a9e:	2bf0      	cmp	r3, #240	; 0xf0
    4aa0:	d108      	bne.n	4ab4 <nrf_cc310_bl_init+0x1c>
    4aa2:	4b07      	ldr	r3, [pc, #28]	; (4ac0 <nrf_cc310_bl_init+0x28>)
    4aa4:	681a      	ldr	r2, [r3, #0]
    4aa6:	4b07      	ldr	r3, [pc, #28]	; (4ac4 <nrf_cc310_bl_init+0x2c>)
    4aa8:	429a      	cmp	r2, r3
    4aaa:	d105      	bne.n	4ab8 <nrf_cc310_bl_init+0x20>
    4aac:	2000      	movs	r0, #0
    4aae:	4b06      	ldr	r3, [pc, #24]	; (4ac8 <nrf_cc310_bl_init+0x30>)
    4ab0:	6018      	str	r0, [r3, #0]
    4ab2:	4770      	bx	lr
    4ab4:	2005      	movs	r0, #5
    4ab6:	4770      	bx	lr
    4ab8:	2006      	movs	r0, #6
    4aba:	4770      	bx	lr
    4abc:	50841928 	.word	0x50841928
    4ac0:	50841a24 	.word	0x50841a24
    4ac4:	20e00000 	.word	0x20e00000
    4ac8:	50841a0c 	.word	0x50841a0c

00004acc <PkaSetRegsMapTab>:
    4acc:	2200      	movs	r2, #0
    4ace:	b530      	push	{r4, r5, lr}
    4ad0:	4613      	mov	r3, r2
    4ad2:	f640 75fc 	movw	r5, #4092	; 0xffc
    4ad6:	0049      	lsls	r1, r1, #1
    4ad8:	3802      	subs	r0, #2
    4ada:	f102 54a1 	add.w	r4, r2, #337641472	; 0x14200000
    4ade:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
    4ae2:	4290      	cmp	r0, r2
    4ae4:	ea4f 0484 	mov.w	r4, r4, lsl #2
    4ae8:	f102 0201 	add.w	r2, r2, #1
    4aec:	bfca      	itet	gt
    4aee:	6023      	strgt	r3, [r4, #0]
    4af0:	6025      	strle	r5, [r4, #0]
    4af2:	185b      	addgt	r3, r3, r1
    4af4:	2a1e      	cmp	r2, #30
    4af6:	d1f0      	bne.n	4ada <PkaSetRegsMapTab+0xe>
    4af8:	4a03      	ldr	r2, [pc, #12]	; (4b08 <PkaSetRegsMapTab+0x3c>)
    4afa:	6013      	str	r3, [r2, #0]
    4afc:	440b      	add	r3, r1
    4afe:	6053      	str	r3, [r2, #4]
    4b00:	4b02      	ldr	r3, [pc, #8]	; (4b0c <PkaSetRegsMapTab+0x40>)
    4b02:	4a03      	ldr	r2, [pc, #12]	; (4b10 <PkaSetRegsMapTab+0x44>)
    4b04:	601a      	str	r2, [r3, #0]
    4b06:	bd30      	pop	{r4, r5, pc}
    4b08:	50841078 	.word	0x50841078
    4b0c:	50841084 	.word	0x50841084
    4b10:	000ff820 	.word	0x000ff820

00004b14 <PkaGetRegEffectiveSizeInBits>:
    4b14:	4b1e      	ldr	r3, [pc, #120]	; (4b90 <PkaGetRegEffectiveSizeInBits+0x7c>)
    4b16:	b530      	push	{r4, r5, lr}
    4b18:	461a      	mov	r2, r3
    4b1a:	b085      	sub	sp, #20
    4b1c:	6819      	ldr	r1, [r3, #0]
    4b1e:	9100      	str	r1, [sp, #0]
    4b20:	9900      	ldr	r1, [sp, #0]
    4b22:	07cc      	lsls	r4, r1, #31
    4b24:	d5fa      	bpl.n	4b1c <PkaGetRegEffectiveSizeInBits+0x8>
    4b26:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    4b2a:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    4b2e:	0080      	lsls	r0, r0, #2
    4b30:	6801      	ldr	r1, [r0, #0]
    4b32:	6813      	ldr	r3, [r2, #0]
    4b34:	9301      	str	r3, [sp, #4]
    4b36:	9b01      	ldr	r3, [sp, #4]
    4b38:	07d8      	lsls	r0, r3, #31
    4b3a:	d5fa      	bpl.n	4b32 <PkaGetRegEffectiveSizeInBits+0x1e>
    4b3c:	4b15      	ldr	r3, [pc, #84]	; (4b94 <PkaGetRegEffectiveSizeInBits+0x80>)
    4b3e:	4c16      	ldr	r4, [pc, #88]	; (4b98 <PkaGetRegEffectiveSizeInBits+0x84>)
    4b40:	6818      	ldr	r0, [r3, #0]
    4b42:	2320      	movs	r3, #32
    4b44:	301f      	adds	r0, #31
    4b46:	fb90 f0f3 	sdiv	r0, r0, r3
    4b4a:	4d14      	ldr	r5, [pc, #80]	; (4b9c <PkaGetRegEffectiveSizeInBits+0x88>)
    4b4c:	3801      	subs	r0, #1
    4b4e:	2800      	cmp	r0, #0
    4b50:	da10      	bge.n	4b74 <PkaGetRegEffectiveSizeInBits+0x60>
    4b52:	2300      	movs	r3, #0
    4b54:	3001      	adds	r0, #1
    4b56:	0140      	lsls	r0, r0, #5
    4b58:	b153      	cbz	r3, 4b70 <PkaGetRegEffectiveSizeInBits+0x5c>
    4b5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4b5e:	f1a0 0120 	sub.w	r1, r0, #32
    4b62:	4213      	tst	r3, r2
    4b64:	d104      	bne.n	4b70 <PkaGetRegEffectiveSizeInBits+0x5c>
    4b66:	3801      	subs	r0, #1
    4b68:	4288      	cmp	r0, r1
    4b6a:	ea4f 0252 	mov.w	r2, r2, lsr #1
    4b6e:	d1f8      	bne.n	4b62 <PkaGetRegEffectiveSizeInBits+0x4e>
    4b70:	b005      	add	sp, #20
    4b72:	bd30      	pop	{r4, r5, pc}
    4b74:	6813      	ldr	r3, [r2, #0]
    4b76:	9303      	str	r3, [sp, #12]
    4b78:	9b03      	ldr	r3, [sp, #12]
    4b7a:	07db      	lsls	r3, r3, #31
    4b7c:	d5fa      	bpl.n	4b74 <PkaGetRegEffectiveSizeInBits+0x60>
    4b7e:	1843      	adds	r3, r0, r1
    4b80:	6023      	str	r3, [r4, #0]
    4b82:	682b      	ldr	r3, [r5, #0]
    4b84:	9302      	str	r3, [sp, #8]
    4b86:	9b02      	ldr	r3, [sp, #8]
    4b88:	2b00      	cmp	r3, #0
    4b8a:	d1e3      	bne.n	4b54 <PkaGetRegEffectiveSizeInBits+0x40>
    4b8c:	3801      	subs	r0, #1
    4b8e:	e7de      	b.n	4b4e <PkaGetRegEffectiveSizeInBits+0x3a>
    4b90:	508410b4 	.word	0x508410b4
    4b94:	508410ac 	.word	0x508410ac
    4b98:	508410e4 	.word	0x508410e4
    4b9c:	508410dc 	.word	0x508410dc

00004ba0 <PkaGetNextMsBit>:
    4ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ba2:	681d      	ldr	r5, [r3, #0]
    4ba4:	b085      	sub	sp, #20
    4ba6:	f001 041f 	and.w	r4, r1, #31
    4baa:	b90d      	cbnz	r5, 4bb0 <PkaGetNextMsBit+0x10>
    4bac:	2c1f      	cmp	r4, #31
    4bae:	d128      	bne.n	4c02 <PkaGetNextMsBit+0x62>
    4bb0:	4d17      	ldr	r5, [pc, #92]	; (4c10 <PkaGetNextMsBit+0x70>)
    4bb2:	462e      	mov	r6, r5
    4bb4:	682f      	ldr	r7, [r5, #0]
    4bb6:	9701      	str	r7, [sp, #4]
    4bb8:	9f01      	ldr	r7, [sp, #4]
    4bba:	07ff      	lsls	r7, r7, #31
    4bbc:	d5fa      	bpl.n	4bb4 <PkaGetNextMsBit+0x14>
    4bbe:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    4bc2:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    4bc6:	0080      	lsls	r0, r0, #2
    4bc8:	6800      	ldr	r0, [r0, #0]
    4bca:	6835      	ldr	r5, [r6, #0]
    4bcc:	9503      	str	r5, [sp, #12]
    4bce:	9d03      	ldr	r5, [sp, #12]
    4bd0:	07ed      	lsls	r5, r5, #31
    4bd2:	d5fa      	bpl.n	4bca <PkaGetNextMsBit+0x2a>
    4bd4:	2c1f      	cmp	r4, #31
    4bd6:	eb00 1061 	add.w	r0, r0, r1, asr #5
    4bda:	bf18      	it	ne
    4bdc:	43c9      	mvnne	r1, r1
    4bde:	4d0d      	ldr	r5, [pc, #52]	; (4c14 <PkaGetNextMsBit+0x74>)
    4be0:	bf18      	it	ne
    4be2:	f001 011f 	andne.w	r1, r1, #31
    4be6:	6028      	str	r0, [r5, #0]
    4be8:	480b      	ldr	r0, [pc, #44]	; (4c18 <PkaGetNextMsBit+0x78>)
    4bea:	6800      	ldr	r0, [r0, #0]
    4bec:	9002      	str	r0, [sp, #8]
    4bee:	9802      	ldr	r0, [sp, #8]
    4bf0:	bf1c      	itt	ne
    4bf2:	fa00 f101 	lslne.w	r1, r0, r1
    4bf6:	6011      	strne	r1, [r2, #0]
    4bf8:	f04f 0100 	mov.w	r1, #0
    4bfc:	bf08      	it	eq
    4bfe:	6010      	streq	r0, [r2, #0]
    4c00:	6019      	str	r1, [r3, #0]
    4c02:	6810      	ldr	r0, [r2, #0]
    4c04:	0043      	lsls	r3, r0, #1
    4c06:	0fc0      	lsrs	r0, r0, #31
    4c08:	6013      	str	r3, [r2, #0]
    4c0a:	b005      	add	sp, #20
    4c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c0e:	bf00      	nop
    4c10:	508410b4 	.word	0x508410b4
    4c14:	508410e4 	.word	0x508410e4
    4c18:	508410dc 	.word	0x508410dc

00004c1c <PkaSetRegsSizesTab>:
    4c1c:	4b0c      	ldr	r3, [pc, #48]	; (4c50 <PkaSetRegsSizesTab+0x34>)
    4c1e:	0189      	lsls	r1, r1, #6
    4c20:	6018      	str	r0, [r3, #0]
    4c22:	303f      	adds	r0, #63	; 0x3f
    4c24:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
    4c28:	3040      	adds	r0, #64	; 0x40
    4c2a:	6058      	str	r0, [r3, #4]
    4c2c:	6099      	str	r1, [r3, #8]
    4c2e:	4809      	ldr	r0, [pc, #36]	; (4c54 <PkaSetRegsSizesTab+0x38>)
    4c30:	60d9      	str	r1, [r3, #12]
    4c32:	6119      	str	r1, [r3, #16]
    4c34:	6159      	str	r1, [r3, #20]
    4c36:	6199      	str	r1, [r3, #24]
    4c38:	331c      	adds	r3, #28
    4c3a:	b082      	sub	sp, #8
    4c3c:	6019      	str	r1, [r3, #0]
    4c3e:	6802      	ldr	r2, [r0, #0]
    4c40:	9201      	str	r2, [sp, #4]
    4c42:	9a01      	ldr	r2, [sp, #4]
    4c44:	07d2      	lsls	r2, r2, #31
    4c46:	d5fa      	bpl.n	4c3e <PkaSetRegsSizesTab+0x22>
    4c48:	6019      	str	r1, [r3, #0]
    4c4a:	b002      	add	sp, #8
    4c4c:	4770      	bx	lr
    4c4e:	bf00      	nop
    4c50:	50841090 	.word	0x50841090
    4c54:	508410b4 	.word	0x508410b4

00004c58 <PkaInitPka>:
    4c58:	b538      	push	{r3, r4, r5, lr}
    4c5a:	f1a0 0320 	sub.w	r3, r0, #32
    4c5e:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
    4c62:	4605      	mov	r5, r0
    4c64:	d82c      	bhi.n	4cc0 <PkaInitPka+0x68>
    4c66:	288f      	cmp	r0, #143	; 0x8f
    4c68:	d826      	bhi.n	4cb8 <PkaInitPka+0x60>
    4c6a:	f100 0347 	add.w	r3, r0, #71	; 0x47
    4c6e:	f100 0466 	add.w	r4, r0, #102	; 0x66
    4c72:	06db      	lsls	r3, r3, #27
    4c74:	ea4f 1454 	mov.w	r4, r4, lsr #5
    4c78:	d000      	beq.n	4c7c <PkaInitPka+0x24>
    4c7a:	3401      	adds	r4, #1
    4c7c:	0164      	lsls	r4, r4, #5
    4c7e:	343f      	adds	r4, #63	; 0x3f
    4c80:	09a4      	lsrs	r4, r4, #6
    4c82:	3401      	adds	r4, #1
    4c84:	b111      	cbz	r1, 4c8c <PkaInitPka+0x34>
    4c86:	42a1      	cmp	r1, r4
    4c88:	d31a      	bcc.n	4cc0 <PkaInitPka+0x68>
    4c8a:	460c      	mov	r4, r1
    4c8c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    4c90:	00e3      	lsls	r3, r4, #3
    4c92:	fbb0 f0f3 	udiv	r0, r0, r3
    4c96:	2820      	cmp	r0, #32
    4c98:	bf28      	it	cs
    4c9a:	2020      	movcs	r0, #32
    4c9c:	b102      	cbz	r2, 4ca0 <PkaInitPka+0x48>
    4c9e:	6010      	str	r0, [r2, #0]
    4ca0:	2201      	movs	r2, #1
    4ca2:	4b08      	ldr	r3, [pc, #32]	; (4cc4 <PkaInitPka+0x6c>)
    4ca4:	4621      	mov	r1, r4
    4ca6:	601a      	str	r2, [r3, #0]
    4ca8:	f7ff ff10 	bl	4acc <PkaSetRegsMapTab>
    4cac:	4628      	mov	r0, r5
    4cae:	4621      	mov	r1, r4
    4cb0:	f7ff ffb4 	bl	4c1c <PkaSetRegsSizesTab>
    4cb4:	2000      	movs	r0, #0
    4cb6:	bd38      	pop	{r3, r4, r5, pc}
    4cb8:	f100 041f 	add.w	r4, r0, #31
    4cbc:	0964      	lsrs	r4, r4, #5
    4cbe:	e7dd      	b.n	4c7c <PkaInitPka+0x24>
    4cc0:	4801      	ldr	r0, [pc, #4]	; (4cc8 <PkaInitPka+0x70>)
    4cc2:	e7f8      	b.n	4cb6 <PkaInitPka+0x5e>
    4cc4:	5084181c 	.word	0x5084181c
    4cc8:	00f02122 	.word	0x00f02122

00004ccc <PkaClearBlockOfRegs>:
    4ccc:	4b46      	ldr	r3, [pc, #280]	; (4de8 <PkaClearBlockOfRegs+0x11c>)
    4cce:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cd0:	461d      	mov	r5, r3
    4cd2:	b089      	sub	sp, #36	; 0x24
    4cd4:	681c      	ldr	r4, [r3, #0]
    4cd6:	9401      	str	r4, [sp, #4]
    4cd8:	9c01      	ldr	r4, [sp, #4]
    4cda:	07e4      	lsls	r4, r4, #31
    4cdc:	d5fa      	bpl.n	4cd4 <PkaClearBlockOfRegs+0x8>
    4cde:	4b43      	ldr	r3, [pc, #268]	; (4dec <PkaClearBlockOfRegs+0x120>)
    4ce0:	2400      	movs	r4, #0
    4ce2:	4413      	add	r3, r2
    4ce4:	009b      	lsls	r3, r3, #2
    4ce6:	681a      	ldr	r2, [r3, #0]
    4ce8:	180b      	adds	r3, r1, r0
    4cea:	2b1e      	cmp	r3, #30
    4cec:	bf88      	it	hi
    4cee:	f1c0 011e 	rsbhi	r1, r0, #30
    4cf2:	321f      	adds	r2, #31
    4cf4:	180b      	adds	r3, r1, r0
    4cf6:	0952      	lsrs	r2, r2, #5
    4cf8:	4353      	muls	r3, r2
    4cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    4cfe:	bf84      	itt	hi
    4d00:	f44f 6180 	movhi.w	r1, #1024	; 0x400
    4d04:	fbb1 f1f2 	udivhi	r1, r1, r2
    4d08:	4627      	mov	r7, r4
    4d0a:	bf88      	it	hi
    4d0c:	1a09      	subhi	r1, r1, r0
    4d0e:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 4df4 <PkaClearBlockOfRegs+0x128>
    4d12:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    4d16:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 4df8 <PkaClearBlockOfRegs+0x12c>
    4d1a:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    4d1e:	42a1      	cmp	r1, r4
    4d20:	dc33      	bgt.n	4d8a <PkaClearBlockOfRegs+0xbe>
    4d22:	682b      	ldr	r3, [r5, #0]
    4d24:	9304      	str	r3, [sp, #16]
    4d26:	9b04      	ldr	r3, [sp, #16]
    4d28:	07db      	lsls	r3, r3, #31
    4d2a:	d5fa      	bpl.n	4d22 <PkaClearBlockOfRegs+0x56>
    4d2c:	4b30      	ldr	r3, [pc, #192]	; (4df0 <PkaClearBlockOfRegs+0x124>)
    4d2e:	681b      	ldr	r3, [r3, #0]
    4d30:	6829      	ldr	r1, [r5, #0]
    4d32:	9105      	str	r1, [sp, #20]
    4d34:	9905      	ldr	r1, [sp, #20]
    4d36:	07cf      	lsls	r7, r1, #31
    4d38:	d5fa      	bpl.n	4d30 <PkaClearBlockOfRegs+0x64>
    4d3a:	4c2e      	ldr	r4, [pc, #184]	; (4df4 <PkaClearBlockOfRegs+0x128>)
    4d3c:	492e      	ldr	r1, [pc, #184]	; (4df8 <PkaClearBlockOfRegs+0x12c>)
    4d3e:	6023      	str	r3, [r4, #0]
    4d40:	2300      	movs	r3, #0
    4d42:	461e      	mov	r6, r3
    4d44:	4293      	cmp	r3, r2
    4d46:	f103 0001 	add.w	r0, r3, #1
    4d4a:	d140      	bne.n	4dce <PkaClearBlockOfRegs+0x102>
    4d4c:	4619      	mov	r1, r3
    4d4e:	2600      	movs	r6, #0
    4d50:	f020 0201 	bic.w	r2, r0, #1
    4d54:	4828      	ldr	r0, [pc, #160]	; (4df8 <PkaClearBlockOfRegs+0x12c>)
    4d56:	428a      	cmp	r2, r1
    4d58:	d83c      	bhi.n	4dd4 <PkaClearBlockOfRegs+0x108>
    4d5a:	6829      	ldr	r1, [r5, #0]
    4d5c:	9106      	str	r1, [sp, #24]
    4d5e:	9906      	ldr	r1, [sp, #24]
    4d60:	07ce      	lsls	r6, r1, #31
    4d62:	d5fa      	bpl.n	4d5a <PkaClearBlockOfRegs+0x8e>
    4d64:	4925      	ldr	r1, [pc, #148]	; (4dfc <PkaClearBlockOfRegs+0x130>)
    4d66:	6809      	ldr	r1, [r1, #0]
    4d68:	6828      	ldr	r0, [r5, #0]
    4d6a:	9007      	str	r0, [sp, #28]
    4d6c:	9807      	ldr	r0, [sp, #28]
    4d6e:	07c0      	lsls	r0, r0, #31
    4d70:	d5fa      	bpl.n	4d68 <PkaClearBlockOfRegs+0x9c>
    4d72:	6021      	str	r1, [r4, #0]
    4d74:	2100      	movs	r1, #0
    4d76:	460c      	mov	r4, r1
    4d78:	481f      	ldr	r0, [pc, #124]	; (4df8 <PkaClearBlockOfRegs+0x12c>)
    4d7a:	428b      	cmp	r3, r1
    4d7c:	d12d      	bne.n	4dda <PkaClearBlockOfRegs+0x10e>
    4d7e:	2000      	movs	r0, #0
    4d80:	491d      	ldr	r1, [pc, #116]	; (4df8 <PkaClearBlockOfRegs+0x12c>)
    4d82:	429a      	cmp	r2, r3
    4d84:	d82c      	bhi.n	4de0 <PkaClearBlockOfRegs+0x114>
    4d86:	b009      	add	sp, #36	; 0x24
    4d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d8a:	682b      	ldr	r3, [r5, #0]
    4d8c:	9302      	str	r3, [sp, #8]
    4d8e:	9b02      	ldr	r3, [sp, #8]
    4d90:	07db      	lsls	r3, r3, #31
    4d92:	d5fa      	bpl.n	4d8a <PkaClearBlockOfRegs+0xbe>
    4d94:	1903      	adds	r3, r0, r4
    4d96:	009b      	lsls	r3, r3, #2
    4d98:	681b      	ldr	r3, [r3, #0]
    4d9a:	682e      	ldr	r6, [r5, #0]
    4d9c:	9603      	str	r6, [sp, #12]
    4d9e:	9e03      	ldr	r6, [sp, #12]
    4da0:	07f6      	lsls	r6, r6, #31
    4da2:	d5fa      	bpl.n	4d9a <PkaClearBlockOfRegs+0xce>
    4da4:	f8ce 3000 	str.w	r3, [lr]
    4da8:	2300      	movs	r3, #0
    4daa:	4293      	cmp	r3, r2
    4dac:	f103 0301 	add.w	r3, r3, #1
    4db0:	d106      	bne.n	4dc0 <PkaClearBlockOfRegs+0xf4>
    4db2:	4616      	mov	r6, r2
    4db4:	f023 0301 	bic.w	r3, r3, #1
    4db8:	42b3      	cmp	r3, r6
    4dba:	d804      	bhi.n	4dc6 <PkaClearBlockOfRegs+0xfa>
    4dbc:	3401      	adds	r4, #1
    4dbe:	e7ae      	b.n	4d1e <PkaClearBlockOfRegs+0x52>
    4dc0:	f8cc 7000 	str.w	r7, [ip]
    4dc4:	e7f1      	b.n	4daa <PkaClearBlockOfRegs+0xde>
    4dc6:	f8cc 7000 	str.w	r7, [ip]
    4dca:	3601      	adds	r6, #1
    4dcc:	e7f4      	b.n	4db8 <PkaClearBlockOfRegs+0xec>
    4dce:	600e      	str	r6, [r1, #0]
    4dd0:	4603      	mov	r3, r0
    4dd2:	e7b7      	b.n	4d44 <PkaClearBlockOfRegs+0x78>
    4dd4:	6006      	str	r6, [r0, #0]
    4dd6:	3101      	adds	r1, #1
    4dd8:	e7bd      	b.n	4d56 <PkaClearBlockOfRegs+0x8a>
    4dda:	6004      	str	r4, [r0, #0]
    4ddc:	3101      	adds	r1, #1
    4dde:	e7cc      	b.n	4d7a <PkaClearBlockOfRegs+0xae>
    4de0:	6008      	str	r0, [r1, #0]
    4de2:	3301      	adds	r3, #1
    4de4:	e7cd      	b.n	4d82 <PkaClearBlockOfRegs+0xb6>
    4de6:	bf00      	nop
    4de8:	508410b4 	.word	0x508410b4
    4dec:	14210424 	.word	0x14210424
    4df0:	5084107c 	.word	0x5084107c
    4df4:	508410d4 	.word	0x508410d4
    4df8:	508410d8 	.word	0x508410d8
    4dfc:	50841078 	.word	0x50841078

00004e00 <PkaFinishAndMutexUnlock>:
    4e00:	b508      	push	{r3, lr}
    4e02:	b140      	cbz	r0, 4e16 <PkaFinishAndMutexUnlock+0x16>
    4e04:	2820      	cmp	r0, #32
    4e06:	4601      	mov	r1, r0
    4e08:	f04f 0207 	mov.w	r2, #7
    4e0c:	bf28      	it	cs
    4e0e:	2120      	movcs	r1, #32
    4e10:	2000      	movs	r0, #0
    4e12:	f7ff ff5b 	bl	4ccc <PkaClearBlockOfRegs>
    4e16:	2200      	movs	r2, #0
    4e18:	4b01      	ldr	r3, [pc, #4]	; (4e20 <PkaFinishAndMutexUnlock+0x20>)
    4e1a:	601a      	str	r2, [r3, #0]
    4e1c:	bd08      	pop	{r3, pc}
    4e1e:	bf00      	nop
    4e20:	5084181c 	.word	0x5084181c

00004e24 <PkaCopyDataIntoPkaReg>:
    4e24:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e26:	4d29      	ldr	r5, [pc, #164]	; (4ecc <PkaCopyDataIntoPkaReg+0xa8>)
    4e28:	b085      	sub	sp, #20
    4e2a:	462c      	mov	r4, r5
    4e2c:	682e      	ldr	r6, [r5, #0]
    4e2e:	9600      	str	r6, [sp, #0]
    4e30:	9e00      	ldr	r6, [sp, #0]
    4e32:	07f6      	lsls	r6, r6, #31
    4e34:	d5fa      	bpl.n	4e2c <PkaCopyDataIntoPkaReg+0x8>
    4e36:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    4e3a:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    4e3e:	0080      	lsls	r0, r0, #2
    4e40:	6805      	ldr	r5, [r0, #0]
    4e42:	6820      	ldr	r0, [r4, #0]
    4e44:	9001      	str	r0, [sp, #4]
    4e46:	9801      	ldr	r0, [sp, #4]
    4e48:	07c7      	lsls	r7, r0, #31
    4e4a:	d5fa      	bpl.n	4e42 <PkaCopyDataIntoPkaReg+0x1e>
    4e4c:	4820      	ldr	r0, [pc, #128]	; (4ed0 <PkaCopyDataIntoPkaReg+0xac>)
    4e4e:	4f21      	ldr	r7, [pc, #132]	; (4ed4 <PkaCopyDataIntoPkaReg+0xb0>)
    4e50:	6005      	str	r5, [r0, #0]
    4e52:	eb02 0683 	add.w	r6, r2, r3, lsl #2
    4e56:	42b2      	cmp	r2, r6
    4e58:	d129      	bne.n	4eae <PkaCopyDataIntoPkaReg+0x8a>
    4e5a:	2700      	movs	r7, #0
    4e5c:	1c5a      	adds	r2, r3, #1
    4e5e:	4e1d      	ldr	r6, [pc, #116]	; (4ed4 <PkaCopyDataIntoPkaReg+0xb0>)
    4e60:	f022 0201 	bic.w	r2, r2, #1
    4e64:	429a      	cmp	r2, r3
    4e66:	d827      	bhi.n	4eb8 <PkaCopyDataIntoPkaReg+0x94>
    4e68:	6823      	ldr	r3, [r4, #0]
    4e6a:	9302      	str	r3, [sp, #8]
    4e6c:	9b02      	ldr	r3, [sp, #8]
    4e6e:	07de      	lsls	r6, r3, #31
    4e70:	d5fa      	bpl.n	4e68 <PkaCopyDataIntoPkaReg+0x44>
    4e72:	4b19      	ldr	r3, [pc, #100]	; (4ed8 <PkaCopyDataIntoPkaReg+0xb4>)
    4e74:	440b      	add	r3, r1
    4e76:	009b      	lsls	r3, r3, #2
    4e78:	681b      	ldr	r3, [r3, #0]
    4e7a:	331f      	adds	r3, #31
    4e7c:	095b      	lsrs	r3, r3, #5
    4e7e:	429a      	cmp	r2, r3
    4e80:	d213      	bcs.n	4eaa <PkaCopyDataIntoPkaReg+0x86>
    4e82:	6821      	ldr	r1, [r4, #0]
    4e84:	9103      	str	r1, [sp, #12]
    4e86:	9903      	ldr	r1, [sp, #12]
    4e88:	07c9      	lsls	r1, r1, #31
    4e8a:	d5fa      	bpl.n	4e82 <PkaCopyDataIntoPkaReg+0x5e>
    4e8c:	2100      	movs	r1, #0
    4e8e:	4415      	add	r5, r2
    4e90:	6005      	str	r5, [r0, #0]
    4e92:	4608      	mov	r0, r1
    4e94:	1a9b      	subs	r3, r3, r2
    4e96:	4a0f      	ldr	r2, [pc, #60]	; (4ed4 <PkaCopyDataIntoPkaReg+0xb0>)
    4e98:	428b      	cmp	r3, r1
    4e9a:	d810      	bhi.n	4ebe <PkaCopyDataIntoPkaReg+0x9a>
    4e9c:	2000      	movs	r0, #0
    4e9e:	1c5a      	adds	r2, r3, #1
    4ea0:	490c      	ldr	r1, [pc, #48]	; (4ed4 <PkaCopyDataIntoPkaReg+0xb0>)
    4ea2:	f022 0201 	bic.w	r2, r2, #1
    4ea6:	429a      	cmp	r2, r3
    4ea8:	d80c      	bhi.n	4ec4 <PkaCopyDataIntoPkaReg+0xa0>
    4eaa:	b005      	add	sp, #20
    4eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4eae:	f852 cb04 	ldr.w	ip, [r2], #4
    4eb2:	f8c7 c000 	str.w	ip, [r7]
    4eb6:	e7ce      	b.n	4e56 <PkaCopyDataIntoPkaReg+0x32>
    4eb8:	6037      	str	r7, [r6, #0]
    4eba:	3301      	adds	r3, #1
    4ebc:	e7d2      	b.n	4e64 <PkaCopyDataIntoPkaReg+0x40>
    4ebe:	6010      	str	r0, [r2, #0]
    4ec0:	3101      	adds	r1, #1
    4ec2:	e7e9      	b.n	4e98 <PkaCopyDataIntoPkaReg+0x74>
    4ec4:	6008      	str	r0, [r1, #0]
    4ec6:	3301      	adds	r3, #1
    4ec8:	e7ed      	b.n	4ea6 <PkaCopyDataIntoPkaReg+0x82>
    4eca:	bf00      	nop
    4ecc:	508410b4 	.word	0x508410b4
    4ed0:	508410d4 	.word	0x508410d4
    4ed4:	508410d8 	.word	0x508410d8
    4ed8:	14210424 	.word	0x14210424

00004edc <PkaEcdsaVerify>:
    4edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ee0:	4b81      	ldr	r3, [pc, #516]	; (50e8 <PkaEcdsaVerify+0x20c>)
    4ee2:	b0a0      	sub	sp, #128	; 0x80
    4ee4:	681d      	ldr	r5, [r3, #0]
    4ee6:	6898      	ldr	r0, [r3, #8]
    4ee8:	3320      	adds	r3, #32
    4eea:	461e      	mov	r6, r3
    4eec:	681a      	ldr	r2, [r3, #0]
    4eee:	9201      	str	r2, [sp, #4]
    4ef0:	9a01      	ldr	r2, [sp, #4]
    4ef2:	07d7      	lsls	r7, r2, #31
    4ef4:	d5fa      	bpl.n	4eec <PkaEcdsaVerify+0x10>
    4ef6:	4b7d      	ldr	r3, [pc, #500]	; (50ec <PkaEcdsaVerify+0x210>)
    4ef8:	4a7d      	ldr	r2, [pc, #500]	; (50f0 <PkaEcdsaVerify+0x214>)
    4efa:	601a      	str	r2, [r3, #0]
    4efc:	6832      	ldr	r2, [r6, #0]
    4efe:	9202      	str	r2, [sp, #8]
    4f00:	9a02      	ldr	r2, [sp, #8]
    4f02:	07d4      	lsls	r4, r2, #31
    4f04:	d5fa      	bpl.n	4efc <PkaEcdsaVerify+0x20>
    4f06:	4a7b      	ldr	r2, [pc, #492]	; (50f4 <PkaEcdsaVerify+0x218>)
    4f08:	601a      	str	r2, [r3, #0]
    4f0a:	4a7b      	ldr	r2, [pc, #492]	; (50f8 <PkaEcdsaVerify+0x21c>)
    4f0c:	4614      	mov	r4, r2
    4f0e:	6811      	ldr	r1, [r2, #0]
    4f10:	9103      	str	r1, [sp, #12]
    4f12:	9903      	ldr	r1, [sp, #12]
    4f14:	07c9      	lsls	r1, r1, #31
    4f16:	d5fa      	bpl.n	4f0e <PkaEcdsaVerify+0x32>
    4f18:	4a78      	ldr	r2, [pc, #480]	; (50fc <PkaEcdsaVerify+0x220>)
    4f1a:	6811      	ldr	r1, [r2, #0]
    4f1c:	f3c1 2140 	ubfx	r1, r1, #9, #1
    4f20:	6837      	ldr	r7, [r6, #0]
    4f22:	9704      	str	r7, [sp, #16]
    4f24:	9f04      	ldr	r7, [sp, #16]
    4f26:	07ff      	lsls	r7, r7, #31
    4f28:	d5fa      	bpl.n	4f20 <PkaEcdsaVerify+0x44>
    4f2a:	4f75      	ldr	r7, [pc, #468]	; (5100 <PkaEcdsaVerify+0x224>)
    4f2c:	601f      	str	r7, [r3, #0]
    4f2e:	6827      	ldr	r7, [r4, #0]
    4f30:	9705      	str	r7, [sp, #20]
    4f32:	9f05      	ldr	r7, [sp, #20]
    4f34:	07ff      	lsls	r7, r7, #31
    4f36:	d5fa      	bpl.n	4f2e <PkaEcdsaVerify+0x52>
    4f38:	6817      	ldr	r7, [r2, #0]
    4f3a:	2900      	cmp	r1, #0
    4f3c:	f000 80cf 	beq.w	50de <PkaEcdsaVerify+0x202>
    4f40:	05b9      	lsls	r1, r7, #22
    4f42:	f140 80cc 	bpl.w	50de <PkaEcdsaVerify+0x202>
    4f46:	6831      	ldr	r1, [r6, #0]
    4f48:	9106      	str	r1, [sp, #24]
    4f4a:	9906      	ldr	r1, [sp, #24]
    4f4c:	07cf      	lsls	r7, r1, #31
    4f4e:	d5fa      	bpl.n	4f46 <PkaEcdsaVerify+0x6a>
    4f50:	496c      	ldr	r1, [pc, #432]	; (5104 <PkaEcdsaVerify+0x228>)
    4f52:	6019      	str	r1, [r3, #0]
    4f54:	6821      	ldr	r1, [r4, #0]
    4f56:	9107      	str	r1, [sp, #28]
    4f58:	9907      	ldr	r1, [sp, #28]
    4f5a:	07c9      	lsls	r1, r1, #31
    4f5c:	d5fa      	bpl.n	4f54 <PkaEcdsaVerify+0x78>
    4f5e:	6811      	ldr	r1, [r2, #0]
    4f60:	f3c1 2140 	ubfx	r1, r1, #9, #1
    4f64:	6837      	ldr	r7, [r6, #0]
    4f66:	9708      	str	r7, [sp, #32]
    4f68:	9f08      	ldr	r7, [sp, #32]
    4f6a:	07ff      	lsls	r7, r7, #31
    4f6c:	d5fa      	bpl.n	4f64 <PkaEcdsaVerify+0x88>
    4f6e:	4f66      	ldr	r7, [pc, #408]	; (5108 <PkaEcdsaVerify+0x22c>)
    4f70:	601f      	str	r7, [r3, #0]
    4f72:	6827      	ldr	r7, [r4, #0]
    4f74:	9709      	str	r7, [sp, #36]	; 0x24
    4f76:	9f09      	ldr	r7, [sp, #36]	; 0x24
    4f78:	07ff      	lsls	r7, r7, #31
    4f7a:	d5fa      	bpl.n	4f72 <PkaEcdsaVerify+0x96>
    4f7c:	6812      	ldr	r2, [r2, #0]
    4f7e:	2900      	cmp	r1, #0
    4f80:	f000 80af 	beq.w	50e2 <PkaEcdsaVerify+0x206>
    4f84:	0591      	lsls	r1, r2, #22
    4f86:	f140 80ac 	bpl.w	50e2 <PkaEcdsaVerify+0x206>
    4f8a:	6832      	ldr	r2, [r6, #0]
    4f8c:	920a      	str	r2, [sp, #40]	; 0x28
    4f8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4f90:	07d2      	lsls	r2, r2, #31
    4f92:	d5fa      	bpl.n	4f8a <PkaEcdsaVerify+0xae>
    4f94:	4a56      	ldr	r2, [pc, #344]	; (50f0 <PkaEcdsaVerify+0x214>)
    4f96:	601a      	str	r2, [r3, #0]
    4f98:	6832      	ldr	r2, [r6, #0]
    4f9a:	920b      	str	r2, [sp, #44]	; 0x2c
    4f9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4f9e:	07d7      	lsls	r7, r2, #31
    4fa0:	d5fa      	bpl.n	4f98 <PkaEcdsaVerify+0xbc>
    4fa2:	4a5a      	ldr	r2, [pc, #360]	; (510c <PkaEcdsaVerify+0x230>)
    4fa4:	601a      	str	r2, [r3, #0]
    4fa6:	6831      	ldr	r1, [r6, #0]
    4fa8:	910c      	str	r1, [sp, #48]	; 0x30
    4faa:	990c      	ldr	r1, [sp, #48]	; 0x30
    4fac:	07cc      	lsls	r4, r1, #31
    4fae:	d5fa      	bpl.n	4fa6 <PkaEcdsaVerify+0xca>
    4fb0:	4957      	ldr	r1, [pc, #348]	; (5110 <PkaEcdsaVerify+0x234>)
    4fb2:	6019      	str	r1, [r3, #0]
    4fb4:	6831      	ldr	r1, [r6, #0]
    4fb6:	910d      	str	r1, [sp, #52]	; 0x34
    4fb8:	990d      	ldr	r1, [sp, #52]	; 0x34
    4fba:	07c9      	lsls	r1, r1, #31
    4fbc:	d5fa      	bpl.n	4fb4 <PkaEcdsaVerify+0xd8>
    4fbe:	4955      	ldr	r1, [pc, #340]	; (5114 <PkaEcdsaVerify+0x238>)
    4fc0:	6019      	str	r1, [r3, #0]
    4fc2:	6831      	ldr	r1, [r6, #0]
    4fc4:	910e      	str	r1, [sp, #56]	; 0x38
    4fc6:	990e      	ldr	r1, [sp, #56]	; 0x38
    4fc8:	07cf      	lsls	r7, r1, #31
    4fca:	d5fa      	bpl.n	4fc2 <PkaEcdsaVerify+0xe6>
    4fcc:	4952      	ldr	r1, [pc, #328]	; (5118 <PkaEcdsaVerify+0x23c>)
    4fce:	6019      	str	r1, [r3, #0]
    4fd0:	6831      	ldr	r1, [r6, #0]
    4fd2:	910f      	str	r1, [sp, #60]	; 0x3c
    4fd4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    4fd6:	07cc      	lsls	r4, r1, #31
    4fd8:	d5fa      	bpl.n	4fd0 <PkaEcdsaVerify+0xf4>
    4fda:	4950      	ldr	r1, [pc, #320]	; (511c <PkaEcdsaVerify+0x240>)
    4fdc:	6019      	str	r1, [r3, #0]
    4fde:	4b50      	ldr	r3, [pc, #320]	; (5120 <PkaEcdsaVerify+0x244>)
    4fe0:	461e      	mov	r6, r3
    4fe2:	6819      	ldr	r1, [r3, #0]
    4fe4:	9110      	str	r1, [sp, #64]	; 0x40
    4fe6:	9910      	ldr	r1, [sp, #64]	; 0x40
    4fe8:	07c9      	lsls	r1, r1, #31
    4fea:	d5fa      	bpl.n	4fe2 <PkaEcdsaVerify+0x106>
    4fec:	4c3f      	ldr	r4, [pc, #252]	; (50ec <PkaEcdsaVerify+0x210>)
    4fee:	4b4d      	ldr	r3, [pc, #308]	; (5124 <PkaEcdsaVerify+0x248>)
    4ff0:	6023      	str	r3, [r4, #0]
    4ff2:	6833      	ldr	r3, [r6, #0]
    4ff4:	9311      	str	r3, [sp, #68]	; 0x44
    4ff6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4ff8:	07db      	lsls	r3, r3, #31
    4ffa:	d5fa      	bpl.n	4ff2 <PkaEcdsaVerify+0x116>
    4ffc:	4b4a      	ldr	r3, [pc, #296]	; (5128 <PkaEcdsaVerify+0x24c>)
    4ffe:	6023      	str	r3, [r4, #0]
    5000:	6833      	ldr	r3, [r6, #0]
    5002:	9312      	str	r3, [sp, #72]	; 0x48
    5004:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5006:	07df      	lsls	r7, r3, #31
    5008:	d5fa      	bpl.n	5000 <PkaEcdsaVerify+0x124>
    500a:	4b48      	ldr	r3, [pc, #288]	; (512c <PkaEcdsaVerify+0x250>)
    500c:	6023      	str	r3, [r4, #0]
    500e:	4b3a      	ldr	r3, [pc, #232]	; (50f8 <PkaEcdsaVerify+0x21c>)
    5010:	4698      	mov	r8, r3
    5012:	6819      	ldr	r1, [r3, #0]
    5014:	9113      	str	r1, [sp, #76]	; 0x4c
    5016:	9913      	ldr	r1, [sp, #76]	; 0x4c
    5018:	07c9      	lsls	r1, r1, #31
    501a:	d5fa      	bpl.n	5012 <PkaEcdsaVerify+0x136>
    501c:	4f32      	ldr	r7, [pc, #200]	; (50e8 <PkaEcdsaVerify+0x20c>)
    501e:	6038      	str	r0, [r7, #0]
    5020:	6833      	ldr	r3, [r6, #0]
    5022:	9314      	str	r3, [sp, #80]	; 0x50
    5024:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5026:	07db      	lsls	r3, r3, #31
    5028:	d5fa      	bpl.n	5020 <PkaEcdsaVerify+0x144>
    502a:	6022      	str	r2, [r4, #0]
    502c:	6833      	ldr	r3, [r6, #0]
    502e:	9315      	str	r3, [sp, #84]	; 0x54
    5030:	9b15      	ldr	r3, [sp, #84]	; 0x54
    5032:	07d8      	lsls	r0, r3, #31
    5034:	d5fa      	bpl.n	502c <PkaEcdsaVerify+0x150>
    5036:	4b3e      	ldr	r3, [pc, #248]	; (5130 <PkaEcdsaVerify+0x254>)
    5038:	6023      	str	r3, [r4, #0]
    503a:	6833      	ldr	r3, [r6, #0]
    503c:	9316      	str	r3, [sp, #88]	; 0x58
    503e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    5040:	07d9      	lsls	r1, r3, #31
    5042:	d5fa      	bpl.n	503a <PkaEcdsaVerify+0x15e>
    5044:	4b3b      	ldr	r3, [pc, #236]	; (5134 <PkaEcdsaVerify+0x258>)
    5046:	6023      	str	r3, [r4, #0]
    5048:	6833      	ldr	r3, [r6, #0]
    504a:	9317      	str	r3, [sp, #92]	; 0x5c
    504c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    504e:	07da      	lsls	r2, r3, #31
    5050:	d5fa      	bpl.n	5048 <PkaEcdsaVerify+0x16c>
    5052:	4b39      	ldr	r3, [pc, #228]	; (5138 <PkaEcdsaVerify+0x25c>)
    5054:	6023      	str	r3, [r4, #0]
    5056:	6833      	ldr	r3, [r6, #0]
    5058:	9318      	str	r3, [sp, #96]	; 0x60
    505a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    505c:	07db      	lsls	r3, r3, #31
    505e:	d5fa      	bpl.n	5056 <PkaEcdsaVerify+0x17a>
    5060:	4b36      	ldr	r3, [pc, #216]	; (513c <PkaEcdsaVerify+0x260>)
    5062:	6023      	str	r3, [r4, #0]
    5064:	6833      	ldr	r3, [r6, #0]
    5066:	9319      	str	r3, [sp, #100]	; 0x64
    5068:	9b19      	ldr	r3, [sp, #100]	; 0x64
    506a:	07d8      	lsls	r0, r3, #31
    506c:	d5fa      	bpl.n	5064 <PkaEcdsaVerify+0x188>
    506e:	4b34      	ldr	r3, [pc, #208]	; (5140 <PkaEcdsaVerify+0x264>)
    5070:	6023      	str	r3, [r4, #0]
    5072:	6833      	ldr	r3, [r6, #0]
    5074:	931a      	str	r3, [sp, #104]	; 0x68
    5076:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    5078:	07d9      	lsls	r1, r3, #31
    507a:	d5fa      	bpl.n	5072 <PkaEcdsaVerify+0x196>
    507c:	4b31      	ldr	r3, [pc, #196]	; (5144 <PkaEcdsaVerify+0x268>)
    507e:	6023      	str	r3, [r4, #0]
    5080:	6833      	ldr	r3, [r6, #0]
    5082:	931b      	str	r3, [sp, #108]	; 0x6c
    5084:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    5086:	07da      	lsls	r2, r3, #31
    5088:	d5fa      	bpl.n	5080 <PkaEcdsaVerify+0x1a4>
    508a:	4b2f      	ldr	r3, [pc, #188]	; (5148 <PkaEcdsaVerify+0x26c>)
    508c:	6023      	str	r3, [r4, #0]
    508e:	f000 fc1d 	bl	58cc <PkaSum2ScalarMullt>
    5092:	bb08      	cbnz	r0, 50d8 <PkaEcdsaVerify+0x1fc>
    5094:	f8d8 3000 	ldr.w	r3, [r8]
    5098:	931c      	str	r3, [sp, #112]	; 0x70
    509a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    509c:	07db      	lsls	r3, r3, #31
    509e:	d5f9      	bpl.n	5094 <PkaEcdsaVerify+0x1b8>
    50a0:	603d      	str	r5, [r7, #0]
    50a2:	6833      	ldr	r3, [r6, #0]
    50a4:	931d      	str	r3, [sp, #116]	; 0x74
    50a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    50a8:	07d9      	lsls	r1, r3, #31
    50aa:	d5fa      	bpl.n	50a2 <PkaEcdsaVerify+0x1c6>
    50ac:	4b27      	ldr	r3, [pc, #156]	; (514c <PkaEcdsaVerify+0x270>)
    50ae:	6023      	str	r3, [r4, #0]
    50b0:	6833      	ldr	r3, [r6, #0]
    50b2:	931e      	str	r3, [sp, #120]	; 0x78
    50b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    50b6:	07da      	lsls	r2, r3, #31
    50b8:	d5fa      	bpl.n	50b0 <PkaEcdsaVerify+0x1d4>
    50ba:	4b25      	ldr	r3, [pc, #148]	; (5150 <PkaEcdsaVerify+0x274>)
    50bc:	6023      	str	r3, [r4, #0]
    50be:	f8d8 3000 	ldr.w	r3, [r8]
    50c2:	931f      	str	r3, [sp, #124]	; 0x7c
    50c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    50c6:	07db      	lsls	r3, r3, #31
    50c8:	d5f9      	bpl.n	50be <PkaEcdsaVerify+0x1e2>
    50ca:	4b0c      	ldr	r3, [pc, #48]	; (50fc <PkaEcdsaVerify+0x220>)
    50cc:	681b      	ldr	r3, [r3, #0]
    50ce:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    50d2:	4b20      	ldr	r3, [pc, #128]	; (5154 <PkaEcdsaVerify+0x278>)
    50d4:	bf08      	it	eq
    50d6:	4618      	moveq	r0, r3
    50d8:	b020      	add	sp, #128	; 0x80
    50da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    50de:	481e      	ldr	r0, [pc, #120]	; (5158 <PkaEcdsaVerify+0x27c>)
    50e0:	e7fa      	b.n	50d8 <PkaEcdsaVerify+0x1fc>
    50e2:	481e      	ldr	r0, [pc, #120]	; (515c <PkaEcdsaVerify+0x280>)
    50e4:	e7f8      	b.n	50d8 <PkaEcdsaVerify+0x1fc>
    50e6:	bf00      	nop
    50e8:	50841090 	.word	0x50841090
    50ec:	50841080 	.word	0x50841080
    50f0:	51021000 	.word	0x51021000
    50f4:	29721fc0 	.word	0x29721fc0
    50f8:	508410b4 	.word	0x508410b4
    50fc:	50841088 	.word	0x50841088
    5100:	2901cfc0 	.word	0x2901cfc0
    5104:	290e1fc0 	.word	0x290e1fc0
    5108:	29003fc0 	.word	0x29003fc0
    510c:	49020140 	.word	0x49020140
    5110:	a8843100 	.word	0xa8843100
    5114:	49160000 	.word	0x49160000
    5118:	a1080140 	.word	0xa1080140
    511c:	88084480 	.word	0x88084480
    5120:	508410b0 	.word	0x508410b0
    5124:	887044c0 	.word	0x887044c0
    5128:	417a0780 	.word	0x417a0780
    512c:	417e07c0 	.word	0x417e07c0
    5130:	496a0000 	.word	0x496a0000
    5134:	49160680 	.word	0x49160680
    5138:	496e0040 	.word	0x496e0040
    513c:	21000200 	.word	0x21000200
    5140:	21208200 	.word	0x21208200
    5144:	21208240 	.word	0x21208240
    5148:	21248280 	.word	0x21248280
    514c:	a161a140 	.word	0xa161a140
    5150:	5161c800 	.word	0x5161c800
    5154:	00f10803 	.word	0x00f10803
    5158:	00f10801 	.word	0x00f10801
    515c:	00f10802 	.word	0x00f10802

00005160 <nrf_cc310_bl_hash_update_internal>:
    5160:	4b32      	ldr	r3, [pc, #200]	; (522c <nrf_cc310_bl_hash_update_internal+0xcc>)
    5162:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5166:	4680      	mov	r8, r0
    5168:	4692      	mov	sl, r2
    516a:	4699      	mov	r9, r3
    516c:	6844      	ldr	r4, [r0, #4]
    516e:	681a      	ldr	r2, [r3, #0]
    5170:	2a00      	cmp	r2, #0
    5172:	d1fc      	bne.n	516e <nrf_cc310_bl_hash_update_internal+0xe>
    5174:	4b2e      	ldr	r3, [pc, #184]	; (5230 <nrf_cc310_bl_hash_update_internal+0xd0>)
    5176:	469b      	mov	fp, r3
    5178:	681a      	ldr	r2, [r3, #0]
    517a:	2a00      	cmp	r2, #0
    517c:	d1fc      	bne.n	5178 <nrf_cc310_bl_hash_update_internal+0x18>
    517e:	f04f 30ff 	mov.w	r0, #4294967295
    5182:	9101      	str	r1, [sp, #4]
    5184:	f000 fc94 	bl	5ab0 <SaSi_HalClearInterruptBit>
    5188:	2080      	movs	r0, #128	; 0x80
    518a:	f000 fc97 	bl	5abc <SaSi_HalMaskInterrupt>
    518e:	2301      	movs	r3, #1
    5190:	2007      	movs	r0, #7
    5192:	4a28      	ldr	r2, [pc, #160]	; (5234 <nrf_cc310_bl_hash_update_internal+0xd4>)
    5194:	4d28      	ldr	r5, [pc, #160]	; (5238 <nrf_cc310_bl_hash_update_internal+0xd8>)
    5196:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
    519a:	602b      	str	r3, [r5, #0]
    519c:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    51a0:	6013      	str	r3, [r2, #0]
    51a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    51a4:	4f25      	ldr	r7, [pc, #148]	; (523c <nrf_cc310_bl_hash_update_internal+0xdc>)
    51a6:	4e26      	ldr	r6, [pc, #152]	; (5240 <nrf_cc310_bl_hash_update_internal+0xe0>)
    51a8:	603b      	str	r3, [r7, #0]
    51aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    51ac:	4620      	mov	r0, r4
    51ae:	6033      	str	r3, [r6, #0]
    51b0:	f8d8 3000 	ldr.w	r3, [r8]
    51b4:	f842 3c04 	str.w	r3, [r2, #-4]
    51b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
    51bc:	4798      	blx	r3
    51be:	9901      	ldr	r1, [sp, #4]
    51c0:	f8d9 3000 	ldr.w	r3, [r9]
    51c4:	2b00      	cmp	r3, #0
    51c6:	d1fb      	bne.n	51c0 <nrf_cc310_bl_hash_update_internal+0x60>
    51c8:	f1ba 0f00 	cmp.w	sl, #0
    51cc:	d120      	bne.n	5210 <nrf_cc310_bl_hash_update_internal+0xb0>
    51ce:	2204      	movs	r2, #4
    51d0:	4b1c      	ldr	r3, [pc, #112]	; (5244 <nrf_cc310_bl_hash_update_internal+0xe4>)
    51d2:	601a      	str	r2, [r3, #0]
    51d4:	f8d9 3000 	ldr.w	r3, [r9]
    51d8:	2b00      	cmp	r3, #0
    51da:	d1fb      	bne.n	51d4 <nrf_cc310_bl_hash_update_internal+0x74>
    51dc:	f8db a000 	ldr.w	sl, [fp]
    51e0:	f1ba 0f00 	cmp.w	sl, #0
    51e4:	d1fa      	bne.n	51dc <nrf_cc310_bl_hash_update_internal+0x7c>
    51e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
    51ea:	4620      	mov	r0, r4
    51ec:	4798      	blx	r3
    51ee:	683b      	ldr	r3, [r7, #0]
    51f0:	6263      	str	r3, [r4, #36]	; 0x24
    51f2:	6833      	ldr	r3, [r6, #0]
    51f4:	62a3      	str	r3, [r4, #40]	; 0x28
    51f6:	4b14      	ldr	r3, [pc, #80]	; (5248 <nrf_cc310_bl_hash_update_internal+0xe8>)
    51f8:	f8c3 a000 	str.w	sl, [r3]
    51fc:	f8c3 a144 	str.w	sl, [r3, #324]	; 0x144
    5200:	f8d9 3000 	ldr.w	r3, [r9]
    5204:	2b00      	cmp	r3, #0
    5206:	d1fb      	bne.n	5200 <nrf_cc310_bl_hash_update_internal+0xa0>
    5208:	602b      	str	r3, [r5, #0]
    520a:	b003      	add	sp, #12
    520c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5210:	6a23      	ldr	r3, [r4, #32]
    5212:	2040      	movs	r0, #64	; 0x40
    5214:	2b01      	cmp	r3, #1
    5216:	bf04      	itt	eq
    5218:	4a0b      	ldreq	r2, [pc, #44]	; (5248 <nrf_cc310_bl_hash_update_internal+0xe8>)
    521a:	6013      	streq	r3, [r2, #0]
    521c:	4b0b      	ldr	r3, [pc, #44]	; (524c <nrf_cc310_bl_hash_update_internal+0xec>)
    521e:	6019      	str	r1, [r3, #0]
    5220:	f8c3 a004 	str.w	sl, [r3, #4]
    5224:	f000 fc50 	bl	5ac8 <SaSi_HalWaitInterrupt>
    5228:	e7d4      	b.n	51d4 <nrf_cc310_bl_hash_update_internal+0x74>
    522a:	bf00      	nop
    522c:	50841910 	.word	0x50841910
    5230:	50841c20 	.word	0x50841c20
    5234:	50841900 	.word	0x50841900
    5238:	50841818 	.word	0x50841818
    523c:	508417cc 	.word	0x508417cc
    5240:	508417d0 	.word	0x508417d0
    5244:	508417c8 	.word	0x508417c8
    5248:	50841684 	.word	0x50841684
    524c:	50841c28 	.word	0x50841c28

00005250 <PkaDoubleMdf2Mdf>:
    5250:	4b54      	ldr	r3, [pc, #336]	; (53a4 <PkaDoubleMdf2Mdf+0x154>)
    5252:	b510      	push	{r4, lr}
    5254:	4619      	mov	r1, r3
    5256:	b098      	sub	sp, #96	; 0x60
    5258:	681a      	ldr	r2, [r3, #0]
    525a:	9201      	str	r2, [sp, #4]
    525c:	9a01      	ldr	r2, [sp, #4]
    525e:	07d2      	lsls	r2, r2, #31
    5260:	d5fa      	bpl.n	5258 <PkaDoubleMdf2Mdf+0x8>
    5262:	4b51      	ldr	r3, [pc, #324]	; (53a8 <PkaDoubleMdf2Mdf+0x158>)
    5264:	4a51      	ldr	r2, [pc, #324]	; (53ac <PkaDoubleMdf2Mdf+0x15c>)
    5266:	601a      	str	r2, [r3, #0]
    5268:	680a      	ldr	r2, [r1, #0]
    526a:	9202      	str	r2, [sp, #8]
    526c:	9a02      	ldr	r2, [sp, #8]
    526e:	07d4      	lsls	r4, r2, #31
    5270:	d5fa      	bpl.n	5268 <PkaDoubleMdf2Mdf+0x18>
    5272:	4a4f      	ldr	r2, [pc, #316]	; (53b0 <PkaDoubleMdf2Mdf+0x160>)
    5274:	601a      	str	r2, [r3, #0]
    5276:	680a      	ldr	r2, [r1, #0]
    5278:	9203      	str	r2, [sp, #12]
    527a:	9a03      	ldr	r2, [sp, #12]
    527c:	07d0      	lsls	r0, r2, #31
    527e:	d5fa      	bpl.n	5276 <PkaDoubleMdf2Mdf+0x26>
    5280:	484c      	ldr	r0, [pc, #304]	; (53b4 <PkaDoubleMdf2Mdf+0x164>)
    5282:	6018      	str	r0, [r3, #0]
    5284:	680a      	ldr	r2, [r1, #0]
    5286:	9204      	str	r2, [sp, #16]
    5288:	9a04      	ldr	r2, [sp, #16]
    528a:	07d2      	lsls	r2, r2, #31
    528c:	d5fa      	bpl.n	5284 <PkaDoubleMdf2Mdf+0x34>
    528e:	4a4a      	ldr	r2, [pc, #296]	; (53b8 <PkaDoubleMdf2Mdf+0x168>)
    5290:	601a      	str	r2, [r3, #0]
    5292:	680a      	ldr	r2, [r1, #0]
    5294:	9205      	str	r2, [sp, #20]
    5296:	9a05      	ldr	r2, [sp, #20]
    5298:	07d4      	lsls	r4, r2, #31
    529a:	d5fa      	bpl.n	5292 <PkaDoubleMdf2Mdf+0x42>
    529c:	4a47      	ldr	r2, [pc, #284]	; (53bc <PkaDoubleMdf2Mdf+0x16c>)
    529e:	601a      	str	r2, [r3, #0]
    52a0:	680a      	ldr	r2, [r1, #0]
    52a2:	9206      	str	r2, [sp, #24]
    52a4:	9a06      	ldr	r2, [sp, #24]
    52a6:	07d2      	lsls	r2, r2, #31
    52a8:	d5fa      	bpl.n	52a0 <PkaDoubleMdf2Mdf+0x50>
    52aa:	4a45      	ldr	r2, [pc, #276]	; (53c0 <PkaDoubleMdf2Mdf+0x170>)
    52ac:	601a      	str	r2, [r3, #0]
    52ae:	680a      	ldr	r2, [r1, #0]
    52b0:	9207      	str	r2, [sp, #28]
    52b2:	9a07      	ldr	r2, [sp, #28]
    52b4:	07d4      	lsls	r4, r2, #31
    52b6:	d5fa      	bpl.n	52ae <PkaDoubleMdf2Mdf+0x5e>
    52b8:	4a42      	ldr	r2, [pc, #264]	; (53c4 <PkaDoubleMdf2Mdf+0x174>)
    52ba:	601a      	str	r2, [r3, #0]
    52bc:	680a      	ldr	r2, [r1, #0]
    52be:	9208      	str	r2, [sp, #32]
    52c0:	9a08      	ldr	r2, [sp, #32]
    52c2:	07d2      	lsls	r2, r2, #31
    52c4:	d5fa      	bpl.n	52bc <PkaDoubleMdf2Mdf+0x6c>
    52c6:	4a40      	ldr	r2, [pc, #256]	; (53c8 <PkaDoubleMdf2Mdf+0x178>)
    52c8:	601a      	str	r2, [r3, #0]
    52ca:	680a      	ldr	r2, [r1, #0]
    52cc:	9209      	str	r2, [sp, #36]	; 0x24
    52ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
    52d0:	07d4      	lsls	r4, r2, #31
    52d2:	d5fa      	bpl.n	52ca <PkaDoubleMdf2Mdf+0x7a>
    52d4:	4a3d      	ldr	r2, [pc, #244]	; (53cc <PkaDoubleMdf2Mdf+0x17c>)
    52d6:	601a      	str	r2, [r3, #0]
    52d8:	680a      	ldr	r2, [r1, #0]
    52da:	920a      	str	r2, [sp, #40]	; 0x28
    52dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    52de:	07d2      	lsls	r2, r2, #31
    52e0:	d5fa      	bpl.n	52d8 <PkaDoubleMdf2Mdf+0x88>
    52e2:	4a3b      	ldr	r2, [pc, #236]	; (53d0 <PkaDoubleMdf2Mdf+0x180>)
    52e4:	601a      	str	r2, [r3, #0]
    52e6:	680a      	ldr	r2, [r1, #0]
    52e8:	920b      	str	r2, [sp, #44]	; 0x2c
    52ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    52ec:	07d4      	lsls	r4, r2, #31
    52ee:	d5fa      	bpl.n	52e6 <PkaDoubleMdf2Mdf+0x96>
    52f0:	4a38      	ldr	r2, [pc, #224]	; (53d4 <PkaDoubleMdf2Mdf+0x184>)
    52f2:	601a      	str	r2, [r3, #0]
    52f4:	680a      	ldr	r2, [r1, #0]
    52f6:	920c      	str	r2, [sp, #48]	; 0x30
    52f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    52fa:	07d2      	lsls	r2, r2, #31
    52fc:	d5fa      	bpl.n	52f4 <PkaDoubleMdf2Mdf+0xa4>
    52fe:	4a36      	ldr	r2, [pc, #216]	; (53d8 <PkaDoubleMdf2Mdf+0x188>)
    5300:	601a      	str	r2, [r3, #0]
    5302:	680a      	ldr	r2, [r1, #0]
    5304:	920d      	str	r2, [sp, #52]	; 0x34
    5306:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5308:	07d4      	lsls	r4, r2, #31
    530a:	d5fa      	bpl.n	5302 <PkaDoubleMdf2Mdf+0xb2>
    530c:	4a33      	ldr	r2, [pc, #204]	; (53dc <PkaDoubleMdf2Mdf+0x18c>)
    530e:	601a      	str	r2, [r3, #0]
    5310:	680a      	ldr	r2, [r1, #0]
    5312:	920e      	str	r2, [sp, #56]	; 0x38
    5314:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5316:	07d2      	lsls	r2, r2, #31
    5318:	d5fa      	bpl.n	5310 <PkaDoubleMdf2Mdf+0xc0>
    531a:	4a31      	ldr	r2, [pc, #196]	; (53e0 <PkaDoubleMdf2Mdf+0x190>)
    531c:	601a      	str	r2, [r3, #0]
    531e:	680a      	ldr	r2, [r1, #0]
    5320:	920f      	str	r2, [sp, #60]	; 0x3c
    5322:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5324:	07d4      	lsls	r4, r2, #31
    5326:	d5fa      	bpl.n	531e <PkaDoubleMdf2Mdf+0xce>
    5328:	4a2e      	ldr	r2, [pc, #184]	; (53e4 <PkaDoubleMdf2Mdf+0x194>)
    532a:	601a      	str	r2, [r3, #0]
    532c:	680a      	ldr	r2, [r1, #0]
    532e:	9210      	str	r2, [sp, #64]	; 0x40
    5330:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5332:	07d2      	lsls	r2, r2, #31
    5334:	d5fa      	bpl.n	532c <PkaDoubleMdf2Mdf+0xdc>
    5336:	4a2c      	ldr	r2, [pc, #176]	; (53e8 <PkaDoubleMdf2Mdf+0x198>)
    5338:	601a      	str	r2, [r3, #0]
    533a:	4b1a      	ldr	r3, [pc, #104]	; (53a4 <PkaDoubleMdf2Mdf+0x154>)
    533c:	4619      	mov	r1, r3
    533e:	681c      	ldr	r4, [r3, #0]
    5340:	9411      	str	r4, [sp, #68]	; 0x44
    5342:	9c11      	ldr	r4, [sp, #68]	; 0x44
    5344:	07e4      	lsls	r4, r4, #31
    5346:	d5fa      	bpl.n	533e <PkaDoubleMdf2Mdf+0xee>
    5348:	4b17      	ldr	r3, [pc, #92]	; (53a8 <PkaDoubleMdf2Mdf+0x158>)
    534a:	6018      	str	r0, [r3, #0]
    534c:	6808      	ldr	r0, [r1, #0]
    534e:	9012      	str	r0, [sp, #72]	; 0x48
    5350:	9812      	ldr	r0, [sp, #72]	; 0x48
    5352:	07c4      	lsls	r4, r0, #31
    5354:	d5fa      	bpl.n	534c <PkaDoubleMdf2Mdf+0xfc>
    5356:	601a      	str	r2, [r3, #0]
    5358:	680a      	ldr	r2, [r1, #0]
    535a:	9213      	str	r2, [sp, #76]	; 0x4c
    535c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    535e:	07d0      	lsls	r0, r2, #31
    5360:	d5fa      	bpl.n	5358 <PkaDoubleMdf2Mdf+0x108>
    5362:	4a12      	ldr	r2, [pc, #72]	; (53ac <PkaDoubleMdf2Mdf+0x15c>)
    5364:	601a      	str	r2, [r3, #0]
    5366:	680a      	ldr	r2, [r1, #0]
    5368:	9214      	str	r2, [sp, #80]	; 0x50
    536a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    536c:	07d2      	lsls	r2, r2, #31
    536e:	d5fa      	bpl.n	5366 <PkaDoubleMdf2Mdf+0x116>
    5370:	4a1e      	ldr	r2, [pc, #120]	; (53ec <PkaDoubleMdf2Mdf+0x19c>)
    5372:	601a      	str	r2, [r3, #0]
    5374:	680a      	ldr	r2, [r1, #0]
    5376:	9215      	str	r2, [sp, #84]	; 0x54
    5378:	9a15      	ldr	r2, [sp, #84]	; 0x54
    537a:	07d4      	lsls	r4, r2, #31
    537c:	d5fa      	bpl.n	5374 <PkaDoubleMdf2Mdf+0x124>
    537e:	4a1c      	ldr	r2, [pc, #112]	; (53f0 <PkaDoubleMdf2Mdf+0x1a0>)
    5380:	601a      	str	r2, [r3, #0]
    5382:	680a      	ldr	r2, [r1, #0]
    5384:	9216      	str	r2, [sp, #88]	; 0x58
    5386:	9a16      	ldr	r2, [sp, #88]	; 0x58
    5388:	07d0      	lsls	r0, r2, #31
    538a:	d5fa      	bpl.n	5382 <PkaDoubleMdf2Mdf+0x132>
    538c:	4a19      	ldr	r2, [pc, #100]	; (53f4 <PkaDoubleMdf2Mdf+0x1a4>)
    538e:	601a      	str	r2, [r3, #0]
    5390:	680a      	ldr	r2, [r1, #0]
    5392:	9217      	str	r2, [sp, #92]	; 0x5c
    5394:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    5396:	07d2      	lsls	r2, r2, #31
    5398:	d5fa      	bpl.n	5390 <PkaDoubleMdf2Mdf+0x140>
    539a:	4a17      	ldr	r2, [pc, #92]	; (53f8 <PkaDoubleMdf2Mdf+0x1a8>)
    539c:	601a      	str	r2, [r3, #0]
    539e:	b018      	add	sp, #96	; 0x60
    53a0:	bd10      	pop	{r4, pc}
    53a2:	bf00      	nop
    53a4:	508410b0 	.word	0x508410b0
    53a8:	50841080 	.word	0x50841080
    53ac:	21659300 	.word	0x21659300
    53b0:	90310400 	.word	0x90310400
    53b4:	90659640 	.word	0x90659640
    53b8:	21618300 	.word	0x21618300
    53bc:	2130c300 	.word	0x2130c300
    53c0:	9064c300 	.word	0x9064c300
    53c4:	90618100 	.word	0x90618100
    53c8:	21104600 	.word	0x21104600
    53cc:	21118100 	.word	0x21118100
    53d0:	21444100 	.word	0x21444100
    53d4:	2920c300 	.word	0x2920c300
    53d8:	c810460c 	.word	0xc810460c
    53dc:	21318600 	.word	0x21318600
    53e0:	2160c300 	.word	0x2160c300
    53e4:	2928c140 	.word	0x2928c140
    53e8:	21659640 	.word	0x21659640
    53ec:	90311300 	.word	0x90311300
    53f0:	29259640 	.word	0x29259640
    53f4:	c8144659 	.word	0xc8144659
    53f8:	49320440 	.word	0x49320440

000053fc <PkaDoubleMdf2Jcb>:
    53fc:	4b49      	ldr	r3, [pc, #292]	; (5524 <PkaDoubleMdf2Jcb+0x128>)
    53fe:	b510      	push	{r4, lr}
    5400:	4619      	mov	r1, r3
    5402:	b094      	sub	sp, #80	; 0x50
    5404:	681a      	ldr	r2, [r3, #0]
    5406:	9200      	str	r2, [sp, #0]
    5408:	9a00      	ldr	r2, [sp, #0]
    540a:	07d2      	lsls	r2, r2, #31
    540c:	d5fa      	bpl.n	5404 <PkaDoubleMdf2Jcb+0x8>
    540e:	4b46      	ldr	r3, [pc, #280]	; (5528 <PkaDoubleMdf2Jcb+0x12c>)
    5410:	4a46      	ldr	r2, [pc, #280]	; (552c <PkaDoubleMdf2Jcb+0x130>)
    5412:	601a      	str	r2, [r3, #0]
    5414:	680a      	ldr	r2, [r1, #0]
    5416:	9201      	str	r2, [sp, #4]
    5418:	9a01      	ldr	r2, [sp, #4]
    541a:	07d4      	lsls	r4, r2, #31
    541c:	d5fa      	bpl.n	5414 <PkaDoubleMdf2Jcb+0x18>
    541e:	4a44      	ldr	r2, [pc, #272]	; (5530 <PkaDoubleMdf2Jcb+0x134>)
    5420:	601a      	str	r2, [r3, #0]
    5422:	680a      	ldr	r2, [r1, #0]
    5424:	9202      	str	r2, [sp, #8]
    5426:	9a02      	ldr	r2, [sp, #8]
    5428:	07d0      	lsls	r0, r2, #31
    542a:	d5fa      	bpl.n	5422 <PkaDoubleMdf2Jcb+0x26>
    542c:	4841      	ldr	r0, [pc, #260]	; (5534 <PkaDoubleMdf2Jcb+0x138>)
    542e:	6018      	str	r0, [r3, #0]
    5430:	680a      	ldr	r2, [r1, #0]
    5432:	9203      	str	r2, [sp, #12]
    5434:	9a03      	ldr	r2, [sp, #12]
    5436:	07d2      	lsls	r2, r2, #31
    5438:	d5fa      	bpl.n	5430 <PkaDoubleMdf2Jcb+0x34>
    543a:	4a3f      	ldr	r2, [pc, #252]	; (5538 <PkaDoubleMdf2Jcb+0x13c>)
    543c:	601a      	str	r2, [r3, #0]
    543e:	680a      	ldr	r2, [r1, #0]
    5440:	9204      	str	r2, [sp, #16]
    5442:	9a04      	ldr	r2, [sp, #16]
    5444:	07d4      	lsls	r4, r2, #31
    5446:	d5fa      	bpl.n	543e <PkaDoubleMdf2Jcb+0x42>
    5448:	4a3c      	ldr	r2, [pc, #240]	; (553c <PkaDoubleMdf2Jcb+0x140>)
    544a:	601a      	str	r2, [r3, #0]
    544c:	680a      	ldr	r2, [r1, #0]
    544e:	9205      	str	r2, [sp, #20]
    5450:	9a05      	ldr	r2, [sp, #20]
    5452:	07d2      	lsls	r2, r2, #31
    5454:	d5fa      	bpl.n	544c <PkaDoubleMdf2Jcb+0x50>
    5456:	4a3a      	ldr	r2, [pc, #232]	; (5540 <PkaDoubleMdf2Jcb+0x144>)
    5458:	601a      	str	r2, [r3, #0]
    545a:	680a      	ldr	r2, [r1, #0]
    545c:	9206      	str	r2, [sp, #24]
    545e:	9a06      	ldr	r2, [sp, #24]
    5460:	07d4      	lsls	r4, r2, #31
    5462:	d5fa      	bpl.n	545a <PkaDoubleMdf2Jcb+0x5e>
    5464:	4a37      	ldr	r2, [pc, #220]	; (5544 <PkaDoubleMdf2Jcb+0x148>)
    5466:	601a      	str	r2, [r3, #0]
    5468:	680a      	ldr	r2, [r1, #0]
    546a:	9207      	str	r2, [sp, #28]
    546c:	9a07      	ldr	r2, [sp, #28]
    546e:	07d2      	lsls	r2, r2, #31
    5470:	d5fa      	bpl.n	5468 <PkaDoubleMdf2Jcb+0x6c>
    5472:	4a35      	ldr	r2, [pc, #212]	; (5548 <PkaDoubleMdf2Jcb+0x14c>)
    5474:	601a      	str	r2, [r3, #0]
    5476:	680a      	ldr	r2, [r1, #0]
    5478:	9208      	str	r2, [sp, #32]
    547a:	9a08      	ldr	r2, [sp, #32]
    547c:	07d4      	lsls	r4, r2, #31
    547e:	d5fa      	bpl.n	5476 <PkaDoubleMdf2Jcb+0x7a>
    5480:	4a32      	ldr	r2, [pc, #200]	; (554c <PkaDoubleMdf2Jcb+0x150>)
    5482:	601a      	str	r2, [r3, #0]
    5484:	680a      	ldr	r2, [r1, #0]
    5486:	9209      	str	r2, [sp, #36]	; 0x24
    5488:	9a09      	ldr	r2, [sp, #36]	; 0x24
    548a:	07d2      	lsls	r2, r2, #31
    548c:	d5fa      	bpl.n	5484 <PkaDoubleMdf2Jcb+0x88>
    548e:	4a30      	ldr	r2, [pc, #192]	; (5550 <PkaDoubleMdf2Jcb+0x154>)
    5490:	601a      	str	r2, [r3, #0]
    5492:	680a      	ldr	r2, [r1, #0]
    5494:	920a      	str	r2, [sp, #40]	; 0x28
    5496:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5498:	07d4      	lsls	r4, r2, #31
    549a:	d5fa      	bpl.n	5492 <PkaDoubleMdf2Jcb+0x96>
    549c:	4a2d      	ldr	r2, [pc, #180]	; (5554 <PkaDoubleMdf2Jcb+0x158>)
    549e:	601a      	str	r2, [r3, #0]
    54a0:	680a      	ldr	r2, [r1, #0]
    54a2:	920b      	str	r2, [sp, #44]	; 0x2c
    54a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    54a6:	07d2      	lsls	r2, r2, #31
    54a8:	d5fa      	bpl.n	54a0 <PkaDoubleMdf2Jcb+0xa4>
    54aa:	4a2b      	ldr	r2, [pc, #172]	; (5558 <PkaDoubleMdf2Jcb+0x15c>)
    54ac:	601a      	str	r2, [r3, #0]
    54ae:	680a      	ldr	r2, [r1, #0]
    54b0:	920c      	str	r2, [sp, #48]	; 0x30
    54b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    54b4:	07d4      	lsls	r4, r2, #31
    54b6:	d5fa      	bpl.n	54ae <PkaDoubleMdf2Jcb+0xb2>
    54b8:	4a28      	ldr	r2, [pc, #160]	; (555c <PkaDoubleMdf2Jcb+0x160>)
    54ba:	601a      	str	r2, [r3, #0]
    54bc:	680a      	ldr	r2, [r1, #0]
    54be:	920d      	str	r2, [sp, #52]	; 0x34
    54c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    54c2:	07d2      	lsls	r2, r2, #31
    54c4:	d5fa      	bpl.n	54bc <PkaDoubleMdf2Jcb+0xc0>
    54c6:	4a26      	ldr	r2, [pc, #152]	; (5560 <PkaDoubleMdf2Jcb+0x164>)
    54c8:	601a      	str	r2, [r3, #0]
    54ca:	680a      	ldr	r2, [r1, #0]
    54cc:	920e      	str	r2, [sp, #56]	; 0x38
    54ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    54d0:	07d4      	lsls	r4, r2, #31
    54d2:	d5fa      	bpl.n	54ca <PkaDoubleMdf2Jcb+0xce>
    54d4:	4a23      	ldr	r2, [pc, #140]	; (5564 <PkaDoubleMdf2Jcb+0x168>)
    54d6:	601a      	str	r2, [r3, #0]
    54d8:	680a      	ldr	r2, [r1, #0]
    54da:	920f      	str	r2, [sp, #60]	; 0x3c
    54dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    54de:	07d2      	lsls	r2, r2, #31
    54e0:	d5fa      	bpl.n	54d8 <PkaDoubleMdf2Jcb+0xdc>
    54e2:	4a21      	ldr	r2, [pc, #132]	; (5568 <PkaDoubleMdf2Jcb+0x16c>)
    54e4:	601a      	str	r2, [r3, #0]
    54e6:	4b0f      	ldr	r3, [pc, #60]	; (5524 <PkaDoubleMdf2Jcb+0x128>)
    54e8:	4619      	mov	r1, r3
    54ea:	681c      	ldr	r4, [r3, #0]
    54ec:	9410      	str	r4, [sp, #64]	; 0x40
    54ee:	9c10      	ldr	r4, [sp, #64]	; 0x40
    54f0:	07e4      	lsls	r4, r4, #31
    54f2:	d5fa      	bpl.n	54ea <PkaDoubleMdf2Jcb+0xee>
    54f4:	4b0c      	ldr	r3, [pc, #48]	; (5528 <PkaDoubleMdf2Jcb+0x12c>)
    54f6:	6018      	str	r0, [r3, #0]
    54f8:	6808      	ldr	r0, [r1, #0]
    54fa:	9011      	str	r0, [sp, #68]	; 0x44
    54fc:	9811      	ldr	r0, [sp, #68]	; 0x44
    54fe:	07c4      	lsls	r4, r0, #31
    5500:	d5fa      	bpl.n	54f8 <PkaDoubleMdf2Jcb+0xfc>
    5502:	601a      	str	r2, [r3, #0]
    5504:	680a      	ldr	r2, [r1, #0]
    5506:	9212      	str	r2, [sp, #72]	; 0x48
    5508:	9a12      	ldr	r2, [sp, #72]	; 0x48
    550a:	07d0      	lsls	r0, r2, #31
    550c:	d5fa      	bpl.n	5504 <PkaDoubleMdf2Jcb+0x108>
    550e:	4a17      	ldr	r2, [pc, #92]	; (556c <PkaDoubleMdf2Jcb+0x170>)
    5510:	601a      	str	r2, [r3, #0]
    5512:	680a      	ldr	r2, [r1, #0]
    5514:	9213      	str	r2, [sp, #76]	; 0x4c
    5516:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    5518:	07d2      	lsls	r2, r2, #31
    551a:	d5fa      	bpl.n	5512 <PkaDoubleMdf2Jcb+0x116>
    551c:	4a14      	ldr	r2, [pc, #80]	; (5570 <PkaDoubleMdf2Jcb+0x174>)
    551e:	601a      	str	r2, [r3, #0]
    5520:	b014      	add	sp, #80	; 0x50
    5522:	bd10      	pop	{r4, pc}
    5524:	508410b0 	.word	0x508410b0
    5528:	50841080 	.word	0x50841080
    552c:	21659080 	.word	0x21659080
    5530:	90090400 	.word	0x90090400
    5534:	90659640 	.word	0x90659640
    5538:	21618080 	.word	0x21618080
    553c:	21082080 	.word	0x21082080
    5540:	90642080 	.word	0x90642080
    5544:	90618100 	.word	0x90618100
    5548:	21104600 	.word	0x21104600
    554c:	21118100 	.word	0x21118100
    5550:	21444100 	.word	0x21444100
    5554:	29202080 	.word	0x29202080
    5558:	c8104602 	.word	0xc8104602
    555c:	21098600 	.word	0x21098600
    5560:	21602080 	.word	0x21602080
    5564:	29282140 	.word	0x29282140
    5568:	21659640 	.word	0x21659640
    556c:	29259640 	.word	0x29259640
    5570:	c8144659 	.word	0xc8144659

00005574 <PkaAddJcbAfn2Mdf>:
    5574:	4b50      	ldr	r3, [pc, #320]	; (56b8 <PkaAddJcbAfn2Mdf+0x144>)
    5576:	b510      	push	{r4, lr}
    5578:	461c      	mov	r4, r3
    557a:	b096      	sub	sp, #88	; 0x58
    557c:	681a      	ldr	r2, [r3, #0]
    557e:	9201      	str	r2, [sp, #4]
    5580:	9a01      	ldr	r2, [sp, #4]
    5582:	07d2      	lsls	r2, r2, #31
    5584:	d5fa      	bpl.n	557c <PkaAddJcbAfn2Mdf+0x8>
    5586:	4b4d      	ldr	r3, [pc, #308]	; (56bc <PkaAddJcbAfn2Mdf+0x148>)
    5588:	4a4d      	ldr	r2, [pc, #308]	; (56c0 <PkaAddJcbAfn2Mdf+0x14c>)
    558a:	601a      	str	r2, [r3, #0]
    558c:	6822      	ldr	r2, [r4, #0]
    558e:	9202      	str	r2, [sp, #8]
    5590:	9a02      	ldr	r2, [sp, #8]
    5592:	07d2      	lsls	r2, r2, #31
    5594:	d5fa      	bpl.n	558c <PkaAddJcbAfn2Mdf+0x18>
    5596:	4a4b      	ldr	r2, [pc, #300]	; (56c4 <PkaAddJcbAfn2Mdf+0x150>)
    5598:	601a      	str	r2, [r3, #0]
    559a:	4a4b      	ldr	r2, [pc, #300]	; (56c8 <PkaAddJcbAfn2Mdf+0x154>)
    559c:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
    55a0:	6822      	ldr	r2, [r4, #0]
    55a2:	9203      	str	r2, [sp, #12]
    55a4:	9a03      	ldr	r2, [sp, #12]
    55a6:	07d2      	lsls	r2, r2, #31
    55a8:	d5fa      	bpl.n	55a0 <PkaAddJcbAfn2Mdf+0x2c>
    55aa:	6018      	str	r0, [r3, #0]
    55ac:	6822      	ldr	r2, [r4, #0]
    55ae:	9204      	str	r2, [sp, #16]
    55b0:	9a04      	ldr	r2, [sp, #16]
    55b2:	07d0      	lsls	r0, r2, #31
    55b4:	d5fa      	bpl.n	55ac <PkaAddJcbAfn2Mdf+0x38>
    55b6:	4a45      	ldr	r2, [pc, #276]	; (56cc <PkaAddJcbAfn2Mdf+0x158>)
    55b8:	601a      	str	r2, [r3, #0]
    55ba:	f5a2 0280 	sub.w	r2, r2, #4194304	; 0x400000
    55be:	ea42 4181 	orr.w	r1, r2, r1, lsl #18
    55c2:	6822      	ldr	r2, [r4, #0]
    55c4:	9205      	str	r2, [sp, #20]
    55c6:	9a05      	ldr	r2, [sp, #20]
    55c8:	07d2      	lsls	r2, r2, #31
    55ca:	d5fa      	bpl.n	55c2 <PkaAddJcbAfn2Mdf+0x4e>
    55cc:	6019      	str	r1, [r3, #0]
    55ce:	6822      	ldr	r2, [r4, #0]
    55d0:	9206      	str	r2, [sp, #24]
    55d2:	9a06      	ldr	r2, [sp, #24]
    55d4:	07d0      	lsls	r0, r2, #31
    55d6:	d5fa      	bpl.n	55ce <PkaAddJcbAfn2Mdf+0x5a>
    55d8:	4a3d      	ldr	r2, [pc, #244]	; (56d0 <PkaAddJcbAfn2Mdf+0x15c>)
    55da:	601a      	str	r2, [r3, #0]
    55dc:	6822      	ldr	r2, [r4, #0]
    55de:	9207      	str	r2, [sp, #28]
    55e0:	9a07      	ldr	r2, [sp, #28]
    55e2:	07d1      	lsls	r1, r2, #31
    55e4:	d5fa      	bpl.n	55dc <PkaAddJcbAfn2Mdf+0x68>
    55e6:	4a3b      	ldr	r2, [pc, #236]	; (56d4 <PkaAddJcbAfn2Mdf+0x160>)
    55e8:	601a      	str	r2, [r3, #0]
    55ea:	6822      	ldr	r2, [r4, #0]
    55ec:	9208      	str	r2, [sp, #32]
    55ee:	9a08      	ldr	r2, [sp, #32]
    55f0:	07d2      	lsls	r2, r2, #31
    55f2:	d5fa      	bpl.n	55ea <PkaAddJcbAfn2Mdf+0x76>
    55f4:	4a38      	ldr	r2, [pc, #224]	; (56d8 <PkaAddJcbAfn2Mdf+0x164>)
    55f6:	601a      	str	r2, [r3, #0]
    55f8:	6822      	ldr	r2, [r4, #0]
    55fa:	9209      	str	r2, [sp, #36]	; 0x24
    55fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    55fe:	07d0      	lsls	r0, r2, #31
    5600:	d5fa      	bpl.n	55f8 <PkaAddJcbAfn2Mdf+0x84>
    5602:	4a36      	ldr	r2, [pc, #216]	; (56dc <PkaAddJcbAfn2Mdf+0x168>)
    5604:	601a      	str	r2, [r3, #0]
    5606:	6822      	ldr	r2, [r4, #0]
    5608:	920a      	str	r2, [sp, #40]	; 0x28
    560a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    560c:	07d1      	lsls	r1, r2, #31
    560e:	d5fa      	bpl.n	5606 <PkaAddJcbAfn2Mdf+0x92>
    5610:	4a33      	ldr	r2, [pc, #204]	; (56e0 <PkaAddJcbAfn2Mdf+0x16c>)
    5612:	601a      	str	r2, [r3, #0]
    5614:	6822      	ldr	r2, [r4, #0]
    5616:	920b      	str	r2, [sp, #44]	; 0x2c
    5618:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    561a:	07d2      	lsls	r2, r2, #31
    561c:	d5fa      	bpl.n	5614 <PkaAddJcbAfn2Mdf+0xa0>
    561e:	4a31      	ldr	r2, [pc, #196]	; (56e4 <PkaAddJcbAfn2Mdf+0x170>)
    5620:	601a      	str	r2, [r3, #0]
    5622:	6822      	ldr	r2, [r4, #0]
    5624:	920c      	str	r2, [sp, #48]	; 0x30
    5626:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5628:	07d0      	lsls	r0, r2, #31
    562a:	d5fa      	bpl.n	5622 <PkaAddJcbAfn2Mdf+0xae>
    562c:	4a2e      	ldr	r2, [pc, #184]	; (56e8 <PkaAddJcbAfn2Mdf+0x174>)
    562e:	601a      	str	r2, [r3, #0]
    5630:	6822      	ldr	r2, [r4, #0]
    5632:	920d      	str	r2, [sp, #52]	; 0x34
    5634:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5636:	07d1      	lsls	r1, r2, #31
    5638:	d5fa      	bpl.n	5630 <PkaAddJcbAfn2Mdf+0xbc>
    563a:	4a2c      	ldr	r2, [pc, #176]	; (56ec <PkaAddJcbAfn2Mdf+0x178>)
    563c:	601a      	str	r2, [r3, #0]
    563e:	6822      	ldr	r2, [r4, #0]
    5640:	920e      	str	r2, [sp, #56]	; 0x38
    5642:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5644:	07d2      	lsls	r2, r2, #31
    5646:	d5fa      	bpl.n	563e <PkaAddJcbAfn2Mdf+0xca>
    5648:	4a29      	ldr	r2, [pc, #164]	; (56f0 <PkaAddJcbAfn2Mdf+0x17c>)
    564a:	601a      	str	r2, [r3, #0]
    564c:	6822      	ldr	r2, [r4, #0]
    564e:	920f      	str	r2, [sp, #60]	; 0x3c
    5650:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5652:	07d0      	lsls	r0, r2, #31
    5654:	d5fa      	bpl.n	564c <PkaAddJcbAfn2Mdf+0xd8>
    5656:	4a27      	ldr	r2, [pc, #156]	; (56f4 <PkaAddJcbAfn2Mdf+0x180>)
    5658:	601a      	str	r2, [r3, #0]
    565a:	6821      	ldr	r1, [r4, #0]
    565c:	9110      	str	r1, [sp, #64]	; 0x40
    565e:	9910      	ldr	r1, [sp, #64]	; 0x40
    5660:	07c9      	lsls	r1, r1, #31
    5662:	d5fa      	bpl.n	565a <PkaAddJcbAfn2Mdf+0xe6>
    5664:	601a      	str	r2, [r3, #0]
    5666:	4b14      	ldr	r3, [pc, #80]	; (56b8 <PkaAddJcbAfn2Mdf+0x144>)
    5668:	461a      	mov	r2, r3
    566a:	6819      	ldr	r1, [r3, #0]
    566c:	9111      	str	r1, [sp, #68]	; 0x44
    566e:	9911      	ldr	r1, [sp, #68]	; 0x44
    5670:	07c8      	lsls	r0, r1, #31
    5672:	d5fa      	bpl.n	566a <PkaAddJcbAfn2Mdf+0xf6>
    5674:	4b11      	ldr	r3, [pc, #68]	; (56bc <PkaAddJcbAfn2Mdf+0x148>)
    5676:	4920      	ldr	r1, [pc, #128]	; (56f8 <PkaAddJcbAfn2Mdf+0x184>)
    5678:	6019      	str	r1, [r3, #0]
    567a:	6811      	ldr	r1, [r2, #0]
    567c:	9112      	str	r1, [sp, #72]	; 0x48
    567e:	9912      	ldr	r1, [sp, #72]	; 0x48
    5680:	07c9      	lsls	r1, r1, #31
    5682:	d5fa      	bpl.n	567a <PkaAddJcbAfn2Mdf+0x106>
    5684:	491d      	ldr	r1, [pc, #116]	; (56fc <PkaAddJcbAfn2Mdf+0x188>)
    5686:	6019      	str	r1, [r3, #0]
    5688:	6811      	ldr	r1, [r2, #0]
    568a:	9113      	str	r1, [sp, #76]	; 0x4c
    568c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    568e:	07cc      	lsls	r4, r1, #31
    5690:	d5fa      	bpl.n	5688 <PkaAddJcbAfn2Mdf+0x114>
    5692:	490b      	ldr	r1, [pc, #44]	; (56c0 <PkaAddJcbAfn2Mdf+0x14c>)
    5694:	6019      	str	r1, [r3, #0]
    5696:	6811      	ldr	r1, [r2, #0]
    5698:	9114      	str	r1, [sp, #80]	; 0x50
    569a:	9914      	ldr	r1, [sp, #80]	; 0x50
    569c:	07c8      	lsls	r0, r1, #31
    569e:	d5fa      	bpl.n	5696 <PkaAddJcbAfn2Mdf+0x122>
    56a0:	4917      	ldr	r1, [pc, #92]	; (5700 <PkaAddJcbAfn2Mdf+0x18c>)
    56a2:	6019      	str	r1, [r3, #0]
    56a4:	6811      	ldr	r1, [r2, #0]
    56a6:	9115      	str	r1, [sp, #84]	; 0x54
    56a8:	9915      	ldr	r1, [sp, #84]	; 0x54
    56aa:	07c9      	lsls	r1, r1, #31
    56ac:	d5fa      	bpl.n	56a4 <PkaAddJcbAfn2Mdf+0x130>
    56ae:	4a15      	ldr	r2, [pc, #84]	; (5704 <PkaAddJcbAfn2Mdf+0x190>)
    56b0:	601a      	str	r2, [r3, #0]
    56b2:	b016      	add	sp, #88	; 0x58
    56b4:	bd10      	pop	{r4, pc}
    56b6:	bf00      	nop
    56b8:	508410b0 	.word	0x508410b0
    56bc:	50841080 	.word	0x50841080
    56c0:	90410440 	.word	0x90410440
    56c4:	29298600 	.word	0x29298600
    56c8:	c80110d8 	.word	0xc80110d8
    56cc:	90411440 	.word	0x90411440
    56d0:	29211440 	.word	0x29211440
    56d4:	21651440 	.word	0x21651440
    56d8:	90403400 	.word	0x90403400
    56dc:	900c3100 	.word	0x900c3100
    56e0:	900c40c0 	.word	0x900c40c0
    56e4:	292030c0 	.word	0x292030c0
    56e8:	900d9640 	.word	0x900d9640
    56ec:	90604100 	.word	0x90604100
    56f0:	c8451603 	.word	0xc8451603
    56f4:	21118600 	.word	0x21118600
    56f8:	21604100 	.word	0x21604100
    56fc:	c8444659 	.word	0xc8444659
    5700:	90451440 	.word	0x90451440
    5704:	902d1440 	.word	0x902d1440

00005708 <PkaJcb2Afn>:
    5708:	4826      	ldr	r0, [pc, #152]	; (57a4 <PkaJcb2Afn+0x9c>)
    570a:	b570      	push	{r4, r5, r6, lr}
    570c:	4605      	mov	r5, r0
    570e:	b088      	sub	sp, #32
    5710:	6804      	ldr	r4, [r0, #0]
    5712:	9400      	str	r4, [sp, #0]
    5714:	9c00      	ldr	r4, [sp, #0]
    5716:	07e6      	lsls	r6, r4, #31
    5718:	d5fa      	bpl.n	5710 <PkaJcb2Afn+0x8>
    571a:	4c23      	ldr	r4, [pc, #140]	; (57a8 <PkaJcb2Afn+0xa0>)
    571c:	4823      	ldr	r0, [pc, #140]	; (57ac <PkaJcb2Afn+0xa4>)
    571e:	6004      	str	r4, [r0, #0]
    5720:	4c23      	ldr	r4, [pc, #140]	; (57b0 <PkaJcb2Afn+0xa8>)
    5722:	ea44 4383 	orr.w	r3, r4, r3, lsl #18
    5726:	682c      	ldr	r4, [r5, #0]
    5728:	9401      	str	r4, [sp, #4]
    572a:	9c01      	ldr	r4, [sp, #4]
    572c:	07e4      	lsls	r4, r4, #31
    572e:	d5fa      	bpl.n	5726 <PkaJcb2Afn+0x1e>
    5730:	6003      	str	r3, [r0, #0]
    5732:	0193      	lsls	r3, r2, #6
    5734:	ea43 4282 	orr.w	r2, r3, r2, lsl #18
    5738:	f042 4410 	orr.w	r4, r2, #2415919104	; 0x90000000
    573c:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
    5740:	682b      	ldr	r3, [r5, #0]
    5742:	9302      	str	r3, [sp, #8]
    5744:	9b02      	ldr	r3, [sp, #8]
    5746:	07de      	lsls	r6, r3, #31
    5748:	d5fa      	bpl.n	5740 <PkaJcb2Afn+0x38>
    574a:	6004      	str	r4, [r0, #0]
    574c:	682b      	ldr	r3, [r5, #0]
    574e:	9303      	str	r3, [sp, #12]
    5750:	9b03      	ldr	r3, [sp, #12]
    5752:	07db      	lsls	r3, r3, #31
    5754:	d5fa      	bpl.n	574c <PkaJcb2Afn+0x44>
    5756:	4b17      	ldr	r3, [pc, #92]	; (57b4 <PkaJcb2Afn+0xac>)
    5758:	6003      	str	r3, [r0, #0]
    575a:	018b      	lsls	r3, r1, #6
    575c:	ea43 4181 	orr.w	r1, r3, r1, lsl #18
    5760:	f041 4310 	orr.w	r3, r1, #2415919104	; 0x90000000
    5764:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
    5768:	682e      	ldr	r6, [r5, #0]
    576a:	9604      	str	r6, [sp, #16]
    576c:	9e04      	ldr	r6, [sp, #16]
    576e:	07f6      	lsls	r6, r6, #31
    5770:	d5fa      	bpl.n	5768 <PkaJcb2Afn+0x60>
    5772:	6003      	str	r3, [r0, #0]
    5774:	682b      	ldr	r3, [r5, #0]
    5776:	9305      	str	r3, [sp, #20]
    5778:	9b05      	ldr	r3, [sp, #20]
    577a:	07de      	lsls	r6, r3, #31
    577c:	d5fa      	bpl.n	5774 <PkaJcb2Afn+0x6c>
    577e:	6004      	str	r4, [r0, #0]
    5780:	f041 4158 	orr.w	r1, r1, #3623878656	; 0xd8000000
    5784:	682b      	ldr	r3, [r5, #0]
    5786:	9306      	str	r3, [sp, #24]
    5788:	9b06      	ldr	r3, [sp, #24]
    578a:	07dc      	lsls	r4, r3, #31
    578c:	d5fa      	bpl.n	5784 <PkaJcb2Afn+0x7c>
    578e:	6001      	str	r1, [r0, #0]
    5790:	f042 4258 	orr.w	r2, r2, #3623878656	; 0xd8000000
    5794:	682b      	ldr	r3, [r5, #0]
    5796:	9307      	str	r3, [sp, #28]
    5798:	9b07      	ldr	r3, [sp, #28]
    579a:	07db      	lsls	r3, r3, #31
    579c:	d5fa      	bpl.n	5794 <PkaJcb2Afn+0x8c>
    579e:	6002      	str	r2, [r0, #0]
    57a0:	b008      	add	sp, #32
    57a2:	bd70      	pop	{r4, r5, r6, pc}
    57a4:	508410b0 	.word	0x508410b0
    57a8:	290221c0 	.word	0x290221c0
    57ac:	50841080 	.word	0x50841080
    57b0:	98007180 	.word	0x98007180
    57b4:	90186180 	.word	0x90186180

000057b8 <PkaAddAff>:
    57b8:	4b35      	ldr	r3, [pc, #212]	; (5890 <PkaAddAff+0xd8>)
    57ba:	b08e      	sub	sp, #56	; 0x38
    57bc:	4619      	mov	r1, r3
    57be:	681a      	ldr	r2, [r3, #0]
    57c0:	9200      	str	r2, [sp, #0]
    57c2:	9a00      	ldr	r2, [sp, #0]
    57c4:	07d2      	lsls	r2, r2, #31
    57c6:	d5fa      	bpl.n	57be <PkaAddAff+0x6>
    57c8:	4b32      	ldr	r3, [pc, #200]	; (5894 <PkaAddAff+0xdc>)
    57ca:	4a33      	ldr	r2, [pc, #204]	; (5898 <PkaAddAff+0xe0>)
    57cc:	601a      	str	r2, [r3, #0]
    57ce:	680a      	ldr	r2, [r1, #0]
    57d0:	9201      	str	r2, [sp, #4]
    57d2:	9a01      	ldr	r2, [sp, #4]
    57d4:	07d0      	lsls	r0, r2, #31
    57d6:	d5fa      	bpl.n	57ce <PkaAddAff+0x16>
    57d8:	4a30      	ldr	r2, [pc, #192]	; (589c <PkaAddAff+0xe4>)
    57da:	601a      	str	r2, [r3, #0]
    57dc:	680a      	ldr	r2, [r1, #0]
    57de:	9202      	str	r2, [sp, #8]
    57e0:	9a02      	ldr	r2, [sp, #8]
    57e2:	07d2      	lsls	r2, r2, #31
    57e4:	d5fa      	bpl.n	57dc <PkaAddAff+0x24>
    57e6:	4a2e      	ldr	r2, [pc, #184]	; (58a0 <PkaAddAff+0xe8>)
    57e8:	601a      	str	r2, [r3, #0]
    57ea:	680a      	ldr	r2, [r1, #0]
    57ec:	9203      	str	r2, [sp, #12]
    57ee:	9a03      	ldr	r2, [sp, #12]
    57f0:	07d0      	lsls	r0, r2, #31
    57f2:	d5fa      	bpl.n	57ea <PkaAddAff+0x32>
    57f4:	4a2b      	ldr	r2, [pc, #172]	; (58a4 <PkaAddAff+0xec>)
    57f6:	601a      	str	r2, [r3, #0]
    57f8:	680a      	ldr	r2, [r1, #0]
    57fa:	9204      	str	r2, [sp, #16]
    57fc:	9a04      	ldr	r2, [sp, #16]
    57fe:	07d2      	lsls	r2, r2, #31
    5800:	d5fa      	bpl.n	57f8 <PkaAddAff+0x40>
    5802:	4a29      	ldr	r2, [pc, #164]	; (58a8 <PkaAddAff+0xf0>)
    5804:	601a      	str	r2, [r3, #0]
    5806:	680a      	ldr	r2, [r1, #0]
    5808:	9205      	str	r2, [sp, #20]
    580a:	9a05      	ldr	r2, [sp, #20]
    580c:	07d0      	lsls	r0, r2, #31
    580e:	d5fa      	bpl.n	5806 <PkaAddAff+0x4e>
    5810:	4a26      	ldr	r2, [pc, #152]	; (58ac <PkaAddAff+0xf4>)
    5812:	601a      	str	r2, [r3, #0]
    5814:	680a      	ldr	r2, [r1, #0]
    5816:	9206      	str	r2, [sp, #24]
    5818:	9a06      	ldr	r2, [sp, #24]
    581a:	07d2      	lsls	r2, r2, #31
    581c:	d5fa      	bpl.n	5814 <PkaAddAff+0x5c>
    581e:	4a24      	ldr	r2, [pc, #144]	; (58b0 <PkaAddAff+0xf8>)
    5820:	601a      	str	r2, [r3, #0]
    5822:	680a      	ldr	r2, [r1, #0]
    5824:	9207      	str	r2, [sp, #28]
    5826:	9a07      	ldr	r2, [sp, #28]
    5828:	07d0      	lsls	r0, r2, #31
    582a:	d5fa      	bpl.n	5822 <PkaAddAff+0x6a>
    582c:	4a21      	ldr	r2, [pc, #132]	; (58b4 <PkaAddAff+0xfc>)
    582e:	601a      	str	r2, [r3, #0]
    5830:	680a      	ldr	r2, [r1, #0]
    5832:	9208      	str	r2, [sp, #32]
    5834:	9a08      	ldr	r2, [sp, #32]
    5836:	07d2      	lsls	r2, r2, #31
    5838:	d5fa      	bpl.n	5830 <PkaAddAff+0x78>
    583a:	4a1f      	ldr	r2, [pc, #124]	; (58b8 <PkaAddAff+0x100>)
    583c:	601a      	str	r2, [r3, #0]
    583e:	680a      	ldr	r2, [r1, #0]
    5840:	9209      	str	r2, [sp, #36]	; 0x24
    5842:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5844:	07d0      	lsls	r0, r2, #31
    5846:	d5fa      	bpl.n	583e <PkaAddAff+0x86>
    5848:	4a1c      	ldr	r2, [pc, #112]	; (58bc <PkaAddAff+0x104>)
    584a:	601a      	str	r2, [r3, #0]
    584c:	680a      	ldr	r2, [r1, #0]
    584e:	920a      	str	r2, [sp, #40]	; 0x28
    5850:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5852:	07d2      	lsls	r2, r2, #31
    5854:	d5fa      	bpl.n	584c <PkaAddAff+0x94>
    5856:	4a1a      	ldr	r2, [pc, #104]	; (58c0 <PkaAddAff+0x108>)
    5858:	601a      	str	r2, [r3, #0]
    585a:	6808      	ldr	r0, [r1, #0]
    585c:	900b      	str	r0, [sp, #44]	; 0x2c
    585e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5860:	07c0      	lsls	r0, r0, #31
    5862:	d5fa      	bpl.n	585a <PkaAddAff+0xa2>
    5864:	601a      	str	r2, [r3, #0]
    5866:	680a      	ldr	r2, [r1, #0]
    5868:	920c      	str	r2, [sp, #48]	; 0x30
    586a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    586c:	07d0      	lsls	r0, r2, #31
    586e:	d5fa      	bpl.n	5866 <PkaAddAff+0xae>
    5870:	4a14      	ldr	r2, [pc, #80]	; (58c4 <PkaAddAff+0x10c>)
    5872:	601a      	str	r2, [r3, #0]
    5874:	680a      	ldr	r2, [r1, #0]
    5876:	920d      	str	r2, [sp, #52]	; 0x34
    5878:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    587a:	07d2      	lsls	r2, r2, #31
    587c:	d5fa      	bpl.n	5874 <PkaAddAff+0xbc>
    587e:	4a12      	ldr	r2, [pc, #72]	; (58c8 <PkaAddAff+0x110>)
    5880:	210e      	movs	r1, #14
    5882:	601a      	str	r2, [r3, #0]
    5884:	2000      	movs	r0, #0
    5886:	230d      	movs	r3, #13
    5888:	220f      	movs	r2, #15
    588a:	b00e      	add	sp, #56	; 0x38
    588c:	f7ff bf3c 	b.w	5708 <PkaJcb2Afn>
    5890:	508410b0 	.word	0x508410b0
    5894:	50841080 	.word	0x50841080
    5898:	29014380 	.word	0x29014380
    589c:	21396340 	.word	0x21396340
    58a0:	29017080 	.word	0x29017080
    58a4:	21542080 	.word	0x21542080
    58a8:	9034d100 	.word	0x9034d100
    58ac:	903440c0 	.word	0x903440c0
    58b0:	292030c0 	.word	0x292030c0
    58b4:	900d53c0 	.word	0x900d53c0
    58b8:	90384100 	.word	0x90384100
    58bc:	c8082383 	.word	0xc8082383
    58c0:	2110e380 	.word	0x2110e380
    58c4:	21384100 	.word	0x21384100
    58c8:	c80843cf 	.word	0xc80843cf

000058cc <PkaSum2ScalarMullt>:
    58cc:	2301      	movs	r3, #1
    58ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    58d2:	b092      	sub	sp, #72	; 0x48
    58d4:	e9cd 3303 	strd	r3, r3, [sp, #12]
    58d8:	4b62      	ldr	r3, [pc, #392]	; (5a64 <PkaSum2ScalarMullt+0x198>)
    58da:	461d      	mov	r5, r3
    58dc:	681a      	ldr	r2, [r3, #0]
    58de:	9205      	str	r2, [sp, #20]
    58e0:	9a05      	ldr	r2, [sp, #20]
    58e2:	07d2      	lsls	r2, r2, #31
    58e4:	d5fa      	bpl.n	58dc <PkaSum2ScalarMullt+0x10>
    58e6:	4b60      	ldr	r3, [pc, #384]	; (5a68 <PkaSum2ScalarMullt+0x19c>)
    58e8:	4c60      	ldr	r4, [pc, #384]	; (5a6c <PkaSum2ScalarMullt+0x1a0>)
    58ea:	6023      	str	r3, [r4, #0]
    58ec:	4b60      	ldr	r3, [pc, #384]	; (5a70 <PkaSum2ScalarMullt+0x1a4>)
    58ee:	4619      	mov	r1, r3
    58f0:	681a      	ldr	r2, [r3, #0]
    58f2:	9206      	str	r2, [sp, #24]
    58f4:	9a06      	ldr	r2, [sp, #24]
    58f6:	07d7      	lsls	r7, r2, #31
    58f8:	d5fa      	bpl.n	58f0 <PkaSum2ScalarMullt+0x24>
    58fa:	4b5e      	ldr	r3, [pc, #376]	; (5a74 <PkaSum2ScalarMullt+0x1a8>)
    58fc:	681a      	ldr	r2, [r3, #0]
    58fe:	04d6      	lsls	r6, r2, #19
    5900:	f100 80a8 	bmi.w	5a54 <PkaSum2ScalarMullt+0x188>
    5904:	682a      	ldr	r2, [r5, #0]
    5906:	9207      	str	r2, [sp, #28]
    5908:	9a07      	ldr	r2, [sp, #28]
    590a:	07d0      	lsls	r0, r2, #31
    590c:	d5fa      	bpl.n	5904 <PkaSum2ScalarMullt+0x38>
    590e:	4a5a      	ldr	r2, [pc, #360]	; (5a78 <PkaSum2ScalarMullt+0x1ac>)
    5910:	6022      	str	r2, [r4, #0]
    5912:	680a      	ldr	r2, [r1, #0]
    5914:	9208      	str	r2, [sp, #32]
    5916:	9a08      	ldr	r2, [sp, #32]
    5918:	07d2      	lsls	r2, r2, #31
    591a:	d5fa      	bpl.n	5912 <PkaSum2ScalarMullt+0x46>
    591c:	681e      	ldr	r6, [r3, #0]
    591e:	f3c6 3600 	ubfx	r6, r6, #12, #1
    5922:	2e00      	cmp	r6, #0
    5924:	f040 8098 	bne.w	5a58 <PkaSum2ScalarMullt+0x18c>
    5928:	2012      	movs	r0, #18
    592a:	f7ff f8f3 	bl	4b14 <PkaGetRegEffectiveSizeInBits>
    592e:	4607      	mov	r7, r0
    5930:	2013      	movs	r0, #19
    5932:	f7ff f8ef 	bl	4b14 <PkaGetRegEffectiveSizeInBits>
    5936:	4287      	cmp	r7, r0
    5938:	bf8c      	ite	hi
    593a:	2012      	movhi	r0, #18
    593c:	2013      	movls	r0, #19
    593e:	f7ff f8e9 	bl	4b14 <PkaGetRegEffectiveSizeInBits>
    5942:	1e47      	subs	r7, r0, #1
    5944:	f7ff ff38 	bl	57b8 <PkaAddAff>
    5948:	ab03      	add	r3, sp, #12
    594a:	aa01      	add	r2, sp, #4
    594c:	4639      	mov	r1, r7
    594e:	2012      	movs	r0, #18
    5950:	f7ff f926 	bl	4ba0 <PkaGetNextMsBit>
    5954:	ab04      	add	r3, sp, #16
    5956:	4680      	mov	r8, r0
    5958:	aa02      	add	r2, sp, #8
    595a:	4639      	mov	r1, r7
    595c:	2013      	movs	r0, #19
    595e:	f7ff f91f 	bl	4ba0 <PkaGetNextMsBit>
    5962:	eb00 0048 	add.w	r0, r0, r8, lsl #1
    5966:	2802      	cmp	r0, #2
    5968:	d032      	beq.n	59d0 <PkaSum2ScalarMullt+0x104>
    596a:	2803      	cmp	r0, #3
    596c:	d03e      	beq.n	59ec <PkaSum2ScalarMullt+0x120>
    596e:	2801      	cmp	r0, #1
    5970:	d174      	bne.n	5a5c <PkaSum2ScalarMullt+0x190>
    5972:	682b      	ldr	r3, [r5, #0]
    5974:	9309      	str	r3, [sp, #36]	; 0x24
    5976:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5978:	07db      	lsls	r3, r3, #31
    597a:	d5fa      	bpl.n	5972 <PkaSum2ScalarMullt+0xa6>
    597c:	4b3f      	ldr	r3, [pc, #252]	; (5a7c <PkaSum2ScalarMullt+0x1b0>)
    597e:	6023      	str	r3, [r4, #0]
    5980:	682b      	ldr	r3, [r5, #0]
    5982:	930a      	str	r3, [sp, #40]	; 0x28
    5984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5986:	07d8      	lsls	r0, r3, #31
    5988:	d5fa      	bpl.n	5980 <PkaSum2ScalarMullt+0xb4>
    598a:	4b3d      	ldr	r3, [pc, #244]	; (5a80 <PkaSum2ScalarMullt+0x1b4>)
    598c:	6023      	str	r3, [r4, #0]
    598e:	682b      	ldr	r3, [r5, #0]
    5990:	930f      	str	r3, [sp, #60]	; 0x3c
    5992:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5994:	07d9      	lsls	r1, r3, #31
    5996:	d5fa      	bpl.n	598e <PkaSum2ScalarMullt+0xc2>
    5998:	4b3a      	ldr	r3, [pc, #232]	; (5a84 <PkaSum2ScalarMullt+0x1b8>)
    599a:	6023      	str	r3, [r4, #0]
    599c:	682b      	ldr	r3, [r5, #0]
    599e:	9310      	str	r3, [sp, #64]	; 0x40
    59a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    59a2:	07da      	lsls	r2, r3, #31
    59a4:	d5fa      	bpl.n	599c <PkaSum2ScalarMullt+0xd0>
    59a6:	4b38      	ldr	r3, [pc, #224]	; (5a88 <PkaSum2ScalarMullt+0x1bc>)
    59a8:	6023      	str	r3, [r4, #0]
    59aa:	682b      	ldr	r3, [r5, #0]
    59ac:	9311      	str	r3, [sp, #68]	; 0x44
    59ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
    59b0:	07db      	lsls	r3, r3, #31
    59b2:	d5fa      	bpl.n	59aa <PkaSum2ScalarMullt+0xde>
    59b4:	4b35      	ldr	r3, [pc, #212]	; (5a8c <PkaSum2ScalarMullt+0x1c0>)
    59b6:	6023      	str	r3, [r4, #0]
    59b8:	3f01      	subs	r7, #1
    59ba:	d525      	bpl.n	5a08 <PkaSum2ScalarMullt+0x13c>
    59bc:	2310      	movs	r3, #16
    59be:	2219      	movs	r2, #25
    59c0:	2118      	movs	r1, #24
    59c2:	2000      	movs	r0, #0
    59c4:	f7ff fea0 	bl	5708 <PkaJcb2Afn>
    59c8:	4630      	mov	r0, r6
    59ca:	b012      	add	sp, #72	; 0x48
    59cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59d0:	682b      	ldr	r3, [r5, #0]
    59d2:	930b      	str	r3, [sp, #44]	; 0x2c
    59d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    59d6:	07d9      	lsls	r1, r3, #31
    59d8:	d5fa      	bpl.n	59d0 <PkaSum2ScalarMullt+0x104>
    59da:	4b2d      	ldr	r3, [pc, #180]	; (5a90 <PkaSum2ScalarMullt+0x1c4>)
    59dc:	6023      	str	r3, [r4, #0]
    59de:	682b      	ldr	r3, [r5, #0]
    59e0:	930c      	str	r3, [sp, #48]	; 0x30
    59e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    59e4:	07da      	lsls	r2, r3, #31
    59e6:	d5fa      	bpl.n	59de <PkaSum2ScalarMullt+0x112>
    59e8:	4b2a      	ldr	r3, [pc, #168]	; (5a94 <PkaSum2ScalarMullt+0x1c8>)
    59ea:	e7cf      	b.n	598c <PkaSum2ScalarMullt+0xc0>
    59ec:	682b      	ldr	r3, [r5, #0]
    59ee:	930d      	str	r3, [sp, #52]	; 0x34
    59f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    59f2:	07db      	lsls	r3, r3, #31
    59f4:	d5fa      	bpl.n	59ec <PkaSum2ScalarMullt+0x120>
    59f6:	4b28      	ldr	r3, [pc, #160]	; (5a98 <PkaSum2ScalarMullt+0x1cc>)
    59f8:	6023      	str	r3, [r4, #0]
    59fa:	682b      	ldr	r3, [r5, #0]
    59fc:	930e      	str	r3, [sp, #56]	; 0x38
    59fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5a00:	07d8      	lsls	r0, r3, #31
    5a02:	d5fa      	bpl.n	59fa <PkaSum2ScalarMullt+0x12e>
    5a04:	4b25      	ldr	r3, [pc, #148]	; (5a9c <PkaSum2ScalarMullt+0x1d0>)
    5a06:	e7c1      	b.n	598c <PkaSum2ScalarMullt+0xc0>
    5a08:	ab03      	add	r3, sp, #12
    5a0a:	aa01      	add	r2, sp, #4
    5a0c:	4639      	mov	r1, r7
    5a0e:	2012      	movs	r0, #18
    5a10:	f7ff f8c6 	bl	4ba0 <PkaGetNextMsBit>
    5a14:	ab04      	add	r3, sp, #16
    5a16:	4604      	mov	r4, r0
    5a18:	aa02      	add	r2, sp, #8
    5a1a:	4639      	mov	r1, r7
    5a1c:	2013      	movs	r0, #19
    5a1e:	f7ff f8bf 	bl	4ba0 <PkaGetNextMsBit>
    5a22:	eb10 0444 	adds.w	r4, r0, r4, lsl #1
    5a26:	d102      	bne.n	5a2e <PkaSum2ScalarMullt+0x162>
    5a28:	f7ff fc12 	bl	5250 <PkaDoubleMdf2Mdf>
    5a2c:	e7c4      	b.n	59b8 <PkaSum2ScalarMullt+0xec>
    5a2e:	f7ff fce5 	bl	53fc <PkaDoubleMdf2Jcb>
    5a32:	2c02      	cmp	r4, #2
    5a34:	d008      	beq.n	5a48 <PkaSum2ScalarMullt+0x17c>
    5a36:	2c03      	cmp	r4, #3
    5a38:	d009      	beq.n	5a4e <PkaSum2ScalarMullt+0x182>
    5a3a:	2c01      	cmp	r4, #1
    5a3c:	d110      	bne.n	5a60 <PkaSum2ScalarMullt+0x194>
    5a3e:	2117      	movs	r1, #23
    5a40:	2016      	movs	r0, #22
    5a42:	f7ff fd97 	bl	5574 <PkaAddJcbAfn2Mdf>
    5a46:	e7b7      	b.n	59b8 <PkaSum2ScalarMullt+0xec>
    5a48:	2115      	movs	r1, #21
    5a4a:	2014      	movs	r0, #20
    5a4c:	e7f9      	b.n	5a42 <PkaSum2ScalarMullt+0x176>
    5a4e:	210f      	movs	r1, #15
    5a50:	200e      	movs	r0, #14
    5a52:	e7f6      	b.n	5a42 <PkaSum2ScalarMullt+0x176>
    5a54:	4e12      	ldr	r6, [pc, #72]	; (5aa0 <PkaSum2ScalarMullt+0x1d4>)
    5a56:	e7b7      	b.n	59c8 <PkaSum2ScalarMullt+0xfc>
    5a58:	4e12      	ldr	r6, [pc, #72]	; (5aa4 <PkaSum2ScalarMullt+0x1d8>)
    5a5a:	e7b5      	b.n	59c8 <PkaSum2ScalarMullt+0xfc>
    5a5c:	4e12      	ldr	r6, [pc, #72]	; (5aa8 <PkaSum2ScalarMullt+0x1dc>)
    5a5e:	e7b3      	b.n	59c8 <PkaSum2ScalarMullt+0xfc>
    5a60:	4e12      	ldr	r6, [pc, #72]	; (5aac <PkaSum2ScalarMullt+0x1e0>)
    5a62:	e7b1      	b.n	59c8 <PkaSum2ScalarMullt+0xfc>
    5a64:	508410b0 	.word	0x508410b0
    5a68:	514a0800 	.word	0x514a0800
    5a6c:	50841080 	.word	0x50841080
    5a70:	508410b4 	.word	0x508410b4
    5a74:	50841088 	.word	0x50841088
    5a78:	514e0800 	.word	0x514e0800
    5a7c:	495a0600 	.word	0x495a0600
    5a80:	495e0640 	.word	0x495e0640
    5a84:	41420400 	.word	0x41420400
    5a88:	49421400 	.word	0x49421400
    5a8c:	492e0440 	.word	0x492e0440
    5a90:	49520600 	.word	0x49520600
    5a94:	49560640 	.word	0x49560640
    5a98:	493a0600 	.word	0x493a0600
    5a9c:	493e0640 	.word	0x493e0640
    5aa0:	00f10806 	.word	0x00f10806
    5aa4:	00f10807 	.word	0x00f10807
    5aa8:	00f10804 	.word	0x00f10804
    5aac:	00f10805 	.word	0x00f10805

00005ab0 <SaSi_HalClearInterruptBit>:
    5ab0:	4b01      	ldr	r3, [pc, #4]	; (5ab8 <SaSi_HalClearInterruptBit+0x8>)
    5ab2:	6018      	str	r0, [r3, #0]
    5ab4:	4770      	bx	lr
    5ab6:	bf00      	nop
    5ab8:	50841a08 	.word	0x50841a08

00005abc <SaSi_HalMaskInterrupt>:
    5abc:	4b01      	ldr	r3, [pc, #4]	; (5ac4 <SaSi_HalMaskInterrupt+0x8>)
    5abe:	6018      	str	r0, [r3, #0]
    5ac0:	4770      	bx	lr
    5ac2:	bf00      	nop
    5ac4:	50841a04 	.word	0x50841a04

00005ac8 <SaSi_HalWaitInterrupt>:
    5ac8:	4a03      	ldr	r2, [pc, #12]	; (5ad8 <SaSi_HalWaitInterrupt+0x10>)
    5aca:	6813      	ldr	r3, [r2, #0]
    5acc:	4218      	tst	r0, r3
    5ace:	d0fc      	beq.n	5aca <SaSi_HalWaitInterrupt+0x2>
    5ad0:	4a02      	ldr	r2, [pc, #8]	; (5adc <SaSi_HalWaitInterrupt+0x14>)
    5ad2:	6010      	str	r0, [r2, #0]
    5ad4:	4618      	mov	r0, r3
    5ad6:	4770      	bx	lr
    5ad8:	50841a00 	.word	0x50841a00
    5adc:	50841a08 	.word	0x50841a08

00005ae0 <flash_area_id_from_multi_image_slot>:
 * MCUBoot uses continuous numbering for the primary slot, the secondary slot,
 * and the scratch while zephyr might number it differently.
 */
int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    5ae0:	b129      	cbz	r1, 5aee <flash_area_id_from_multi_image_slot+0xe>
    5ae2:	2901      	cmp	r1, #1
    5ae4:	bf14      	ite	ne
    5ae6:	f06f 0015 	mvnne.w	r0, #21
    5aea:	2007      	moveq	r0, #7
    5aec:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    5aee:	2003      	movs	r0, #3
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
#endif
    }

    return -EINVAL; /* flash_area_open will fail on that */
}
    5af0:	4770      	bx	lr

00005af2 <flash_area_get_device_id>:

uint8_t flash_area_get_device_id(const struct flash_area *fa)
{
	(void)fa;
	return FLASH_DEVICE_ID;
}
    5af2:	2000      	movs	r0, #0
    5af4:	4770      	bx	lr

00005af6 <os_heap_init>:
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
}
#else
void os_heap_init(void)
{
}
    5af6:	4770      	bx	lr

00005af8 <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    5af8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5afc:	460e      	mov	r6, r1
    5afe:	4617      	mov	r7, r2
    5b00:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    5b02:	4604      	mov	r4, r0
    5b04:	b928      	cbnz	r0, 5b12 <bootutil_tlv_iter_begin+0x1a>
        return -1;
    5b06:	f04f 38ff 	mov.w	r8, #4294967295
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    5b0a:	4640      	mov	r0, r8
    5b0c:	b003      	add	sp, #12
    5b0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    5b12:	2900      	cmp	r1, #0
    5b14:	d0f7      	beq.n	5b06 <bootutil_tlv_iter_begin+0xe>
    5b16:	2a00      	cmp	r2, #0
    5b18:	d0f5      	beq.n	5b06 <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    5b1a:	68cb      	ldr	r3, [r1, #12]
    5b1c:	890d      	ldrh	r5, [r1, #8]
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    5b1e:	4638      	mov	r0, r7
    off_ = BOOT_TLV_OFF(hdr);
    5b20:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    5b22:	2304      	movs	r3, #4
    5b24:	4629      	mov	r1, r5
    5b26:	eb0d 0203 	add.w	r2, sp, r3
    5b2a:	f000 fc36 	bl	639a <flash_area_read>
    5b2e:	4680      	mov	r8, r0
    5b30:	2800      	cmp	r0, #0
    5b32:	d1e8      	bne.n	5b06 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5b34:	f646 1208 	movw	r2, #26888	; 0x6908
    5b38:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    5b3c:	8973      	ldrh	r3, [r6, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5b3e:	4291      	cmp	r1, r2
    5b40:	d123      	bne.n	5b8a <bootutil_tlv_iter_begin+0x92>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    5b42:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    5b46:	4299      	cmp	r1, r3
    5b48:	d1dd      	bne.n	5b06 <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    5b4a:	2304      	movs	r3, #4
    5b4c:	4638      	mov	r0, r7
    5b4e:	eb0d 0203 	add.w	r2, sp, r3
    5b52:	4429      	add	r1, r5
    5b54:	f000 fc21 	bl	639a <flash_area_read>
    5b58:	2800      	cmp	r0, #0
    5b5a:	d1d4      	bne.n	5b06 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    5b5c:	f646 1307 	movw	r3, #26887	; 0x6907
    5b60:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5b64:	429a      	cmp	r2, r3
    5b66:	d1ce      	bne.n	5b06 <bootutil_tlv_iter_begin+0xe>
    it->prot = prot;
    5b68:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    5b6c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->prot = prot;
    5b70:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    5b72:	8973      	ldrh	r3, [r6, #10]
    it->fap = fap;
    5b74:	e9c4 6700 	strd	r6, r7, [r4]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    5b78:	442b      	add	r3, r5
    5b7a:	60e3      	str	r3, [r4, #12]
    it->tlv_off = off_ + sizeof(info);
    5b7c:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    5b7e:	4413      	add	r3, r2
    it->type = type;
    5b80:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    5b84:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    5b86:	6125      	str	r5, [r4, #16]
    return 0;
    5b88:	e7bf      	b.n	5b0a <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    5b8a:	2b00      	cmp	r3, #0
    5b8c:	d0e6      	beq.n	5b5c <bootutil_tlv_iter_begin+0x64>
    5b8e:	e7ba      	b.n	5b06 <bootutil_tlv_iter_begin+0xe>

00005b90 <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    5b90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5b94:	460f      	mov	r7, r1
    5b96:	4690      	mov	r8, r2
    5b98:	461e      	mov	r6, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    5b9a:	4604      	mov	r4, r0
    5b9c:	b920      	cbnz	r0, 5ba8 <bootutil_tlv_iter_next+0x18>
        return -1;
    5b9e:	f04f 30ff 	mov.w	r0, #4294967295

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    5ba2:	b003      	add	sp, #12
    5ba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    5ba8:	6803      	ldr	r3, [r0, #0]
    5baa:	2b00      	cmp	r3, #0
    5bac:	d0f7      	beq.n	5b9e <bootutil_tlv_iter_next+0xe>
    5bae:	6843      	ldr	r3, [r0, #4]
    5bb0:	2b00      	cmp	r3, #0
    5bb2:	d0f4      	beq.n	5b9e <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    5bb4:	f64f 79ff 	movw	r9, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    5bb8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    5bbc:	429a      	cmp	r2, r3
    5bbe:	d216      	bcs.n	5bee <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    5bc0:	6823      	ldr	r3, [r4, #0]
    5bc2:	895b      	ldrh	r3, [r3, #10]
    5bc4:	b123      	cbz	r3, 5bd0 <bootutil_tlv_iter_next+0x40>
    5bc6:	68e3      	ldr	r3, [r4, #12]
    5bc8:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    5bca:	bf04      	itt	eq
    5bcc:	3304      	addeq	r3, #4
    5bce:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    5bd0:	2304      	movs	r3, #4
    5bd2:	6921      	ldr	r1, [r4, #16]
    5bd4:	6860      	ldr	r0, [r4, #4]
    5bd6:	eb0d 0203 	add.w	r2, sp, r3
    5bda:	f000 fbde 	bl	639a <flash_area_read>
        if (rc) {
    5bde:	2800      	cmp	r0, #0
    5be0:	d1dd      	bne.n	5b9e <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    5be2:	7aa3      	ldrb	r3, [r4, #10]
    5be4:	6925      	ldr	r5, [r4, #16]
    5be6:	b123      	cbz	r3, 5bf2 <bootutil_tlv_iter_next+0x62>
    5be8:	68e3      	ldr	r3, [r4, #12]
    5bea:	42ab      	cmp	r3, r5
    5bec:	d801      	bhi.n	5bf2 <bootutil_tlv_iter_next+0x62>
            return 1;
    5bee:	2001      	movs	r0, #1
    5bf0:	e7d7      	b.n	5ba2 <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    5bf2:	8921      	ldrh	r1, [r4, #8]
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    5bf4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    5bf8:	4549      	cmp	r1, r9
    5bfa:	f102 0304 	add.w	r3, r2, #4
    5bfe:	d003      	beq.n	5c08 <bootutil_tlv_iter_next+0x78>
    5c00:	f8bd c004 	ldrh.w	ip, [sp, #4]
    5c04:	458c      	cmp	ip, r1
    5c06:	d10b      	bne.n	5c20 <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    5c08:	b116      	cbz	r6, 5c10 <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    5c0a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5c0e:	8031      	strh	r1, [r6, #0]
            *off = it->tlv_off + sizeof(tlv);
    5c10:	3504      	adds	r5, #4
    5c12:	603d      	str	r5, [r7, #0]
            *len = tlv.it_len;
    5c14:	f8a8 2000 	strh.w	r2, [r8]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    5c18:	6922      	ldr	r2, [r4, #16]
    5c1a:	4413      	add	r3, r2
    5c1c:	6123      	str	r3, [r4, #16]
            return 0;
    5c1e:	e7c0      	b.n	5ba2 <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    5c20:	442b      	add	r3, r5
    5c22:	6123      	str	r3, [r4, #16]
    5c24:	e7c8      	b.n	5bb8 <bootutil_tlv_iter_next+0x28>

00005c26 <bootutil_read_bigint>:
{
    5c26:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5c28:	460c      	mov	r4, r1
    5c2a:	4606      	mov	r6, r0
    5c2c:	4611      	mov	r1, r2
    if (mbedtls_asn1_get_tag(cp, end, &len, MBEDTLS_ASN1_INTEGER)) {
    5c2e:	2302      	movs	r3, #2
    5c30:	4620      	mov	r0, r4
    5c32:	aa01      	add	r2, sp, #4
    5c34:	f000 fa3c 	bl	60b0 <mbedtls_asn1_get_tag>
    5c38:	4605      	mov	r5, r0
    5c3a:	b9e8      	cbnz	r0, 5c78 <bootutil_read_bigint+0x52>
    if (len >= NUM_ECC_BYTES) {
    5c3c:	9a01      	ldr	r2, [sp, #4]
    5c3e:	2a1f      	cmp	r2, #31
    5c40:	d90e      	bls.n	5c60 <bootutil_read_bigint+0x3a>
        memcpy(i, *cp + len - NUM_ECC_BYTES, NUM_ECC_BYTES);
    5c42:	f1a2 0120 	sub.w	r1, r2, #32
    5c46:	4630      	mov	r0, r6
    5c48:	2220      	movs	r2, #32
    5c4a:	6823      	ldr	r3, [r4, #0]
    5c4c:	4419      	add	r1, r3
        memcpy(i + NUM_ECC_BYTES - len, *cp, len);
    5c4e:	f000 fc65 	bl	651c <memcpy>
    *cp += len;
    5c52:	6823      	ldr	r3, [r4, #0]
    5c54:	9a01      	ldr	r2, [sp, #4]
    5c56:	4413      	add	r3, r2
    5c58:	6023      	str	r3, [r4, #0]
}
    5c5a:	4628      	mov	r0, r5
    5c5c:	b002      	add	sp, #8
    5c5e:	bd70      	pop	{r4, r5, r6, pc}
        memset(i, 0, NUM_ECC_BYTES - len);
    5c60:	4601      	mov	r1, r0
    5c62:	f1c2 0220 	rsb	r2, r2, #32
    5c66:	4630      	mov	r0, r6
    5c68:	f000 fc63 	bl	6532 <memset>
        memcpy(i + NUM_ECC_BYTES - len, *cp, len);
    5c6c:	9a01      	ldr	r2, [sp, #4]
    5c6e:	6821      	ldr	r1, [r4, #0]
    5c70:	f1c2 0020 	rsb	r0, r2, #32
    5c74:	4430      	add	r0, r6
    5c76:	e7ea      	b.n	5c4e <bootutil_read_bigint+0x28>
        return -3;
    5c78:	f06f 0502 	mvn.w	r5, #2
    5c7c:	e7ed      	b.n	5c5a <bootutil_read_bigint+0x34>

00005c7e <boot_fih_memequal>:
    return memcmp(s1, s2, n);
    5c7e:	f000 bc3c 	b.w	64fa <memcmp>

00005c82 <boot_trailer_sz>:
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    5c82:	f44f 73c0 	mov.w	r3, #384	; 0x180
    5c86:	4358      	muls	r0, r3
}
    5c88:	3030      	adds	r0, #48	; 0x30
    5c8a:	4770      	bx	lr

00005c8c <boot_status_entries>:
    if (flash_area_get_id(fap) == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    5c8c:	780b      	ldrb	r3, [r1, #0]
    5c8e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    5c92:	2b03      	cmp	r3, #3
}
    5c94:	bf14      	ite	ne
    5c96:	f04f 30ff 	movne.w	r0, #4294967295
    5c9a:	f44f 70c0 	moveq.w	r0, #384	; 0x180
    5c9e:	4770      	bx	lr

00005ca0 <boot_status_off>:
{
    5ca0:	b510      	push	{r4, lr}
    5ca2:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    5ca4:	f000 fbc8 	bl	6438 <flash_area_align>
}
    5ca8:	f44f 72c0 	mov.w	r2, #384	; 0x180
    return flash_area_get_size(fap) - off_from_end;
    5cac:	68a3      	ldr	r3, [r4, #8]
    5cae:	3b30      	subs	r3, #48	; 0x30
}
    5cb0:	fb02 3010 	mls	r0, r2, r0, r3
    5cb4:	bd10      	pop	{r4, pc}

00005cb6 <boot_write_copy_done>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    5cb6:	6881      	ldr	r1, [r0, #8]

    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    5cb8:	2201      	movs	r2, #1
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    5cba:	3918      	subs	r1, #24
    5cbc:	f021 0107 	bic.w	r1, r1, #7
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    5cc0:	3908      	subs	r1, #8
    5cc2:	f000 be7c 	b.w	69be <boot_write_trailer_flag>

00005cc6 <boot_write_swap_size>:
}

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    5cc6:	b513      	push	{r0, r1, r4, lr}
    5cc8:	4604      	mov	r4, r0
    5cca:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    5ccc:	f000 fe14 	bl	68f8 <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)flash_area_get_off(fap) + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    5cd0:	2304      	movs	r3, #4
    5cd2:	f1a0 0108 	sub.w	r1, r0, #8
    5cd6:	eb0d 0203 	add.w	r2, sp, r3
    5cda:	4620      	mov	r0, r4
    5cdc:	f000 fe43 	bl	6966 <boot_write_trailer>
}
    5ce0:	b002      	add	sp, #8
    5ce2:	bd10      	pop	{r4, pc}

00005ce4 <boot_read_image_headers>:
{
    5ce4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5ce6:	4613      	mov	r3, r2
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5ce8:	9201      	str	r2, [sp, #4]
{
    5cea:	460e      	mov	r6, r1
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5cec:	4602      	mov	r2, r0
    5cee:	2100      	movs	r1, #0
{
    5cf0:	4605      	mov	r5, r0
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5cf2:	f7fb f835 	bl	d60 <boot_read_image_header>
        if (rc != 0) {
    5cf6:	4604      	mov	r4, r0
    5cf8:	b950      	cbnz	r0, 5d10 <boot_read_image_headers+0x2c>
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5cfa:	2101      	movs	r1, #1
    5cfc:	4628      	mov	r0, r5
    5cfe:	9b01      	ldr	r3, [sp, #4]
    5d00:	f105 022c 	add.w	r2, r5, #44	; 0x2c
    5d04:	f7fb f82c 	bl	d60 <boot_read_image_header>
        if (rc != 0) {
    5d08:	b110      	cbz	r0, 5d10 <boot_read_image_headers+0x2c>
            if (i > 0 && !require_all) {
    5d0a:	2e00      	cmp	r6, #0
    5d0c:	bf18      	it	ne
    5d0e:	4604      	movne	r4, r0
}
    5d10:	4620      	mov	r0, r4
    5d12:	b002      	add	sp, #8
    5d14:	bd70      	pop	{r4, r5, r6, pc}

00005d16 <boot_read_image_size.isra.0>:
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    5d16:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5d18:	4605      	mov	r5, r0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    5d1a:	2000      	movs	r0, #0
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    5d1c:	460c      	mov	r4, r1
    5d1e:	4616      	mov	r6, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    5d20:	f7ff fede 	bl	5ae0 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    5d24:	4669      	mov	r1, sp
    5d26:	b2c0      	uxtb	r0, r0
    5d28:	f7fb fea8 	bl	1a7c <flash_area_open>
    if (rc != 0) {
    5d2c:	bb30      	cbnz	r0, 5d7c <boot_read_image_size.isra.0+0x66>
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    5d2e:	212c      	movs	r1, #44	; 0x2c
    5d30:	fb01 5404 	mla	r4, r1, r4, r5
    5d34:	8921      	ldrh	r1, [r4, #8]
    5d36:	68e3      	ldr	r3, [r4, #12]
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    5d38:	9800      	ldr	r0, [sp, #0]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    5d3a:	18cd      	adds	r5, r1, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    5d3c:	2304      	movs	r3, #4
    5d3e:	4629      	mov	r1, r5
    5d40:	eb0d 0203 	add.w	r2, sp, r3
    5d44:	f000 fb29 	bl	639a <flash_area_read>
    5d48:	b9c0      	cbnz	r0, 5d7c <boot_read_image_size.isra.0+0x66>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5d4a:	f646 1308 	movw	r3, #26888	; 0x6908
    5d4e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    5d52:	8964      	ldrh	r4, [r4, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5d54:	429a      	cmp	r2, r3
    5d56:	d116      	bne.n	5d86 <boot_read_image_size.isra.0+0x70>
        if (protect_tlv_size != info.it_tlv_tot) {
    5d58:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5d5c:	429c      	cmp	r4, r3
    5d5e:	d10d      	bne.n	5d7c <boot_read_image_size.isra.0+0x66>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    5d60:	2304      	movs	r3, #4
    5d62:	9800      	ldr	r0, [sp, #0]
    5d64:	eb0d 0203 	add.w	r2, sp, r3
    5d68:	1961      	adds	r1, r4, r5
    5d6a:	f000 fb16 	bl	639a <flash_area_read>
    5d6e:	b928      	cbnz	r0, 5d7c <boot_read_image_size.isra.0+0x66>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    5d70:	f646 1307 	movw	r3, #26887	; 0x6907
    5d74:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5d78:	429a      	cmp	r2, r3
    5d7a:	d007      	beq.n	5d8c <boot_read_image_size.isra.0+0x76>
    flash_area_close(fap);
    5d7c:	9800      	ldr	r0, [sp, #0]
    5d7e:	f000 fb0b 	bl	6398 <flash_area_close>
}
    5d82:	b002      	add	sp, #8
    5d84:	bd70      	pop	{r4, r5, r6, pc}
    } else if (protect_tlv_size != 0) {
    5d86:	2c00      	cmp	r4, #0
    5d88:	d0f2      	beq.n	5d70 <boot_read_image_size.isra.0+0x5a>
    5d8a:	e7f7      	b.n	5d7c <boot_read_image_size.isra.0+0x66>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    5d8c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    5d90:	4421      	add	r1, r4
    5d92:	4429      	add	r1, r5
    5d94:	6031      	str	r1, [r6, #0]
    rc = 0;
    5d96:	e7f1      	b.n	5d7c <boot_read_image_size.isra.0+0x66>

00005d98 <boot_read_sectors>:
{
    5d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    5d9a:	2580      	movs	r5, #128	; 0x80
{
    5d9c:	4604      	mov	r4, r0
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5d9e:	6a42      	ldr	r2, [r0, #36]	; 0x24
    5da0:	a901      	add	r1, sp, #4
    5da2:	2003      	movs	r0, #3
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    5da4:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5da6:	f7fb fe87 	bl	1ab8 <flash_area_get_sectors>
    if (rc != 0) {
    5daa:	b958      	cbnz	r0, 5dc4 <boot_read_sectors+0x2c>
    *out_num_sectors = num_sectors;
    5dac:	9b01      	ldr	r3, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5dae:	2007      	movs	r0, #7
    5db0:	6d22      	ldr	r2, [r4, #80]	; 0x50
    *out_num_sectors = num_sectors;
    5db2:	62a3      	str	r3, [r4, #40]	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5db4:	a901      	add	r1, sp, #4
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    5db6:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5db8:	f7fb fe7e 	bl	1ab8 <flash_area_get_sectors>
    if (rc != 0) {
    5dbc:	4605      	mov	r5, r0
    5dbe:	b128      	cbz	r0, 5dcc <boot_read_sectors+0x34>
        return BOOT_EFLASH_SEC;
    5dc0:	2509      	movs	r5, #9
    5dc2:	e000      	b.n	5dc6 <boot_read_sectors+0x2e>
        return BOOT_EFLASH;
    5dc4:	2501      	movs	r5, #1
}
    5dc6:	4628      	mov	r0, r5
    5dc8:	b003      	add	sp, #12
    5dca:	bd30      	pop	{r4, r5, pc}
    *out_num_sectors = num_sectors;
    5dcc:	9b01      	ldr	r3, [sp, #4]
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    5dce:	6a20      	ldr	r0, [r4, #32]
    *out_num_sectors = num_sectors;
    5dd0:	6563      	str	r3, [r4, #84]	; 0x54
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    5dd2:	f000 fb31 	bl	6438 <flash_area_align>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    5dd6:	65e0      	str	r0, [r4, #92]	; 0x5c
    return 0;
    5dd8:	e7f5      	b.n	5dc6 <boot_read_sectors+0x2e>

00005dda <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    5dda:	2301      	movs	r3, #1
    5ddc:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    5dde:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    5de2:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    5de4:	2300      	movs	r3, #0
    bs->source = 0;
    5de6:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    5dea:	4770      	bx	lr

00005dec <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    5dec:	7943      	ldrb	r3, [r0, #5]
    5dee:	2b01      	cmp	r3, #1
    5df0:	d107      	bne.n	5e02 <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    5df2:	6803      	ldr	r3, [r0, #0]
    5df4:	2b01      	cmp	r3, #1
    5df6:	d104      	bne.n	5e02 <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    5df8:	7900      	ldrb	r0, [r0, #4]
    5dfa:	1e43      	subs	r3, r0, #1
    5dfc:	4258      	negs	r0, r3
    5dfe:	4158      	adcs	r0, r3
    5e00:	4770      	bx	lr
    5e02:	2000      	movs	r0, #0
}
    5e04:	4770      	bx	lr

00005e06 <boot_write_status>:
{
    5e06:	b570      	push	{r4, r5, r6, lr}
    5e08:	b086      	sub	sp, #24
    5e0a:	4606      	mov	r6, r0
    5e0c:	460d      	mov	r5, r1
    rc = flash_area_open(area_id, &fap);
    5e0e:	2003      	movs	r0, #3
    5e10:	a903      	add	r1, sp, #12
    5e12:	f7fb fe33 	bl	1a7c <flash_area_open>
    if (rc != 0) {
    5e16:	bb30      	cbnz	r0, 5e66 <boot_write_status+0x60>
    off = boot_status_off(fap) +
    5e18:	9803      	ldr	r0, [sp, #12]
    5e1a:	f7ff ff41 	bl	5ca0 <boot_status_off>
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    5e1e:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    off = boot_status_off(fap) +
    5e20:	4604      	mov	r4, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    5e22:	4628      	mov	r0, r5
    5e24:	f000 f8e5 	bl	5ff2 <boot_status_internal_off>
    off = boot_status_off(fap) +
    5e28:	4404      	add	r4, r0
    align = flash_area_align(fap);
    5e2a:	9803      	ldr	r0, [sp, #12]
    5e2c:	f000 fb04 	bl	6438 <flash_area_align>
    5e30:	9001      	str	r0, [sp, #4]
    erased_val = flash_area_erased_val(fap);
    5e32:	9803      	ldr	r0, [sp, #12]
    5e34:	f000 fb09 	bl	644a <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    5e38:	2208      	movs	r2, #8
    erased_val = flash_area_erased_val(fap);
    5e3a:	4601      	mov	r1, r0
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    5e3c:	a804      	add	r0, sp, #16
    5e3e:	f000 fb78 	bl	6532 <memset>
    buf[0] = bs->state;
    5e42:	792a      	ldrb	r2, [r5, #4]
    rc = flash_area_write(fap, off, buf, align);
    5e44:	4621      	mov	r1, r4
    buf[0] = bs->state;
    5e46:	f88d 2010 	strb.w	r2, [sp, #16]
    rc = flash_area_write(fap, off, buf, align);
    5e4a:	9b01      	ldr	r3, [sp, #4]
    5e4c:	9803      	ldr	r0, [sp, #12]
    5e4e:	aa04      	add	r2, sp, #16
    5e50:	f000 fabf 	bl	63d2 <flash_area_write>
    if (rc != 0) {
    5e54:	1e04      	subs	r4, r0, #0
    flash_area_close(fap);
    5e56:	9803      	ldr	r0, [sp, #12]
    if (rc != 0) {
    5e58:	bf18      	it	ne
    5e5a:	2401      	movne	r4, #1
    flash_area_close(fap);
    5e5c:	f000 fa9c 	bl	6398 <flash_area_close>
}
    5e60:	4620      	mov	r0, r4
    5e62:	b006      	add	sp, #24
    5e64:	bd70      	pop	{r4, r5, r6, pc}
        return BOOT_EFLASH;
    5e66:	2401      	movs	r4, #1
    5e68:	e7fa      	b.n	5e60 <boot_write_status+0x5a>

00005e6a <boot_erase_region>:
    return flash_area_erase(fap, off, sz);
    5e6a:	f000 bace 	b.w	640a <flash_area_erase>

00005e6e <swap_erase_trailer_sectors>:

#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)
int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    5e6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5e72:	460e      	mov	r6, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", flash_area_get_id(fap));

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    5e74:	2100      	movs	r1, #0
{
    5e76:	4607      	mov	r7, r0
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    5e78:	4608      	mov	r0, r1
    5e7a:	f7ff fe31 	bl	5ae0 <flash_area_id_from_multi_image_slot>
    5e7e:	4604      	mov	r4, r0
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    5e80:	2101      	movs	r1, #1
    5e82:	2000      	movs	r0, #0
    5e84:	f7ff fe2c 	bl	5ae0 <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (flash_area_get_id(fap) == fa_id_primary) {
    5e88:	7833      	ldrb	r3, [r6, #0]
    5e8a:	429c      	cmp	r4, r3
    5e8c:	d021      	beq.n	5ed2 <swap_erase_trailer_sectors+0x64>
        slot = BOOT_PRIMARY_SLOT;
    } else if (flash_area_get_id(fap) == fa_id_secondary) {
    5e8e:	4298      	cmp	r0, r3
    5e90:	d121      	bne.n	5ed6 <swap_erase_trailer_sectors+0x68>
        slot = BOOT_SECONDARY_SLOT;
    5e92:	2501      	movs	r5, #1
    return BOOT_IMG(state, slot).num_sectors;
    5e94:	232c      	movs	r3, #44	; 0x2c
    5e96:	fb03 7505 	mla	r5, r3, r5, r7
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    5e9a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    sector = boot_img_num_sectors(state, slot) - 1;
    5e9c:	6aac      	ldr	r4, [r5, #40]	; 0x28
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    5e9e:	f7ff fef0 	bl	5c82 <boot_trailer_sz>
    total_sz = 0;
    5ea2:	f04f 0800 	mov.w	r8, #0
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    5ea6:	4607      	mov	r7, r0
    sector = boot_img_num_sectors(state, slot) - 1;
    5ea8:	3c01      	subs	r4, #1
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    5eaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    5eac:	4630      	mov	r0, r6
    5eae:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    5eb2:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
	return fs->fs_size;
    5eb6:	f8d2 9004 	ldr.w	r9, [r2, #4]
    5eba:	681b      	ldr	r3, [r3, #0]
    5ebc:	464a      	mov	r2, r9
    5ebe:	1ac9      	subs	r1, r1, r3
        assert(rc == 0);

        sector--;
        total_sz += sz;
    5ec0:	44c8      	add	r8, r9
        rc = boot_erase_region(fap, off, sz);
    5ec2:	f7ff ffd2 	bl	5e6a <boot_erase_region>
    } while (total_sz < trailer_sz);
    5ec6:	45b8      	cmp	r8, r7
        sector--;
    5ec8:	f104 34ff 	add.w	r4, r4, #4294967295
    } while (total_sz < trailer_sz);
    5ecc:	d3ed      	bcc.n	5eaa <swap_erase_trailer_sectors+0x3c>

    return rc;
}
    5ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        slot = BOOT_PRIMARY_SLOT;
    5ed2:	2500      	movs	r5, #0
    5ed4:	e7de      	b.n	5e94 <swap_erase_trailer_sectors+0x26>
        return BOOT_EFLASH;
    5ed6:	2001      	movs	r0, #1
    5ed8:	e7f9      	b.n	5ece <swap_erase_trailer_sectors+0x60>

00005eda <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    5eda:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5edc:	4615      	mov	r5, r2
    5ede:	460c      	mov	r4, r1

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", flash_area_get_id(fap));

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    5ee0:	2007      	movs	r0, #7
    5ee2:	4669      	mov	r1, sp
    5ee4:	f000 fd82 	bl	69ec <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    5ee8:	79e9      	ldrb	r1, [r5, #7]
    5eea:	2901      	cmp	r1, #1
    5eec:	d003      	beq.n	5ef6 <swap_status_init+0x1c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    5eee:	2200      	movs	r2, #0
    5ef0:	4620      	mov	r0, r4
    5ef2:	f000 fd8f 	bl	6a14 <boot_write_swap_info>
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    5ef6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5efa:	2b01      	cmp	r3, #1
    5efc:	d102      	bne.n	5f04 <swap_status_init+0x2a>
        rc = boot_write_image_ok(fap);
    5efe:	4620      	mov	r0, r4
    5f00:	f000 fd67 	bl	69d2 <boot_write_image_ok>
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    5f04:	68a9      	ldr	r1, [r5, #8]
    5f06:	4620      	mov	r0, r4
    5f08:	f7ff fedd 	bl	5cc6 <boot_write_swap_size>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    5f0c:	4620      	mov	r0, r4
    5f0e:	f7fd fac5 	bl	349c <boot_write_magic>
    assert(rc == 0);

    return 0;
}
    5f12:	2000      	movs	r0, #0
    5f14:	b003      	add	sp, #12
    5f16:	bd30      	pop	{r4, r5, pc}

00005f18 <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    5f18:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5f1a:	460d      	mov	r5, r1
    5f1c:	4606      	mov	r6, r0
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    5f1e:	f7fb f807 	bl	f30 <swap_status_source>
    5f22:	4604      	mov	r4, r0
    5f24:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    5f26:	b358      	cbz	r0, 5f80 <swap_read_status+0x68>
    5f28:	2802      	cmp	r0, #2
    5f2a:	d12e      	bne.n	5f8a <swap_read_status+0x72>
    default:
        assert(0);
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    5f2c:	2003      	movs	r0, #3
    5f2e:	a901      	add	r1, sp, #4
    5f30:	f7fb fda4 	bl	1a7c <flash_area_open>
    if (rc != 0) {
    5f34:	bb58      	cbnz	r0, 5f8e <swap_read_status+0x76>
        return BOOT_EFLASH;
    }

    rc = swap_read_status_bytes(fap, state, bs);
    5f36:	462a      	mov	r2, r5
    5f38:	4631      	mov	r1, r6
    5f3a:	9801      	ldr	r0, [sp, #4]
    5f3c:	f7fa ff5e 	bl	dfc <swap_read_status_bytes>
    if (rc == 0) {
    5f40:	4604      	mov	r4, r0
    5f42:	b9d0      	cbnz	r0, 5f7a <swap_read_status+0x62>
        off = boot_swap_info_off(fap);
    5f44:	9801      	ldr	r0, [sp, #4]
    5f46:	f000 fcd7 	bl	68f8 <boot_swap_info_off>
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    5f4a:	2301      	movs	r3, #1
        off = boot_swap_info_off(fap);
    5f4c:	4601      	mov	r1, r0
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    5f4e:	f10d 0203 	add.w	r2, sp, #3
    5f52:	9801      	ldr	r0, [sp, #4]
    5f54:	f000 fa21 	bl	639a <flash_area_read>
        if (rc != 0) {
    5f58:	4604      	mov	r4, r0
    5f5a:	b9a0      	cbnz	r0, 5f86 <swap_read_status+0x6e>
            rc = BOOT_EFLASH;
            goto done;
        }

        if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info)) {
    5f5c:	2201      	movs	r2, #1
    5f5e:	9801      	ldr	r0, [sp, #4]
    5f60:	f10d 0103 	add.w	r1, sp, #3
    5f64:	f000 fcdc 	bl	6920 <bootutil_buffer_is_erased>
    5f68:	b110      	cbz	r0, 5f70 <swap_read_status+0x58>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    5f6a:	2301      	movs	r3, #1
    5f6c:	f88d 3003 	strb.w	r3, [sp, #3]
            rc = 0;
        }

        /* Extract the swap type info */
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    5f70:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5f74:	f003 030f 	and.w	r3, r3, #15
    5f78:	71eb      	strb	r3, [r5, #7]
    }

done:
    flash_area_close(fap);
    5f7a:	9801      	ldr	r0, [sp, #4]
    5f7c:	f000 fa0c 	bl	6398 <flash_area_close>

    return rc;
}
    5f80:	4620      	mov	r0, r4
    5f82:	b002      	add	sp, #8
    5f84:	bd70      	pop	{r4, r5, r6, pc}
            rc = BOOT_EFLASH;
    5f86:	2401      	movs	r4, #1
    5f88:	e7f7      	b.n	5f7a <swap_read_status+0x62>
    switch (bs->source) {
    5f8a:	2407      	movs	r4, #7
    5f8c:	e7f8      	b.n	5f80 <swap_read_status+0x68>
        return BOOT_EFLASH;
    5f8e:	2401      	movs	r4, #1
    5f90:	e7f6      	b.n	5f80 <swap_read_status+0x68>

00005f92 <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    5f92:	b513      	push	{r0, r1, r4, lr}
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    5f94:	2003      	movs	r0, #3
    5f96:	a901      	add	r1, sp, #4
    5f98:	f7fb fd70 	bl	1a7c <flash_area_open>
            &fap);
    if (rc != 0) {
    5f9c:	b948      	cbnz	r0, 5fb2 <swap_set_copy_done+0x20>
        return BOOT_EFLASH;
    }

    rc = boot_write_copy_done(fap);
    5f9e:	9801      	ldr	r0, [sp, #4]
    5fa0:	f7ff fe89 	bl	5cb6 <boot_write_copy_done>
    5fa4:	4604      	mov	r4, r0
    flash_area_close(fap);
    5fa6:	9801      	ldr	r0, [sp, #4]
    5fa8:	f000 f9f6 	bl	6398 <flash_area_close>
    return rc;
}
    5fac:	4620      	mov	r0, r4
    5fae:	b002      	add	sp, #8
    5fb0:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    5fb2:	2401      	movs	r4, #1
    5fb4:	e7fa      	b.n	5fac <swap_set_copy_done+0x1a>

00005fb6 <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    5fb6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    5fb8:	2003      	movs	r0, #3
    5fba:	a901      	add	r1, sp, #4
    5fbc:	f7fb fd5e 	bl	1a7c <flash_area_open>
            &fap);
    if (rc != 0) {
    5fc0:	b9a8      	cbnz	r0, 5fee <swap_set_image_ok+0x38>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state);
    5fc2:	9801      	ldr	r0, [sp, #4]
    5fc4:	a902      	add	r1, sp, #8
    5fc6:	f7fd fa89 	bl	34dc <boot_read_swap_state>
    if (rc != 0) {
    5fca:	4604      	mov	r4, r0
    5fcc:	b968      	cbnz	r0, 5fea <swap_set_image_ok+0x34>
        rc = BOOT_EFLASH;
        goto out;
    }

    if (state.image_ok == BOOT_FLAG_UNSET) {
    5fce:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5fd2:	2b03      	cmp	r3, #3
    5fd4:	d103      	bne.n	5fde <swap_set_image_ok+0x28>
        rc = boot_write_image_ok(fap);
    5fd6:	9801      	ldr	r0, [sp, #4]
    5fd8:	f000 fcfb 	bl	69d2 <boot_write_image_ok>
    5fdc:	4604      	mov	r4, r0
    }

out:
    flash_area_close(fap);
    5fde:	9801      	ldr	r0, [sp, #4]
    5fe0:	f000 f9da 	bl	6398 <flash_area_close>
    return rc;
}
    5fe4:	4620      	mov	r0, r4
    5fe6:	b004      	add	sp, #16
    5fe8:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    5fea:	2401      	movs	r4, #1
    5fec:	e7f7      	b.n	5fde <swap_set_image_ok+0x28>
        return BOOT_EFLASH;
    5fee:	2401      	movs	r4, #1
    5ff0:	e7f8      	b.n	5fe4 <swap_set_image_ok+0x2e>

00005ff2 <boot_status_internal_off>:
{
    5ff2:	b530      	push	{r4, r5, lr}
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    5ff4:	7943      	ldrb	r3, [r0, #5]
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    5ff6:	7902      	ldrb	r2, [r0, #4]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    5ff8:	2b01      	cmp	r3, #1
    5ffa:	bf0a      	itet	eq
    5ffc:	2301      	moveq	r3, #1
    5ffe:	2302      	movne	r3, #2
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    6000:	2500      	moveq	r5, #0
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    6002:	fb01 f403 	mul.w	r4, r1, r3
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    6006:	6803      	ldr	r3, [r0, #0]
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    6008:	f102 32ff 	add.w	r2, r2, #4294967295
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    600c:	f103 33ff 	add.w	r3, r3, #4294967295
    6010:	fb04 f303 	mul.w	r3, r4, r3
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    6014:	bf18      	it	ne
    6016:	01cd      	lslne	r5, r1, #7
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    6018:	fb01 3102 	mla	r1, r1, r2, r3
}
    601c:	1948      	adds	r0, r1, r5
    601e:	bd30      	pop	{r4, r5, pc}

00006020 <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
    6020:	6803      	ldr	r3, [r0, #0]
{
    6022:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
    6024:	1acd      	subs	r5, r1, r3
    6026:	2d00      	cmp	r5, #0
    6028:	dd0d      	ble.n	6046 <mbedtls_asn1_get_len+0x26>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( **p & 0x80 ) == 0 )
    602a:	f993 6000 	ldrsb.w	r6, [r3]
    602e:	781c      	ldrb	r4, [r3, #0]
    6030:	2e00      	cmp	r6, #0
    6032:	db0b      	blt.n	604c <mbedtls_asn1_get_len+0x2c>
        *len = *(*p)++;
    6034:	1c5c      	adds	r4, r3, #1
    6036:	6004      	str	r4, [r0, #0]
    6038:	781b      	ldrb	r3, [r3, #0]
    603a:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
    603c:	6803      	ldr	r3, [r0, #0]
    603e:	1ac9      	subs	r1, r1, r3
    6040:	6813      	ldr	r3, [r2, #0]
    6042:	428b      	cmp	r3, r1
    6044:	d932      	bls.n	60ac <mbedtls_asn1_get_len+0x8c>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6046:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    return( 0 );
}
    604a:	bd70      	pop	{r4, r5, r6, pc}
        switch( **p & 0x7F )
    604c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    6050:	3c01      	subs	r4, #1
    6052:	2c03      	cmp	r4, #3
    6054:	d827      	bhi.n	60a6 <mbedtls_asn1_get_len+0x86>
    6056:	e8df f004 	tbb	[pc, r4]
    605a:	0902      	.short	0x0902
    605c:	1e12      	.short	0x1e12
            if( ( end - *p ) < 2 )
    605e:	2d01      	cmp	r5, #1
    6060:	d0f1      	beq.n	6046 <mbedtls_asn1_get_len+0x26>
            *len = (*p)[1];
    6062:	785c      	ldrb	r4, [r3, #1]
            (*p) += 2;
    6064:	3302      	adds	r3, #2
            *len = (*p)[1];
    6066:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    6068:	6003      	str	r3, [r0, #0]
            break;
    606a:	e7e7      	b.n	603c <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 3 )
    606c:	2d02      	cmp	r5, #2
    606e:	ddea      	ble.n	6046 <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    6070:	f8b3 4001 	ldrh.w	r4, [r3, #1]
            (*p) += 3;
    6074:	3303      	adds	r3, #3
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    6076:	ba64      	rev16	r4, r4
    6078:	b2a4      	uxth	r4, r4
    607a:	6014      	str	r4, [r2, #0]
            (*p) += 3;
    607c:	e7f4      	b.n	6068 <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 4 )
    607e:	2d03      	cmp	r5, #3
    6080:	dde1      	ble.n	6046 <mbedtls_asn1_get_len+0x26>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6082:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
    6084:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6086:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
    6088:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    608c:	78dd      	ldrb	r5, [r3, #3]
            (*p) += 4;
    608e:	3304      	adds	r3, #4
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6090:	432c      	orrs	r4, r5
            *len = ( (size_t)(*p)[1] << 16 ) |
    6092:	6014      	str	r4, [r2, #0]
            (*p) += 4;
    6094:	e7e8      	b.n	6068 <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 5 )
    6096:	2d04      	cmp	r5, #4
    6098:	ddd5      	ble.n	6046 <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    609a:	f8d3 4001 	ldr.w	r4, [r3, #1]
            (*p) += 5;
    609e:	3305      	adds	r3, #5
    60a0:	ba24      	rev	r4, r4
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    60a2:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    60a4:	e7e0      	b.n	6068 <mbedtls_asn1_get_len+0x48>
        switch( **p & 0x7F )
    60a6:	f06f 0063 	mvn.w	r0, #99	; 0x63
    60aa:	e7ce      	b.n	604a <mbedtls_asn1_get_len+0x2a>
    return( 0 );
    60ac:	2000      	movs	r0, #0
    60ae:	e7cc      	b.n	604a <mbedtls_asn1_get_len+0x2a>

000060b0 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    60b0:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    60b2:	6804      	ldr	r4, [r0, #0]
    60b4:	1b0e      	subs	r6, r1, r4
    60b6:	2e00      	cmp	r6, #0
    60b8:	dd07      	ble.n	60ca <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    60ba:	7826      	ldrb	r6, [r4, #0]
    60bc:	429e      	cmp	r6, r3
    60be:	d108      	bne.n	60d2 <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    60c0:	3401      	adds	r4, #1
    60c2:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
    60c4:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
    60c6:	f7ff bfab 	b.w	6020 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    60ca:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
    60ce:	bc70      	pop	{r4, r5, r6}
    60d0:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    60d2:	f06f 0061 	mvn.w	r0, #97	; 0x61
    60d6:	e7fa      	b.n	60ce <mbedtls_asn1_get_tag+0x1e>

000060d8 <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
    60d8:	b538      	push	{r3, r4, r5, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
    60da:	2303      	movs	r3, #3
{
    60dc:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
    60de:	f7ff ffe7 	bl	60b0 <mbedtls_asn1_get_tag>
    60e2:	b918      	cbnz	r0, 60ec <mbedtls_asn1_get_bitstring_null+0x14>
        return( ret );

    if( *len == 0 )
    60e4:	6813      	ldr	r3, [r2, #0]
    60e6:	b913      	cbnz	r3, 60ee <mbedtls_asn1_get_bitstring_null+0x16>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
    60e8:	f06f 0067 	mvn.w	r0, #103	; 0x67
    if( **p != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
    ++( *p );

    return( 0 );
}
    60ec:	bd38      	pop	{r3, r4, r5, pc}
    --( *len );
    60ee:	3b01      	subs	r3, #1
    60f0:	6013      	str	r3, [r2, #0]
    if( **p != 0 )
    60f2:	6823      	ldr	r3, [r4, #0]
    60f4:	781a      	ldrb	r2, [r3, #0]
    60f6:	2a00      	cmp	r2, #0
    60f8:	d1f6      	bne.n	60e8 <mbedtls_asn1_get_bitstring_null+0x10>
    ++( *p );
    60fa:	3301      	adds	r3, #1
    60fc:	6023      	str	r3, [r4, #0]
    return( 0 );
    60fe:	e7f5      	b.n	60ec <mbedtls_asn1_get_bitstring_null+0x14>

00006100 <mbedtls_asn1_get_alg>:
}

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
    6100:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6104:	4690      	mov	r8, r2
    6106:	461f      	mov	r7, r3
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    6108:	aa01      	add	r2, sp, #4
    610a:	2330      	movs	r3, #48	; 0x30
{
    610c:	4605      	mov	r5, r0
    610e:	4689      	mov	r9, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    6110:	f7ff ffce 	bl	60b0 <mbedtls_asn1_get_tag>
    6114:	4604      	mov	r4, r0
    6116:	b9f8      	cbnz	r0, 6158 <mbedtls_asn1_get_alg+0x58>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
    6118:	682e      	ldr	r6, [r5, #0]
    611a:	eba9 0906 	sub.w	r9, r9, r6
    611e:	f1b9 0f00 	cmp.w	r9, #0
    6122:	dd35      	ble.n	6190 <mbedtls_asn1_get_alg+0x90>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
    6124:	4642      	mov	r2, r8
    end = *p + len;
    6126:	9901      	ldr	r1, [sp, #4]
    alg->tag = **p;
    6128:	7833      	ldrb	r3, [r6, #0]
    end = *p + len;
    612a:	440e      	add	r6, r1
    alg->tag = **p;
    612c:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
    6130:	4631      	mov	r1, r6
    6132:	2306      	movs	r3, #6
    6134:	4628      	mov	r0, r5
    6136:	f7ff ffbb 	bl	60b0 <mbedtls_asn1_get_tag>
    613a:	4604      	mov	r4, r0
    613c:	b960      	cbnz	r0, 6158 <mbedtls_asn1_get_alg+0x58>
        return( ret );

    alg->p = *p;
    613e:	682a      	ldr	r2, [r5, #0]
    *p += alg->len;
    6140:	f8d8 1004 	ldr.w	r1, [r8, #4]
    alg->p = *p;
    6144:	f8c8 2008 	str.w	r2, [r8, #8]
    *p += alg->len;
    6148:	1853      	adds	r3, r2, r1

    if( *p == end )
    614a:	42b3      	cmp	r3, r6
    *p += alg->len;
    614c:	602b      	str	r3, [r5, #0]
    if( *p == end )
    614e:	d107      	bne.n	6160 <mbedtls_asn1_get_alg+0x60>
    {
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
    6150:	210c      	movs	r1, #12
    6152:	4638      	mov	r0, r7
    6154:	f7fe f95c 	bl	4410 <mbedtls_platform_zeroize>

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
    6158:	4620      	mov	r0, r4
    615a:	b003      	add	sp, #12
    615c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    params->tag = **p;
    6160:	5c51      	ldrb	r1, [r2, r1]
    6162:	463a      	mov	r2, r7
    (*p)++;
    6164:	3301      	adds	r3, #1
    params->tag = **p;
    6166:	f842 1b04 	str.w	r1, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
    616a:	4628      	mov	r0, r5
    616c:	4631      	mov	r1, r6
    (*p)++;
    616e:	602b      	str	r3, [r5, #0]
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
    6170:	f7ff ff56 	bl	6020 <mbedtls_asn1_get_len>
    6174:	4604      	mov	r4, r0
    6176:	2800      	cmp	r0, #0
    6178:	d1ee      	bne.n	6158 <mbedtls_asn1_get_alg+0x58>
    params->p = *p;
    617a:	682b      	ldr	r3, [r5, #0]
    *p += params->len;
    617c:	687a      	ldr	r2, [r7, #4]
    params->p = *p;
    617e:	60bb      	str	r3, [r7, #8]
    *p += params->len;
    6180:	4413      	add	r3, r2
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    6182:	42b3      	cmp	r3, r6
    6184:	bf0c      	ite	eq
    6186:	4604      	moveq	r4, r0
    6188:	f06f 0465 	mvnne.w	r4, #101	; 0x65
    *p += params->len;
    618c:	602b      	str	r3, [r5, #0]
    if( *p != end )
    618e:	e7e3      	b.n	6158 <mbedtls_asn1_get_alg+0x58>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6190:	f06f 045f 	mvn.w	r4, #95	; 0x5f
    6194:	e7e0      	b.n	6158 <mbedtls_asn1_get_alg+0x58>

00006196 <cc310_sha256_update>:
{
    6196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((uint32_t) data < CONFIG_SRAM_BASE_ADDRESS) {
    6198:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
{
    619c:	4605      	mov	r5, r0
    619e:	4614      	mov	r4, r2
    61a0:	af00      	add	r7, sp, #0
    if ((uint32_t) data < CONFIG_SRAM_BASE_ADDRESS) {
    61a2:	d210      	bcs.n	61c6 <cc310_sha256_update+0x30>
    61a4:	466e      	mov	r6, sp
        uint8_t stack_buffer[data_len];
    61a6:	1dd3      	adds	r3, r2, #7
    61a8:	f023 0307 	bic.w	r3, r3, #7
    61ac:	ebad 0d03 	sub.w	sp, sp, r3
        memcpy(stack_buffer, data, block_len);
    61b0:	4668      	mov	r0, sp
    61b2:	f000 f9b3 	bl	651c <memcpy>
        nrf_cc310_bl_hash_sha256_update(ctx, stack_buffer, block_len);
    61b6:	4669      	mov	r1, sp
    61b8:	4622      	mov	r2, r4
    61ba:	4628      	mov	r0, r5
    61bc:	f7fe fbe4 	bl	4988 <nrf_cc310_bl_hash_sha256_update>
    61c0:	46b5      	mov	sp, r6
};
    61c2:	46bd      	mov	sp, r7
    61c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        nrf_cc310_bl_hash_sha256_update(ctx, data, data_len);
    61c6:	f7fe fbdf 	bl	4988 <nrf_cc310_bl_hash_sha256_update>
};
    61ca:	e7fa      	b.n	61c2 <cc310_sha256_update+0x2c>

000061cc <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    61cc:	b160      	cbz	r0, 61e8 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    61ce:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    61d0:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    61d4:	2b01      	cmp	r3, #1
    61d6:	d003      	beq.n	61e0 <sys_notify_validate+0x14>
    61d8:	2b03      	cmp	r3, #3
    61da:	d105      	bne.n	61e8 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    61dc:	6803      	ldr	r3, [r0, #0]
    61de:	b11b      	cbz	r3, 61e8 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    61e0:	2300      	movs	r3, #0
    61e2:	6083      	str	r3, [r0, #8]
    61e4:	4618      	mov	r0, r3
    61e6:	4770      	bx	lr
		return -EINVAL;
    61e8:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    61ec:	4770      	bx	lr

000061ee <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    61ee:	2200      	movs	r2, #0
    61f0:	6843      	ldr	r3, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    61f2:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    61f4:	f003 0303 	and.w	r3, r3, #3
	switch (method) {
    61f8:	2b03      	cmp	r3, #3
	sys_notify_generic_callback rv = NULL;
    61fa:	bf14      	ite	ne
    61fc:	4613      	movne	r3, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    61fe:	6803      	ldreq	r3, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    6200:	6042      	str	r2, [r0, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    6202:	4618      	mov	r0, r3
    6204:	4770      	bx	lr

00006206 <arch_printk_char_out>:
}
    6206:	2000      	movs	r0, #0
    6208:	4770      	bx	lr

0000620a <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    620a:	b40f      	push	{r0, r1, r2, r3}
    620c:	b507      	push	{r0, r1, r2, lr}
    620e:	a904      	add	r1, sp, #16
    6210:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    6214:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    6216:	f7fb f8df 	bl	13d8 <vprintk>

	va_end(ap);
}
    621a:	b003      	add	sp, #12
    621c:	f85d eb04 	ldr.w	lr, [sp], #4
    6220:	b004      	add	sp, #16
    6222:	4770      	bx	lr

00006224 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6224:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    6226:	f013 0307 	ands.w	r3, r3, #7
    622a:	d105      	bne.n	6238 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    622c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    622e:	2b00      	cmp	r3, #0
    6230:	bf0c      	ite	eq
    6232:	2000      	moveq	r0, #0
    6234:	2003      	movne	r0, #3
    6236:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    6238:	2b02      	cmp	r3, #2
    623a:	d105      	bne.n	6248 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    623c:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    623e:	2b00      	cmp	r3, #0
    6240:	bf14      	ite	ne
    6242:	2000      	movne	r0, #0
    6244:	2004      	moveq	r0, #4
    6246:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    6248:	2b01      	cmp	r3, #1
    624a:	d105      	bne.n	6258 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    624c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    624e:	2b00      	cmp	r3, #0
    6250:	bf0c      	ite	eq
    6252:	2000      	moveq	r0, #0
    6254:	2005      	movne	r0, #5
    6256:	4770      	bx	lr
	int evt = EVT_NOP;
    6258:	2000      	movs	r0, #0
}
    625a:	4770      	bx	lr

0000625c <notify_one>:
{
    625c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    625e:	460d      	mov	r5, r1
    6260:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6262:	4619      	mov	r1, r3
    6264:	1d28      	adds	r0, r5, #4
{
    6266:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6268:	9300      	str	r3, [sp, #0]
    626a:	f7ff ffc0 	bl	61ee <sys_notify_finalize>
	if (cb) {
    626e:	4604      	mov	r4, r0
    6270:	b140      	cbz	r0, 6284 <notify_one+0x28>
		cb(mgr, cli, state, res);
    6272:	e9dd 3200 	ldrd	r3, r2, [sp]
    6276:	4629      	mov	r1, r5
    6278:	4630      	mov	r0, r6
    627a:	46a4      	mov	ip, r4
}
    627c:	b002      	add	sp, #8
    627e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
    6282:	4760      	bx	ip
}
    6284:	b002      	add	sp, #8
    6286:	bd70      	pop	{r4, r5, r6, pc}

00006288 <transition_complete>:
{
    6288:	b410      	push	{r4}
    628a:	f04f 0420 	mov.w	r4, #32
    628e:	f3ef 8211 	mrs	r2, BASEPRI
    6292:	f384 8812 	msr	BASEPRI_MAX, r4
    6296:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    629a:	6141      	str	r1, [r0, #20]
}
    629c:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
    62a0:	2101      	movs	r1, #1
    62a2:	f7fb b8a7 	b.w	13f4 <process_event>

000062a6 <validate_args>:
{
    62a6:	b510      	push	{r4, lr}
    62a8:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    62aa:	b140      	cbz	r0, 62be <validate_args+0x18>
    62ac:	b139      	cbz	r1, 62be <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    62ae:	1d08      	adds	r0, r1, #4
    62b0:	f7ff ff8c 	bl	61cc <sys_notify_validate>
	if ((rv == 0)
    62b4:	b928      	cbnz	r0, 62c2 <validate_args+0x1c>
	    && ((cli->notify.flags
    62b6:	68a3      	ldr	r3, [r4, #8]
    62b8:	f033 0303 	bics.w	r3, r3, #3
    62bc:	d001      	beq.n	62c2 <validate_args+0x1c>
		rv = -EINVAL;
    62be:	f06f 0015 	mvn.w	r0, #21
}
    62c2:	bd10      	pop	{r4, pc}

000062c4 <onoff_manager_init>:
{
    62c4:	b538      	push	{r3, r4, r5, lr}
    62c6:	460c      	mov	r4, r1
	if ((mgr == NULL)
    62c8:	4605      	mov	r5, r0
    62ca:	b158      	cbz	r0, 62e4 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    62cc:	b151      	cbz	r1, 62e4 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    62ce:	680b      	ldr	r3, [r1, #0]
    62d0:	b143      	cbz	r3, 62e4 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    62d2:	684b      	ldr	r3, [r1, #4]
    62d4:	b133      	cbz	r3, 62e4 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    62d6:	221c      	movs	r2, #28
    62d8:	2100      	movs	r1, #0
    62da:	f000 f92a 	bl	6532 <memset>
	return 0;
    62de:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    62e0:	612c      	str	r4, [r5, #16]
}
    62e2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    62e4:	f06f 0015 	mvn.w	r0, #21
    62e8:	e7fb      	b.n	62e2 <onoff_manager_init+0x1e>

000062ea <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    62ea:	b570      	push	{r4, r5, r6, lr}
    62ec:	4604      	mov	r4, r0
    62ee:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    62f0:	f7ff ffd9 	bl	62a6 <validate_args>

	if (rv < 0) {
    62f4:	1e05      	subs	r5, r0, #0
    62f6:	db31      	blt.n	635c <onoff_request+0x72>
    62f8:	f04f 0320 	mov.w	r3, #32
    62fc:	f3ef 8111 	mrs	r1, BASEPRI
    6300:	f383 8812 	msr	BASEPRI_MAX, r3
    6304:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    6308:	f64f 75ff 	movw	r5, #65535	; 0xffff
    630c:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    630e:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    6310:	42ab      	cmp	r3, r5
    6312:	f000 0207 	and.w	r2, r0, #7
    6316:	d02e      	beq.n	6376 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    6318:	2a02      	cmp	r2, #2
    631a:	d10e      	bne.n	633a <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    631c:	3301      	adds	r3, #1
    631e:	8363      	strh	r3, [r4, #26]
	rv = state;
    6320:	4615      	mov	r5, r2
		notify = true;
    6322:	2301      	movs	r3, #1
	__asm__ volatile(
    6324:	f381 8811 	msr	BASEPRI, r1
    6328:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    632c:	b1b3      	cbz	r3, 635c <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    632e:	2300      	movs	r3, #0
    6330:	4631      	mov	r1, r6
    6332:	4620      	mov	r0, r4
    6334:	f7ff ff92 	bl	625c <notify_one>
    6338:	e010      	b.n	635c <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    633a:	0783      	lsls	r3, r0, #30
    633c:	d001      	beq.n	6342 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    633e:	2a06      	cmp	r2, #6
    6340:	d10e      	bne.n	6360 <onoff_request+0x76>
	parent->next = child;
    6342:	2300      	movs	r3, #0
    6344:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    6346:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    6348:	b993      	cbnz	r3, 6370 <onoff_request+0x86>
	list->head = node;
    634a:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    634e:	4615      	mov	r5, r2
    6350:	b962      	cbnz	r2, 636c <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    6352:	460a      	mov	r2, r1
    6354:	4620      	mov	r0, r4
    6356:	2102      	movs	r1, #2
    6358:	f7fb f84c 	bl	13f4 <process_event>
		}
	}

	return rv;
}
    635c:	4628      	mov	r0, r5
    635e:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    6360:	2a05      	cmp	r2, #5
    6362:	bf0c      	ite	eq
    6364:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    6368:	f06f 0504 	mvnne.w	r5, #4
    636c:	2300      	movs	r3, #0
    636e:	e7d9      	b.n	6324 <onoff_request+0x3a>
	parent->next = child;
    6370:	601e      	str	r6, [r3, #0]
	list->tail = node;
    6372:	6066      	str	r6, [r4, #4]
}
    6374:	e7eb      	b.n	634e <onoff_request+0x64>
		rv = -EAGAIN;
    6376:	f06f 050a 	mvn.w	r5, #10
    637a:	e7f7      	b.n	636c <onoff_request+0x82>

0000637c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_META, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    637c:	4770      	bx	lr

0000637e <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
    637e:	b40f      	push	{r0, r1, r2, r3}
    6380:	b507      	push	{r0, r1, r2, lr}
    6382:	a904      	add	r1, sp, #16
    6384:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    6388:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    638a:	f7fb f825 	bl	13d8 <vprintk>
	va_end(ap);
}
    638e:	b003      	add	sp, #12
    6390:	f85d eb04 	ldr.w	lr, [sp], #4
    6394:	b004      	add	sp, #16
    6396:	4770      	bx	lr

00006398 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
    6398:	4770      	bx	lr

0000639a <flash_area_read>:

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    639a:	b573      	push	{r0, r1, r4, r5, r6, lr}


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
    639c:	1e0c      	subs	r4, r1, #0
    639e:	4605      	mov	r5, r0
    63a0:	461e      	mov	r6, r3
    63a2:	9201      	str	r2, [sp, #4]
    63a4:	db11      	blt.n	63ca <flash_area_read+0x30>
    63a6:	6881      	ldr	r1, [r0, #8]
    63a8:	18e3      	adds	r3, r4, r3
    63aa:	428b      	cmp	r3, r1
    63ac:	d80d      	bhi.n	63ca <flash_area_read+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
    63ae:	68c0      	ldr	r0, [r0, #12]
    63b0:	f7fd fe58 	bl	4064 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
    63b4:	6869      	ldr	r1, [r5, #4]
    63b6:	4421      	add	r1, r4
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    63b8:	6883      	ldr	r3, [r0, #8]
    63ba:	9a01      	ldr	r2, [sp, #4]
    63bc:	681c      	ldr	r4, [r3, #0]
    63be:	4633      	mov	r3, r6
    63c0:	46a4      	mov	ip, r4
}
    63c2:	b002      	add	sp, #8
    63c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    63c8:	4760      	bx	ip
    63ca:	f06f 0015 	mvn.w	r0, #21
    63ce:	b002      	add	sp, #8
    63d0:	bd70      	pop	{r4, r5, r6, pc}

000063d2 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    63d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    63d4:	1e0c      	subs	r4, r1, #0
    63d6:	4605      	mov	r5, r0
    63d8:	461e      	mov	r6, r3
    63da:	9201      	str	r2, [sp, #4]
    63dc:	db11      	blt.n	6402 <flash_area_write+0x30>
    63de:	6881      	ldr	r1, [r0, #8]
    63e0:	18e3      	adds	r3, r4, r3
    63e2:	428b      	cmp	r3, r1
    63e4:	d80d      	bhi.n	6402 <flash_area_write+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    63e6:	68c0      	ldr	r0, [r0, #12]
    63e8:	f7fd fe3c 	bl	4064 <z_impl_device_get_binding>

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
    63ec:	6869      	ldr	r1, [r5, #4]
    63ee:	4421      	add	r1, r4
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->write(dev, offset, data, len);
    63f0:	6883      	ldr	r3, [r0, #8]
    63f2:	9a01      	ldr	r2, [sp, #4]
    63f4:	685c      	ldr	r4, [r3, #4]
    63f6:	4633      	mov	r3, r6
    63f8:	46a4      	mov	ip, r4

	return rc;
}
    63fa:	b002      	add	sp, #8
    63fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6400:	4760      	bx	ip
    6402:	f06f 0015 	mvn.w	r0, #21
    6406:	b002      	add	sp, #8
    6408:	bd70      	pop	{r4, r5, r6, pc}

0000640a <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    640a:	b570      	push	{r4, r5, r6, lr}
    640c:	1e0c      	subs	r4, r1, #0
    640e:	4605      	mov	r5, r0
    6410:	4616      	mov	r6, r2
    6412:	db0e      	blt.n	6432 <flash_area_erase+0x28>
    6414:	18a3      	adds	r3, r4, r2
    6416:	6882      	ldr	r2, [r0, #8]
    6418:	4293      	cmp	r3, r2
    641a:	d80a      	bhi.n	6432 <flash_area_erase+0x28>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    641c:	68c0      	ldr	r0, [r0, #12]
    641e:	f7fd fe21 	bl	4064 <z_impl_device_get_binding>

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
    6422:	6869      	ldr	r1, [r5, #4]
    6424:	4421      	add	r1, r4
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
    6426:	6883      	ldr	r3, [r0, #8]
    6428:	4632      	mov	r2, r6

	return rc;
}
    642a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    642e:	689b      	ldr	r3, [r3, #8]
    6430:	4718      	bx	r3
    6432:	f06f 0015 	mvn.w	r0, #21
    6436:	bd70      	pop	{r4, r5, r6, pc}

00006438 <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
    6438:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
    643a:	68c0      	ldr	r0, [r0, #12]
    643c:	f7fd fe12 	bl	4064 <z_impl_device_get_binding>
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    6440:	6883      	ldr	r3, [r0, #8]
    6442:	68db      	ldr	r3, [r3, #12]
    6444:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
    6446:	6800      	ldr	r0, [r0, #0]
    6448:	bd08      	pop	{r3, pc}

0000644a <flash_area_erased_val>:
{
	return device_get_binding(fa->fa_dev_name);
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    644a:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
    644c:	68c0      	ldr	r0, [r0, #12]
    644e:	f7fd fe09 	bl	4064 <z_impl_device_get_binding>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    6452:	6883      	ldr	r3, [r0, #8]
    6454:	68db      	ldr	r3, [r3, #12]
    6456:	4798      	blx	r3

	return param->erase_value;
}
    6458:	7900      	ldrb	r0, [r0, #4]
    645a:	bd08      	pop	{r3, pc}

0000645c <get_sectors_cb>:
{
    645c:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    645e:	6802      	ldr	r2, [r0, #0]
    6460:	684c      	ldr	r4, [r1, #4]
    6462:	42a2      	cmp	r2, r4
    6464:	d316      	bcc.n	6494 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
    6466:	688b      	ldr	r3, [r1, #8]
    6468:	4423      	add	r3, r4
    646a:	429a      	cmp	r2, r3
    646c:	d206      	bcs.n	647c <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
    646e:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
    6472:	42ab      	cmp	r3, r5
    6474:	d304      	bcc.n	6480 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
    6476:	f06f 030b 	mvn.w	r3, #11
    647a:	618b      	str	r3, [r1, #24]
		*bail_value = false;
    647c:	2000      	movs	r0, #0
    647e:	e00a      	b.n	6496 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    6480:	68cd      	ldr	r5, [r1, #12]
    6482:	1b12      	subs	r2, r2, r4
    6484:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    6488:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    648a:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
    648e:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
    6490:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
    6492:	610b      	str	r3, [r1, #16]
		*bail_value = true;
    6494:	2001      	movs	r0, #1
}
    6496:	bd70      	pop	{r4, r5, r6, pc}

00006498 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    6498:	2000      	movs	r0, #0
{
    649a:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    649c:	f7fb fabc 	bl	1a18 <sys_reboot>

000064a0 <nrf_cc3xx_platform_mutex_init>:
/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
	// No thread-safe mutexes are required
}
    64a0:	4770      	bx	lr

000064a2 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    64a2:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    64a4:	6800      	ldr	r0, [r0, #0]
    64a6:	f7fb bb5f 	b.w	1b68 <z_arm_fatal_error>

000064aa <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    64aa:	2100      	movs	r1, #0
    64ac:	2001      	movs	r0, #1
    64ae:	f7fb bb5b 	b.w	1b68 <z_arm_fatal_error>

000064b2 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    64b2:	b508      	push	{r3, lr}
	handler();
    64b4:	f7fb fbba 	bl	1c2c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    64b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    64bc:	f7fb bc2c 	b.w	1d18 <z_arm_exc_exit>

000064c0 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    64c0:	e840 f000 	tt	r0, r0
    64c4:	b2c3      	uxtb	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
    64c6:	f410 3f80 	tst.w	r0, #65536	; 0x10000
	}

	return -EINVAL;
}
    64ca:	bf14      	ite	ne
    64cc:	4618      	movne	r0, r3
    64ce:	f06f 0015 	mvneq.w	r0, #21
    64d2:	4770      	bx	lr

000064d4 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    64d4:	4603      	mov	r3, r0
	size_t n = 0;
    64d6:	2000      	movs	r0, #0

	while (*s != '\0') {
    64d8:	5c1a      	ldrb	r2, [r3, r0]
    64da:	b902      	cbnz	r2, 64de <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    64dc:	4770      	bx	lr
		n++;
    64de:	3001      	adds	r0, #1
    64e0:	e7fa      	b.n	64d8 <strlen+0x4>

000064e2 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    64e2:	3801      	subs	r0, #1
    64e4:	3901      	subs	r1, #1
    64e6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    64ea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    64ee:	4293      	cmp	r3, r2
    64f0:	d101      	bne.n	64f6 <strcmp+0x14>
    64f2:	2b00      	cmp	r3, #0
    64f4:	d1f7      	bne.n	64e6 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    64f6:	1a98      	subs	r0, r3, r2
    64f8:	4770      	bx	lr

000064fa <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    64fa:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    64fc:	b162      	cbz	r2, 6518 <memcmp+0x1e>
    64fe:	4603      	mov	r3, r0
    6500:	3901      	subs	r1, #1
    6502:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    6504:	f813 0b01 	ldrb.w	r0, [r3], #1
    6508:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    650c:	42a3      	cmp	r3, r4
    650e:	d001      	beq.n	6514 <memcmp+0x1a>
    6510:	4290      	cmp	r0, r2
    6512:	d0f7      	beq.n	6504 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    6514:	1a80      	subs	r0, r0, r2
}
    6516:	bd10      	pop	{r4, pc}
		return 0;
    6518:	4610      	mov	r0, r2
    651a:	e7fc      	b.n	6516 <memcmp+0x1c>

0000651c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    651c:	b510      	push	{r4, lr}
    651e:	1e43      	subs	r3, r0, #1
    6520:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    6522:	4291      	cmp	r1, r2
    6524:	d100      	bne.n	6528 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    6526:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    6528:	f811 4b01 	ldrb.w	r4, [r1], #1
    652c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    6530:	e7f7      	b.n	6522 <memcpy+0x6>

00006532 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    6532:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    6534:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    6536:	4402      	add	r2, r0
    6538:	4293      	cmp	r3, r2
    653a:	d100      	bne.n	653e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    653c:	4770      	bx	lr
		*(d_byte++) = c_byte;
    653e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    6542:	e7f9      	b.n	6538 <memset+0x6>

00006544 <_stdout_hook_default>:
}
    6544:	f04f 30ff 	mov.w	r0, #4294967295
    6548:	4770      	bx	lr

0000654a <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    654a:	220c      	movs	r2, #12
    654c:	6903      	ldr	r3, [r0, #16]
    654e:	b2c9      	uxtb	r1, r1
    6550:	fb01 3302 	mla	r3, r1, r2, r3
    6554:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    6556:	f000 0007 	and.w	r0, r0, #7
    655a:	4770      	bx	lr

0000655c <set_on_state>:
	__asm__ volatile(
    655c:	f04f 0320 	mov.w	r3, #32
    6560:	f3ef 8211 	mrs	r2, BASEPRI
    6564:	f383 8812 	msr	BASEPRI_MAX, r3
    6568:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    656c:	6803      	ldr	r3, [r0, #0]
    656e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6572:	f043 0302 	orr.w	r3, r3, #2
    6576:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    6578:	f382 8811 	msr	BASEPRI, r2
    657c:	f3bf 8f6f 	isb	sy
}
    6580:	4770      	bx	lr

00006582 <stop>:
{
    6582:	4603      	mov	r3, r0
    6584:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    6586:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    6588:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    658a:	f04f 0420 	mov.w	r4, #32
    658e:	f3ef 8611 	mrs	r6, BASEPRI
    6592:	f384 8812 	msr	BASEPRI_MAX, r4
    6596:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    659a:	250c      	movs	r5, #12
    659c:	fb05 0401 	mla	r4, r5, r1, r0
    65a0:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    65a2:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    65a6:	d001      	beq.n	65ac <stop+0x2a>
    65a8:	42a2      	cmp	r2, r4
    65aa:	d111      	bne.n	65d0 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    65ac:	2201      	movs	r2, #1
    65ae:	fb05 0001 	mla	r0, r5, r1, r0
    65b2:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    65b4:	2000      	movs	r0, #0
	__asm__ volatile(
    65b6:	f386 8811 	msr	BASEPRI, r6
    65ba:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    65be:	b930      	cbnz	r0, 65ce <stop+0x4c>
	get_sub_config(dev, type)->stop();
    65c0:	220c      	movs	r2, #12
    65c2:	685b      	ldr	r3, [r3, #4]
    65c4:	fb02 3101 	mla	r1, r2, r1, r3
    65c8:	684b      	ldr	r3, [r1, #4]
    65ca:	4798      	blx	r3
	return 0;
    65cc:	2000      	movs	r0, #0
}
    65ce:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    65d0:	f04f 30ff 	mov.w	r0, #4294967295
    65d4:	e7ef      	b.n	65b6 <stop+0x34>

000065d6 <api_stop>:
	return stop(dev, subsys, CTX_API);
    65d6:	2280      	movs	r2, #128	; 0x80
    65d8:	f7ff bfd3 	b.w	6582 <stop>

000065dc <async_start>:
{
    65dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    65de:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    65e0:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    65e2:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    65e4:	f04f 0520 	mov.w	r5, #32
    65e8:	f3ef 8c11 	mrs	ip, BASEPRI
    65ec:	f385 8812 	msr	BASEPRI_MAX, r5
    65f0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    65f4:	260c      	movs	r6, #12
    65f6:	fb06 4601 	mla	r6, r6, r1, r4
    65fa:	6c35      	ldr	r5, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    65fc:	f005 0e07 	and.w	lr, r5, #7
    6600:	f1be 0f01 	cmp.w	lr, #1
    6604:	d110      	bne.n	6628 <async_start+0x4c>
	int err = 0;
    6606:	2500      	movs	r5, #0
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    6608:	6437      	str	r7, [r6, #64]	; 0x40
	__asm__ volatile(
    660a:	f38c 8811 	msr	BASEPRI, ip
    660e:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    6612:	b93d      	cbnz	r5, 6624 <async_start+0x48>
	subdata->cb = cb;
    6614:	260c      	movs	r6, #12
    6616:	4371      	muls	r1, r6
    6618:	440c      	add	r4, r1
	subdata->user_data = user_data;
    661a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    661e:	6843      	ldr	r3, [r0, #4]
    6620:	585b      	ldr	r3, [r3, r1]
    6622:	4798      	blx	r3
}
    6624:	4628      	mov	r0, r5
    6626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    6628:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
		err = -EALREADY;
    662c:	42af      	cmp	r7, r5
    662e:	bf14      	ite	ne
    6630:	f04f 35ff 	movne.w	r5, #4294967295
    6634:	f06f 0577 	mvneq.w	r5, #119	; 0x77
    6638:	e7e7      	b.n	660a <async_start+0x2e>

0000663a <api_start>:
{
    663a:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    663c:	2480      	movs	r4, #128	; 0x80
    663e:	9400      	str	r4, [sp, #0]
    6640:	f7ff ffcc 	bl	65dc <async_start>
}
    6644:	b002      	add	sp, #8
    6646:	bd10      	pop	{r4, pc}

00006648 <api_blocking_start>:
}
    6648:	f06f 0085 	mvn.w	r0, #133	; 0x85
    664c:	4770      	bx	lr

0000664e <onoff_started_callback>:
{
    664e:	b410      	push	{r4}
	notify(mgr, 0);
    6650:	241c      	movs	r4, #28
	return &data->mgr[type];
    6652:	6900      	ldr	r0, [r0, #16]
    6654:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    6656:	fb03 0004 	mla	r0, r3, r4, r0
    665a:	2100      	movs	r1, #0
}
    665c:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
    6660:	4710      	bx	r2

00006662 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    6662:	2000      	movs	r0, #0
    6664:	f000 ba54 	b.w	6b10 <nrfx_clock_start>

00006668 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6668:	2000      	movs	r0, #0
    666a:	f000 ba92 	b.w	6b92 <nrfx_clock_stop>

0000666e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    666e:	6843      	ldr	r3, [r0, #4]
}
    6670:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6672:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    6674:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    6676:	600b      	str	r3, [r1, #0]
}
    6678:	4770      	bx	lr

0000667a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    667a:	6843      	ldr	r3, [r0, #4]
    667c:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    667e:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    6680:	4042      	eors	r2, r0
    6682:	400a      	ands	r2, r1
    6684:	4042      	eors	r2, r0
    p_reg->OUT = value;
    6686:	605a      	str	r2, [r3, #4]
}
    6688:	2000      	movs	r0, #0
    668a:	4770      	bx	lr

0000668c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    668c:	6843      	ldr	r3, [r0, #4]
}
    668e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6690:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    6692:	6099      	str	r1, [r3, #8]
}
    6694:	4770      	bx	lr

00006696 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6696:	6843      	ldr	r3, [r0, #4]
}
    6698:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    669a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    669c:	60d9      	str	r1, [r3, #12]
}
    669e:	4770      	bx	lr

000066a0 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    66a0:	6843      	ldr	r3, [r0, #4]
}
    66a2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    66a4:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    66a6:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
    66a8:	4059      	eors	r1, r3
    p_reg->OUT = value;
    66aa:	6051      	str	r1, [r2, #4]
}
    66ac:	4770      	bx	lr

000066ae <gpio_nrfx_manage_callback>:
	return port->data;
    66ae:	6903      	ldr	r3, [r0, #16]
{
    66b0:	b530      	push	{r4, r5, lr}
	return list->head;
    66b2:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    66b4:	b158      	cbz	r0, 66ce <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    66b6:	2400      	movs	r4, #0
    66b8:	4281      	cmp	r1, r0
    66ba:	d112      	bne.n	66e2 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    66bc:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    66be:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    66c0:	b954      	cbnz	r4, 66d8 <gpio_nrfx_manage_callback+0x2a>
    66c2:	428d      	cmp	r5, r1
	list->head = node;
    66c4:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    66c6:	d100      	bne.n	66ca <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    66c8:	6098      	str	r0, [r3, #8]
	parent->next = child;
    66ca:	2000      	movs	r0, #0
    66cc:	6008      	str	r0, [r1, #0]
	if (set) {
    66ce:	b96a      	cbnz	r2, 66ec <gpio_nrfx_manage_callback+0x3e>
	return 0;
    66d0:	2000      	movs	r0, #0
}
    66d2:	bd30      	pop	{r4, r5, pc}
    66d4:	4628      	mov	r0, r5
    66d6:	e7ef      	b.n	66b8 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    66d8:	428d      	cmp	r5, r1
	parent->next = child;
    66da:	6020      	str	r0, [r4, #0]
	list->tail = node;
    66dc:	bf08      	it	eq
    66de:	609c      	streq	r4, [r3, #8]
}
    66e0:	e7f3      	b.n	66ca <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    66e2:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    66e4:	4604      	mov	r4, r0
    66e6:	2d00      	cmp	r5, #0
    66e8:	d1f4      	bne.n	66d4 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    66ea:	b13a      	cbz	r2, 66fc <gpio_nrfx_manage_callback+0x4e>
	parent->next = child;
    66ec:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    66ee:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    66f0:	600a      	str	r2, [r1, #0]
	list->head = node;
    66f2:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    66f4:	2800      	cmp	r0, #0
    66f6:	d1eb      	bne.n	66d0 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    66f8:	6099      	str	r1, [r3, #8]
}
    66fa:	e7ea      	b.n	66d2 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    66fc:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6700:	e7e7      	b.n	66d2 <gpio_nrfx_manage_callback+0x24>

00006702 <is_regular_addr_valid>:
{
    6702:	b538      	push	{r3, r4, r5, lr}
    6704:	4605      	mov	r5, r0
    6706:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
    6708:	f000 fa45 	bl	6b96 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
    670c:	2d00      	cmp	r5, #0
    670e:	db07      	blt.n	6720 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
    6710:	42a8      	cmp	r0, r5
    6712:	d905      	bls.n	6720 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
    6714:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
    6716:	4284      	cmp	r4, r0
    6718:	bf8c      	ite	hi
    671a:	2000      	movhi	r0, #0
    671c:	2001      	movls	r0, #1
}
    671e:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
    6720:	2000      	movs	r0, #0
    6722:	e7fc      	b.n	671e <is_regular_addr_valid+0x1c>

00006724 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    6724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
    6728:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
    672a:	6883      	ldr	r3, [r0, #8]
{
    672c:	b086      	sub	sp, #24
    672e:	4688      	mov	r8, r1
    6730:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    6732:	691b      	ldr	r3, [r3, #16]
    6734:	aa02      	add	r2, sp, #8
    6736:	a901      	add	r1, sp, #4
    6738:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
    673a:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    673c:	4625      	mov	r5, r4
    673e:	9b02      	ldr	r3, [sp, #8]
    6740:	42ab      	cmp	r3, r5
    6742:	d802      	bhi.n	674a <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    6744:	b006      	add	sp, #24
    6746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
    674a:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
    674c:	9f01      	ldr	r7, [sp, #4]
    674e:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
    6752:	687b      	ldr	r3, [r7, #4]
    6754:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    6756:	683a      	ldr	r2, [r7, #0]
    6758:	eb0a 0306 	add.w	r3, sl, r6
    675c:	42b2      	cmp	r2, r6
    675e:	d802      	bhi.n	6766 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    6760:	469a      	mov	sl, r3
    6762:	3501      	adds	r5, #1
    6764:	e7eb      	b.n	673e <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
    6766:	4649      	mov	r1, r9
    6768:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
    676a:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    676c:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    676e:	47c0      	blx	r8
    6770:	2800      	cmp	r0, #0
    6772:	d0e7      	beq.n	6744 <flash_page_foreach+0x20>
			off += page_info.size;
    6774:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    6776:	3601      	adds	r6, #1
			off += page_info.size;
    6778:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    677a:	e7ec      	b.n	6756 <flash_page_foreach+0x32>

0000677c <uarte_nrfx_config_get>:
{
    677c:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    677e:	6902      	ldr	r2, [r0, #16]
    6780:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    6784:	e883 0003 	stmia.w	r3, {r0, r1}
}
    6788:	2000      	movs	r0, #0
    678a:	4770      	bx	lr

0000678c <uarte_nrfx_err_check>:
	return config->uarte_regs;
    678c:	6843      	ldr	r3, [r0, #4]
    678e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    6790:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    6794:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    6798:	4770      	bx	lr

0000679a <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    679a:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    679c:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    679e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    67a0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    67a4:	b148      	cbz	r0, 67ba <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    67a6:	2000      	movs	r0, #0
	*c = data->rx_data;
    67a8:	7c52      	ldrb	r2, [r2, #17]
    67aa:	700a      	strb	r2, [r1, #0]
    67ac:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    67b0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    67b4:	2201      	movs	r2, #1
    67b6:	601a      	str	r2, [r3, #0]
	return 0;
    67b8:	4770      	bx	lr
		return -1;
    67ba:	f04f 30ff 	mov.w	r0, #4294967295
}
    67be:	4770      	bx	lr

000067c0 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    67c0:	6802      	ldr	r2, [r0, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    67c2:	f8d2 3158 	ldr.w	r3, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    67c6:	b943      	cbnz	r3, 67da <is_tx_ready.isra.0+0x1a>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    67c8:	6841      	ldr	r1, [r0, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    67ca:	0789      	lsls	r1, r1, #30
    67cc:	d407      	bmi.n	67de <is_tx_ready.isra.0+0x1e>
    67ce:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    67d2:	3800      	subs	r0, #0
    67d4:	bf18      	it	ne
    67d6:	2001      	movne	r0, #1
    67d8:	4770      	bx	lr
    67da:	2001      	movs	r0, #1
    67dc:	4770      	bx	lr
    67de:	4618      	mov	r0, r3
}
    67e0:	4770      	bx	lr

000067e2 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    67e2:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    67e4:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    67e6:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    67ea:	05c9      	lsls	r1, r1, #23
    67ec:	d518      	bpl.n	6820 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    67ee:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    67f2:	b1a9      	cbz	r1, 6820 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    67f4:	f04f 0020 	mov.w	r0, #32
    67f8:	f3ef 8111 	mrs	r1, BASEPRI
    67fc:	f380 8812 	msr	BASEPRI_MAX, r0
    6800:	f3bf 8f6f 	isb	sy
    6804:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    6808:	b130      	cbz	r0, 6818 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    680a:	2000      	movs	r0, #0
    680c:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    6810:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6814:	2001      	movs	r0, #1
    6816:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    6818:	f381 8811 	msr	BASEPRI, r1
    681c:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6820:	6852      	ldr	r2, [r2, #4]
    6822:	06d2      	lsls	r2, r2, #27
    6824:	d515      	bpl.n	6852 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    6826:	f04f 0120 	mov.w	r1, #32
    682a:	f3ef 8211 	mrs	r2, BASEPRI
    682e:	f381 8812 	msr	BASEPRI_MAX, r1
    6832:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6836:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    683a:	b111      	cbz	r1, 6842 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    683c:	2100      	movs	r1, #0
    683e:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    6842:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    6846:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    684a:	f382 8811 	msr	BASEPRI, r2
    684e:	f3bf 8f6f 	isb	sy
}
    6852:	4770      	bx	lr

00006854 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    6854:	b510      	push	{r4, lr}
    6856:	4604      	mov	r4, r0
    6858:	2200      	movs	r2, #0
    685a:	2101      	movs	r1, #1
    685c:	2009      	movs	r0, #9
    685e:	f7fb f9cf 	bl	1c00 <z_arm_irq_priority_set>
    6862:	2009      	movs	r0, #9
    6864:	f7fb f9ae 	bl	1bc4 <arch_irq_enable>
    6868:	4620      	mov	r0, r4
    686a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    686e:	f7fc ba8d 	b.w	2d8c <uarte_instance_init.constprop.0>

00006872 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    6872:	b510      	push	{r4, lr}
    6874:	4604      	mov	r4, r0
    6876:	2200      	movs	r2, #0
    6878:	2101      	movs	r1, #1
    687a:	2008      	movs	r0, #8
    687c:	f7fb f9c0 	bl	1c00 <z_arm_irq_priority_set>
    6880:	2008      	movs	r0, #8
    6882:	f7fb f99f 	bl	1bc4 <arch_irq_enable>
    6886:	4620      	mov	r0, r4
    6888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    688c:	f7fc ba7e 	b.w	2d8c <uarte_instance_init.constprop.0>

00006890 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    6890:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    6892:	6843      	ldr	r3, [r0, #4]
    6894:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    6896:	7a03      	ldrb	r3, [r0, #8]
    6898:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    689c:	3b01      	subs	r3, #1
    689e:	00db      	lsls	r3, r3, #3
    68a0:	6845      	ldr	r5, [r0, #4]
    68a2:	6814      	ldr	r4, [r2, #0]
    68a4:	441d      	add	r5, r3
    68a6:	42ac      	cmp	r4, r5
    68a8:	d902      	bls.n	68b0 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    68aa:	f06f 0001 	mvn.w	r0, #1
}
    68ae:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    68b0:	7965      	ldrb	r5, [r4, #5]
    68b2:	428d      	cmp	r5, r1
    68b4:	d002      	beq.n	68bc <pinctrl_lookup_state+0x2c>
		(*state)++;
    68b6:	3408      	adds	r4, #8
    68b8:	6014      	str	r4, [r2, #0]
    68ba:	e7f1      	b.n	68a0 <pinctrl_lookup_state+0x10>
			return 0;
    68bc:	2000      	movs	r0, #0
    68be:	e7f6      	b.n	68ae <pinctrl_lookup_state+0x1e>

000068c0 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    68c0:	f7fd bd56 	b.w	4370 <nrf_cc3xx_platform_init_no_rng>

000068c4 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    68c4:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    68c6:	f7fb f92b 	bl	1b20 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    68ca:	f7ff fde9 	bl	64a0 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    68ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    68d2:	f7fd bd4d 	b.w	4370 <nrf_cc3xx_platform_init_no_rng>

000068d6 <bootutil_buffer_is_erased.part.0>:
bool bootutil_buffer_is_erased(const struct flash_area *area,
    68d6:	b538      	push	{r3, r4, r5, lr}
    68d8:	460c      	mov	r4, r1
    68da:	4615      	mov	r5, r2
    erased_val = flash_area_erased_val(area);
    68dc:	f7ff fdb5 	bl	644a <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    68e0:	4621      	mov	r1, r4
    68e2:	4425      	add	r5, r4
    68e4:	42a9      	cmp	r1, r5
    68e6:	d101      	bne.n	68ec <bootutil_buffer_is_erased.part.0+0x16>
    return true;
    68e8:	2001      	movs	r0, #1
}
    68ea:	bd38      	pop	{r3, r4, r5, pc}
        if (u8b[i] != erased_val) {
    68ec:	f811 3b01 	ldrb.w	r3, [r1], #1
    68f0:	4298      	cmp	r0, r3
    68f2:	d0f7      	beq.n	68e4 <bootutil_buffer_is_erased.part.0+0xe>
            return false;
    68f4:	2000      	movs	r0, #0
    68f6:	e7f8      	b.n	68ea <bootutil_buffer_is_erased.part.0+0x14>

000068f8 <boot_swap_info_off>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    68f8:	6880      	ldr	r0, [r0, #8]
    68fa:	3818      	subs	r0, #24
    68fc:	f020 0007 	bic.w	r0, r0, #7
}
    6900:	3810      	subs	r0, #16
    6902:	4770      	bx	lr

00006904 <boot_magic_compatible_check>:
    switch (tbl_val) {
    6904:	2804      	cmp	r0, #4
    6906:	d009      	beq.n	691c <boot_magic_compatible_check+0x18>
    6908:	2805      	cmp	r0, #5
    690a:	d103      	bne.n	6914 <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    690c:	1e48      	subs	r0, r1, #1
    690e:	bf18      	it	ne
    6910:	2001      	movne	r0, #1
    6912:	4770      	bx	lr
        return tbl_val == val;
    6914:	1a43      	subs	r3, r0, r1
    6916:	4258      	negs	r0, r3
    6918:	4158      	adcs	r0, r3
    691a:	4770      	bx	lr
    switch (tbl_val) {
    691c:	2001      	movs	r0, #1
}
    691e:	4770      	bx	lr

00006920 <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
    6920:	b111      	cbz	r1, 6928 <bootutil_buffer_is_erased+0x8>
    6922:	b10a      	cbz	r2, 6928 <bootutil_buffer_is_erased+0x8>
    6924:	f7ff bfd7 	b.w	68d6 <bootutil_buffer_is_erased.part.0>
}
    6928:	2000      	movs	r0, #0
    692a:	4770      	bx	lr

0000692c <boot_read_flag>:
{
    692c:	b538      	push	{r3, r4, r5, lr}
    692e:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    6930:	2301      	movs	r3, #1
{
    6932:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    6934:	4622      	mov	r2, r4
{
    6936:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    6938:	f7ff fd2f 	bl	639a <flash_area_read>
    if (rc < 0) {
    693c:	2800      	cmp	r0, #0
    693e:	db10      	blt.n	6962 <boot_read_flag+0x36>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    6940:	2201      	movs	r2, #1
    6942:	4621      	mov	r1, r4
    6944:	4628      	mov	r0, r5
    6946:	f7ff ffeb 	bl	6920 <bootutil_buffer_is_erased>
    694a:	b118      	cbz	r0, 6954 <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
    694c:	2303      	movs	r3, #3
    return 0;
    694e:	2000      	movs	r0, #0
        *flag = BOOT_FLAG_UNSET;
    6950:	7023      	strb	r3, [r4, #0]
}
    6952:	bd38      	pop	{r3, r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
    6954:	7823      	ldrb	r3, [r4, #0]
        return BOOT_FLAG_BAD;
    6956:	2b01      	cmp	r3, #1
    6958:	bf0c      	ite	eq
    695a:	2301      	moveq	r3, #1
    695c:	2302      	movne	r3, #2
        *flag = boot_flag_decode(*flag);
    695e:	7023      	strb	r3, [r4, #0]
    6960:	e7f7      	b.n	6952 <boot_read_flag+0x26>
        return BOOT_EFLASH;
    6962:	2001      	movs	r0, #1
    6964:	e7f5      	b.n	6952 <boot_read_flag+0x26>

00006966 <boot_write_trailer>:
{
    6966:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    696a:	461d      	mov	r5, r3
    696c:	4606      	mov	r6, r0
    696e:	460f      	mov	r7, r1
    6970:	4690      	mov	r8, r2
    align = flash_area_align(fap);
    6972:	f7ff fd61 	bl	6438 <flash_area_align>
    align = ALIGN_UP(inlen, align);
    6976:	1e6c      	subs	r4, r5, #1
    6978:	4404      	add	r4, r0
    697a:	4243      	negs	r3, r0
    697c:	401c      	ands	r4, r3
    if (align > BOOT_MAX_ALIGN) {
    697e:	2c08      	cmp	r4, #8
    6980:	d81a      	bhi.n	69b8 <boot_write_trailer+0x52>
    erased_val = flash_area_erased_val(fap);
    6982:	4630      	mov	r0, r6
    6984:	f7ff fd61 	bl	644a <flash_area_erased_val>
    6988:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
    698a:	462a      	mov	r2, r5
    698c:	4641      	mov	r1, r8
    698e:	4668      	mov	r0, sp
    6990:	f7ff fdc4 	bl	651c <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    6994:	4649      	mov	r1, r9
    6996:	1b62      	subs	r2, r4, r5
    6998:	eb0d 0005 	add.w	r0, sp, r5
    699c:	f7ff fdc9 	bl	6532 <memset>
    rc = flash_area_write(fap, off, buf, align);
    69a0:	4623      	mov	r3, r4
    69a2:	466a      	mov	r2, sp
    69a4:	4639      	mov	r1, r7
    69a6:	4630      	mov	r0, r6
    69a8:	f7ff fd13 	bl	63d2 <flash_area_write>
    if (rc != 0) {
    69ac:	3800      	subs	r0, #0
    69ae:	bf18      	it	ne
    69b0:	2001      	movne	r0, #1
}
    69b2:	b003      	add	sp, #12
    69b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    69b8:	f04f 30ff 	mov.w	r0, #4294967295
    69bc:	e7f9      	b.n	69b2 <boot_write_trailer+0x4c>

000069be <boot_write_trailer_flag>:
{
    69be:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
    69c0:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
    69c2:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    69c6:	aa01      	add	r2, sp, #4
    69c8:	f7ff ffcd 	bl	6966 <boot_write_trailer>
}
    69cc:	b003      	add	sp, #12
    69ce:	f85d fb04 	ldr.w	pc, [sp], #4

000069d2 <boot_write_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    69d2:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    69d4:	2201      	movs	r2, #1
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    69d6:	3918      	subs	r1, #24
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    69d8:	f021 0107 	bic.w	r1, r1, #7
    69dc:	f7ff bfef 	b.w	69be <boot_write_trailer_flag>

000069e0 <boot_read_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    69e0:	6882      	ldr	r2, [r0, #8]
    69e2:	3a18      	subs	r2, #24
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    69e4:	f022 0207 	bic.w	r2, r2, #7
    69e8:	f7ff bfa0 	b.w	692c <boot_read_flag>

000069ec <boot_read_swap_state_by_id>:
{
    69ec:	b513      	push	{r0, r1, r4, lr}
    69ee:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    69f0:	b2c0      	uxtb	r0, r0
    69f2:	a901      	add	r1, sp, #4
    69f4:	f7fb f842 	bl	1a7c <flash_area_open>
    if (rc != 0) {
    69f8:	b950      	cbnz	r0, 6a10 <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    69fa:	4621      	mov	r1, r4
    69fc:	9801      	ldr	r0, [sp, #4]
    69fe:	f7fc fd6d 	bl	34dc <boot_read_swap_state>
    6a02:	4604      	mov	r4, r0
    flash_area_close(fap);
    6a04:	9801      	ldr	r0, [sp, #4]
    6a06:	f7ff fcc7 	bl	6398 <flash_area_close>
}
    6a0a:	4620      	mov	r0, r4
    6a0c:	b002      	add	sp, #8
    6a0e:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    6a10:	2401      	movs	r4, #1
    6a12:	e7fa      	b.n	6a0a <boot_read_swap_state_by_id+0x1e>

00006a14 <boot_write_swap_info>:
{
    6a14:	b513      	push	{r0, r1, r4, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    6a16:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
{
    6a1a:	4604      	mov	r4, r0
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    6a1c:	f88d 2007 	strb.w	r2, [sp, #7]
    off = boot_swap_info_off(fap);
    6a20:	f7ff ff6a 	bl	68f8 <boot_swap_info_off>
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    6a24:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
    6a26:	4601      	mov	r1, r0
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    6a28:	f10d 0207 	add.w	r2, sp, #7
    6a2c:	4620      	mov	r0, r4
    6a2e:	f7ff ff9a 	bl	6966 <boot_write_trailer>
}
    6a32:	b002      	add	sp, #8
    6a34:	bd10      	pop	{r4, pc}

00006a36 <nrf91_errata_14>:
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6a36:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6a3a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6a3e:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
  __ASM volatile ("dsb 0xF":::"memory");
    6a42:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    6a46:	2a09      	cmp	r2, #9
    6a48:	d103      	bne.n	6a52 <nrf91_errata_14+0x1c>
                switch(var2)
    6a4a:	1e43      	subs	r3, r0, #1
    6a4c:	4258      	negs	r0, r3
    6a4e:	4158      	adcs	r0, r3
    6a50:	4770      	bx	lr
        return false;
    6a52:	2000      	movs	r0, #0
}
    6a54:	4770      	bx	lr

00006a56 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    6a56:	4700      	bx	r0

00006a58 <nrfx_busy_wait>:
    6a58:	f000 b8bb 	b.w	6bd2 <z_impl_k_busy_wait>

00006a5c <clock_stop>:
{
    6a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    6a5e:	4604      	mov	r4, r0
    6a60:	b118      	cbz	r0, 6a6a <clock_stop+0xe>
    6a62:	2801      	cmp	r0, #1
    6a64:	d025      	beq.n	6ab2 <clock_stop+0x56>
}
    6a66:	b003      	add	sp, #12
    6a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a6a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6a6e:	2202      	movs	r2, #2
    6a70:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6a74:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    6a78:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6a7c:	2201      	movs	r2, #1
    6a7e:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    6a80:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    6a82:	429c      	cmp	r4, r3
    6a84:	bf18      	it	ne
    6a86:	2500      	movne	r5, #0
    6a88:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6a8c:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    6a90:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    6a94:	bf08      	it	eq
    6a96:	f10d 0507 	addeq.w	r5, sp, #7
    switch (domain)
    6a9a:	b1ac      	cbz	r4, 6ac8 <clock_stop+0x6c>
    6a9c:	2c01      	cmp	r4, #1
    6a9e:	d1e2      	bne.n	6a66 <clock_stop+0xa>
            if (p_clk_src != NULL)
    6aa0:	b125      	cbz	r5, 6aac <clock_stop+0x50>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6aa2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    6aa6:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    6aaa:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6aac:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    6ab0:	e012      	b.n	6ad8 <clock_stop+0x7c>
    p_reg->INTENCLR = mask;
    6ab2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6ab6:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    6ab8:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6abc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6ac0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6ac4:	6058      	str	r0, [r3, #4]
}
    6ac6:	e7db      	b.n	6a80 <clock_stop+0x24>
            if (p_clk_src != NULL)
    6ac8:	b125      	cbz	r5, 6ad4 <clock_stop+0x78>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6aca:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    6ace:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    6ad2:	702b      	strb	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6ad4:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    6ad8:	03db      	lsls	r3, r3, #15
    6ada:	d5c4      	bpl.n	6a66 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    6adc:	b92d      	cbnz	r5, 6aea <clock_stop+0x8e>
    6ade:	2001      	movs	r0, #1
    6ae0:	f7ff ffba 	bl	6a58 <nrfx_busy_wait>
    6ae4:	3f01      	subs	r7, #1
    6ae6:	d1d8      	bne.n	6a9a <clock_stop+0x3e>
    6ae8:	e7bd      	b.n	6a66 <clock_stop+0xa>
    6aea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6aee:	2b01      	cmp	r3, #1
    6af0:	d0f5      	beq.n	6ade <clock_stop+0x82>
    6af2:	e7b8      	b.n	6a66 <clock_stop+0xa>

00006af4 <nrfx_clock_enable>:
{
    6af4:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6af6:	2005      	movs	r0, #5
    6af8:	f7fb f874 	bl	1be4 <arch_irq_is_enabled>
    6afc:	b910      	cbnz	r0, 6b04 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6afe:	2005      	movs	r0, #5
    6b00:	f7fb f860 	bl	1bc4 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6b04:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6b08:	2201      	movs	r2, #1
    6b0a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    6b0e:	bd08      	pop	{r3, pc}

00006b10 <nrfx_clock_start>:
{
    6b10:	b508      	push	{r3, lr}
    switch (domain)
    6b12:	b110      	cbz	r0, 6b1a <nrfx_clock_start+0xa>
    6b14:	2801      	cmp	r0, #1
    6b16:	d031      	beq.n	6b7c <nrfx_clock_start+0x6c>
}
    6b18:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6b1a:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    6b1e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6b22:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    6b26:	03c9      	lsls	r1, r1, #15
    6b28:	d413      	bmi.n	6b52 <nrfx_clock_start+0x42>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    6b2a:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    6b2e:	07db      	lsls	r3, r3, #31
    6b30:	d419      	bmi.n	6b66 <nrfx_clock_start+0x56>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    6b32:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    6b34:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    6b38:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6b3c:	2300      	movs	r3, #0
    6b3e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    6b42:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    6b46:	2302      	movs	r3, #2
    6b48:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6b4c:	2301      	movs	r3, #1
    6b4e:	6093      	str	r3, [r2, #8]
}
    6b50:	e7e2      	b.n	6b18 <nrfx_clock_start+0x8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6b52:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    6b56:	2b02      	cmp	r3, #2
    6b58:	d0ec      	beq.n	6b34 <nrfx_clock_start+0x24>
    if (!is_correct_clk)
    6b5a:	2b01      	cmp	r3, #1
    6b5c:	d0ea      	beq.n	6b34 <nrfx_clock_start+0x24>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6b5e:	2000      	movs	r0, #0
    6b60:	f7ff ff7c 	bl	6a5c <clock_stop>
    6b64:	e7e5      	b.n	6b32 <nrfx_clock_start+0x22>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    6b66:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    6b6a:	f003 0303 	and.w	r3, r3, #3
    if (!is_correct_clk)
    6b6e:	3b01      	subs	r3, #1
    6b70:	2b01      	cmp	r3, #1
    6b72:	d8f4      	bhi.n	6b5e <nrfx_clock_start+0x4e>
    p_reg->INTENSET = mask;
    6b74:	2302      	movs	r3, #2
    6b76:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    6b7a:	e7cd      	b.n	6b18 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6b7c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6b80:	2200      	movs	r2, #0
    6b82:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6b86:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    6b8a:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6b8e:	6018      	str	r0, [r3, #0]
}
    6b90:	e7c2      	b.n	6b18 <nrfx_clock_start+0x8>

00006b92 <nrfx_clock_stop>:
    clock_stop(domain);
    6b92:	f7ff bf63 	b.w	6a5c <clock_stop>

00006b96 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    6b96:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    6b9a:	4770      	bx	lr

00006b9c <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    6b9c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    6ba0:	4770      	bx	lr

00006ba2 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    6ba2:	f44f 7080 	mov.w	r0, #256	; 0x100
    6ba6:	4770      	bx	lr

00006ba8 <z_device_state_init>:
}
    6ba8:	4770      	bx	lr

00006baa <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    6baa:	b138      	cbz	r0, 6bbc <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    6bac:	68c3      	ldr	r3, [r0, #12]
    6bae:	8818      	ldrh	r0, [r3, #0]
    6bb0:	f3c0 0008 	ubfx	r0, r0, #0, #9
    6bb4:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    6bb8:	4258      	negs	r0, r3
    6bba:	4158      	adcs	r0, r3
}
    6bbc:	4770      	bx	lr

00006bbe <z_early_memset>:
	(void) memset(dst, c, n);
    6bbe:	f7ff bcb8 	b.w	6532 <memset>

00006bc2 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    6bc2:	f7ff bcab 	b.w	651c <memcpy>

00006bc6 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6bc6:	f3ef 8005 	mrs	r0, IPSR
}

bool k_is_in_isr(void)
{
	return arch_is_in_isr();
}
    6bca:	3800      	subs	r0, #0
    6bcc:	bf18      	it	ne
    6bce:	2001      	movne	r0, #1
    6bd0:	4770      	bx	lr

00006bd2 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    6bd2:	b108      	cbz	r0, 6bd8 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    6bd4:	f7fa bf48 	b.w	1a68 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    6bd8:	4770      	bx	lr

00006bda <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    6bda:	4770      	bx	lr

00006bdc <nrf_cc310_bl_ecdsa_verify_secp256r1>:
    6bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6be0:	9f06      	ldr	r7, [sp, #24]
    6be2:	4604      	mov	r4, r0
    6be4:	4615      	mov	r5, r2
    6be6:	461e      	mov	r6, r3
    6be8:	f7fd fd84 	bl	46f4 <nrf_cc310_bl_ecdsa_verify_init_secp256r1>
    6bec:	b938      	cbnz	r0, 6bfe <nrf_cc310_bl_ecdsa_verify_secp256r1+0x22>
    6bee:	463b      	mov	r3, r7
    6bf0:	4632      	mov	r2, r6
    6bf2:	4629      	mov	r1, r5
    6bf4:	4620      	mov	r0, r4
    6bf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6bfa:	f7fd bda1 	b.w	4740 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1>
    6bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006c02 <PkaInitAndMutexLock>:
    6c02:	460a      	mov	r2, r1
    6c04:	2100      	movs	r1, #0
    6c06:	f7fe b827 	b.w	4c58 <PkaInitPka>

00006c0a <SaSi_PalMemCopy>:
    6c0a:	f7ff bc87 	b.w	651c <memcpy>

00006c0e <SaSi_PalMemSet>:
    6c0e:	f7ff bc90 	b.w	6532 <memset>

00006c12 <SaSi_PalMemSetZero>:
    6c12:	460a      	mov	r2, r1
    6c14:	2100      	movs	r1, #0
    6c16:	f7ff bc8c 	b.w	6532 <memset>

00006c1a <CRYS_COMMON_ReverseMemcpy32>:
    6c1a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    6c1e:	3804      	subs	r0, #4
    6c20:	428a      	cmp	r2, r1
    6c22:	d101      	bne.n	6c28 <CRYS_COMMON_ReverseMemcpy32+0xe>
    6c24:	2000      	movs	r0, #0
    6c26:	4770      	bx	lr
    6c28:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    6c2c:	ba1b      	rev	r3, r3
    6c2e:	f840 3f04 	str.w	r3, [r0, #4]!
    6c32:	e7f5      	b.n	6c20 <CRYS_COMMON_ReverseMemcpy32+0x6>

00006c34 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    6c34:	f7fc bd26 	b.w	3684 <SystemInit>
